
rtos_freertos/dynamic_mem/freeRTOS_01_blinky/out/freeRTOS_01_blinky.elf:     file format elf32-littlearm
rtos_freertos/dynamic_mem/freeRTOS_01_blinky/out/freeRTOS_01_blinky.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000399

Program Header:
0x70000001 off    0x00013550 vaddr 0x1a003550 paddr 0x1a003550 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010098 vaddr 0x10000098 paddr 0x10000098 align 2**16
         filesz 0x00000000 memsz 0x00002ac8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00003558 memsz 0x00003558 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a003558 align 2**16
         filesz 0x00000094 memsz 0x00000094 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000354c  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  10000000  1a003558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020094  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020094  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020094  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020094  2**2
                  CONTENTS
  6 .bss          00002ac8  10000098  10000098  00010098  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020094  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020094  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020094  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020094  2**2
                  CONTENTS
 11 .init_array   00000004  1a00354c  1a00354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a003550  1a003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020094  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020094  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020094  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020094  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020094  2**2
                  CONTENTS
 18 .noinit       00000000  10002b60  10002b60  00020094  2**2
                  CONTENTS
 19 .debug_info   00025c80  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004eb6  00000000  00000000  00045d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00008fd8  00000000  00000000  0004abca  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000d98  00000000  00000000  00053ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000eb0  00000000  00000000  0005493a  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000f1d5  00000000  00000000  000557ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000114a7  00000000  00000000  000649bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002dd05  00000000  00000000  00075e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000a3b6b  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000a3bea  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000022d8  00000000  00000000  000a3c24  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000098 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00354c l    d  .init_array	00000000 .init_array
1a003550 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002b60 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 freeRTOS_blinky.c
10000098 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 heap_1.c
100000a4 l     O .bss	00002000 ucHeap
100000a0 l     O .bss	00000004 pucAlignedHeap.11438
100020a4 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a0004a6 l     F .text	0000001e prvIsQueueFull
1a0004c4 l     F .text	0000001a prvIsQueueEmpty
1a0004de l     F .text	00000076 prvCopyDataToQueue
1a000554 l     F .text	00000024 prvCopyDataFromQueue
1a000578 l     F .text	0000006e prvUnlockQueue
1a00066c l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020a8 l     O .bss	00000168 uxIdleTaskStack.10728
10002210 l     O .bss	000005a0 uxTimerTaskStack.10735
100027b0 l     O .bss	00000060 xIdleTaskTCB.10727
10002810 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a000c00 l     F .text	0000002c prvResetNextTaskUnblockTime
1a000c2c l     F .text	00000092 prvInitialiseNewTask
1a000cc0 l     F .text	00000068 prvInitialiseTaskLists
1a000d28 l     F .text	000000ac prvAddNewTaskToReadyList
1a000dd4 l     F .text	00000038 prvDeleteTCB
1a000e0c l     F .text	0000004c prvCheckTasksWaitingTermination
1a000e58 l     F .text	00000028 prvIdleTask
1a000e80 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002874 l     O .bss	00000004 pxDelayedTaskList
10002878 l     O .bss	00000004 pxOverflowDelayedTaskList
1000287c l     O .bss	0000008c pxReadyTasksLists
10002908 l     O .bss	00000004 uxCurrentNumberOfTasks
1000290c l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002910 l     O .bss	00000004 uxPendedTicks
10002914 l     O .bss	00000004 uxSchedulerSuspended
10002918 l     O .bss	00000004 uxTaskNumber
1000291c l     O .bss	00000004 uxTopReadyPriority
10002920 l     O .bss	00000014 xDelayedTaskList1
10002934 l     O .bss	00000014 xDelayedTaskList2
10002948 l     O .bss	00000004 xNextTaskUnblockTime
1000294c l     O .bss	00000004 xNumOfOverflows
10002950 l     O .bss	00000014 xPendingReadyList
10002964 l     O .bss	00000004 xSchedulerRunning
10002968 l     O .bss	00000014 xSuspendedTaskList
1000297c l     O .bss	00000014 xTasksWaitingTermination
10002990 l     O .bss	00000004 xTickCount
10002994 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001628 l     F .text	00000020 prvGetNextExpireTime
1a001648 l     F .text	00000048 prvInsertTimerInActiveList
1a001690 l     F .text	00000070 prvCheckForValidListAndQueue
1a001700 l     F .text	00000040 prvInitialiseNewTimer
1a001ad0 l     F .text	00000016 prvTimerTask
1a00185c l     F .text	00000078 prvSwitchTimerLists
1a0018d4 l     F .text	0000002c prvSampleTimeNow
1a001900 l     F .text	00000060 prvProcessExpiredTimer
1a001960 l     F .text	00000074 prvProcessTimerOrBlockTask
1a0019d4 l     F .text	000000fc prvProcessReceivedCommands
10002998 l     O .bss	00000004 pxCurrentTimerList
1000299c l     O .bss	00000004 pxOverflowTimerList
100029a0 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002a40 l     O .bss	00000014 xActiveTimerList1
10002a54 l     O .bss	00000014 xActiveTimerList2
10002a68 l     O .bss	00000004 xLastTime.11777
10002a6c l     O .bss	00000050 xStaticTimerQueue.11827
10002abc l     O .bss	00000004 xTimerQueue
10002ac0 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001ae8 l     F .text	00000040 prvTaskExitError
1a001b28 l     F .text	00000022 prvPortStartFirstTask
1a001b50 l     F .text	0000000e vPortEnableVFP
1a001bb0 l       .text	00000000 pxCurrentTCBConst2
1a001c90 l       .text	00000000 pxCurrentTCBConst
10002ac4 l     O .bss	00000001 ucMaxSysCallPriority
10002ac8 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 board.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a003270 l     O .text	00000004 InitClkStates
1a003274 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001f40 l     F .text	0000002c Chip_UART_GetIndex
1a0032e8 l     O .text	00000008 UART_BClock
1a0032f0 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0020e8 l     F .text	000000a4 pll_calc_divs
1a00218c l     F .text	0000010c pll_get_frac
1a002298 l     F .text	0000004c Chip_Clock_FindBaseClock
1a00250c l     F .text	00000022 Chip_Clock_GetDivRate
10002acc l     O .bss	00000008 audio_usb_pll_freq
1a003304 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a003370 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000004 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0033b8 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10002ad4 l     O .bss	00000004 callBackFuncParams
10002ad8 l     O .bss	00000008 tickCounter
10002ae0 l     O .bss	00000004 tickHookFunction
10002ae4 l     O .bss	00000030 tickerObject.11826
00000000 l    df *ABS*	00000000 sapi_timer.c
1a00295c l     F .text	00000002 errorOcurred
1a00295e l     F .text	00000002 doNothing
1000000c l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002a68 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b14 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a002e28 l     F .text	00000010 clearInterrupt
1a002e38 l     F .text	0000005c serveInterrupt
1000004c l     O .data	00000048 ultrasonicSensors
1a003548 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a003550 l       .init_array	00000000 __init_array_end
1a00354c l       .bss_RAM5	00000000 __preinit_array_end
1a00354c l       .init_array	00000000 __init_array_start
1a00354c l       .bss_RAM5	00000000 __preinit_array_start
1a002330 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0029e0 g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001bf8 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a001e88 g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000ae8 g     F .text	00000052 vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a001c94 g     F .text	0000002c SysTick_Handler
1a001fc0 g     F .text	00000040 Chip_UART_SetBaud
1a002e10 g     F .text	00000008 printString
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a001c30 g     F .text	00000064 PendSV_Handler
1a00089c g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a003558 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10002870 g     O .bss	00000004 pxCurrentTCB
53ff74f6 g       *ABS*	00000000 __valid_user_code_checksum
1a003558 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0014b4 g     F .text	00000018 vTaskInternalSetTimeOutState
1a002a24 g     F .text	00000044 TIMER3_IRQHandler
1a0025ae g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a001cf8 g     F .text	00000110 xPortStartScheduler
1a0031fc g     F .text	00000016 memcpy
1a0013c0 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001cc0  w    F .text	00000038 vPortSetupTimerInterrupt
1a002eb4 g     F .text	00000000 .hidden __aeabi_uldivmod
10002b60 g       .noinit	00000000 _noinit
1a000490 g     F .text	00000016 vPortFree
1a0028c2 g     F .text	00000018 uartWriteString
10002b58 g     O .bss	00000004 SystemCoreClock
1a001f6c g     F .text	00000054 Chip_UART_Init
1a0028dc g     F .text	00000034 tickerCallback
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a001e08 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a0025f8 g     F .text	0000004c Chip_Clock_GetRate
1a000b56 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002e00 g     F .text	00000010 printInitUart
1a001ec8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002ee4 g     F .text	000002cc .hidden __udivmoddi4
1a003268 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000b50 g     F .text	00000006 vListInitialiseItem
1a000300 g     F .text	00000044 myTask
1a002e9e g     F .text	0000000a GPIO1_IRQHandler
1a000968 g     F .text	00000158 xQueueReceive
10002b18 g     O .bss	00000040 xQueueRegistry
1a000be4 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a003550 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a0031b4 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000420 g     F .text	00000070 pvPortMalloc
1a00041c g     F .text	00000002 _init
1a000b3a g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001094 g     F .text	0000000c xTaskGetTickCount
1a000720 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002b60 g       .bss	00000000 _ebss
1a002960 g     F .text	00000040 TIMER0_IRQHandler
1a000398 g     F .text	00000084 Reset_Handler
1a002910 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001578 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0022e4 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001428 g     F .text	0000008c xTaskRemoveFromEventList
1a000bfe g     F .text	00000002 vApplicationMallocFailedHook
1000009c g     O .bss	00000004 variable
1a00018a g     F .text	0000001e data_init
1a0029a0 g     F .text	00000040 TIMER1_IRQHandler
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a002e18 g     F .text	00000010 printEnter
1a0024a0 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00340c g     O .text	00000136 gpioPinsInit
1a0028a8 g     F .text	0000001a uartWriteByte
1a002cda g     F .text	00000016 gpioToggle
1a002ea8 g     F .text	0000000a GPIO2_IRQHandler
1a0014cc g     F .text	00000080 xTaskCheckForTimeOut
1a002588 g     F .text	00000026 Chip_Clock_GetBaseClock
10000098 g       .bss	00000000 _bss
1a001084 g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000ba2 g     F .text	00000028 uxListRemove
1a002658 g     F .text	00000002 Chip_GPIO_Init
1a00326c g     O .text	00000004 OscRateIn
1a00282c g     F .text	0000007c uartInit
1a000f18 g     F .text	00000072 xTaskCreateStatic
10002b60 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0012f8 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a00068e g     F .text	00000090 xQueueGenericCreateStatic
1a0013f0 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a002a9c g     F .text	00000194 gpioInit
1a000bcc g     F .text	00000018 vApplicationGetIdleTaskMemory
1a0017f0 g     F .text	0000006c xTimerGenericCommand
1a000bfc g     F .text	00000002 vApplicationStackOverflowHook
1a0031b0  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002cf0 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a00234c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003212 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000344 g     F .text	00000054 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a000b6e g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a001b90 g     F .text	00000024 SVC_Handler
10000008 g     O .data	00000004 DWT_CTRL
1a001740 g     F .text	00000064 xTimerCreateTimerTask
1a002800 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0025bc g     F .text	0000003c Chip_Clock_EnableOpts
1a002368 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002420 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0027b0 g     F .text	00000034 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002c30 g     F .text	00000056 gpioWrite
1a0011b8 g     F .text	000000f4 xTaskResumeAll
1a000ff0 g     F .text	00000094 vTaskStartScheduler
10002b5c g     O .bss	00000004 g_pUsbApi
1a001e90 g     F .text	00000038 Board_SetupMuxing
1a002000 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a002818 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a00154c g     F .text	0000000c vTaskMissedYield
10002b60 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000ac0 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0010a0 g     F .text	00000118 xTaskIncrementTick
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a001e64 g     F .text	00000024 Board_Debug_Init
1a0005e8 g     F .text	00000084 xQueueGenericReset
10000094 g       .data	00000000 _edata
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a000f8a g     F .text	00000066 xTaskCreate
1a00265c g     F .text	00000154 Chip_SetupCoreClock
1a002e94 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a002644 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0012ac g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001558 g     F .text	00000020 xTaskGetSchedulerState
1a0031b0  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a001b64 g     F .text	0000002c pxPortInitialiseStack
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0017a4 g     F .text	0000004c xTimerCreateStatic
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a002c86 g     F .text	00000054 gpioRead
1a002d0c g     F .text	000000f4 boardInit
1a001bb4 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002530 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0027e4 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a001f34 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 99 03 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a f6 74 ff 53     }............t.S
	...
1a00002c:	91 1b 00 1a 85 01 00 1a 00 00 00 00 31 1c 00 1a     ............1...
1a00003c:	95 1c 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	f1 2c 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .,..............
1a000070:	61 29 00 1a a1 29 00 1a e1 29 00 1a 25 2a 00 1a     a)...)...)..%*..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	95 2e 00 1a 9f 2e 00 1a a9 2e 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a003558 	.word	0x1a003558
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000094 	.word	0x00000094
1a000120:	1a003558 	.word	0x1a003558
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a003558 	.word	0x1a003558
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a003558 	.word	0x1a003558
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a003558 	.word	0x1a003558
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000098 	.word	0x10000098
1a000154:	00002ac8 	.word	0x00002ac8
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __WFI();
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <myTask>:
/*==================[definiciones de funciones internas]=====================*/

/*==================[definiciones de funciones externas]=====================*/

// Implementacion de funcion de la tarea
void myTask( void* taskParmPtr ) {
1a000300:	b508      	push	{r3, lr}
   // ---------- CONFIGURACIONES ------------------------------
   // ---------- REPETIR POR SIEMPRE --------------------------

   while(TRUE) {
      // Intercambia el estado del LEDB
      gpioToggle( LEDB );
1a000302:	202a      	movs	r0, #42	; 0x2a
1a000304:	f002 fce9 	bl	1a002cda <gpioToggle>
      debugPrintlnString( "Blink!" );
1a000308:	4c0b      	ldr	r4, [pc, #44]	; (1a000338 <myTask+0x38>)
1a00030a:	490c      	ldr	r1, [pc, #48]	; (1a00033c <myTask+0x3c>)
1a00030c:	7820      	ldrb	r0, [r4, #0]
1a00030e:	f002 fd7f 	bl	1a002e10 <printString>
1a000312:	7820      	ldrb	r0, [r4, #0]
1a000314:	f002 fd80 	bl	1a002e18 <printEnter>
      // Envia la tarea al estado bloqueado durante 500ms
      vTaskDelay( 500 + variable / portTICK_RATE_MS );
1a000318:	4c09      	ldr	r4, [pc, #36]	; (1a000340 <myTask+0x40>)
1a00031a:	6820      	ldr	r0, [r4, #0]
1a00031c:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
1a000320:	f000 ffc4 	bl	1a0012ac <vTaskDelay>
      variable += 100;
1a000324:	6823      	ldr	r3, [r4, #0]
1a000326:	3364      	adds	r3, #100	; 0x64
1a000328:	6023      	str	r3, [r4, #0]
      if (variable == 900) {
1a00032a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
1a00032e:	d1e8      	bne.n	1a000302 <myTask+0x2>
    	  variable = 0;
1a000330:	2200      	movs	r2, #0
1a000332:	6022      	str	r2, [r4, #0]
1a000334:	e7e5      	b.n	1a000302 <myTask+0x2>
1a000336:	bf00      	nop
1a000338:	10000098 	.word	0x10000098
1a00033c:	1a003248 	.word	0x1a003248
1a000340:	1000009c 	.word	0x1000009c

1a000344 <main>:
int main(void) {
1a000344:	b500      	push	{lr}
1a000346:	b083      	sub	sp, #12
   boardConfig();
1a000348:	f002 fce0 	bl	1a002d0c <boardInit>
   debugPrintConfigUart( UART_USB, 115200 );
1a00034c:	4c0e      	ldr	r4, [pc, #56]	; (1a000388 <main+0x44>)
1a00034e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000352:	2103      	movs	r1, #3
1a000354:	4620      	mov	r0, r4
1a000356:	f002 fd53 	bl	1a002e00 <printInitUart>
   debugPrintlnString( "Blinky con freeRTOS y sAPI." );
1a00035a:	490c      	ldr	r1, [pc, #48]	; (1a00038c <main+0x48>)
1a00035c:	7820      	ldrb	r0, [r4, #0]
1a00035e:	f002 fd57 	bl	1a002e10 <printString>
1a000362:	7820      	ldrb	r0, [r4, #0]
1a000364:	f002 fd58 	bl	1a002e18 <printEnter>
   gpioWrite( LED3, ON );
1a000368:	2101      	movs	r1, #1
1a00036a:	202d      	movs	r0, #45	; 0x2d
1a00036c:	f002 fc60 	bl	1a002c30 <gpioWrite>
   xTaskCreate(
1a000370:	2300      	movs	r3, #0
1a000372:	9301      	str	r3, [sp, #4]
1a000374:	2201      	movs	r2, #1
1a000376:	9200      	str	r2, [sp, #0]
1a000378:	22b4      	movs	r2, #180	; 0xb4
1a00037a:	4905      	ldr	r1, [pc, #20]	; (1a000390 <main+0x4c>)
1a00037c:	4805      	ldr	r0, [pc, #20]	; (1a000394 <main+0x50>)
1a00037e:	f000 fe04 	bl	1a000f8a <xTaskCreate>
   vTaskStartScheduler();
1a000382:	f000 fe35 	bl	1a000ff0 <vTaskStartScheduler>
1a000386:	e7fe      	b.n	1a000386 <main+0x42>
1a000388:	10000098 	.word	0x10000098
1a00038c:	1a003224 	.word	0x1a003224
1a000390:	1a003240 	.word	0x1a003240
1a000394:	1a000301 	.word	0x1a000301

1a000398 <Reset_Handler>:
void Reset_Handler(void) {
1a000398:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1a00039a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00039c:	4b18      	ldr	r3, [pc, #96]	; (1a000400 <Reset_Handler+0x68>)
1a00039e:	4a19      	ldr	r2, [pc, #100]	; (1a000404 <Reset_Handler+0x6c>)
1a0003a0:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0003a2:	3304      	adds	r3, #4
1a0003a4:	4a18      	ldr	r2, [pc, #96]	; (1a000408 <Reset_Handler+0x70>)
1a0003a6:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0003a8:	2300      	movs	r3, #0
1a0003aa:	e005      	b.n	1a0003b8 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0003ac:	4a17      	ldr	r2, [pc, #92]	; (1a00040c <Reset_Handler+0x74>)
1a0003ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0003b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0003b6:	3301      	adds	r3, #1
1a0003b8:	2b07      	cmp	r3, #7
1a0003ba:	d9f7      	bls.n	1a0003ac <Reset_Handler+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
1a0003bc:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0003be:	4b14      	ldr	r3, [pc, #80]	; (1a000410 <Reset_Handler+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0003c0:	e007      	b.n	1a0003d2 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0003c2:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0003c6:	689a      	ldr	r2, [r3, #8]
1a0003c8:	6859      	ldr	r1, [r3, #4]
1a0003ca:	6818      	ldr	r0, [r3, #0]
1a0003cc:	f7ff fedd 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0003d0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0003d2:	4a10      	ldr	r2, [pc, #64]	; (1a000414 <Reset_Handler+0x7c>)
1a0003d4:	4293      	cmp	r3, r2
1a0003d6:	d3f4      	bcc.n	1a0003c2 <Reset_Handler+0x2a>
1a0003d8:	e006      	b.n	1a0003e8 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0003da:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0003dc:	6859      	ldr	r1, [r3, #4]
1a0003de:	f854 0b08 	ldr.w	r0, [r4], #8
1a0003e2:	f7ff fee1 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0003e6:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0003e8:	4a0b      	ldr	r2, [pc, #44]	; (1a000418 <Reset_Handler+0x80>)
1a0003ea:	4293      	cmp	r3, r2
1a0003ec:	d3f5      	bcc.n	1a0003da <Reset_Handler+0x42>
    SystemInit();
1a0003ee:	f002 f9df 	bl	1a0027b0 <SystemInit>
    __libc_init_array();
1a0003f2:	f002 fedf 	bl	1a0031b4 <__libc_init_array>
    main();
1a0003f6:	f7ff ffa5 	bl	1a000344 <main>
        __WFI();
1a0003fa:	bf30      	wfi
1a0003fc:	e7fd      	b.n	1a0003fa <Reset_Handler+0x62>
1a0003fe:	bf00      	nop
1a000400:	40053100 	.word	0x40053100
1a000404:	10df1000 	.word	0x10df1000
1a000408:	01dff7ff 	.word	0x01dff7ff
1a00040c:	e000e280 	.word	0xe000e280
1a000410:	1a000114 	.word	0x1a000114
1a000414:	1a000150 	.word	0x1a000150
1a000418:	1a000178 	.word	0x1a000178

1a00041c <_init>:
void _init(void) {}
1a00041c:	4770      	bx	lr
1a00041e:	Address 0x000000001a00041e is out of bounds.


1a000420 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a000420:	b538      	push	{r3, r4, r5, lr}
1a000422:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a000424:	f010 0f07 	tst.w	r0, #7
1a000428:	d002      	beq.n	1a000430 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00042a:	f020 0407 	bic.w	r4, r0, #7
1a00042e:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a000430:	f000 fe28 	bl	1a001084 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a000434:	4b13      	ldr	r3, [pc, #76]	; (1a000484 <pvPortMalloc+0x64>)
1a000436:	681b      	ldr	r3, [r3, #0]
1a000438:	b17b      	cbz	r3, 1a00045a <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a00043a:	4b13      	ldr	r3, [pc, #76]	; (1a000488 <pvPortMalloc+0x68>)
1a00043c:	681b      	ldr	r3, [r3, #0]
1a00043e:	441c      	add	r4, r3
1a000440:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a000444:	4294      	cmp	r4, r2
1a000446:	d80e      	bhi.n	1a000466 <pvPortMalloc+0x46>
1a000448:	42a3      	cmp	r3, r4
1a00044a:	d310      	bcc.n	1a00046e <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a00044c:	f000 feb4 	bl	1a0011b8 <xTaskResumeAll>
void *pvReturn = NULL;
1a000450:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a000452:	f000 fbd4 	bl	1a000bfe <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a000456:	4628      	mov	r0, r5
1a000458:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a00045a:	4b0c      	ldr	r3, [pc, #48]	; (1a00048c <pvPortMalloc+0x6c>)
1a00045c:	f023 0307 	bic.w	r3, r3, #7
1a000460:	4a08      	ldr	r2, [pc, #32]	; (1a000484 <pvPortMalloc+0x64>)
1a000462:	6013      	str	r3, [r2, #0]
1a000464:	e7e9      	b.n	1a00043a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a000466:	f000 fea7 	bl	1a0011b8 <xTaskResumeAll>
void *pvReturn = NULL;
1a00046a:	2500      	movs	r5, #0
1a00046c:	e7f1      	b.n	1a000452 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a00046e:	4a05      	ldr	r2, [pc, #20]	; (1a000484 <pvPortMalloc+0x64>)
1a000470:	6815      	ldr	r5, [r2, #0]
1a000472:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a000474:	4b04      	ldr	r3, [pc, #16]	; (1a000488 <pvPortMalloc+0x68>)
1a000476:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a000478:	f000 fe9e 	bl	1a0011b8 <xTaskResumeAll>
		if( pvReturn == NULL )
1a00047c:	2d00      	cmp	r5, #0
1a00047e:	d1ea      	bne.n	1a000456 <pvPortMalloc+0x36>
1a000480:	e7e7      	b.n	1a000452 <pvPortMalloc+0x32>
1a000482:	bf00      	nop
1a000484:	100000a0 	.word	0x100000a0
1a000488:	100020a4 	.word	0x100020a4
1a00048c:	100000ac 	.word	0x100000ac

1a000490 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000490:	b140      	cbz	r0, 1a0004a4 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000492:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000496:	f383 8811 	msr	BASEPRI, r3
1a00049a:	f3bf 8f6f 	isb	sy
1a00049e:	f3bf 8f4f 	dsb	sy
1a0004a2:	e7fe      	b.n	1a0004a2 <vPortFree+0x12>
}
1a0004a4:	4770      	bx	lr

1a0004a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a0004a6:	b510      	push	{r4, lr}
1a0004a8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a0004aa:	f001 fb83 	bl	1a001bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0004ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0004b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0004b2:	429a      	cmp	r2, r3
1a0004b4:	d004      	beq.n	1a0004c0 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0004b6:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0004b8:	f001 fb9e 	bl	1a001bf8 <vPortExitCritical>

	return xReturn;
}
1a0004bc:	4620      	mov	r0, r4
1a0004be:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0004c0:	2401      	movs	r4, #1
1a0004c2:	e7f9      	b.n	1a0004b8 <prvIsQueueFull+0x12>

1a0004c4 <prvIsQueueEmpty>:
{
1a0004c4:	b510      	push	{r4, lr}
1a0004c6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0004c8:	f001 fb74 	bl	1a001bb4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0004cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0004ce:	b123      	cbz	r3, 1a0004da <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a0004d0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0004d2:	f001 fb91 	bl	1a001bf8 <vPortExitCritical>
}
1a0004d6:	4620      	mov	r0, r4
1a0004d8:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0004da:	2401      	movs	r4, #1
1a0004dc:	e7f9      	b.n	1a0004d2 <prvIsQueueEmpty+0xe>

1a0004de <prvCopyDataToQueue>:
{
1a0004de:	b570      	push	{r4, r5, r6, lr}
1a0004e0:	4604      	mov	r4, r0
1a0004e2:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0004e4:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0004e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0004e8:	b95a      	cbnz	r2, 1a000502 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0004ea:	6803      	ldr	r3, [r0, #0]
1a0004ec:	b11b      	cbz	r3, 1a0004f6 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0004ee:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0004f0:	3501      	adds	r5, #1
1a0004f2:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0004f4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0004f6:	6840      	ldr	r0, [r0, #4]
1a0004f8:	f001 f83e 	bl	1a001578 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0004fc:	2300      	movs	r3, #0
1a0004fe:	6063      	str	r3, [r4, #4]
1a000500:	e7f6      	b.n	1a0004f0 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000502:	b96e      	cbnz	r6, 1a000520 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000504:	6880      	ldr	r0, [r0, #8]
1a000506:	f002 fe79 	bl	1a0031fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a00050a:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a00050c:	68a3      	ldr	r3, [r4, #8]
1a00050e:	4413      	add	r3, r2
1a000510:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000512:	6862      	ldr	r2, [r4, #4]
1a000514:	4293      	cmp	r3, r2
1a000516:	d319      	bcc.n	1a00054c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000518:	6823      	ldr	r3, [r4, #0]
1a00051a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a00051c:	2000      	movs	r0, #0
1a00051e:	e7e7      	b.n	1a0004f0 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000520:	68c0      	ldr	r0, [r0, #12]
1a000522:	f002 fe6b 	bl	1a0031fc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000526:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000528:	4252      	negs	r2, r2
1a00052a:	68e3      	ldr	r3, [r4, #12]
1a00052c:	4413      	add	r3, r2
1a00052e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000530:	6821      	ldr	r1, [r4, #0]
1a000532:	428b      	cmp	r3, r1
1a000534:	d202      	bcs.n	1a00053c <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000536:	6863      	ldr	r3, [r4, #4]
1a000538:	441a      	add	r2, r3
1a00053a:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a00053c:	2e02      	cmp	r6, #2
1a00053e:	d001      	beq.n	1a000544 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000540:	2000      	movs	r0, #0
1a000542:	e7d5      	b.n	1a0004f0 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000544:	b125      	cbz	r5, 1a000550 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000546:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000548:	2000      	movs	r0, #0
1a00054a:	e7d1      	b.n	1a0004f0 <prvCopyDataToQueue+0x12>
1a00054c:	2000      	movs	r0, #0
1a00054e:	e7cf      	b.n	1a0004f0 <prvCopyDataToQueue+0x12>
1a000550:	2000      	movs	r0, #0
1a000552:	e7cd      	b.n	1a0004f0 <prvCopyDataToQueue+0x12>

1a000554 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000554:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000556:	b172      	cbz	r2, 1a000576 <prvCopyDataFromQueue+0x22>
{
1a000558:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a00055a:	68c3      	ldr	r3, [r0, #12]
1a00055c:	4413      	add	r3, r2
1a00055e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000560:	6844      	ldr	r4, [r0, #4]
1a000562:	42a3      	cmp	r3, r4
1a000564:	d301      	bcc.n	1a00056a <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000566:	6803      	ldr	r3, [r0, #0]
1a000568:	60c3      	str	r3, [r0, #12]
1a00056a:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00056c:	68c1      	ldr	r1, [r0, #12]
1a00056e:	4620      	mov	r0, r4
1a000570:	f002 fe44 	bl	1a0031fc <memcpy>
}
1a000574:	bd10      	pop	{r4, pc}
1a000576:	4770      	bx	lr

1a000578 <prvUnlockQueue>:
{
1a000578:	b538      	push	{r3, r4, r5, lr}
1a00057a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a00057c:	f001 fb1a 	bl	1a001bb4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000580:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000584:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000586:	e003      	b.n	1a000590 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000588:	f000 ffe0 	bl	1a00154c <vTaskMissedYield>
			--cTxLock;
1a00058c:	3c01      	subs	r4, #1
1a00058e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000590:	2c00      	cmp	r4, #0
1a000592:	dd08      	ble.n	1a0005a6 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000594:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000596:	b133      	cbz	r3, 1a0005a6 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000598:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00059c:	f000 ff44 	bl	1a001428 <xTaskRemoveFromEventList>
1a0005a0:	2800      	cmp	r0, #0
1a0005a2:	d0f3      	beq.n	1a00058c <prvUnlockQueue+0x14>
1a0005a4:	e7f0      	b.n	1a000588 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a0005a6:	23ff      	movs	r3, #255	; 0xff
1a0005a8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a0005ac:	f001 fb24 	bl	1a001bf8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a0005b0:	f001 fb00 	bl	1a001bb4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0005b4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0005b8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0005ba:	e003      	b.n	1a0005c4 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a0005bc:	f000 ffc6 	bl	1a00154c <vTaskMissedYield>
				--cRxLock;
1a0005c0:	3c01      	subs	r4, #1
1a0005c2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0005c4:	2c00      	cmp	r4, #0
1a0005c6:	dd08      	ble.n	1a0005da <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0005c8:	692b      	ldr	r3, [r5, #16]
1a0005ca:	b133      	cbz	r3, 1a0005da <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0005cc:	f105 0010 	add.w	r0, r5, #16
1a0005d0:	f000 ff2a 	bl	1a001428 <xTaskRemoveFromEventList>
1a0005d4:	2800      	cmp	r0, #0
1a0005d6:	d0f3      	beq.n	1a0005c0 <prvUnlockQueue+0x48>
1a0005d8:	e7f0      	b.n	1a0005bc <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0005da:	23ff      	movs	r3, #255	; 0xff
1a0005dc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0005e0:	f001 fb0a 	bl	1a001bf8 <vPortExitCritical>
}
1a0005e4:	bd38      	pop	{r3, r4, r5, pc}
1a0005e6:	Address 0x000000001a0005e6 is out of bounds.


1a0005e8 <xQueueGenericReset>:
{
1a0005e8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0005ea:	b940      	cbnz	r0, 1a0005fe <xQueueGenericReset+0x16>
1a0005ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0005f0:	f383 8811 	msr	BASEPRI, r3
1a0005f4:	f3bf 8f6f 	isb	sy
1a0005f8:	f3bf 8f4f 	dsb	sy
1a0005fc:	e7fe      	b.n	1a0005fc <xQueueGenericReset+0x14>
1a0005fe:	4604      	mov	r4, r0
1a000600:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000602:	f001 fad7 	bl	1a001bb4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000606:	6821      	ldr	r1, [r4, #0]
1a000608:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00060a:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a00060c:	fb03 1002 	mla	r0, r3, r2, r1
1a000610:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000612:	2000      	movs	r0, #0
1a000614:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000616:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000618:	3a01      	subs	r2, #1
1a00061a:	fb02 1303 	mla	r3, r2, r3, r1
1a00061e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000620:	23ff      	movs	r3, #255	; 0xff
1a000622:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a00062a:	b9a5      	cbnz	r5, 1a000656 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00062c:	6923      	ldr	r3, [r4, #16]
1a00062e:	b91b      	cbnz	r3, 1a000638 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000630:	f001 fae2 	bl	1a001bf8 <vPortExitCritical>
}
1a000634:	2001      	movs	r0, #1
1a000636:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000638:	f104 0010 	add.w	r0, r4, #16
1a00063c:	f000 fef4 	bl	1a001428 <xTaskRemoveFromEventList>
1a000640:	2800      	cmp	r0, #0
1a000642:	d0f5      	beq.n	1a000630 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a000644:	4b08      	ldr	r3, [pc, #32]	; (1a000668 <xQueueGenericReset+0x80>)
1a000646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00064a:	601a      	str	r2, [r3, #0]
1a00064c:	f3bf 8f4f 	dsb	sy
1a000650:	f3bf 8f6f 	isb	sy
1a000654:	e7ec      	b.n	1a000630 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000656:	f104 0010 	add.w	r0, r4, #16
1a00065a:	f000 fa6e 	bl	1a000b3a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00065e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000662:	f000 fa6a 	bl	1a000b3a <vListInitialise>
1a000666:	e7e3      	b.n	1a000630 <xQueueGenericReset+0x48>
1a000668:	e000ed04 	.word	0xe000ed04

1a00066c <prvInitialiseNewQueue>:
{
1a00066c:	b538      	push	{r3, r4, r5, lr}
1a00066e:	461d      	mov	r5, r3
1a000670:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000672:	460b      	mov	r3, r1
1a000674:	b149      	cbz	r1, 1a00068a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000676:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000678:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a00067a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a00067c:	2101      	movs	r1, #1
1a00067e:	4620      	mov	r0, r4
1a000680:	f7ff ffb2 	bl	1a0005e8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000684:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000688:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a00068a:	6024      	str	r4, [r4, #0]
1a00068c:	e7f4      	b.n	1a000678 <prvInitialiseNewQueue+0xc>

1a00068e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00068e:	b940      	cbnz	r0, 1a0006a2 <xQueueGenericCreateStatic+0x14>
1a000690:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000694:	f383 8811 	msr	BASEPRI, r3
1a000698:	f3bf 8f6f 	isb	sy
1a00069c:	f3bf 8f4f 	dsb	sy
1a0006a0:	e7fe      	b.n	1a0006a0 <xQueueGenericCreateStatic+0x12>
	{
1a0006a2:	b510      	push	{r4, lr}
1a0006a4:	b084      	sub	sp, #16
1a0006a6:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a0006a8:	b153      	cbz	r3, 1a0006c0 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a0006aa:	b192      	cbz	r2, 1a0006d2 <xQueueGenericCreateStatic+0x44>
1a0006ac:	b989      	cbnz	r1, 1a0006d2 <xQueueGenericCreateStatic+0x44>
1a0006ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006b2:	f383 8811 	msr	BASEPRI, r3
1a0006b6:	f3bf 8f6f 	isb	sy
1a0006ba:	f3bf 8f4f 	dsb	sy
1a0006be:	e7fe      	b.n	1a0006be <xQueueGenericCreateStatic+0x30>
1a0006c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006c4:	f383 8811 	msr	BASEPRI, r3
1a0006c8:	f3bf 8f6f 	isb	sy
1a0006cc:	f3bf 8f4f 	dsb	sy
1a0006d0:	e7fe      	b.n	1a0006d0 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a0006d2:	b94a      	cbnz	r2, 1a0006e8 <xQueueGenericCreateStatic+0x5a>
1a0006d4:	b141      	cbz	r1, 1a0006e8 <xQueueGenericCreateStatic+0x5a>
1a0006d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006da:	f383 8811 	msr	BASEPRI, r3
1a0006de:	f3bf 8f6f 	isb	sy
1a0006e2:	f3bf 8f4f 	dsb	sy
1a0006e6:	e7fe      	b.n	1a0006e6 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0006e8:	2050      	movs	r0, #80	; 0x50
1a0006ea:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0006ec:	9803      	ldr	r0, [sp, #12]
1a0006ee:	2850      	cmp	r0, #80	; 0x50
1a0006f0:	d008      	beq.n	1a000704 <xQueueGenericCreateStatic+0x76>
1a0006f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006f6:	f383 8811 	msr	BASEPRI, r3
1a0006fa:	f3bf 8f6f 	isb	sy
1a0006fe:	f3bf 8f4f 	dsb	sy
1a000702:	e7fe      	b.n	1a000702 <xQueueGenericCreateStatic+0x74>
1a000704:	4620      	mov	r0, r4
1a000706:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000708:	2301      	movs	r3, #1
1a00070a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00070e:	9400      	str	r4, [sp, #0]
1a000710:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000714:	f7ff ffaa 	bl	1a00066c <prvInitialiseNewQueue>
	}
1a000718:	4620      	mov	r0, r4
1a00071a:	b004      	add	sp, #16
1a00071c:	bd10      	pop	{r4, pc}
1a00071e:	Address 0x000000001a00071e is out of bounds.


1a000720 <xQueueGenericSend>:
{
1a000720:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000722:	b085      	sub	sp, #20
1a000724:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000726:	b160      	cbz	r0, 1a000742 <xQueueGenericSend+0x22>
1a000728:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00072a:	b999      	cbnz	r1, 1a000754 <xQueueGenericSend+0x34>
1a00072c:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00072e:	b18a      	cbz	r2, 1a000754 <xQueueGenericSend+0x34>
1a000730:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000734:	f383 8811 	msr	BASEPRI, r3
1a000738:	f3bf 8f6f 	isb	sy
1a00073c:	f3bf 8f4f 	dsb	sy
1a000740:	e7fe      	b.n	1a000740 <xQueueGenericSend+0x20>
1a000742:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000746:	f383 8811 	msr	BASEPRI, r3
1a00074a:	f3bf 8f6f 	isb	sy
1a00074e:	f3bf 8f4f 	dsb	sy
1a000752:	e7fe      	b.n	1a000752 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000754:	2b02      	cmp	r3, #2
1a000756:	d10b      	bne.n	1a000770 <xQueueGenericSend+0x50>
1a000758:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00075a:	2a01      	cmp	r2, #1
1a00075c:	d008      	beq.n	1a000770 <xQueueGenericSend+0x50>
1a00075e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000762:	f383 8811 	msr	BASEPRI, r3
1a000766:	f3bf 8f6f 	isb	sy
1a00076a:	f3bf 8f4f 	dsb	sy
1a00076e:	e7fe      	b.n	1a00076e <xQueueGenericSend+0x4e>
1a000770:	461e      	mov	r6, r3
1a000772:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000774:	f000 fef0 	bl	1a001558 <xTaskGetSchedulerState>
1a000778:	b950      	cbnz	r0, 1a000790 <xQueueGenericSend+0x70>
1a00077a:	9b01      	ldr	r3, [sp, #4]
1a00077c:	b153      	cbz	r3, 1a000794 <xQueueGenericSend+0x74>
1a00077e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000782:	f383 8811 	msr	BASEPRI, r3
1a000786:	f3bf 8f6f 	isb	sy
1a00078a:	f3bf 8f4f 	dsb	sy
1a00078e:	e7fe      	b.n	1a00078e <xQueueGenericSend+0x6e>
1a000790:	2500      	movs	r5, #0
1a000792:	e03a      	b.n	1a00080a <xQueueGenericSend+0xea>
1a000794:	2500      	movs	r5, #0
1a000796:	e038      	b.n	1a00080a <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000798:	4632      	mov	r2, r6
1a00079a:	4639      	mov	r1, r7
1a00079c:	4620      	mov	r0, r4
1a00079e:	f7ff fe9e 	bl	1a0004de <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0007a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0007a4:	b94b      	cbnz	r3, 1a0007ba <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a0007a6:	b1a8      	cbz	r0, 1a0007d4 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a0007a8:	4b3b      	ldr	r3, [pc, #236]	; (1a000898 <xQueueGenericSend+0x178>)
1a0007aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0007ae:	601a      	str	r2, [r3, #0]
1a0007b0:	f3bf 8f4f 	dsb	sy
1a0007b4:	f3bf 8f6f 	isb	sy
1a0007b8:	e00c      	b.n	1a0007d4 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0007ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0007be:	f000 fe33 	bl	1a001428 <xTaskRemoveFromEventList>
1a0007c2:	b138      	cbz	r0, 1a0007d4 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a0007c4:	4b34      	ldr	r3, [pc, #208]	; (1a000898 <xQueueGenericSend+0x178>)
1a0007c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0007ca:	601a      	str	r2, [r3, #0]
1a0007cc:	f3bf 8f4f 	dsb	sy
1a0007d0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0007d4:	f001 fa10 	bl	1a001bf8 <vPortExitCritical>
				return pdPASS;
1a0007d8:	2001      	movs	r0, #1
}
1a0007da:	b005      	add	sp, #20
1a0007dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a0007de:	f001 fa0b 	bl	1a001bf8 <vPortExitCritical>
					return errQUEUE_FULL;
1a0007e2:	2000      	movs	r0, #0
1a0007e4:	e7f9      	b.n	1a0007da <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0007e6:	a802      	add	r0, sp, #8
1a0007e8:	f000 fe64 	bl	1a0014b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0007ec:	2501      	movs	r5, #1
1a0007ee:	e019      	b.n	1a000824 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a0007f0:	2300      	movs	r3, #0
1a0007f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0007f6:	e021      	b.n	1a00083c <xQueueGenericSend+0x11c>
1a0007f8:	2300      	movs	r3, #0
1a0007fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0007fe:	e023      	b.n	1a000848 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a000800:	4620      	mov	r0, r4
1a000802:	f7ff feb9 	bl	1a000578 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000806:	f000 fcd7 	bl	1a0011b8 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a00080a:	f001 f9d3 	bl	1a001bb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00080e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000810:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000812:	429a      	cmp	r2, r3
1a000814:	d3c0      	bcc.n	1a000798 <xQueueGenericSend+0x78>
1a000816:	2e02      	cmp	r6, #2
1a000818:	d0be      	beq.n	1a000798 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00081a:	9b01      	ldr	r3, [sp, #4]
1a00081c:	2b00      	cmp	r3, #0
1a00081e:	d0de      	beq.n	1a0007de <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a000820:	2d00      	cmp	r5, #0
1a000822:	d0e0      	beq.n	1a0007e6 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a000824:	f001 f9e8 	bl	1a001bf8 <vPortExitCritical>
		vTaskSuspendAll();
1a000828:	f000 fc2c 	bl	1a001084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00082c:	f001 f9c2 	bl	1a001bb4 <vPortEnterCritical>
1a000830:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000834:	b25b      	sxtb	r3, r3
1a000836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00083a:	d0d9      	beq.n	1a0007f0 <xQueueGenericSend+0xd0>
1a00083c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000840:	b25b      	sxtb	r3, r3
1a000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000846:	d0d7      	beq.n	1a0007f8 <xQueueGenericSend+0xd8>
1a000848:	f001 f9d6 	bl	1a001bf8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a00084c:	a901      	add	r1, sp, #4
1a00084e:	a802      	add	r0, sp, #8
1a000850:	f000 fe3c 	bl	1a0014cc <xTaskCheckForTimeOut>
1a000854:	b9c8      	cbnz	r0, 1a00088a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000856:	4620      	mov	r0, r4
1a000858:	f7ff fe25 	bl	1a0004a6 <prvIsQueueFull>
1a00085c:	2800      	cmp	r0, #0
1a00085e:	d0cf      	beq.n	1a000800 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000860:	9901      	ldr	r1, [sp, #4]
1a000862:	f104 0010 	add.w	r0, r4, #16
1a000866:	f000 fdab 	bl	1a0013c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00086a:	4620      	mov	r0, r4
1a00086c:	f7ff fe84 	bl	1a000578 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000870:	f000 fca2 	bl	1a0011b8 <xTaskResumeAll>
1a000874:	2800      	cmp	r0, #0
1a000876:	d1c8      	bne.n	1a00080a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a000878:	4b07      	ldr	r3, [pc, #28]	; (1a000898 <xQueueGenericSend+0x178>)
1a00087a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00087e:	601a      	str	r2, [r3, #0]
1a000880:	f3bf 8f4f 	dsb	sy
1a000884:	f3bf 8f6f 	isb	sy
1a000888:	e7bf      	b.n	1a00080a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a00088a:	4620      	mov	r0, r4
1a00088c:	f7ff fe74 	bl	1a000578 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000890:	f000 fc92 	bl	1a0011b8 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000894:	2000      	movs	r0, #0
1a000896:	e7a0      	b.n	1a0007da <xQueueGenericSend+0xba>
1a000898:	e000ed04 	.word	0xe000ed04

1a00089c <xQueueGenericSendFromISR>:
{
1a00089c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a0008a0:	b160      	cbz	r0, 1a0008bc <xQueueGenericSendFromISR+0x20>
1a0008a2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0008a4:	b999      	cbnz	r1, 1a0008ce <xQueueGenericSendFromISR+0x32>
1a0008a6:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0008a8:	b188      	cbz	r0, 1a0008ce <xQueueGenericSendFromISR+0x32>
1a0008aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008ae:	f383 8811 	msr	BASEPRI, r3
1a0008b2:	f3bf 8f6f 	isb	sy
1a0008b6:	f3bf 8f4f 	dsb	sy
1a0008ba:	e7fe      	b.n	1a0008ba <xQueueGenericSendFromISR+0x1e>
1a0008bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008c0:	f383 8811 	msr	BASEPRI, r3
1a0008c4:	f3bf 8f6f 	isb	sy
1a0008c8:	f3bf 8f4f 	dsb	sy
1a0008cc:	e7fe      	b.n	1a0008cc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0008ce:	2b02      	cmp	r3, #2
1a0008d0:	d10b      	bne.n	1a0008ea <xQueueGenericSendFromISR+0x4e>
1a0008d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a0008d4:	2801      	cmp	r0, #1
1a0008d6:	d008      	beq.n	1a0008ea <xQueueGenericSendFromISR+0x4e>
1a0008d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008dc:	f383 8811 	msr	BASEPRI, r3
1a0008e0:	f3bf 8f6f 	isb	sy
1a0008e4:	f3bf 8f4f 	dsb	sy
1a0008e8:	e7fe      	b.n	1a0008e8 <xQueueGenericSendFromISR+0x4c>
1a0008ea:	461f      	mov	r7, r3
1a0008ec:	4690      	mov	r8, r2
1a0008ee:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0008f0:	f001 fa8a 	bl	1a001e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0008f4:	f3ef 8611 	mrs	r6, BASEPRI
1a0008f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008fc:	f383 8811 	msr	BASEPRI, r3
1a000900:	f3bf 8f6f 	isb	sy
1a000904:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000908:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00090a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00090c:	429a      	cmp	r2, r3
1a00090e:	d303      	bcc.n	1a000918 <xQueueGenericSendFromISR+0x7c>
1a000910:	2f02      	cmp	r7, #2
1a000912:	d001      	beq.n	1a000918 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a000914:	2000      	movs	r0, #0
1a000916:	e00f      	b.n	1a000938 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000918:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a00091c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00091e:	463a      	mov	r2, r7
1a000920:	4649      	mov	r1, r9
1a000922:	4620      	mov	r0, r4
1a000924:	f7ff fddb 	bl	1a0004de <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000928:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a00092c:	d008      	beq.n	1a000940 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a00092e:	1c6b      	adds	r3, r5, #1
1a000930:	b25b      	sxtb	r3, r3
1a000932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000936:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000938:	f386 8811 	msr	BASEPRI, r6
}
1a00093c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000940:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000942:	b15b      	cbz	r3, 1a00095c <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000944:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000948:	f000 fd6e 	bl	1a001428 <xTaskRemoveFromEventList>
1a00094c:	b140      	cbz	r0, 1a000960 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a00094e:	f1b8 0f00 	cmp.w	r8, #0
1a000952:	d007      	beq.n	1a000964 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000954:	2001      	movs	r0, #1
1a000956:	f8c8 0000 	str.w	r0, [r8]
1a00095a:	e7ed      	b.n	1a000938 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a00095c:	2001      	movs	r0, #1
1a00095e:	e7eb      	b.n	1a000938 <xQueueGenericSendFromISR+0x9c>
1a000960:	2001      	movs	r0, #1
1a000962:	e7e9      	b.n	1a000938 <xQueueGenericSendFromISR+0x9c>
1a000964:	2001      	movs	r0, #1
1a000966:	e7e7      	b.n	1a000938 <xQueueGenericSendFromISR+0x9c>

1a000968 <xQueueReceive>:
{
1a000968:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00096a:	b085      	sub	sp, #20
1a00096c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a00096e:	b160      	cbz	r0, 1a00098a <xQueueReceive+0x22>
1a000970:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000972:	b999      	cbnz	r1, 1a00099c <xQueueReceive+0x34>
1a000974:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000976:	b18b      	cbz	r3, 1a00099c <xQueueReceive+0x34>
	__asm volatile
1a000978:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00097c:	f383 8811 	msr	BASEPRI, r3
1a000980:	f3bf 8f6f 	isb	sy
1a000984:	f3bf 8f4f 	dsb	sy
1a000988:	e7fe      	b.n	1a000988 <xQueueReceive+0x20>
1a00098a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00098e:	f383 8811 	msr	BASEPRI, r3
1a000992:	f3bf 8f6f 	isb	sy
1a000996:	f3bf 8f4f 	dsb	sy
1a00099a:	e7fe      	b.n	1a00099a <xQueueReceive+0x32>
1a00099c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00099e:	f000 fddb 	bl	1a001558 <xTaskGetSchedulerState>
1a0009a2:	b950      	cbnz	r0, 1a0009ba <xQueueReceive+0x52>
1a0009a4:	9b01      	ldr	r3, [sp, #4]
1a0009a6:	b153      	cbz	r3, 1a0009be <xQueueReceive+0x56>
1a0009a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009ac:	f383 8811 	msr	BASEPRI, r3
1a0009b0:	f3bf 8f6f 	isb	sy
1a0009b4:	f3bf 8f4f 	dsb	sy
1a0009b8:	e7fe      	b.n	1a0009b8 <xQueueReceive+0x50>
1a0009ba:	2600      	movs	r6, #0
1a0009bc:	e03e      	b.n	1a000a3c <xQueueReceive+0xd4>
1a0009be:	2600      	movs	r6, #0
1a0009c0:	e03c      	b.n	1a000a3c <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a0009c2:	4639      	mov	r1, r7
1a0009c4:	4620      	mov	r0, r4
1a0009c6:	f7ff fdc5 	bl	1a000554 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a0009ca:	3d01      	subs	r5, #1
1a0009cc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0009ce:	6923      	ldr	r3, [r4, #16]
1a0009d0:	b923      	cbnz	r3, 1a0009dc <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a0009d2:	f001 f911 	bl	1a001bf8 <vPortExitCritical>
				return pdPASS;
1a0009d6:	2001      	movs	r0, #1
}
1a0009d8:	b005      	add	sp, #20
1a0009da:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0009dc:	f104 0010 	add.w	r0, r4, #16
1a0009e0:	f000 fd22 	bl	1a001428 <xTaskRemoveFromEventList>
1a0009e4:	2800      	cmp	r0, #0
1a0009e6:	d0f4      	beq.n	1a0009d2 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a0009e8:	4b34      	ldr	r3, [pc, #208]	; (1a000abc <xQueueReceive+0x154>)
1a0009ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0009ee:	601a      	str	r2, [r3, #0]
1a0009f0:	f3bf 8f4f 	dsb	sy
1a0009f4:	f3bf 8f6f 	isb	sy
1a0009f8:	e7eb      	b.n	1a0009d2 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a0009fa:	f001 f8fd 	bl	1a001bf8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0009fe:	2000      	movs	r0, #0
1a000a00:	e7ea      	b.n	1a0009d8 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000a02:	a802      	add	r0, sp, #8
1a000a04:	f000 fd56 	bl	1a0014b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000a08:	2601      	movs	r6, #1
1a000a0a:	e021      	b.n	1a000a50 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a000a0c:	2300      	movs	r3, #0
1a000a0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000a12:	e029      	b.n	1a000a68 <xQueueReceive+0x100>
1a000a14:	2300      	movs	r3, #0
1a000a16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000a1a:	e02b      	b.n	1a000a74 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a000a1c:	4620      	mov	r0, r4
1a000a1e:	f7ff fdab 	bl	1a000578 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000a22:	f000 fbc9 	bl	1a0011b8 <xTaskResumeAll>
1a000a26:	e009      	b.n	1a000a3c <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a000a28:	4620      	mov	r0, r4
1a000a2a:	f7ff fda5 	bl	1a000578 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000a2e:	f000 fbc3 	bl	1a0011b8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000a32:	4620      	mov	r0, r4
1a000a34:	f7ff fd46 	bl	1a0004c4 <prvIsQueueEmpty>
1a000a38:	2800      	cmp	r0, #0
1a000a3a:	d13d      	bne.n	1a000ab8 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a000a3c:	f001 f8ba 	bl	1a001bb4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000a40:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000a42:	2d00      	cmp	r5, #0
1a000a44:	d1bd      	bne.n	1a0009c2 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000a46:	9b01      	ldr	r3, [sp, #4]
1a000a48:	2b00      	cmp	r3, #0
1a000a4a:	d0d6      	beq.n	1a0009fa <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a000a4c:	2e00      	cmp	r6, #0
1a000a4e:	d0d8      	beq.n	1a000a02 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a000a50:	f001 f8d2 	bl	1a001bf8 <vPortExitCritical>
		vTaskSuspendAll();
1a000a54:	f000 fb16 	bl	1a001084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000a58:	f001 f8ac 	bl	1a001bb4 <vPortEnterCritical>
1a000a5c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000a60:	b25b      	sxtb	r3, r3
1a000a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000a66:	d0d1      	beq.n	1a000a0c <xQueueReceive+0xa4>
1a000a68:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000a6c:	b25b      	sxtb	r3, r3
1a000a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000a72:	d0cf      	beq.n	1a000a14 <xQueueReceive+0xac>
1a000a74:	f001 f8c0 	bl	1a001bf8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000a78:	a901      	add	r1, sp, #4
1a000a7a:	a802      	add	r0, sp, #8
1a000a7c:	f000 fd26 	bl	1a0014cc <xTaskCheckForTimeOut>
1a000a80:	2800      	cmp	r0, #0
1a000a82:	d1d1      	bne.n	1a000a28 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000a84:	4620      	mov	r0, r4
1a000a86:	f7ff fd1d 	bl	1a0004c4 <prvIsQueueEmpty>
1a000a8a:	2800      	cmp	r0, #0
1a000a8c:	d0c6      	beq.n	1a000a1c <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000a8e:	9901      	ldr	r1, [sp, #4]
1a000a90:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000a94:	f000 fc94 	bl	1a0013c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000a98:	4620      	mov	r0, r4
1a000a9a:	f7ff fd6d 	bl	1a000578 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000a9e:	f000 fb8b 	bl	1a0011b8 <xTaskResumeAll>
1a000aa2:	2800      	cmp	r0, #0
1a000aa4:	d1ca      	bne.n	1a000a3c <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a000aa6:	4b05      	ldr	r3, [pc, #20]	; (1a000abc <xQueueReceive+0x154>)
1a000aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000aac:	601a      	str	r2, [r3, #0]
1a000aae:	f3bf 8f4f 	dsb	sy
1a000ab2:	f3bf 8f6f 	isb	sy
1a000ab6:	e7c1      	b.n	1a000a3c <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a000ab8:	2000      	movs	r0, #0
1a000aba:	e78d      	b.n	1a0009d8 <xQueueReceive+0x70>
1a000abc:	e000ed04 	.word	0xe000ed04

1a000ac0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000ac0:	2300      	movs	r3, #0
1a000ac2:	2b07      	cmp	r3, #7
1a000ac4:	d80c      	bhi.n	1a000ae0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000ac6:	4a07      	ldr	r2, [pc, #28]	; (1a000ae4 <vQueueAddToRegistry+0x24>)
1a000ac8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000acc:	b10a      	cbz	r2, 1a000ad2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000ace:	3301      	adds	r3, #1
1a000ad0:	e7f7      	b.n	1a000ac2 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000ad2:	4a04      	ldr	r2, [pc, #16]	; (1a000ae4 <vQueueAddToRegistry+0x24>)
1a000ad4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000ad8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000adc:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000ade:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a000ae0:	4770      	bx	lr
1a000ae2:	bf00      	nop
1a000ae4:	10002b18 	.word	0x10002b18

1a000ae8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000ae8:	b570      	push	{r4, r5, r6, lr}
1a000aea:	4604      	mov	r4, r0
1a000aec:	460d      	mov	r5, r1
1a000aee:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000af0:	f001 f860 	bl	1a001bb4 <vPortEnterCritical>
1a000af4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000af8:	b25b      	sxtb	r3, r3
1a000afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000afe:	d00d      	beq.n	1a000b1c <vQueueWaitForMessageRestricted+0x34>
1a000b00:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000b04:	b25b      	sxtb	r3, r3
1a000b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000b0a:	d00b      	beq.n	1a000b24 <vQueueWaitForMessageRestricted+0x3c>
1a000b0c:	f001 f874 	bl	1a001bf8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a000b10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000b12:	b15b      	cbz	r3, 1a000b2c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a000b14:	4620      	mov	r0, r4
1a000b16:	f7ff fd2f 	bl	1a000578 <prvUnlockQueue>
	}
1a000b1a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a000b1c:	2300      	movs	r3, #0
1a000b1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000b22:	e7ed      	b.n	1a000b00 <vQueueWaitForMessageRestricted+0x18>
1a000b24:	2300      	movs	r3, #0
1a000b26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000b2a:	e7ef      	b.n	1a000b0c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a000b2c:	4632      	mov	r2, r6
1a000b2e:	4629      	mov	r1, r5
1a000b30:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000b34:	f000 fc5c 	bl	1a0013f0 <vTaskPlaceOnEventListRestricted>
1a000b38:	e7ec      	b.n	1a000b14 <vQueueWaitForMessageRestricted+0x2c>

1a000b3a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000b3a:	f100 0308 	add.w	r3, r0, #8
1a000b3e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a000b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000b44:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000b46:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000b48:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000b4a:	2300      	movs	r3, #0
1a000b4c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a000b4e:	4770      	bx	lr

1a000b50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a000b50:	2300      	movs	r3, #0
1a000b52:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a000b54:	4770      	bx	lr

1a000b56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000b56:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000b58:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000b5a:	689a      	ldr	r2, [r3, #8]
1a000b5c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a000b5e:	689a      	ldr	r2, [r3, #8]
1a000b60:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a000b62:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000b64:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000b66:	6803      	ldr	r3, [r0, #0]
1a000b68:	3301      	adds	r3, #1
1a000b6a:	6003      	str	r3, [r0, #0]
}
1a000b6c:	4770      	bx	lr

1a000b6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000b6e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a000b70:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a000b72:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000b76:	d002      	beq.n	1a000b7e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000b78:	f100 0208 	add.w	r2, r0, #8
1a000b7c:	e002      	b.n	1a000b84 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a000b7e:	6902      	ldr	r2, [r0, #16]
1a000b80:	e004      	b.n	1a000b8c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000b82:	461a      	mov	r2, r3
1a000b84:	6853      	ldr	r3, [r2, #4]
1a000b86:	681c      	ldr	r4, [r3, #0]
1a000b88:	42ac      	cmp	r4, r5
1a000b8a:	d9fa      	bls.n	1a000b82 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a000b8c:	6853      	ldr	r3, [r2, #4]
1a000b8e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a000b90:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a000b92:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a000b94:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000b96:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000b98:	6803      	ldr	r3, [r0, #0]
1a000b9a:	3301      	adds	r3, #1
1a000b9c:	6003      	str	r3, [r0, #0]
}
1a000b9e:	bc30      	pop	{r4, r5}
1a000ba0:	4770      	bx	lr

1a000ba2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a000ba2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a000ba4:	6842      	ldr	r2, [r0, #4]
1a000ba6:	6881      	ldr	r1, [r0, #8]
1a000ba8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a000baa:	6882      	ldr	r2, [r0, #8]
1a000bac:	6841      	ldr	r1, [r0, #4]
1a000bae:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a000bb0:	685a      	ldr	r2, [r3, #4]
1a000bb2:	4282      	cmp	r2, r0
1a000bb4:	d006      	beq.n	1a000bc4 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a000bb6:	2200      	movs	r2, #0
1a000bb8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a000bba:	681a      	ldr	r2, [r3, #0]
1a000bbc:	3a01      	subs	r2, #1
1a000bbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a000bc0:	6818      	ldr	r0, [r3, #0]
}
1a000bc2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a000bc4:	6882      	ldr	r2, [r0, #8]
1a000bc6:	605a      	str	r2, [r3, #4]
1a000bc8:	e7f5      	b.n	1a000bb6 <uxListRemove+0x14>
1a000bca:	Address 0x000000001a000bca is out of bounds.


1a000bcc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a000bcc:	4b03      	ldr	r3, [pc, #12]	; (1a000bdc <vApplicationGetIdleTaskMemory+0x10>)
1a000bce:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a000bd0:	4b03      	ldr	r3, [pc, #12]	; (1a000be0 <vApplicationGetIdleTaskMemory+0x14>)
1a000bd2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a000bd4:	235a      	movs	r3, #90	; 0x5a
1a000bd6:	6013      	str	r3, [r2, #0]
}
1a000bd8:	4770      	bx	lr
1a000bda:	bf00      	nop
1a000bdc:	100027b0 	.word	0x100027b0
1a000be0:	100020a8 	.word	0x100020a8

1a000be4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a000be4:	4b03      	ldr	r3, [pc, #12]	; (1a000bf4 <vApplicationGetTimerTaskMemory+0x10>)
1a000be6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a000be8:	4b03      	ldr	r3, [pc, #12]	; (1a000bf8 <vApplicationGetTimerTaskMemory+0x14>)
1a000bea:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a000bec:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a000bf0:	6013      	str	r3, [r2, #0]
1a000bf2:	4770      	bx	lr
1a000bf4:	10002810 	.word	0x10002810
1a000bf8:	10002210 	.word	0x10002210

1a000bfc <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a000bfc:	e7fe      	b.n	1a000bfc <vApplicationStackOverflowHook>

1a000bfe <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a000bfe:	e7fe      	b.n	1a000bfe <vApplicationMallocFailedHook>

1a000c00 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000c00:	4b08      	ldr	r3, [pc, #32]	; (1a000c24 <prvResetNextTaskUnblockTime+0x24>)
1a000c02:	681b      	ldr	r3, [r3, #0]
1a000c04:	681b      	ldr	r3, [r3, #0]
1a000c06:	b13b      	cbz	r3, 1a000c18 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000c08:	4b06      	ldr	r3, [pc, #24]	; (1a000c24 <prvResetNextTaskUnblockTime+0x24>)
1a000c0a:	681b      	ldr	r3, [r3, #0]
1a000c0c:	68db      	ldr	r3, [r3, #12]
1a000c0e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000c10:	685a      	ldr	r2, [r3, #4]
1a000c12:	4b05      	ldr	r3, [pc, #20]	; (1a000c28 <prvResetNextTaskUnblockTime+0x28>)
1a000c14:	601a      	str	r2, [r3, #0]
	}
}
1a000c16:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a000c18:	4b03      	ldr	r3, [pc, #12]	; (1a000c28 <prvResetNextTaskUnblockTime+0x28>)
1a000c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c1e:	601a      	str	r2, [r3, #0]
1a000c20:	4770      	bx	lr
1a000c22:	bf00      	nop
1a000c24:	10002874 	.word	0x10002874
1a000c28:	10002948 	.word	0x10002948

1a000c2c <prvInitialiseNewTask>:
{
1a000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000c30:	4681      	mov	r9, r0
1a000c32:	460d      	mov	r5, r1
1a000c34:	4617      	mov	r7, r2
1a000c36:	469a      	mov	sl, r3
1a000c38:	9e08      	ldr	r6, [sp, #32]
1a000c3a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a000c3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a000c40:	0092      	lsls	r2, r2, #2
1a000c42:	21a5      	movs	r1, #165	; 0xa5
1a000c44:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000c46:	f002 fae4 	bl	1a003212 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000c4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000c4c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a000c50:	3a01      	subs	r2, #1
1a000c52:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a000c56:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a000c5a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000c5c:	2300      	movs	r3, #0
1a000c5e:	2b0f      	cmp	r3, #15
1a000c60:	d807      	bhi.n	1a000c72 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a000c62:	5ce9      	ldrb	r1, [r5, r3]
1a000c64:	18e2      	adds	r2, r4, r3
1a000c66:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a000c6a:	5cea      	ldrb	r2, [r5, r3]
1a000c6c:	b10a      	cbz	r2, 1a000c72 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000c6e:	3301      	adds	r3, #1
1a000c70:	e7f5      	b.n	1a000c5e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a000c72:	2300      	movs	r3, #0
1a000c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a000c78:	2e06      	cmp	r6, #6
1a000c7a:	d900      	bls.n	1a000c7e <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a000c7c:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a000c7e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a000c80:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a000c82:	2500      	movs	r5, #0
1a000c84:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a000c86:	1d20      	adds	r0, r4, #4
1a000c88:	f7ff ff62 	bl	1a000b50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a000c8c:	f104 0018 	add.w	r0, r4, #24
1a000c90:	f7ff ff5e 	bl	1a000b50 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a000c94:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000c96:	f1c6 0607 	rsb	r6, r6, #7
1a000c9a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a000c9c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a000c9e:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a000ca0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a000ca4:	4652      	mov	r2, sl
1a000ca6:	4649      	mov	r1, r9
1a000ca8:	4638      	mov	r0, r7
1a000caa:	f000 ff5b 	bl	1a001b64 <pxPortInitialiseStack>
1a000cae:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a000cb0:	f1b8 0f00 	cmp.w	r8, #0
1a000cb4:	d001      	beq.n	1a000cba <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a000cb6:	f8c8 4000 	str.w	r4, [r8]
}
1a000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000cbe:	Address 0x000000001a000cbe is out of bounds.


1a000cc0 <prvInitialiseTaskLists>:
{
1a000cc0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000cc2:	2400      	movs	r4, #0
1a000cc4:	e007      	b.n	1a000cd6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a000cc6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a000cca:	0093      	lsls	r3, r2, #2
1a000ccc:	480e      	ldr	r0, [pc, #56]	; (1a000d08 <prvInitialiseTaskLists+0x48>)
1a000cce:	4418      	add	r0, r3
1a000cd0:	f7ff ff33 	bl	1a000b3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000cd4:	3401      	adds	r4, #1
1a000cd6:	2c06      	cmp	r4, #6
1a000cd8:	d9f5      	bls.n	1a000cc6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a000cda:	4d0c      	ldr	r5, [pc, #48]	; (1a000d0c <prvInitialiseTaskLists+0x4c>)
1a000cdc:	4628      	mov	r0, r5
1a000cde:	f7ff ff2c 	bl	1a000b3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a000ce2:	4c0b      	ldr	r4, [pc, #44]	; (1a000d10 <prvInitialiseTaskLists+0x50>)
1a000ce4:	4620      	mov	r0, r4
1a000ce6:	f7ff ff28 	bl	1a000b3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a000cea:	480a      	ldr	r0, [pc, #40]	; (1a000d14 <prvInitialiseTaskLists+0x54>)
1a000cec:	f7ff ff25 	bl	1a000b3a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a000cf0:	4809      	ldr	r0, [pc, #36]	; (1a000d18 <prvInitialiseTaskLists+0x58>)
1a000cf2:	f7ff ff22 	bl	1a000b3a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a000cf6:	4809      	ldr	r0, [pc, #36]	; (1a000d1c <prvInitialiseTaskLists+0x5c>)
1a000cf8:	f7ff ff1f 	bl	1a000b3a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a000cfc:	4b08      	ldr	r3, [pc, #32]	; (1a000d20 <prvInitialiseTaskLists+0x60>)
1a000cfe:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a000d00:	4b08      	ldr	r3, [pc, #32]	; (1a000d24 <prvInitialiseTaskLists+0x64>)
1a000d02:	601c      	str	r4, [r3, #0]
}
1a000d04:	bd38      	pop	{r3, r4, r5, pc}
1a000d06:	bf00      	nop
1a000d08:	1000287c 	.word	0x1000287c
1a000d0c:	10002920 	.word	0x10002920
1a000d10:	10002934 	.word	0x10002934
1a000d14:	10002950 	.word	0x10002950
1a000d18:	1000297c 	.word	0x1000297c
1a000d1c:	10002968 	.word	0x10002968
1a000d20:	10002874 	.word	0x10002874
1a000d24:	10002878 	.word	0x10002878

1a000d28 <prvAddNewTaskToReadyList>:
{
1a000d28:	b510      	push	{r4, lr}
1a000d2a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000d2c:	f000 ff42 	bl	1a001bb4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a000d30:	4a21      	ldr	r2, [pc, #132]	; (1a000db8 <prvAddNewTaskToReadyList+0x90>)
1a000d32:	6813      	ldr	r3, [r2, #0]
1a000d34:	3301      	adds	r3, #1
1a000d36:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a000d38:	4b20      	ldr	r3, [pc, #128]	; (1a000dbc <prvAddNewTaskToReadyList+0x94>)
1a000d3a:	681b      	ldr	r3, [r3, #0]
1a000d3c:	b15b      	cbz	r3, 1a000d56 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a000d3e:	4b20      	ldr	r3, [pc, #128]	; (1a000dc0 <prvAddNewTaskToReadyList+0x98>)
1a000d40:	681b      	ldr	r3, [r3, #0]
1a000d42:	b96b      	cbnz	r3, 1a000d60 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a000d44:	4b1d      	ldr	r3, [pc, #116]	; (1a000dbc <prvAddNewTaskToReadyList+0x94>)
1a000d46:	681b      	ldr	r3, [r3, #0]
1a000d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000d4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000d4c:	429a      	cmp	r2, r3
1a000d4e:	d807      	bhi.n	1a000d60 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a000d50:	4b1a      	ldr	r3, [pc, #104]	; (1a000dbc <prvAddNewTaskToReadyList+0x94>)
1a000d52:	601c      	str	r4, [r3, #0]
1a000d54:	e004      	b.n	1a000d60 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a000d56:	4b19      	ldr	r3, [pc, #100]	; (1a000dbc <prvAddNewTaskToReadyList+0x94>)
1a000d58:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a000d5a:	6813      	ldr	r3, [r2, #0]
1a000d5c:	2b01      	cmp	r3, #1
1a000d5e:	d027      	beq.n	1a000db0 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a000d60:	4a18      	ldr	r2, [pc, #96]	; (1a000dc4 <prvAddNewTaskToReadyList+0x9c>)
1a000d62:	6813      	ldr	r3, [r2, #0]
1a000d64:	3301      	adds	r3, #1
1a000d66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a000d68:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a000d6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000d6c:	2201      	movs	r2, #1
1a000d6e:	409a      	lsls	r2, r3
1a000d70:	4915      	ldr	r1, [pc, #84]	; (1a000dc8 <prvAddNewTaskToReadyList+0xa0>)
1a000d72:	6808      	ldr	r0, [r1, #0]
1a000d74:	4302      	orrs	r2, r0
1a000d76:	600a      	str	r2, [r1, #0]
1a000d78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000d7c:	009a      	lsls	r2, r3, #2
1a000d7e:	1d21      	adds	r1, r4, #4
1a000d80:	4812      	ldr	r0, [pc, #72]	; (1a000dcc <prvAddNewTaskToReadyList+0xa4>)
1a000d82:	4410      	add	r0, r2
1a000d84:	f7ff fee7 	bl	1a000b56 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a000d88:	f000 ff36 	bl	1a001bf8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a000d8c:	4b0c      	ldr	r3, [pc, #48]	; (1a000dc0 <prvAddNewTaskToReadyList+0x98>)
1a000d8e:	681b      	ldr	r3, [r3, #0]
1a000d90:	b16b      	cbz	r3, 1a000dae <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a000d92:	4b0a      	ldr	r3, [pc, #40]	; (1a000dbc <prvAddNewTaskToReadyList+0x94>)
1a000d94:	681b      	ldr	r3, [r3, #0]
1a000d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000d98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000d9a:	429a      	cmp	r2, r3
1a000d9c:	d207      	bcs.n	1a000dae <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a000d9e:	4b0c      	ldr	r3, [pc, #48]	; (1a000dd0 <prvAddNewTaskToReadyList+0xa8>)
1a000da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000da4:	601a      	str	r2, [r3, #0]
1a000da6:	f3bf 8f4f 	dsb	sy
1a000daa:	f3bf 8f6f 	isb	sy
}
1a000dae:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a000db0:	f7ff ff86 	bl	1a000cc0 <prvInitialiseTaskLists>
1a000db4:	e7d4      	b.n	1a000d60 <prvAddNewTaskToReadyList+0x38>
1a000db6:	bf00      	nop
1a000db8:	10002908 	.word	0x10002908
1a000dbc:	10002870 	.word	0x10002870
1a000dc0:	10002964 	.word	0x10002964
1a000dc4:	10002918 	.word	0x10002918
1a000dc8:	1000291c 	.word	0x1000291c
1a000dcc:	1000287c 	.word	0x1000287c
1a000dd0:	e000ed04 	.word	0xe000ed04

1a000dd4 <prvDeleteTCB>:
	{
1a000dd4:	b510      	push	{r4, lr}
1a000dd6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a000dd8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a000ddc:	b933      	cbnz	r3, 1a000dec <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a000dde:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000de0:	f7ff fb56 	bl	1a000490 <vPortFree>
				vPortFree( pxTCB );
1a000de4:	4620      	mov	r0, r4
1a000de6:	f7ff fb53 	bl	1a000490 <vPortFree>
	}
1a000dea:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a000dec:	2b01      	cmp	r3, #1
1a000dee:	d00a      	beq.n	1a000e06 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a000df0:	2b02      	cmp	r3, #2
1a000df2:	d0fa      	beq.n	1a000dea <prvDeleteTCB+0x16>
1a000df4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000df8:	f383 8811 	msr	BASEPRI, r3
1a000dfc:	f3bf 8f6f 	isb	sy
1a000e00:	f3bf 8f4f 	dsb	sy
1a000e04:	e7fe      	b.n	1a000e04 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a000e06:	f7ff fb43 	bl	1a000490 <vPortFree>
1a000e0a:	e7ee      	b.n	1a000dea <prvDeleteTCB+0x16>

1a000e0c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000e0c:	4b0f      	ldr	r3, [pc, #60]	; (1a000e4c <prvCheckTasksWaitingTermination+0x40>)
1a000e0e:	681b      	ldr	r3, [r3, #0]
1a000e10:	b1d3      	cbz	r3, 1a000e48 <prvCheckTasksWaitingTermination+0x3c>
{
1a000e12:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a000e14:	f000 fece 	bl	1a001bb4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a000e18:	4b0d      	ldr	r3, [pc, #52]	; (1a000e50 <prvCheckTasksWaitingTermination+0x44>)
1a000e1a:	68db      	ldr	r3, [r3, #12]
1a000e1c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a000e1e:	1d20      	adds	r0, r4, #4
1a000e20:	f7ff febf 	bl	1a000ba2 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a000e24:	4a0b      	ldr	r2, [pc, #44]	; (1a000e54 <prvCheckTasksWaitingTermination+0x48>)
1a000e26:	6813      	ldr	r3, [r2, #0]
1a000e28:	3b01      	subs	r3, #1
1a000e2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a000e2c:	4a07      	ldr	r2, [pc, #28]	; (1a000e4c <prvCheckTasksWaitingTermination+0x40>)
1a000e2e:	6813      	ldr	r3, [r2, #0]
1a000e30:	3b01      	subs	r3, #1
1a000e32:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a000e34:	f000 fee0 	bl	1a001bf8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a000e38:	4620      	mov	r0, r4
1a000e3a:	f7ff ffcb 	bl	1a000dd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000e3e:	4b03      	ldr	r3, [pc, #12]	; (1a000e4c <prvCheckTasksWaitingTermination+0x40>)
1a000e40:	681b      	ldr	r3, [r3, #0]
1a000e42:	2b00      	cmp	r3, #0
1a000e44:	d1e6      	bne.n	1a000e14 <prvCheckTasksWaitingTermination+0x8>
}
1a000e46:	bd10      	pop	{r4, pc}
1a000e48:	4770      	bx	lr
1a000e4a:	bf00      	nop
1a000e4c:	1000290c 	.word	0x1000290c
1a000e50:	1000297c 	.word	0x1000297c
1a000e54:	10002908 	.word	0x10002908

1a000e58 <prvIdleTask>:
{
1a000e58:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a000e5a:	f7ff ffd7 	bl	1a000e0c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a000e5e:	4b06      	ldr	r3, [pc, #24]	; (1a000e78 <prvIdleTask+0x20>)
1a000e60:	681b      	ldr	r3, [r3, #0]
1a000e62:	2b01      	cmp	r3, #1
1a000e64:	d9f9      	bls.n	1a000e5a <prvIdleTask+0x2>
				taskYIELD();
1a000e66:	4b05      	ldr	r3, [pc, #20]	; (1a000e7c <prvIdleTask+0x24>)
1a000e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e6c:	601a      	str	r2, [r3, #0]
1a000e6e:	f3bf 8f4f 	dsb	sy
1a000e72:	f3bf 8f6f 	isb	sy
1a000e76:	e7f0      	b.n	1a000e5a <prvIdleTask+0x2>
1a000e78:	1000287c 	.word	0x1000287c
1a000e7c:	e000ed04 	.word	0xe000ed04

1a000e80 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a000e80:	b570      	push	{r4, r5, r6, lr}
1a000e82:	4604      	mov	r4, r0
1a000e84:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a000e86:	4b1d      	ldr	r3, [pc, #116]	; (1a000efc <prvAddCurrentTaskToDelayedList+0x7c>)
1a000e88:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a000e8a:	4b1d      	ldr	r3, [pc, #116]	; (1a000f00 <prvAddCurrentTaskToDelayedList+0x80>)
1a000e8c:	6818      	ldr	r0, [r3, #0]
1a000e8e:	3004      	adds	r0, #4
1a000e90:	f7ff fe87 	bl	1a000ba2 <uxListRemove>
1a000e94:	b950      	cbnz	r0, 1a000eac <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a000e96:	4b1a      	ldr	r3, [pc, #104]	; (1a000f00 <prvAddCurrentTaskToDelayedList+0x80>)
1a000e98:	681b      	ldr	r3, [r3, #0]
1a000e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000e9c:	2301      	movs	r3, #1
1a000e9e:	fa03 f202 	lsl.w	r2, r3, r2
1a000ea2:	4918      	ldr	r1, [pc, #96]	; (1a000f04 <prvAddCurrentTaskToDelayedList+0x84>)
1a000ea4:	680b      	ldr	r3, [r1, #0]
1a000ea6:	ea23 0302 	bic.w	r3, r3, r2
1a000eaa:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a000eac:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a000eb0:	d013      	beq.n	1a000eda <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a000eb2:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a000eb4:	4b12      	ldr	r3, [pc, #72]	; (1a000f00 <prvAddCurrentTaskToDelayedList+0x80>)
1a000eb6:	681b      	ldr	r3, [r3, #0]
1a000eb8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a000eba:	42a5      	cmp	r5, r4
1a000ebc:	d816      	bhi.n	1a000eec <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000ebe:	4b12      	ldr	r3, [pc, #72]	; (1a000f08 <prvAddCurrentTaskToDelayedList+0x88>)
1a000ec0:	6818      	ldr	r0, [r3, #0]
1a000ec2:	4b0f      	ldr	r3, [pc, #60]	; (1a000f00 <prvAddCurrentTaskToDelayedList+0x80>)
1a000ec4:	6819      	ldr	r1, [r3, #0]
1a000ec6:	3104      	adds	r1, #4
1a000ec8:	f7ff fe51 	bl	1a000b6e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a000ecc:	4b0f      	ldr	r3, [pc, #60]	; (1a000f0c <prvAddCurrentTaskToDelayedList+0x8c>)
1a000ece:	681b      	ldr	r3, [r3, #0]
1a000ed0:	42a3      	cmp	r3, r4
1a000ed2:	d912      	bls.n	1a000efa <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a000ed4:	4b0d      	ldr	r3, [pc, #52]	; (1a000f0c <prvAddCurrentTaskToDelayedList+0x8c>)
1a000ed6:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a000ed8:	e00f      	b.n	1a000efa <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a000eda:	2e00      	cmp	r6, #0
1a000edc:	d0e9      	beq.n	1a000eb2 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000ede:	4b08      	ldr	r3, [pc, #32]	; (1a000f00 <prvAddCurrentTaskToDelayedList+0x80>)
1a000ee0:	6819      	ldr	r1, [r3, #0]
1a000ee2:	3104      	adds	r1, #4
1a000ee4:	480a      	ldr	r0, [pc, #40]	; (1a000f10 <prvAddCurrentTaskToDelayedList+0x90>)
1a000ee6:	f7ff fe36 	bl	1a000b56 <vListInsertEnd>
1a000eea:	e006      	b.n	1a000efa <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000eec:	4b09      	ldr	r3, [pc, #36]	; (1a000f14 <prvAddCurrentTaskToDelayedList+0x94>)
1a000eee:	6818      	ldr	r0, [r3, #0]
1a000ef0:	4b03      	ldr	r3, [pc, #12]	; (1a000f00 <prvAddCurrentTaskToDelayedList+0x80>)
1a000ef2:	6819      	ldr	r1, [r3, #0]
1a000ef4:	3104      	adds	r1, #4
1a000ef6:	f7ff fe3a 	bl	1a000b6e <vListInsert>
}
1a000efa:	bd70      	pop	{r4, r5, r6, pc}
1a000efc:	10002990 	.word	0x10002990
1a000f00:	10002870 	.word	0x10002870
1a000f04:	1000291c 	.word	0x1000291c
1a000f08:	10002874 	.word	0x10002874
1a000f0c:	10002948 	.word	0x10002948
1a000f10:	10002968 	.word	0x10002968
1a000f14:	10002878 	.word	0x10002878

1a000f18 <xTaskCreateStatic>:
	{
1a000f18:	b570      	push	{r4, r5, r6, lr}
1a000f1a:	b086      	sub	sp, #24
1a000f1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a000f1e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a000f20:	b945      	cbnz	r5, 1a000f34 <xTaskCreateStatic+0x1c>
1a000f22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f26:	f383 8811 	msr	BASEPRI, r3
1a000f2a:	f3bf 8f6f 	isb	sy
1a000f2e:	f3bf 8f4f 	dsb	sy
1a000f32:	e7fe      	b.n	1a000f32 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a000f34:	b944      	cbnz	r4, 1a000f48 <xTaskCreateStatic+0x30>
1a000f36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f3a:	f383 8811 	msr	BASEPRI, r3
1a000f3e:	f3bf 8f6f 	isb	sy
1a000f42:	f3bf 8f4f 	dsb	sy
1a000f46:	e7fe      	b.n	1a000f46 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a000f48:	2660      	movs	r6, #96	; 0x60
1a000f4a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a000f4c:	9e04      	ldr	r6, [sp, #16]
1a000f4e:	2e60      	cmp	r6, #96	; 0x60
1a000f50:	d008      	beq.n	1a000f64 <xTaskCreateStatic+0x4c>
1a000f52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f56:	f383 8811 	msr	BASEPRI, r3
1a000f5a:	f3bf 8f6f 	isb	sy
1a000f5e:	f3bf 8f4f 	dsb	sy
1a000f62:	e7fe      	b.n	1a000f62 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a000f64:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a000f66:	2502      	movs	r5, #2
1a000f68:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a000f6c:	2500      	movs	r5, #0
1a000f6e:	9503      	str	r5, [sp, #12]
1a000f70:	9402      	str	r4, [sp, #8]
1a000f72:	ad05      	add	r5, sp, #20
1a000f74:	9501      	str	r5, [sp, #4]
1a000f76:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a000f78:	9500      	str	r5, [sp, #0]
1a000f7a:	f7ff fe57 	bl	1a000c2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a000f7e:	4620      	mov	r0, r4
1a000f80:	f7ff fed2 	bl	1a000d28 <prvAddNewTaskToReadyList>
	}
1a000f84:	9805      	ldr	r0, [sp, #20]
1a000f86:	b006      	add	sp, #24
1a000f88:	bd70      	pop	{r4, r5, r6, pc}

1a000f8a <xTaskCreate>:
	{
1a000f8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a000f8e:	b085      	sub	sp, #20
1a000f90:	4607      	mov	r7, r0
1a000f92:	4688      	mov	r8, r1
1a000f94:	4615      	mov	r5, r2
1a000f96:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000f98:	0090      	lsls	r0, r2, #2
1a000f9a:	f7ff fa41 	bl	1a000420 <pvPortMalloc>
			if( pxStack != NULL )
1a000f9e:	b308      	cbz	r0, 1a000fe4 <xTaskCreate+0x5a>
1a000fa0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a000fa2:	2060      	movs	r0, #96	; 0x60
1a000fa4:	f7ff fa3c 	bl	1a000420 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a000fa8:	4604      	mov	r4, r0
1a000faa:	b1b8      	cbz	r0, 1a000fdc <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a000fac:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a000fae:	b1e4      	cbz	r4, 1a000fea <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a000fb0:	2300      	movs	r3, #0
1a000fb2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a000fb6:	9303      	str	r3, [sp, #12]
1a000fb8:	9402      	str	r4, [sp, #8]
1a000fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a000fbc:	9301      	str	r3, [sp, #4]
1a000fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a000fc0:	9300      	str	r3, [sp, #0]
1a000fc2:	464b      	mov	r3, r9
1a000fc4:	462a      	mov	r2, r5
1a000fc6:	4641      	mov	r1, r8
1a000fc8:	4638      	mov	r0, r7
1a000fca:	f7ff fe2f 	bl	1a000c2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a000fce:	4620      	mov	r0, r4
1a000fd0:	f7ff feaa 	bl	1a000d28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a000fd4:	2001      	movs	r0, #1
	}
1a000fd6:	b005      	add	sp, #20
1a000fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a000fdc:	4630      	mov	r0, r6
1a000fde:	f7ff fa57 	bl	1a000490 <vPortFree>
1a000fe2:	e7e4      	b.n	1a000fae <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a000fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000fe8:	e7f5      	b.n	1a000fd6 <xTaskCreate+0x4c>
1a000fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a000fee:	e7f2      	b.n	1a000fd6 <xTaskCreate+0x4c>

1a000ff0 <vTaskStartScheduler>:
{
1a000ff0:	b510      	push	{r4, lr}
1a000ff2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a000ff4:	2400      	movs	r4, #0
1a000ff6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a000ff8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a000ffa:	aa07      	add	r2, sp, #28
1a000ffc:	a906      	add	r1, sp, #24
1a000ffe:	a805      	add	r0, sp, #20
1a001000:	f7ff fde4 	bl	1a000bcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001004:	9b05      	ldr	r3, [sp, #20]
1a001006:	9302      	str	r3, [sp, #8]
1a001008:	9b06      	ldr	r3, [sp, #24]
1a00100a:	9301      	str	r3, [sp, #4]
1a00100c:	9400      	str	r4, [sp, #0]
1a00100e:	4623      	mov	r3, r4
1a001010:	9a07      	ldr	r2, [sp, #28]
1a001012:	4917      	ldr	r1, [pc, #92]	; (1a001070 <vTaskStartScheduler+0x80>)
1a001014:	4817      	ldr	r0, [pc, #92]	; (1a001074 <vTaskStartScheduler+0x84>)
1a001016:	f7ff ff7f 	bl	1a000f18 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a00101a:	b140      	cbz	r0, 1a00102e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a00101c:	f000 fb90 	bl	1a001740 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001020:	2801      	cmp	r0, #1
1a001022:	d006      	beq.n	1a001032 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001024:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001028:	d018      	beq.n	1a00105c <vTaskStartScheduler+0x6c>
}
1a00102a:	b008      	add	sp, #32
1a00102c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a00102e:	2000      	movs	r0, #0
1a001030:	e7f6      	b.n	1a001020 <vTaskStartScheduler+0x30>
1a001032:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001036:	f383 8811 	msr	BASEPRI, r3
1a00103a:	f3bf 8f6f 	isb	sy
1a00103e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001042:	4b0d      	ldr	r3, [pc, #52]	; (1a001078 <vTaskStartScheduler+0x88>)
1a001044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001048:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00104a:	4b0c      	ldr	r3, [pc, #48]	; (1a00107c <vTaskStartScheduler+0x8c>)
1a00104c:	2201      	movs	r2, #1
1a00104e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001050:	4b0b      	ldr	r3, [pc, #44]	; (1a001080 <vTaskStartScheduler+0x90>)
1a001052:	2200      	movs	r2, #0
1a001054:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001056:	f000 fe4f 	bl	1a001cf8 <xPortStartScheduler>
1a00105a:	e7e6      	b.n	1a00102a <vTaskStartScheduler+0x3a>
1a00105c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001060:	f383 8811 	msr	BASEPRI, r3
1a001064:	f3bf 8f6f 	isb	sy
1a001068:	f3bf 8f4f 	dsb	sy
1a00106c:	e7fe      	b.n	1a00106c <vTaskStartScheduler+0x7c>
1a00106e:	bf00      	nop
1a001070:	1a003250 	.word	0x1a003250
1a001074:	1a000e59 	.word	0x1a000e59
1a001078:	10002948 	.word	0x10002948
1a00107c:	10002964 	.word	0x10002964
1a001080:	10002990 	.word	0x10002990

1a001084 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001084:	4a02      	ldr	r2, [pc, #8]	; (1a001090 <vTaskSuspendAll+0xc>)
1a001086:	6813      	ldr	r3, [r2, #0]
1a001088:	3301      	adds	r3, #1
1a00108a:	6013      	str	r3, [r2, #0]
}
1a00108c:	4770      	bx	lr
1a00108e:	bf00      	nop
1a001090:	10002914 	.word	0x10002914

1a001094 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001094:	4b01      	ldr	r3, [pc, #4]	; (1a00109c <xTaskGetTickCount+0x8>)
1a001096:	6818      	ldr	r0, [r3, #0]
}
1a001098:	4770      	bx	lr
1a00109a:	bf00      	nop
1a00109c:	10002990 	.word	0x10002990

1a0010a0 <xTaskIncrementTick>:
{
1a0010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0010a2:	4b3a      	ldr	r3, [pc, #232]	; (1a00118c <xTaskIncrementTick+0xec>)
1a0010a4:	681b      	ldr	r3, [r3, #0]
1a0010a6:	2b00      	cmp	r3, #0
1a0010a8:	d164      	bne.n	1a001174 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0010aa:	4b39      	ldr	r3, [pc, #228]	; (1a001190 <xTaskIncrementTick+0xf0>)
1a0010ac:	681d      	ldr	r5, [r3, #0]
1a0010ae:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a0010b0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0010b2:	b9c5      	cbnz	r5, 1a0010e6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a0010b4:	4b37      	ldr	r3, [pc, #220]	; (1a001194 <xTaskIncrementTick+0xf4>)
1a0010b6:	681b      	ldr	r3, [r3, #0]
1a0010b8:	681b      	ldr	r3, [r3, #0]
1a0010ba:	b143      	cbz	r3, 1a0010ce <xTaskIncrementTick+0x2e>
1a0010bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010c0:	f383 8811 	msr	BASEPRI, r3
1a0010c4:	f3bf 8f6f 	isb	sy
1a0010c8:	f3bf 8f4f 	dsb	sy
1a0010cc:	e7fe      	b.n	1a0010cc <xTaskIncrementTick+0x2c>
1a0010ce:	4a31      	ldr	r2, [pc, #196]	; (1a001194 <xTaskIncrementTick+0xf4>)
1a0010d0:	6811      	ldr	r1, [r2, #0]
1a0010d2:	4b31      	ldr	r3, [pc, #196]	; (1a001198 <xTaskIncrementTick+0xf8>)
1a0010d4:	6818      	ldr	r0, [r3, #0]
1a0010d6:	6010      	str	r0, [r2, #0]
1a0010d8:	6019      	str	r1, [r3, #0]
1a0010da:	4a30      	ldr	r2, [pc, #192]	; (1a00119c <xTaskIncrementTick+0xfc>)
1a0010dc:	6813      	ldr	r3, [r2, #0]
1a0010de:	3301      	adds	r3, #1
1a0010e0:	6013      	str	r3, [r2, #0]
1a0010e2:	f7ff fd8d 	bl	1a000c00 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0010e6:	4b2e      	ldr	r3, [pc, #184]	; (1a0011a0 <xTaskIncrementTick+0x100>)
1a0010e8:	681b      	ldr	r3, [r3, #0]
1a0010ea:	42ab      	cmp	r3, r5
1a0010ec:	d938      	bls.n	1a001160 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0010ee:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0010f0:	4b2c      	ldr	r3, [pc, #176]	; (1a0011a4 <xTaskIncrementTick+0x104>)
1a0010f2:	681b      	ldr	r3, [r3, #0]
1a0010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0010f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0010fa:	009a      	lsls	r2, r3, #2
1a0010fc:	4b2a      	ldr	r3, [pc, #168]	; (1a0011a8 <xTaskIncrementTick+0x108>)
1a0010fe:	589b      	ldr	r3, [r3, r2]
1a001100:	2b01      	cmp	r3, #1
1a001102:	d93c      	bls.n	1a00117e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001104:	2401      	movs	r4, #1
1a001106:	e03a      	b.n	1a00117e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001108:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00110a:	4b22      	ldr	r3, [pc, #136]	; (1a001194 <xTaskIncrementTick+0xf4>)
1a00110c:	681b      	ldr	r3, [r3, #0]
1a00110e:	681b      	ldr	r3, [r3, #0]
1a001110:	b343      	cbz	r3, 1a001164 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001112:	4b20      	ldr	r3, [pc, #128]	; (1a001194 <xTaskIncrementTick+0xf4>)
1a001114:	681b      	ldr	r3, [r3, #0]
1a001116:	68db      	ldr	r3, [r3, #12]
1a001118:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a00111a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a00111c:	429d      	cmp	r5, r3
1a00111e:	d326      	bcc.n	1a00116e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001120:	1d37      	adds	r7, r6, #4
1a001122:	4638      	mov	r0, r7
1a001124:	f7ff fd3d 	bl	1a000ba2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001128:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00112a:	b11b      	cbz	r3, 1a001134 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00112c:	f106 0018 	add.w	r0, r6, #24
1a001130:	f7ff fd37 	bl	1a000ba2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001134:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001136:	2201      	movs	r2, #1
1a001138:	409a      	lsls	r2, r3
1a00113a:	491c      	ldr	r1, [pc, #112]	; (1a0011ac <xTaskIncrementTick+0x10c>)
1a00113c:	6808      	ldr	r0, [r1, #0]
1a00113e:	4302      	orrs	r2, r0
1a001140:	600a      	str	r2, [r1, #0]
1a001142:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001146:	009a      	lsls	r2, r3, #2
1a001148:	4639      	mov	r1, r7
1a00114a:	4817      	ldr	r0, [pc, #92]	; (1a0011a8 <xTaskIncrementTick+0x108>)
1a00114c:	4410      	add	r0, r2
1a00114e:	f7ff fd02 	bl	1a000b56 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001152:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001154:	4b13      	ldr	r3, [pc, #76]	; (1a0011a4 <xTaskIncrementTick+0x104>)
1a001156:	681b      	ldr	r3, [r3, #0]
1a001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00115a:	429a      	cmp	r2, r3
1a00115c:	d2d4      	bcs.n	1a001108 <xTaskIncrementTick+0x68>
1a00115e:	e7d4      	b.n	1a00110a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001160:	2400      	movs	r4, #0
1a001162:	e7d2      	b.n	1a00110a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001164:	4b0e      	ldr	r3, [pc, #56]	; (1a0011a0 <xTaskIncrementTick+0x100>)
1a001166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00116a:	601a      	str	r2, [r3, #0]
					break;
1a00116c:	e7c0      	b.n	1a0010f0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a00116e:	4a0c      	ldr	r2, [pc, #48]	; (1a0011a0 <xTaskIncrementTick+0x100>)
1a001170:	6013      	str	r3, [r2, #0]
						break;
1a001172:	e7bd      	b.n	1a0010f0 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001174:	4a0e      	ldr	r2, [pc, #56]	; (1a0011b0 <xTaskIncrementTick+0x110>)
1a001176:	6813      	ldr	r3, [r2, #0]
1a001178:	3301      	adds	r3, #1
1a00117a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a00117c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a00117e:	4b0d      	ldr	r3, [pc, #52]	; (1a0011b4 <xTaskIncrementTick+0x114>)
1a001180:	681b      	ldr	r3, [r3, #0]
1a001182:	b103      	cbz	r3, 1a001186 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001184:	2401      	movs	r4, #1
}
1a001186:	4620      	mov	r0, r4
1a001188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00118a:	bf00      	nop
1a00118c:	10002914 	.word	0x10002914
1a001190:	10002990 	.word	0x10002990
1a001194:	10002874 	.word	0x10002874
1a001198:	10002878 	.word	0x10002878
1a00119c:	1000294c 	.word	0x1000294c
1a0011a0:	10002948 	.word	0x10002948
1a0011a4:	10002870 	.word	0x10002870
1a0011a8:	1000287c 	.word	0x1000287c
1a0011ac:	1000291c 	.word	0x1000291c
1a0011b0:	10002910 	.word	0x10002910
1a0011b4:	10002994 	.word	0x10002994

1a0011b8 <xTaskResumeAll>:
{
1a0011b8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a0011ba:	4b33      	ldr	r3, [pc, #204]	; (1a001288 <xTaskResumeAll+0xd0>)
1a0011bc:	681b      	ldr	r3, [r3, #0]
1a0011be:	b943      	cbnz	r3, 1a0011d2 <xTaskResumeAll+0x1a>
1a0011c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011c4:	f383 8811 	msr	BASEPRI, r3
1a0011c8:	f3bf 8f6f 	isb	sy
1a0011cc:	f3bf 8f4f 	dsb	sy
1a0011d0:	e7fe      	b.n	1a0011d0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a0011d2:	f000 fcef 	bl	1a001bb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a0011d6:	4b2c      	ldr	r3, [pc, #176]	; (1a001288 <xTaskResumeAll+0xd0>)
1a0011d8:	681a      	ldr	r2, [r3, #0]
1a0011da:	3a01      	subs	r2, #1
1a0011dc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0011de:	681b      	ldr	r3, [r3, #0]
1a0011e0:	2b00      	cmp	r3, #0
1a0011e2:	d14d      	bne.n	1a001280 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0011e4:	4b29      	ldr	r3, [pc, #164]	; (1a00128c <xTaskResumeAll+0xd4>)
1a0011e6:	681b      	ldr	r3, [r3, #0]
1a0011e8:	b923      	cbnz	r3, 1a0011f4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a0011ea:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0011ec:	f000 fd04 	bl	1a001bf8 <vPortExitCritical>
}
1a0011f0:	4620      	mov	r0, r4
1a0011f2:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a0011f4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0011f6:	4b26      	ldr	r3, [pc, #152]	; (1a001290 <xTaskResumeAll+0xd8>)
1a0011f8:	681b      	ldr	r3, [r3, #0]
1a0011fa:	b31b      	cbz	r3, 1a001244 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0011fc:	4b24      	ldr	r3, [pc, #144]	; (1a001290 <xTaskResumeAll+0xd8>)
1a0011fe:	68db      	ldr	r3, [r3, #12]
1a001200:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001202:	f104 0018 	add.w	r0, r4, #24
1a001206:	f7ff fccc 	bl	1a000ba2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00120a:	1d25      	adds	r5, r4, #4
1a00120c:	4628      	mov	r0, r5
1a00120e:	f7ff fcc8 	bl	1a000ba2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001214:	2201      	movs	r2, #1
1a001216:	409a      	lsls	r2, r3
1a001218:	491e      	ldr	r1, [pc, #120]	; (1a001294 <xTaskResumeAll+0xdc>)
1a00121a:	6808      	ldr	r0, [r1, #0]
1a00121c:	4302      	orrs	r2, r0
1a00121e:	600a      	str	r2, [r1, #0]
1a001220:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001224:	009a      	lsls	r2, r3, #2
1a001226:	4629      	mov	r1, r5
1a001228:	481b      	ldr	r0, [pc, #108]	; (1a001298 <xTaskResumeAll+0xe0>)
1a00122a:	4410      	add	r0, r2
1a00122c:	f7ff fc93 	bl	1a000b56 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001230:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001232:	4b1a      	ldr	r3, [pc, #104]	; (1a00129c <xTaskResumeAll+0xe4>)
1a001234:	681b      	ldr	r3, [r3, #0]
1a001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001238:	429a      	cmp	r2, r3
1a00123a:	d3dc      	bcc.n	1a0011f6 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a00123c:	4b18      	ldr	r3, [pc, #96]	; (1a0012a0 <xTaskResumeAll+0xe8>)
1a00123e:	2201      	movs	r2, #1
1a001240:	601a      	str	r2, [r3, #0]
1a001242:	e7d8      	b.n	1a0011f6 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001244:	b10c      	cbz	r4, 1a00124a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a001246:	f7ff fcdb 	bl	1a000c00 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00124a:	4b16      	ldr	r3, [pc, #88]	; (1a0012a4 <xTaskResumeAll+0xec>)
1a00124c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a00124e:	b154      	cbz	r4, 1a001266 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001250:	f7ff ff26 	bl	1a0010a0 <xTaskIncrementTick>
1a001254:	b110      	cbz	r0, 1a00125c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a001256:	4b12      	ldr	r3, [pc, #72]	; (1a0012a0 <xTaskResumeAll+0xe8>)
1a001258:	2201      	movs	r2, #1
1a00125a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a00125c:	3c01      	subs	r4, #1
1a00125e:	d1f7      	bne.n	1a001250 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001260:	4b10      	ldr	r3, [pc, #64]	; (1a0012a4 <xTaskResumeAll+0xec>)
1a001262:	2200      	movs	r2, #0
1a001264:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a001266:	4b0e      	ldr	r3, [pc, #56]	; (1a0012a0 <xTaskResumeAll+0xe8>)
1a001268:	681b      	ldr	r3, [r3, #0]
1a00126a:	b15b      	cbz	r3, 1a001284 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a00126c:	4b0e      	ldr	r3, [pc, #56]	; (1a0012a8 <xTaskResumeAll+0xf0>)
1a00126e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001272:	601a      	str	r2, [r3, #0]
1a001274:	f3bf 8f4f 	dsb	sy
1a001278:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a00127c:	2401      	movs	r4, #1
1a00127e:	e7b5      	b.n	1a0011ec <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001280:	2400      	movs	r4, #0
1a001282:	e7b3      	b.n	1a0011ec <xTaskResumeAll+0x34>
1a001284:	2400      	movs	r4, #0
1a001286:	e7b1      	b.n	1a0011ec <xTaskResumeAll+0x34>
1a001288:	10002914 	.word	0x10002914
1a00128c:	10002908 	.word	0x10002908
1a001290:	10002950 	.word	0x10002950
1a001294:	1000291c 	.word	0x1000291c
1a001298:	1000287c 	.word	0x1000287c
1a00129c:	10002870 	.word	0x10002870
1a0012a0:	10002994 	.word	0x10002994
1a0012a4:	10002910 	.word	0x10002910
1a0012a8:	e000ed04 	.word	0xe000ed04

1a0012ac <vTaskDelay>:
	{
1a0012ac:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0012ae:	b1a8      	cbz	r0, 1a0012dc <vTaskDelay+0x30>
1a0012b0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a0012b2:	4b0f      	ldr	r3, [pc, #60]	; (1a0012f0 <vTaskDelay+0x44>)
1a0012b4:	681b      	ldr	r3, [r3, #0]
1a0012b6:	b143      	cbz	r3, 1a0012ca <vTaskDelay+0x1e>
1a0012b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012bc:	f383 8811 	msr	BASEPRI, r3
1a0012c0:	f3bf 8f6f 	isb	sy
1a0012c4:	f3bf 8f4f 	dsb	sy
1a0012c8:	e7fe      	b.n	1a0012c8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a0012ca:	f7ff fedb 	bl	1a001084 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0012ce:	2100      	movs	r1, #0
1a0012d0:	4620      	mov	r0, r4
1a0012d2:	f7ff fdd5 	bl	1a000e80 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a0012d6:	f7ff ff6f 	bl	1a0011b8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0012da:	b938      	cbnz	r0, 1a0012ec <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a0012dc:	4b05      	ldr	r3, [pc, #20]	; (1a0012f4 <vTaskDelay+0x48>)
1a0012de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012e2:	601a      	str	r2, [r3, #0]
1a0012e4:	f3bf 8f4f 	dsb	sy
1a0012e8:	f3bf 8f6f 	isb	sy
	}
1a0012ec:	bd10      	pop	{r4, pc}
1a0012ee:	bf00      	nop
1a0012f0:	10002914 	.word	0x10002914
1a0012f4:	e000ed04 	.word	0xe000ed04

1a0012f8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0012f8:	4b2c      	ldr	r3, [pc, #176]	; (1a0013ac <vTaskSwitchContext+0xb4>)
1a0012fa:	681b      	ldr	r3, [r3, #0]
1a0012fc:	b11b      	cbz	r3, 1a001306 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0012fe:	4b2c      	ldr	r3, [pc, #176]	; (1a0013b0 <vTaskSwitchContext+0xb8>)
1a001300:	2201      	movs	r2, #1
1a001302:	601a      	str	r2, [r3, #0]
1a001304:	4770      	bx	lr
{
1a001306:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001308:	4b29      	ldr	r3, [pc, #164]	; (1a0013b0 <vTaskSwitchContext+0xb8>)
1a00130a:	2200      	movs	r2, #0
1a00130c:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a00130e:	4b29      	ldr	r3, [pc, #164]	; (1a0013b4 <vTaskSwitchContext+0xbc>)
1a001310:	681b      	ldr	r3, [r3, #0]
1a001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001314:	681a      	ldr	r2, [r3, #0]
1a001316:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00131a:	d103      	bne.n	1a001324 <vTaskSwitchContext+0x2c>
1a00131c:	685a      	ldr	r2, [r3, #4]
1a00131e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001322:	d01b      	beq.n	1a00135c <vTaskSwitchContext+0x64>
1a001324:	4b23      	ldr	r3, [pc, #140]	; (1a0013b4 <vTaskSwitchContext+0xbc>)
1a001326:	6818      	ldr	r0, [r3, #0]
1a001328:	6819      	ldr	r1, [r3, #0]
1a00132a:	3134      	adds	r1, #52	; 0x34
1a00132c:	f7ff fc66 	bl	1a000bfc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001330:	4b21      	ldr	r3, [pc, #132]	; (1a0013b8 <vTaskSwitchContext+0xc0>)
1a001332:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001334:	fab3 f383 	clz	r3, r3
1a001338:	b2db      	uxtb	r3, r3
1a00133a:	f1c3 031f 	rsb	r3, r3, #31
1a00133e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001342:	008a      	lsls	r2, r1, #2
1a001344:	491d      	ldr	r1, [pc, #116]	; (1a0013bc <vTaskSwitchContext+0xc4>)
1a001346:	588a      	ldr	r2, [r1, r2]
1a001348:	b98a      	cbnz	r2, 1a00136e <vTaskSwitchContext+0x76>
	__asm volatile
1a00134a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00134e:	f383 8811 	msr	BASEPRI, r3
1a001352:	f3bf 8f6f 	isb	sy
1a001356:	f3bf 8f4f 	dsb	sy
1a00135a:	e7fe      	b.n	1a00135a <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a00135c:	689a      	ldr	r2, [r3, #8]
1a00135e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001362:	d1df      	bne.n	1a001324 <vTaskSwitchContext+0x2c>
1a001364:	68db      	ldr	r3, [r3, #12]
1a001366:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00136a:	d1db      	bne.n	1a001324 <vTaskSwitchContext+0x2c>
1a00136c:	e7e0      	b.n	1a001330 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00136e:	4813      	ldr	r0, [pc, #76]	; (1a0013bc <vTaskSwitchContext+0xc4>)
1a001370:	009a      	lsls	r2, r3, #2
1a001372:	18d4      	adds	r4, r2, r3
1a001374:	00a1      	lsls	r1, r4, #2
1a001376:	4401      	add	r1, r0
1a001378:	684c      	ldr	r4, [r1, #4]
1a00137a:	6864      	ldr	r4, [r4, #4]
1a00137c:	604c      	str	r4, [r1, #4]
1a00137e:	441a      	add	r2, r3
1a001380:	0091      	lsls	r1, r2, #2
1a001382:	3108      	adds	r1, #8
1a001384:	4408      	add	r0, r1
1a001386:	4284      	cmp	r4, r0
1a001388:	d009      	beq.n	1a00139e <vTaskSwitchContext+0xa6>
1a00138a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00138e:	009a      	lsls	r2, r3, #2
1a001390:	4b0a      	ldr	r3, [pc, #40]	; (1a0013bc <vTaskSwitchContext+0xc4>)
1a001392:	4413      	add	r3, r2
1a001394:	685b      	ldr	r3, [r3, #4]
1a001396:	68da      	ldr	r2, [r3, #12]
1a001398:	4b06      	ldr	r3, [pc, #24]	; (1a0013b4 <vTaskSwitchContext+0xbc>)
1a00139a:	601a      	str	r2, [r3, #0]
}
1a00139c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00139e:	6861      	ldr	r1, [r4, #4]
1a0013a0:	4806      	ldr	r0, [pc, #24]	; (1a0013bc <vTaskSwitchContext+0xc4>)
1a0013a2:	2214      	movs	r2, #20
1a0013a4:	fb02 0203 	mla	r2, r2, r3, r0
1a0013a8:	6051      	str	r1, [r2, #4]
1a0013aa:	e7ee      	b.n	1a00138a <vTaskSwitchContext+0x92>
1a0013ac:	10002914 	.word	0x10002914
1a0013b0:	10002994 	.word	0x10002994
1a0013b4:	10002870 	.word	0x10002870
1a0013b8:	1000291c 	.word	0x1000291c
1a0013bc:	1000287c 	.word	0x1000287c

1a0013c0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0013c0:	b940      	cbnz	r0, 1a0013d4 <vTaskPlaceOnEventList+0x14>
1a0013c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013c6:	f383 8811 	msr	BASEPRI, r3
1a0013ca:	f3bf 8f6f 	isb	sy
1a0013ce:	f3bf 8f4f 	dsb	sy
1a0013d2:	e7fe      	b.n	1a0013d2 <vTaskPlaceOnEventList+0x12>
{
1a0013d4:	b510      	push	{r4, lr}
1a0013d6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0013d8:	4b04      	ldr	r3, [pc, #16]	; (1a0013ec <vTaskPlaceOnEventList+0x2c>)
1a0013da:	6819      	ldr	r1, [r3, #0]
1a0013dc:	3118      	adds	r1, #24
1a0013de:	f7ff fbc6 	bl	1a000b6e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0013e2:	2101      	movs	r1, #1
1a0013e4:	4620      	mov	r0, r4
1a0013e6:	f7ff fd4b 	bl	1a000e80 <prvAddCurrentTaskToDelayedList>
}
1a0013ea:	bd10      	pop	{r4, pc}
1a0013ec:	10002870 	.word	0x10002870

1a0013f0 <vTaskPlaceOnEventListRestricted>:
	{
1a0013f0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0013f2:	b940      	cbnz	r0, 1a001406 <vTaskPlaceOnEventListRestricted+0x16>
1a0013f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013f8:	f383 8811 	msr	BASEPRI, r3
1a0013fc:	f3bf 8f6f 	isb	sy
1a001400:	f3bf 8f4f 	dsb	sy
1a001404:	e7fe      	b.n	1a001404 <vTaskPlaceOnEventListRestricted+0x14>
1a001406:	460c      	mov	r4, r1
1a001408:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00140a:	4a06      	ldr	r2, [pc, #24]	; (1a001424 <vTaskPlaceOnEventListRestricted+0x34>)
1a00140c:	6811      	ldr	r1, [r2, #0]
1a00140e:	3118      	adds	r1, #24
1a001410:	f7ff fba1 	bl	1a000b56 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001414:	b10d      	cbz	r5, 1a00141a <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a001416:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a00141a:	4629      	mov	r1, r5
1a00141c:	4620      	mov	r0, r4
1a00141e:	f7ff fd2f 	bl	1a000e80 <prvAddCurrentTaskToDelayedList>
	}
1a001422:	bd38      	pop	{r3, r4, r5, pc}
1a001424:	10002870 	.word	0x10002870

1a001428 <xTaskRemoveFromEventList>:
{
1a001428:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00142a:	68c3      	ldr	r3, [r0, #12]
1a00142c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a00142e:	b944      	cbnz	r4, 1a001442 <xTaskRemoveFromEventList+0x1a>
1a001430:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001434:	f383 8811 	msr	BASEPRI, r3
1a001438:	f3bf 8f6f 	isb	sy
1a00143c:	f3bf 8f4f 	dsb	sy
1a001440:	e7fe      	b.n	1a001440 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001442:	f104 0518 	add.w	r5, r4, #24
1a001446:	4628      	mov	r0, r5
1a001448:	f7ff fbab 	bl	1a000ba2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00144c:	4b13      	ldr	r3, [pc, #76]	; (1a00149c <xTaskRemoveFromEventList+0x74>)
1a00144e:	681b      	ldr	r3, [r3, #0]
1a001450:	b9e3      	cbnz	r3, 1a00148c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001452:	1d25      	adds	r5, r4, #4
1a001454:	4628      	mov	r0, r5
1a001456:	f7ff fba4 	bl	1a000ba2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00145a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00145c:	2201      	movs	r2, #1
1a00145e:	409a      	lsls	r2, r3
1a001460:	490f      	ldr	r1, [pc, #60]	; (1a0014a0 <xTaskRemoveFromEventList+0x78>)
1a001462:	6808      	ldr	r0, [r1, #0]
1a001464:	4302      	orrs	r2, r0
1a001466:	600a      	str	r2, [r1, #0]
1a001468:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00146c:	009a      	lsls	r2, r3, #2
1a00146e:	4629      	mov	r1, r5
1a001470:	480c      	ldr	r0, [pc, #48]	; (1a0014a4 <xTaskRemoveFromEventList+0x7c>)
1a001472:	4410      	add	r0, r2
1a001474:	f7ff fb6f 	bl	1a000b56 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001478:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00147a:	4b0b      	ldr	r3, [pc, #44]	; (1a0014a8 <xTaskRemoveFromEventList+0x80>)
1a00147c:	681b      	ldr	r3, [r3, #0]
1a00147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001480:	429a      	cmp	r2, r3
1a001482:	d908      	bls.n	1a001496 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001484:	2001      	movs	r0, #1
1a001486:	4b09      	ldr	r3, [pc, #36]	; (1a0014ac <xTaskRemoveFromEventList+0x84>)
1a001488:	6018      	str	r0, [r3, #0]
}
1a00148a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a00148c:	4629      	mov	r1, r5
1a00148e:	4808      	ldr	r0, [pc, #32]	; (1a0014b0 <xTaskRemoveFromEventList+0x88>)
1a001490:	f7ff fb61 	bl	1a000b56 <vListInsertEnd>
1a001494:	e7f0      	b.n	1a001478 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a001496:	2000      	movs	r0, #0
	return xReturn;
1a001498:	e7f7      	b.n	1a00148a <xTaskRemoveFromEventList+0x62>
1a00149a:	bf00      	nop
1a00149c:	10002914 	.word	0x10002914
1a0014a0:	1000291c 	.word	0x1000291c
1a0014a4:	1000287c 	.word	0x1000287c
1a0014a8:	10002870 	.word	0x10002870
1a0014ac:	10002994 	.word	0x10002994
1a0014b0:	10002950 	.word	0x10002950

1a0014b4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0014b4:	4b03      	ldr	r3, [pc, #12]	; (1a0014c4 <vTaskInternalSetTimeOutState+0x10>)
1a0014b6:	681b      	ldr	r3, [r3, #0]
1a0014b8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0014ba:	4b03      	ldr	r3, [pc, #12]	; (1a0014c8 <vTaskInternalSetTimeOutState+0x14>)
1a0014bc:	681b      	ldr	r3, [r3, #0]
1a0014be:	6043      	str	r3, [r0, #4]
}
1a0014c0:	4770      	bx	lr
1a0014c2:	bf00      	nop
1a0014c4:	1000294c 	.word	0x1000294c
1a0014c8:	10002990 	.word	0x10002990

1a0014cc <xTaskCheckForTimeOut>:
{
1a0014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0014ce:	b150      	cbz	r0, 1a0014e6 <xTaskCheckForTimeOut+0x1a>
1a0014d0:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0014d2:	b989      	cbnz	r1, 1a0014f8 <xTaskCheckForTimeOut+0x2c>
1a0014d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014d8:	f383 8811 	msr	BASEPRI, r3
1a0014dc:	f3bf 8f6f 	isb	sy
1a0014e0:	f3bf 8f4f 	dsb	sy
1a0014e4:	e7fe      	b.n	1a0014e4 <xTaskCheckForTimeOut+0x18>
1a0014e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014ea:	f383 8811 	msr	BASEPRI, r3
1a0014ee:	f3bf 8f6f 	isb	sy
1a0014f2:	f3bf 8f4f 	dsb	sy
1a0014f6:	e7fe      	b.n	1a0014f6 <xTaskCheckForTimeOut+0x2a>
1a0014f8:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0014fa:	f000 fb5b 	bl	1a001bb4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0014fe:	4b11      	ldr	r3, [pc, #68]	; (1a001544 <xTaskCheckForTimeOut+0x78>)
1a001500:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001502:	6868      	ldr	r0, [r5, #4]
1a001504:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a001506:	6823      	ldr	r3, [r4, #0]
1a001508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00150c:	d016      	beq.n	1a00153c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a00150e:	682f      	ldr	r7, [r5, #0]
1a001510:	4e0d      	ldr	r6, [pc, #52]	; (1a001548 <xTaskCheckForTimeOut+0x7c>)
1a001512:	6836      	ldr	r6, [r6, #0]
1a001514:	42b7      	cmp	r7, r6
1a001516:	d001      	beq.n	1a00151c <xTaskCheckForTimeOut+0x50>
1a001518:	4288      	cmp	r0, r1
1a00151a:	d911      	bls.n	1a001540 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a00151c:	4293      	cmp	r3, r2
1a00151e:	d803      	bhi.n	1a001528 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001520:	2300      	movs	r3, #0
1a001522:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001524:	2401      	movs	r4, #1
1a001526:	e005      	b.n	1a001534 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a001528:	1a9b      	subs	r3, r3, r2
1a00152a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a00152c:	4628      	mov	r0, r5
1a00152e:	f7ff ffc1 	bl	1a0014b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001532:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001534:	f000 fb60 	bl	1a001bf8 <vPortExitCritical>
}
1a001538:	4620      	mov	r0, r4
1a00153a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a00153c:	2400      	movs	r4, #0
1a00153e:	e7f9      	b.n	1a001534 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a001540:	2401      	movs	r4, #1
1a001542:	e7f7      	b.n	1a001534 <xTaskCheckForTimeOut+0x68>
1a001544:	10002990 	.word	0x10002990
1a001548:	1000294c 	.word	0x1000294c

1a00154c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a00154c:	4b01      	ldr	r3, [pc, #4]	; (1a001554 <vTaskMissedYield+0x8>)
1a00154e:	2201      	movs	r2, #1
1a001550:	601a      	str	r2, [r3, #0]
}
1a001552:	4770      	bx	lr
1a001554:	10002994 	.word	0x10002994

1a001558 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001558:	4b05      	ldr	r3, [pc, #20]	; (1a001570 <xTaskGetSchedulerState+0x18>)
1a00155a:	681b      	ldr	r3, [r3, #0]
1a00155c:	b133      	cbz	r3, 1a00156c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00155e:	4b05      	ldr	r3, [pc, #20]	; (1a001574 <xTaskGetSchedulerState+0x1c>)
1a001560:	681b      	ldr	r3, [r3, #0]
1a001562:	b10b      	cbz	r3, 1a001568 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001564:	2000      	movs	r0, #0
	}
1a001566:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001568:	2002      	movs	r0, #2
1a00156a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a00156c:	2001      	movs	r0, #1
1a00156e:	4770      	bx	lr
1a001570:	10002964 	.word	0x10002964
1a001574:	10002914 	.word	0x10002914

1a001578 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001578:	2800      	cmp	r0, #0
1a00157a:	d049      	beq.n	1a001610 <xTaskPriorityDisinherit+0x98>
	{
1a00157c:	b538      	push	{r3, r4, r5, lr}
1a00157e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001580:	4a26      	ldr	r2, [pc, #152]	; (1a00161c <xTaskPriorityDisinherit+0xa4>)
1a001582:	6812      	ldr	r2, [r2, #0]
1a001584:	4282      	cmp	r2, r0
1a001586:	d008      	beq.n	1a00159a <xTaskPriorityDisinherit+0x22>
1a001588:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00158c:	f383 8811 	msr	BASEPRI, r3
1a001590:	f3bf 8f6f 	isb	sy
1a001594:	f3bf 8f4f 	dsb	sy
1a001598:	e7fe      	b.n	1a001598 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a00159a:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a00159c:	b942      	cbnz	r2, 1a0015b0 <xTaskPriorityDisinherit+0x38>
1a00159e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015a2:	f383 8811 	msr	BASEPRI, r3
1a0015a6:	f3bf 8f6f 	isb	sy
1a0015aa:	f3bf 8f4f 	dsb	sy
1a0015ae:	e7fe      	b.n	1a0015ae <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0015b0:	3a01      	subs	r2, #1
1a0015b2:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0015b4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0015b6:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0015b8:	4288      	cmp	r0, r1
1a0015ba:	d02b      	beq.n	1a001614 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0015bc:	bb62      	cbnz	r2, 1a001618 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0015be:	1d25      	adds	r5, r4, #4
1a0015c0:	4628      	mov	r0, r5
1a0015c2:	f7ff faee 	bl	1a000ba2 <uxListRemove>
1a0015c6:	b970      	cbnz	r0, 1a0015e6 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0015c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0015ca:	2314      	movs	r3, #20
1a0015cc:	fb03 f302 	mul.w	r3, r3, r2
1a0015d0:	4913      	ldr	r1, [pc, #76]	; (1a001620 <xTaskPriorityDisinherit+0xa8>)
1a0015d2:	58cb      	ldr	r3, [r1, r3]
1a0015d4:	b93b      	cbnz	r3, 1a0015e6 <xTaskPriorityDisinherit+0x6e>
1a0015d6:	2301      	movs	r3, #1
1a0015d8:	fa03 f202 	lsl.w	r2, r3, r2
1a0015dc:	4911      	ldr	r1, [pc, #68]	; (1a001624 <xTaskPriorityDisinherit+0xac>)
1a0015de:	680b      	ldr	r3, [r1, #0]
1a0015e0:	ea23 0302 	bic.w	r3, r3, r2
1a0015e4:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a0015e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0015e8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0015ea:	f1c3 0207 	rsb	r2, r3, #7
1a0015ee:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0015f0:	2401      	movs	r4, #1
1a0015f2:	fa04 f203 	lsl.w	r2, r4, r3
1a0015f6:	490b      	ldr	r1, [pc, #44]	; (1a001624 <xTaskPriorityDisinherit+0xac>)
1a0015f8:	6808      	ldr	r0, [r1, #0]
1a0015fa:	4302      	orrs	r2, r0
1a0015fc:	600a      	str	r2, [r1, #0]
1a0015fe:	4629      	mov	r1, r5
1a001600:	4a07      	ldr	r2, [pc, #28]	; (1a001620 <xTaskPriorityDisinherit+0xa8>)
1a001602:	2014      	movs	r0, #20
1a001604:	fb00 2003 	mla	r0, r0, r3, r2
1a001608:	f7ff faa5 	bl	1a000b56 <vListInsertEnd>
					xReturn = pdTRUE;
1a00160c:	4620      	mov	r0, r4
	}
1a00160e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001610:	2000      	movs	r0, #0
	}
1a001612:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001614:	2000      	movs	r0, #0
1a001616:	e7fa      	b.n	1a00160e <xTaskPriorityDisinherit+0x96>
1a001618:	2000      	movs	r0, #0
		return xReturn;
1a00161a:	e7f8      	b.n	1a00160e <xTaskPriorityDisinherit+0x96>
1a00161c:	10002870 	.word	0x10002870
1a001620:	1000287c 	.word	0x1000287c
1a001624:	1000291c 	.word	0x1000291c

1a001628 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001628:	4b06      	ldr	r3, [pc, #24]	; (1a001644 <prvGetNextExpireTime+0x1c>)
1a00162a:	681a      	ldr	r2, [r3, #0]
1a00162c:	6813      	ldr	r3, [r2, #0]
1a00162e:	fab3 f383 	clz	r3, r3
1a001632:	095b      	lsrs	r3, r3, #5
1a001634:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001636:	b913      	cbnz	r3, 1a00163e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001638:	68d3      	ldr	r3, [r2, #12]
1a00163a:	6818      	ldr	r0, [r3, #0]
1a00163c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a00163e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001640:	4770      	bx	lr
1a001642:	bf00      	nop
1a001644:	10002998 	.word	0x10002998

1a001648 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001648:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a00164a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a00164c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a00164e:	4291      	cmp	r1, r2
1a001650:	d80c      	bhi.n	1a00166c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001652:	1ad2      	subs	r2, r2, r3
1a001654:	6983      	ldr	r3, [r0, #24]
1a001656:	429a      	cmp	r2, r3
1a001658:	d301      	bcc.n	1a00165e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a00165a:	2001      	movs	r0, #1
1a00165c:	e010      	b.n	1a001680 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00165e:	1d01      	adds	r1, r0, #4
1a001660:	4b09      	ldr	r3, [pc, #36]	; (1a001688 <prvInsertTimerInActiveList+0x40>)
1a001662:	6818      	ldr	r0, [r3, #0]
1a001664:	f7ff fa83 	bl	1a000b6e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001668:	2000      	movs	r0, #0
1a00166a:	e009      	b.n	1a001680 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a00166c:	429a      	cmp	r2, r3
1a00166e:	d201      	bcs.n	1a001674 <prvInsertTimerInActiveList+0x2c>
1a001670:	4299      	cmp	r1, r3
1a001672:	d206      	bcs.n	1a001682 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001674:	1d01      	adds	r1, r0, #4
1a001676:	4b05      	ldr	r3, [pc, #20]	; (1a00168c <prvInsertTimerInActiveList+0x44>)
1a001678:	6818      	ldr	r0, [r3, #0]
1a00167a:	f7ff fa78 	bl	1a000b6e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00167e:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a001680:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001682:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001684:	e7fc      	b.n	1a001680 <prvInsertTimerInActiveList+0x38>
1a001686:	bf00      	nop
1a001688:	1000299c 	.word	0x1000299c
1a00168c:	10002998 	.word	0x10002998

1a001690 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001690:	b530      	push	{r4, r5, lr}
1a001692:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001694:	f000 fa8e 	bl	1a001bb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001698:	4b11      	ldr	r3, [pc, #68]	; (1a0016e0 <prvCheckForValidListAndQueue+0x50>)
1a00169a:	681b      	ldr	r3, [r3, #0]
1a00169c:	b11b      	cbz	r3, 1a0016a6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a00169e:	f000 faab 	bl	1a001bf8 <vPortExitCritical>
}
1a0016a2:	b003      	add	sp, #12
1a0016a4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0016a6:	4d0f      	ldr	r5, [pc, #60]	; (1a0016e4 <prvCheckForValidListAndQueue+0x54>)
1a0016a8:	4628      	mov	r0, r5
1a0016aa:	f7ff fa46 	bl	1a000b3a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0016ae:	4c0e      	ldr	r4, [pc, #56]	; (1a0016e8 <prvCheckForValidListAndQueue+0x58>)
1a0016b0:	4620      	mov	r0, r4
1a0016b2:	f7ff fa42 	bl	1a000b3a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0016b6:	4b0d      	ldr	r3, [pc, #52]	; (1a0016ec <prvCheckForValidListAndQueue+0x5c>)
1a0016b8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0016ba:	4b0d      	ldr	r3, [pc, #52]	; (1a0016f0 <prvCheckForValidListAndQueue+0x60>)
1a0016bc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0016be:	2300      	movs	r3, #0
1a0016c0:	9300      	str	r3, [sp, #0]
1a0016c2:	4b0c      	ldr	r3, [pc, #48]	; (1a0016f4 <prvCheckForValidListAndQueue+0x64>)
1a0016c4:	4a0c      	ldr	r2, [pc, #48]	; (1a0016f8 <prvCheckForValidListAndQueue+0x68>)
1a0016c6:	2110      	movs	r1, #16
1a0016c8:	200a      	movs	r0, #10
1a0016ca:	f7fe ffe0 	bl	1a00068e <xQueueGenericCreateStatic>
1a0016ce:	4b04      	ldr	r3, [pc, #16]	; (1a0016e0 <prvCheckForValidListAndQueue+0x50>)
1a0016d0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a0016d2:	2800      	cmp	r0, #0
1a0016d4:	d0e3      	beq.n	1a00169e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a0016d6:	4909      	ldr	r1, [pc, #36]	; (1a0016fc <prvCheckForValidListAndQueue+0x6c>)
1a0016d8:	f7ff f9f2 	bl	1a000ac0 <vQueueAddToRegistry>
1a0016dc:	e7df      	b.n	1a00169e <prvCheckForValidListAndQueue+0xe>
1a0016de:	bf00      	nop
1a0016e0:	10002abc 	.word	0x10002abc
1a0016e4:	10002a40 	.word	0x10002a40
1a0016e8:	10002a54 	.word	0x10002a54
1a0016ec:	10002998 	.word	0x10002998
1a0016f0:	1000299c 	.word	0x1000299c
1a0016f4:	10002a6c 	.word	0x10002a6c
1a0016f8:	100029a0 	.word	0x100029a0
1a0016fc:	1a003258 	.word	0x1a003258

1a001700 <prvInitialiseNewTimer>:
{
1a001700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001704:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a001706:	b941      	cbnz	r1, 1a00171a <prvInitialiseNewTimer+0x1a>
1a001708:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00170c:	f383 8811 	msr	BASEPRI, r3
1a001710:	f3bf 8f6f 	isb	sy
1a001714:	f3bf 8f4f 	dsb	sy
1a001718:	e7fe      	b.n	1a001718 <prvInitialiseNewTimer+0x18>
1a00171a:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a00171c:	b174      	cbz	r4, 1a00173c <prvInitialiseNewTimer+0x3c>
1a00171e:	461d      	mov	r5, r3
1a001720:	4616      	mov	r6, r2
1a001722:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a001724:	f7ff ffb4 	bl	1a001690 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a001728:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a00172c:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a00172e:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a001730:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a001732:	9b06      	ldr	r3, [sp, #24]
1a001734:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a001736:	1d20      	adds	r0, r4, #4
1a001738:	f7ff fa0a 	bl	1a000b50 <vListInitialiseItem>
}
1a00173c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001740 <xTimerCreateTimerTask>:
{
1a001740:	b510      	push	{r4, lr}
1a001742:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001744:	f7ff ffa4 	bl	1a001690 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001748:	4b12      	ldr	r3, [pc, #72]	; (1a001794 <xTimerCreateTimerTask+0x54>)
1a00174a:	681b      	ldr	r3, [r3, #0]
1a00174c:	b1cb      	cbz	r3, 1a001782 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a00174e:	2400      	movs	r4, #0
1a001750:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001752:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001754:	aa07      	add	r2, sp, #28
1a001756:	a906      	add	r1, sp, #24
1a001758:	a805      	add	r0, sp, #20
1a00175a:	f7ff fa43 	bl	1a000be4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a00175e:	9b05      	ldr	r3, [sp, #20]
1a001760:	9302      	str	r3, [sp, #8]
1a001762:	9b06      	ldr	r3, [sp, #24]
1a001764:	9301      	str	r3, [sp, #4]
1a001766:	2304      	movs	r3, #4
1a001768:	9300      	str	r3, [sp, #0]
1a00176a:	4623      	mov	r3, r4
1a00176c:	9a07      	ldr	r2, [sp, #28]
1a00176e:	490a      	ldr	r1, [pc, #40]	; (1a001798 <xTimerCreateTimerTask+0x58>)
1a001770:	480a      	ldr	r0, [pc, #40]	; (1a00179c <xTimerCreateTimerTask+0x5c>)
1a001772:	f7ff fbd1 	bl	1a000f18 <xTaskCreateStatic>
1a001776:	4b0a      	ldr	r3, [pc, #40]	; (1a0017a0 <xTimerCreateTimerTask+0x60>)
1a001778:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a00177a:	b110      	cbz	r0, 1a001782 <xTimerCreateTimerTask+0x42>
}
1a00177c:	2001      	movs	r0, #1
1a00177e:	b008      	add	sp, #32
1a001780:	bd10      	pop	{r4, pc}
1a001782:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001786:	f383 8811 	msr	BASEPRI, r3
1a00178a:	f3bf 8f6f 	isb	sy
1a00178e:	f3bf 8f4f 	dsb	sy
1a001792:	e7fe      	b.n	1a001792 <xTimerCreateTimerTask+0x52>
1a001794:	10002abc 	.word	0x10002abc
1a001798:	1a003260 	.word	0x1a003260
1a00179c:	1a001ad1 	.word	0x1a001ad1
1a0017a0:	10002ac0 	.word	0x10002ac0

1a0017a4 <xTimerCreateStatic>:
	{
1a0017a4:	b530      	push	{r4, r5, lr}
1a0017a6:	b085      	sub	sp, #20
1a0017a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a0017aa:	2530      	movs	r5, #48	; 0x30
1a0017ac:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a0017ae:	9d03      	ldr	r5, [sp, #12]
1a0017b0:	2d30      	cmp	r5, #48	; 0x30
1a0017b2:	d008      	beq.n	1a0017c6 <xTimerCreateStatic+0x22>
1a0017b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017b8:	f383 8811 	msr	BASEPRI, r3
1a0017bc:	f3bf 8f6f 	isb	sy
1a0017c0:	f3bf 8f4f 	dsb	sy
1a0017c4:	e7fe      	b.n	1a0017c4 <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a0017c6:	b944      	cbnz	r4, 1a0017da <xTimerCreateStatic+0x36>
1a0017c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017cc:	f383 8811 	msr	BASEPRI, r3
1a0017d0:	f3bf 8f6f 	isb	sy
1a0017d4:	f3bf 8f4f 	dsb	sy
1a0017d8:	e7fe      	b.n	1a0017d8 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a0017da:	9401      	str	r4, [sp, #4]
1a0017dc:	9d08      	ldr	r5, [sp, #32]
1a0017de:	9500      	str	r5, [sp, #0]
1a0017e0:	f7ff ff8e 	bl	1a001700 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a0017e4:	2301      	movs	r3, #1
1a0017e6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a0017ea:	4620      	mov	r0, r4
1a0017ec:	b005      	add	sp, #20
1a0017ee:	bd30      	pop	{r4, r5, pc}

1a0017f0 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a0017f0:	b1c8      	cbz	r0, 1a001826 <xTimerGenericCommand+0x36>
{
1a0017f2:	b530      	push	{r4, r5, lr}
1a0017f4:	b085      	sub	sp, #20
1a0017f6:	4615      	mov	r5, r2
1a0017f8:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a0017fa:	4a17      	ldr	r2, [pc, #92]	; (1a001858 <xTimerGenericCommand+0x68>)
1a0017fc:	6810      	ldr	r0, [r2, #0]
1a0017fe:	b340      	cbz	r0, 1a001852 <xTimerGenericCommand+0x62>
1a001800:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001802:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001804:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001806:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001808:	2905      	cmp	r1, #5
1a00180a:	dc1d      	bgt.n	1a001848 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a00180c:	f7ff fea4 	bl	1a001558 <xTaskGetSchedulerState>
1a001810:	2802      	cmp	r0, #2
1a001812:	d011      	beq.n	1a001838 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001814:	2300      	movs	r3, #0
1a001816:	461a      	mov	r2, r3
1a001818:	4669      	mov	r1, sp
1a00181a:	480f      	ldr	r0, [pc, #60]	; (1a001858 <xTimerGenericCommand+0x68>)
1a00181c:	6800      	ldr	r0, [r0, #0]
1a00181e:	f7fe ff7f 	bl	1a000720 <xQueueGenericSend>
}
1a001822:	b005      	add	sp, #20
1a001824:	bd30      	pop	{r4, r5, pc}
1a001826:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00182a:	f383 8811 	msr	BASEPRI, r3
1a00182e:	f3bf 8f6f 	isb	sy
1a001832:	f3bf 8f4f 	dsb	sy
1a001836:	e7fe      	b.n	1a001836 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001838:	2300      	movs	r3, #0
1a00183a:	9a08      	ldr	r2, [sp, #32]
1a00183c:	4669      	mov	r1, sp
1a00183e:	4806      	ldr	r0, [pc, #24]	; (1a001858 <xTimerGenericCommand+0x68>)
1a001840:	6800      	ldr	r0, [r0, #0]
1a001842:	f7fe ff6d 	bl	1a000720 <xQueueGenericSend>
1a001846:	e7ec      	b.n	1a001822 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001848:	2300      	movs	r3, #0
1a00184a:	4669      	mov	r1, sp
1a00184c:	f7ff f826 	bl	1a00089c <xQueueGenericSendFromISR>
1a001850:	e7e7      	b.n	1a001822 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a001852:	2000      	movs	r0, #0
	return xReturn;
1a001854:	e7e5      	b.n	1a001822 <xTimerGenericCommand+0x32>
1a001856:	bf00      	nop
1a001858:	10002abc 	.word	0x10002abc

1a00185c <prvSwitchTimerLists>:
{
1a00185c:	b570      	push	{r4, r5, r6, lr}
1a00185e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001860:	4b1a      	ldr	r3, [pc, #104]	; (1a0018cc <prvSwitchTimerLists+0x70>)
1a001862:	681b      	ldr	r3, [r3, #0]
1a001864:	681a      	ldr	r2, [r3, #0]
1a001866:	b352      	cbz	r2, 1a0018be <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001868:	68db      	ldr	r3, [r3, #12]
1a00186a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00186c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00186e:	1d25      	adds	r5, r4, #4
1a001870:	4628      	mov	r0, r5
1a001872:	f7ff f996 	bl	1a000ba2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001876:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001878:	4620      	mov	r0, r4
1a00187a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00187c:	69e3      	ldr	r3, [r4, #28]
1a00187e:	2b01      	cmp	r3, #1
1a001880:	d1ee      	bne.n	1a001860 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001882:	69a3      	ldr	r3, [r4, #24]
1a001884:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001886:	429e      	cmp	r6, r3
1a001888:	d207      	bcs.n	1a00189a <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a00188a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a00188c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a00188e:	4629      	mov	r1, r5
1a001890:	4b0e      	ldr	r3, [pc, #56]	; (1a0018cc <prvSwitchTimerLists+0x70>)
1a001892:	6818      	ldr	r0, [r3, #0]
1a001894:	f7ff f96b 	bl	1a000b6e <vListInsert>
1a001898:	e7e2      	b.n	1a001860 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00189a:	2100      	movs	r1, #0
1a00189c:	9100      	str	r1, [sp, #0]
1a00189e:	460b      	mov	r3, r1
1a0018a0:	4632      	mov	r2, r6
1a0018a2:	4620      	mov	r0, r4
1a0018a4:	f7ff ffa4 	bl	1a0017f0 <xTimerGenericCommand>
				configASSERT( xResult );
1a0018a8:	2800      	cmp	r0, #0
1a0018aa:	d1d9      	bne.n	1a001860 <prvSwitchTimerLists+0x4>
1a0018ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018b0:	f383 8811 	msr	BASEPRI, r3
1a0018b4:	f3bf 8f6f 	isb	sy
1a0018b8:	f3bf 8f4f 	dsb	sy
1a0018bc:	e7fe      	b.n	1a0018bc <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a0018be:	4a04      	ldr	r2, [pc, #16]	; (1a0018d0 <prvSwitchTimerLists+0x74>)
1a0018c0:	6810      	ldr	r0, [r2, #0]
1a0018c2:	4902      	ldr	r1, [pc, #8]	; (1a0018cc <prvSwitchTimerLists+0x70>)
1a0018c4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a0018c6:	6013      	str	r3, [r2, #0]
}
1a0018c8:	b002      	add	sp, #8
1a0018ca:	bd70      	pop	{r4, r5, r6, pc}
1a0018cc:	10002998 	.word	0x10002998
1a0018d0:	1000299c 	.word	0x1000299c

1a0018d4 <prvSampleTimeNow>:
{
1a0018d4:	b538      	push	{r3, r4, r5, lr}
1a0018d6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a0018d8:	f7ff fbdc 	bl	1a001094 <xTaskGetTickCount>
1a0018dc:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a0018de:	4b07      	ldr	r3, [pc, #28]	; (1a0018fc <prvSampleTimeNow+0x28>)
1a0018e0:	681b      	ldr	r3, [r3, #0]
1a0018e2:	4283      	cmp	r3, r0
1a0018e4:	d805      	bhi.n	1a0018f2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a0018e6:	2300      	movs	r3, #0
1a0018e8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a0018ea:	4b04      	ldr	r3, [pc, #16]	; (1a0018fc <prvSampleTimeNow+0x28>)
1a0018ec:	601c      	str	r4, [r3, #0]
}
1a0018ee:	4620      	mov	r0, r4
1a0018f0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a0018f2:	f7ff ffb3 	bl	1a00185c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a0018f6:	2301      	movs	r3, #1
1a0018f8:	602b      	str	r3, [r5, #0]
1a0018fa:	e7f6      	b.n	1a0018ea <prvSampleTimeNow+0x16>
1a0018fc:	10002a68 	.word	0x10002a68

1a001900 <prvProcessExpiredTimer>:
{
1a001900:	b570      	push	{r4, r5, r6, lr}
1a001902:	b082      	sub	sp, #8
1a001904:	4605      	mov	r5, r0
1a001906:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001908:	4b14      	ldr	r3, [pc, #80]	; (1a00195c <prvProcessExpiredTimer+0x5c>)
1a00190a:	681b      	ldr	r3, [r3, #0]
1a00190c:	68db      	ldr	r3, [r3, #12]
1a00190e:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001910:	1d20      	adds	r0, r4, #4
1a001912:	f7ff f946 	bl	1a000ba2 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001916:	69e3      	ldr	r3, [r4, #28]
1a001918:	2b01      	cmp	r3, #1
1a00191a:	d004      	beq.n	1a001926 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00191c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00191e:	4620      	mov	r0, r4
1a001920:	4798      	blx	r3
}
1a001922:	b002      	add	sp, #8
1a001924:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001926:	69a1      	ldr	r1, [r4, #24]
1a001928:	462b      	mov	r3, r5
1a00192a:	4632      	mov	r2, r6
1a00192c:	4429      	add	r1, r5
1a00192e:	4620      	mov	r0, r4
1a001930:	f7ff fe8a 	bl	1a001648 <prvInsertTimerInActiveList>
1a001934:	2800      	cmp	r0, #0
1a001936:	d0f1      	beq.n	1a00191c <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001938:	2100      	movs	r1, #0
1a00193a:	9100      	str	r1, [sp, #0]
1a00193c:	460b      	mov	r3, r1
1a00193e:	462a      	mov	r2, r5
1a001940:	4620      	mov	r0, r4
1a001942:	f7ff ff55 	bl	1a0017f0 <xTimerGenericCommand>
			configASSERT( xResult );
1a001946:	2800      	cmp	r0, #0
1a001948:	d1e8      	bne.n	1a00191c <prvProcessExpiredTimer+0x1c>
1a00194a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00194e:	f383 8811 	msr	BASEPRI, r3
1a001952:	f3bf 8f6f 	isb	sy
1a001956:	f3bf 8f4f 	dsb	sy
1a00195a:	e7fe      	b.n	1a00195a <prvProcessExpiredTimer+0x5a>
1a00195c:	10002998 	.word	0x10002998

1a001960 <prvProcessTimerOrBlockTask>:
{
1a001960:	b570      	push	{r4, r5, r6, lr}
1a001962:	b082      	sub	sp, #8
1a001964:	4606      	mov	r6, r0
1a001966:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a001968:	f7ff fb8c 	bl	1a001084 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a00196c:	a801      	add	r0, sp, #4
1a00196e:	f7ff ffb1 	bl	1a0018d4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001972:	9b01      	ldr	r3, [sp, #4]
1a001974:	bb1b      	cbnz	r3, 1a0019be <prvProcessTimerOrBlockTask+0x5e>
1a001976:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a001978:	b90c      	cbnz	r4, 1a00197e <prvProcessTimerOrBlockTask+0x1e>
1a00197a:	42b0      	cmp	r0, r6
1a00197c:	d218      	bcs.n	1a0019b0 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a00197e:	b12c      	cbz	r4, 1a00198c <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001980:	4b11      	ldr	r3, [pc, #68]	; (1a0019c8 <prvProcessTimerOrBlockTask+0x68>)
1a001982:	681b      	ldr	r3, [r3, #0]
1a001984:	681c      	ldr	r4, [r3, #0]
1a001986:	fab4 f484 	clz	r4, r4
1a00198a:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a00198c:	4622      	mov	r2, r4
1a00198e:	1b71      	subs	r1, r6, r5
1a001990:	4b0e      	ldr	r3, [pc, #56]	; (1a0019cc <prvProcessTimerOrBlockTask+0x6c>)
1a001992:	6818      	ldr	r0, [r3, #0]
1a001994:	f7ff f8a8 	bl	1a000ae8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a001998:	f7ff fc0e 	bl	1a0011b8 <xTaskResumeAll>
1a00199c:	b988      	cbnz	r0, 1a0019c2 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a00199e:	4b0c      	ldr	r3, [pc, #48]	; (1a0019d0 <prvProcessTimerOrBlockTask+0x70>)
1a0019a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019a4:	601a      	str	r2, [r3, #0]
1a0019a6:	f3bf 8f4f 	dsb	sy
1a0019aa:	f3bf 8f6f 	isb	sy
1a0019ae:	e008      	b.n	1a0019c2 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a0019b0:	f7ff fc02 	bl	1a0011b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a0019b4:	4629      	mov	r1, r5
1a0019b6:	4630      	mov	r0, r6
1a0019b8:	f7ff ffa2 	bl	1a001900 <prvProcessExpiredTimer>
1a0019bc:	e001      	b.n	1a0019c2 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a0019be:	f7ff fbfb 	bl	1a0011b8 <xTaskResumeAll>
}
1a0019c2:	b002      	add	sp, #8
1a0019c4:	bd70      	pop	{r4, r5, r6, pc}
1a0019c6:	bf00      	nop
1a0019c8:	1000299c 	.word	0x1000299c
1a0019cc:	10002abc 	.word	0x10002abc
1a0019d0:	e000ed04 	.word	0xe000ed04

1a0019d4 <prvProcessReceivedCommands>:
{
1a0019d4:	b530      	push	{r4, r5, lr}
1a0019d6:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0019d8:	e002      	b.n	1a0019e0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a0019da:	9b04      	ldr	r3, [sp, #16]
1a0019dc:	2b00      	cmp	r3, #0
1a0019de:	da0f      	bge.n	1a001a00 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0019e0:	2200      	movs	r2, #0
1a0019e2:	a904      	add	r1, sp, #16
1a0019e4:	4b39      	ldr	r3, [pc, #228]	; (1a001acc <prvProcessReceivedCommands+0xf8>)
1a0019e6:	6818      	ldr	r0, [r3, #0]
1a0019e8:	f7fe ffbe 	bl	1a000968 <xQueueReceive>
1a0019ec:	2800      	cmp	r0, #0
1a0019ee:	d06a      	beq.n	1a001ac6 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a0019f0:	9b04      	ldr	r3, [sp, #16]
1a0019f2:	2b00      	cmp	r3, #0
1a0019f4:	daf1      	bge.n	1a0019da <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a0019f6:	9907      	ldr	r1, [sp, #28]
1a0019f8:	9806      	ldr	r0, [sp, #24]
1a0019fa:	9b05      	ldr	r3, [sp, #20]
1a0019fc:	4798      	blx	r3
1a0019fe:	e7ec      	b.n	1a0019da <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a001a00:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a001a02:	6963      	ldr	r3, [r4, #20]
1a001a04:	b113      	cbz	r3, 1a001a0c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001a06:	1d20      	adds	r0, r4, #4
1a001a08:	f7ff f8cb 	bl	1a000ba2 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001a0c:	a803      	add	r0, sp, #12
1a001a0e:	f7ff ff61 	bl	1a0018d4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a001a12:	9b04      	ldr	r3, [sp, #16]
1a001a14:	2b09      	cmp	r3, #9
1a001a16:	d8e3      	bhi.n	1a0019e0 <prvProcessReceivedCommands+0xc>
1a001a18:	a201      	add	r2, pc, #4	; (adr r2, 1a001a20 <prvProcessReceivedCommands+0x4c>)
1a001a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001a1e:	bf00      	nop
1a001a20:	1a001a49 	.word	0x1a001a49
1a001a24:	1a001a49 	.word	0x1a001a49
1a001a28:	1a001a49 	.word	0x1a001a49
1a001a2c:	1a0019e1 	.word	0x1a0019e1
1a001a30:	1a001a91 	.word	0x1a001a91
1a001a34:	1a001ab7 	.word	0x1a001ab7
1a001a38:	1a001a49 	.word	0x1a001a49
1a001a3c:	1a001a49 	.word	0x1a001a49
1a001a40:	1a0019e1 	.word	0x1a0019e1
1a001a44:	1a001a91 	.word	0x1a001a91
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a001a48:	9905      	ldr	r1, [sp, #20]
1a001a4a:	69a5      	ldr	r5, [r4, #24]
1a001a4c:	460b      	mov	r3, r1
1a001a4e:	4602      	mov	r2, r0
1a001a50:	4429      	add	r1, r5
1a001a52:	4620      	mov	r0, r4
1a001a54:	f7ff fdf8 	bl	1a001648 <prvInsertTimerInActiveList>
1a001a58:	2800      	cmp	r0, #0
1a001a5a:	d0c1      	beq.n	1a0019e0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001a5e:	4620      	mov	r0, r4
1a001a60:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001a62:	69e3      	ldr	r3, [r4, #28]
1a001a64:	2b01      	cmp	r3, #1
1a001a66:	d1bb      	bne.n	1a0019e0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001a68:	69a2      	ldr	r2, [r4, #24]
1a001a6a:	2100      	movs	r1, #0
1a001a6c:	9100      	str	r1, [sp, #0]
1a001a6e:	460b      	mov	r3, r1
1a001a70:	9805      	ldr	r0, [sp, #20]
1a001a72:	4402      	add	r2, r0
1a001a74:	4620      	mov	r0, r4
1a001a76:	f7ff febb 	bl	1a0017f0 <xTimerGenericCommand>
							configASSERT( xResult );
1a001a7a:	2800      	cmp	r0, #0
1a001a7c:	d1b0      	bne.n	1a0019e0 <prvProcessReceivedCommands+0xc>
1a001a7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a82:	f383 8811 	msr	BASEPRI, r3
1a001a86:	f3bf 8f6f 	isb	sy
1a001a8a:	f3bf 8f4f 	dsb	sy
1a001a8e:	e7fe      	b.n	1a001a8e <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001a90:	9905      	ldr	r1, [sp, #20]
1a001a92:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001a94:	b131      	cbz	r1, 1a001aa4 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001a96:	4603      	mov	r3, r0
1a001a98:	4602      	mov	r2, r0
1a001a9a:	4401      	add	r1, r0
1a001a9c:	4620      	mov	r0, r4
1a001a9e:	f7ff fdd3 	bl	1a001648 <prvInsertTimerInActiveList>
					break;
1a001aa2:	e79d      	b.n	1a0019e0 <prvProcessReceivedCommands+0xc>
1a001aa4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aa8:	f383 8811 	msr	BASEPRI, r3
1a001aac:	f3bf 8f6f 	isb	sy
1a001ab0:	f3bf 8f4f 	dsb	sy
1a001ab4:	e7fe      	b.n	1a001ab4 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a001ab6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a001aba:	2b00      	cmp	r3, #0
1a001abc:	d190      	bne.n	1a0019e0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a001abe:	4620      	mov	r0, r4
1a001ac0:	f7fe fce6 	bl	1a000490 <vPortFree>
1a001ac4:	e78c      	b.n	1a0019e0 <prvProcessReceivedCommands+0xc>
}
1a001ac6:	b009      	add	sp, #36	; 0x24
1a001ac8:	bd30      	pop	{r4, r5, pc}
1a001aca:	bf00      	nop
1a001acc:	10002abc 	.word	0x10002abc

1a001ad0 <prvTimerTask>:
{
1a001ad0:	b500      	push	{lr}
1a001ad2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a001ad4:	a801      	add	r0, sp, #4
1a001ad6:	f7ff fda7 	bl	1a001628 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a001ada:	9901      	ldr	r1, [sp, #4]
1a001adc:	f7ff ff40 	bl	1a001960 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a001ae0:	f7ff ff78 	bl	1a0019d4 <prvProcessReceivedCommands>
1a001ae4:	e7f6      	b.n	1a001ad4 <prvTimerTask+0x4>
1a001ae6:	Address 0x000000001a001ae6 is out of bounds.


1a001ae8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001ae8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001aea:	2300      	movs	r3, #0
1a001aec:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001aee:	4b0d      	ldr	r3, [pc, #52]	; (1a001b24 <prvTaskExitError+0x3c>)
1a001af0:	681b      	ldr	r3, [r3, #0]
1a001af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001af6:	d008      	beq.n	1a001b0a <prvTaskExitError+0x22>
1a001af8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001afc:	f383 8811 	msr	BASEPRI, r3
1a001b00:	f3bf 8f6f 	isb	sy
1a001b04:	f3bf 8f4f 	dsb	sy
1a001b08:	e7fe      	b.n	1a001b08 <prvTaskExitError+0x20>
1a001b0a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b0e:	f383 8811 	msr	BASEPRI, r3
1a001b12:	f3bf 8f6f 	isb	sy
1a001b16:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a001b1a:	9b01      	ldr	r3, [sp, #4]
1a001b1c:	2b00      	cmp	r3, #0
1a001b1e:	d0fc      	beq.n	1a001b1a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001b20:	b002      	add	sp, #8
1a001b22:	4770      	bx	lr
1a001b24:	10000000 	.word	0x10000000

1a001b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a001b28:	4808      	ldr	r0, [pc, #32]	; (1a001b4c <prvPortStartFirstTask+0x24>)
1a001b2a:	6800      	ldr	r0, [r0, #0]
1a001b2c:	6800      	ldr	r0, [r0, #0]
1a001b2e:	f380 8808 	msr	MSP, r0
1a001b32:	f04f 0000 	mov.w	r0, #0
1a001b36:	f380 8814 	msr	CONTROL, r0
1a001b3a:	b662      	cpsie	i
1a001b3c:	b661      	cpsie	f
1a001b3e:	f3bf 8f4f 	dsb	sy
1a001b42:	f3bf 8f6f 	isb	sy
1a001b46:	df00      	svc	0
1a001b48:	bf00      	nop
1a001b4a:	0000      	.short	0x0000
1a001b4c:	e000ed08 	.word	0xe000ed08

1a001b50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001b50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001b60 <vPortEnableVFP+0x10>
1a001b54:	6801      	ldr	r1, [r0, #0]
1a001b56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001b5a:	6001      	str	r1, [r0, #0]
1a001b5c:	4770      	bx	lr
1a001b5e:	0000      	.short	0x0000
1a001b60:	e000ed88 	.word	0xe000ed88

1a001b64 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001b68:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001b6c:	f021 0101 	bic.w	r1, r1, #1
1a001b70:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001b74:	4b05      	ldr	r3, [pc, #20]	; (1a001b8c <pxPortInitialiseStack+0x28>)
1a001b76:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a001b7a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001b7e:	f06f 0302 	mvn.w	r3, #2
1a001b82:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a001b86:	3844      	subs	r0, #68	; 0x44
1a001b88:	4770      	bx	lr
1a001b8a:	bf00      	nop
1a001b8c:	1a001ae9 	.word	0x1a001ae9

1a001b90 <SVC_Handler>:
	__asm volatile (
1a001b90:	4b07      	ldr	r3, [pc, #28]	; (1a001bb0 <pxCurrentTCBConst2>)
1a001b92:	6819      	ldr	r1, [r3, #0]
1a001b94:	6808      	ldr	r0, [r1, #0]
1a001b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001b9a:	f380 8809 	msr	PSP, r0
1a001b9e:	f3bf 8f6f 	isb	sy
1a001ba2:	f04f 0000 	mov.w	r0, #0
1a001ba6:	f380 8811 	msr	BASEPRI, r0
1a001baa:	4770      	bx	lr
1a001bac:	f3af 8000 	nop.w

1a001bb0 <pxCurrentTCBConst2>:
1a001bb0:	10002870 	.word	0x10002870

1a001bb4 <vPortEnterCritical>:
1a001bb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bb8:	f383 8811 	msr	BASEPRI, r3
1a001bbc:	f3bf 8f6f 	isb	sy
1a001bc0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a001bc4:	4a0a      	ldr	r2, [pc, #40]	; (1a001bf0 <vPortEnterCritical+0x3c>)
1a001bc6:	6813      	ldr	r3, [r2, #0]
1a001bc8:	3301      	adds	r3, #1
1a001bca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a001bcc:	2b01      	cmp	r3, #1
1a001bce:	d000      	beq.n	1a001bd2 <vPortEnterCritical+0x1e>
}
1a001bd0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a001bd2:	4b08      	ldr	r3, [pc, #32]	; (1a001bf4 <vPortEnterCritical+0x40>)
1a001bd4:	681b      	ldr	r3, [r3, #0]
1a001bd6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001bda:	d0f9      	beq.n	1a001bd0 <vPortEnterCritical+0x1c>
1a001bdc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001be0:	f383 8811 	msr	BASEPRI, r3
1a001be4:	f3bf 8f6f 	isb	sy
1a001be8:	f3bf 8f4f 	dsb	sy
1a001bec:	e7fe      	b.n	1a001bec <vPortEnterCritical+0x38>
1a001bee:	bf00      	nop
1a001bf0:	10000000 	.word	0x10000000
1a001bf4:	e000ed04 	.word	0xe000ed04

1a001bf8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a001bf8:	4b09      	ldr	r3, [pc, #36]	; (1a001c20 <vPortExitCritical+0x28>)
1a001bfa:	681b      	ldr	r3, [r3, #0]
1a001bfc:	b943      	cbnz	r3, 1a001c10 <vPortExitCritical+0x18>
1a001bfe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c02:	f383 8811 	msr	BASEPRI, r3
1a001c06:	f3bf 8f6f 	isb	sy
1a001c0a:	f3bf 8f4f 	dsb	sy
1a001c0e:	e7fe      	b.n	1a001c0e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a001c10:	3b01      	subs	r3, #1
1a001c12:	4a03      	ldr	r2, [pc, #12]	; (1a001c20 <vPortExitCritical+0x28>)
1a001c14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a001c16:	b90b      	cbnz	r3, 1a001c1c <vPortExitCritical+0x24>
	__asm volatile
1a001c18:	f383 8811 	msr	BASEPRI, r3
}
1a001c1c:	4770      	bx	lr
1a001c1e:	bf00      	nop
1a001c20:	10000000 	.word	0x10000000
1a001c24:	ffffffff 	.word	0xffffffff
1a001c28:	ffffffff 	.word	0xffffffff
1a001c2c:	ffffffff 	.word	0xffffffff

1a001c30 <PendSV_Handler>:
	__asm volatile
1a001c30:	f3ef 8009 	mrs	r0, PSP
1a001c34:	f3bf 8f6f 	isb	sy
1a001c38:	4b15      	ldr	r3, [pc, #84]	; (1a001c90 <pxCurrentTCBConst>)
1a001c3a:	681a      	ldr	r2, [r3, #0]
1a001c3c:	f01e 0f10 	tst.w	lr, #16
1a001c40:	bf08      	it	eq
1a001c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a001c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001c4a:	6010      	str	r0, [r2, #0]
1a001c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a001c50:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a001c54:	f380 8811 	msr	BASEPRI, r0
1a001c58:	f3bf 8f4f 	dsb	sy
1a001c5c:	f3bf 8f6f 	isb	sy
1a001c60:	f7ff fb4a 	bl	1a0012f8 <vTaskSwitchContext>
1a001c64:	f04f 0000 	mov.w	r0, #0
1a001c68:	f380 8811 	msr	BASEPRI, r0
1a001c6c:	bc09      	pop	{r0, r3}
1a001c6e:	6819      	ldr	r1, [r3, #0]
1a001c70:	6808      	ldr	r0, [r1, #0]
1a001c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001c76:	f01e 0f10 	tst.w	lr, #16
1a001c7a:	bf08      	it	eq
1a001c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a001c80:	f380 8809 	msr	PSP, r0
1a001c84:	f3bf 8f6f 	isb	sy
1a001c88:	4770      	bx	lr
1a001c8a:	bf00      	nop
1a001c8c:	f3af 8000 	nop.w

1a001c90 <pxCurrentTCBConst>:
1a001c90:	10002870 	.word	0x10002870

1a001c94 <SysTick_Handler>:
{
1a001c94:	b508      	push	{r3, lr}
	__asm volatile
1a001c96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c9a:	f383 8811 	msr	BASEPRI, r3
1a001c9e:	f3bf 8f6f 	isb	sy
1a001ca2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a001ca6:	f7ff f9fb 	bl	1a0010a0 <xTaskIncrementTick>
1a001caa:	b118      	cbz	r0, 1a001cb4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a001cac:	4b03      	ldr	r3, [pc, #12]	; (1a001cbc <SysTick_Handler+0x28>)
1a001cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001cb2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a001cb4:	2300      	movs	r3, #0
1a001cb6:	f383 8811 	msr	BASEPRI, r3
}
1a001cba:	bd08      	pop	{r3, pc}
1a001cbc:	e000ed04 	.word	0xe000ed04

1a001cc0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a001cc0:	4a08      	ldr	r2, [pc, #32]	; (1a001ce4 <vPortSetupTimerInterrupt+0x24>)
1a001cc2:	2300      	movs	r3, #0
1a001cc4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a001cc6:	4908      	ldr	r1, [pc, #32]	; (1a001ce8 <vPortSetupTimerInterrupt+0x28>)
1a001cc8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a001cca:	4b08      	ldr	r3, [pc, #32]	; (1a001cec <vPortSetupTimerInterrupt+0x2c>)
1a001ccc:	681b      	ldr	r3, [r3, #0]
1a001cce:	4908      	ldr	r1, [pc, #32]	; (1a001cf0 <vPortSetupTimerInterrupt+0x30>)
1a001cd0:	fba1 1303 	umull	r1, r3, r1, r3
1a001cd4:	099b      	lsrs	r3, r3, #6
1a001cd6:	3b01      	subs	r3, #1
1a001cd8:	4906      	ldr	r1, [pc, #24]	; (1a001cf4 <vPortSetupTimerInterrupt+0x34>)
1a001cda:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a001cdc:	2307      	movs	r3, #7
1a001cde:	6013      	str	r3, [r2, #0]
}
1a001ce0:	4770      	bx	lr
1a001ce2:	bf00      	nop
1a001ce4:	e000e010 	.word	0xe000e010
1a001ce8:	e000e018 	.word	0xe000e018
1a001cec:	10002b58 	.word	0x10002b58
1a001cf0:	10624dd3 	.word	0x10624dd3
1a001cf4:	e000e014 	.word	0xe000e014

1a001cf8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a001cf8:	4b3a      	ldr	r3, [pc, #232]	; (1a001de4 <xPortStartScheduler+0xec>)
1a001cfa:	681a      	ldr	r2, [r3, #0]
1a001cfc:	4b3a      	ldr	r3, [pc, #232]	; (1a001de8 <xPortStartScheduler+0xf0>)
1a001cfe:	429a      	cmp	r2, r3
1a001d00:	d00d      	beq.n	1a001d1e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a001d02:	4b38      	ldr	r3, [pc, #224]	; (1a001de4 <xPortStartScheduler+0xec>)
1a001d04:	681a      	ldr	r2, [r3, #0]
1a001d06:	4b39      	ldr	r3, [pc, #228]	; (1a001dec <xPortStartScheduler+0xf4>)
1a001d08:	429a      	cmp	r2, r3
1a001d0a:	d111      	bne.n	1a001d30 <xPortStartScheduler+0x38>
	__asm volatile
1a001d0c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d10:	f383 8811 	msr	BASEPRI, r3
1a001d14:	f3bf 8f6f 	isb	sy
1a001d18:	f3bf 8f4f 	dsb	sy
1a001d1c:	e7fe      	b.n	1a001d1c <xPortStartScheduler+0x24>
1a001d1e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d22:	f383 8811 	msr	BASEPRI, r3
1a001d26:	f3bf 8f6f 	isb	sy
1a001d2a:	f3bf 8f4f 	dsb	sy
1a001d2e:	e7fe      	b.n	1a001d2e <xPortStartScheduler+0x36>
{
1a001d30:	b510      	push	{r4, lr}
1a001d32:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a001d34:	4b2e      	ldr	r3, [pc, #184]	; (1a001df0 <xPortStartScheduler+0xf8>)
1a001d36:	781a      	ldrb	r2, [r3, #0]
1a001d38:	b2d2      	uxtb	r2, r2
1a001d3a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a001d3c:	22ff      	movs	r2, #255	; 0xff
1a001d3e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a001d40:	781b      	ldrb	r3, [r3, #0]
1a001d42:	b2db      	uxtb	r3, r3
1a001d44:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a001d48:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001d4c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a001d50:	4a28      	ldr	r2, [pc, #160]	; (1a001df4 <xPortStartScheduler+0xfc>)
1a001d52:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a001d54:	4b28      	ldr	r3, [pc, #160]	; (1a001df8 <xPortStartScheduler+0x100>)
1a001d56:	2207      	movs	r2, #7
1a001d58:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a001d5a:	e009      	b.n	1a001d70 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a001d5c:	4a26      	ldr	r2, [pc, #152]	; (1a001df8 <xPortStartScheduler+0x100>)
1a001d5e:	6813      	ldr	r3, [r2, #0]
1a001d60:	3b01      	subs	r3, #1
1a001d62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a001d64:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001d68:	005b      	lsls	r3, r3, #1
1a001d6a:	b2db      	uxtb	r3, r3
1a001d6c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a001d70:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001d74:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001d78:	d1f0      	bne.n	1a001d5c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a001d7a:	4b1f      	ldr	r3, [pc, #124]	; (1a001df8 <xPortStartScheduler+0x100>)
1a001d7c:	681b      	ldr	r3, [r3, #0]
1a001d7e:	2b04      	cmp	r3, #4
1a001d80:	d008      	beq.n	1a001d94 <xPortStartScheduler+0x9c>
1a001d82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d86:	f383 8811 	msr	BASEPRI, r3
1a001d8a:	f3bf 8f6f 	isb	sy
1a001d8e:	f3bf 8f4f 	dsb	sy
1a001d92:	e7fe      	b.n	1a001d92 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a001d94:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a001d96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a001d9a:	4a17      	ldr	r2, [pc, #92]	; (1a001df8 <xPortStartScheduler+0x100>)
1a001d9c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a001d9e:	9b01      	ldr	r3, [sp, #4]
1a001da0:	b2db      	uxtb	r3, r3
1a001da2:	4a13      	ldr	r2, [pc, #76]	; (1a001df0 <xPortStartScheduler+0xf8>)
1a001da4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a001da6:	4b15      	ldr	r3, [pc, #84]	; (1a001dfc <xPortStartScheduler+0x104>)
1a001da8:	681a      	ldr	r2, [r3, #0]
1a001daa:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a001dae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a001db0:	681a      	ldr	r2, [r3, #0]
1a001db2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a001db6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a001db8:	f7ff ff82 	bl	1a001cc0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a001dbc:	2400      	movs	r4, #0
1a001dbe:	4b10      	ldr	r3, [pc, #64]	; (1a001e00 <xPortStartScheduler+0x108>)
1a001dc0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a001dc2:	f7ff fec5 	bl	1a001b50 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a001dc6:	4a0f      	ldr	r2, [pc, #60]	; (1a001e04 <xPortStartScheduler+0x10c>)
1a001dc8:	6813      	ldr	r3, [r2, #0]
1a001dca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a001dce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a001dd0:	f7ff feaa 	bl	1a001b28 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a001dd4:	f7ff fa90 	bl	1a0012f8 <vTaskSwitchContext>
	prvTaskExitError();
1a001dd8:	f7ff fe86 	bl	1a001ae8 <prvTaskExitError>
}
1a001ddc:	4620      	mov	r0, r4
1a001dde:	b002      	add	sp, #8
1a001de0:	bd10      	pop	{r4, pc}
1a001de2:	bf00      	nop
1a001de4:	e000ed00 	.word	0xe000ed00
1a001de8:	410fc271 	.word	0x410fc271
1a001dec:	410fc270 	.word	0x410fc270
1a001df0:	e000e400 	.word	0xe000e400
1a001df4:	10002ac4 	.word	0x10002ac4
1a001df8:	10002ac8 	.word	0x10002ac8
1a001dfc:	e000ed20 	.word	0xe000ed20
1a001e00:	10000000 	.word	0x10000000
1a001e04:	e000ef34 	.word	0xe000ef34

1a001e08 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a001e08:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a001e0c:	2b0f      	cmp	r3, #15
1a001e0e:	d90f      	bls.n	1a001e30 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a001e10:	4a10      	ldr	r2, [pc, #64]	; (1a001e54 <vPortValidateInterruptPriority+0x4c>)
1a001e12:	5c9b      	ldrb	r3, [r3, r2]
1a001e14:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a001e16:	4a10      	ldr	r2, [pc, #64]	; (1a001e58 <vPortValidateInterruptPriority+0x50>)
1a001e18:	7812      	ldrb	r2, [r2, #0]
1a001e1a:	429a      	cmp	r2, r3
1a001e1c:	d908      	bls.n	1a001e30 <vPortValidateInterruptPriority+0x28>
1a001e1e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e22:	f383 8811 	msr	BASEPRI, r3
1a001e26:	f3bf 8f6f 	isb	sy
1a001e2a:	f3bf 8f4f 	dsb	sy
1a001e2e:	e7fe      	b.n	1a001e2e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a001e30:	4b0a      	ldr	r3, [pc, #40]	; (1a001e5c <vPortValidateInterruptPriority+0x54>)
1a001e32:	681b      	ldr	r3, [r3, #0]
1a001e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a001e38:	4a09      	ldr	r2, [pc, #36]	; (1a001e60 <vPortValidateInterruptPriority+0x58>)
1a001e3a:	6812      	ldr	r2, [r2, #0]
1a001e3c:	4293      	cmp	r3, r2
1a001e3e:	d908      	bls.n	1a001e52 <vPortValidateInterruptPriority+0x4a>
1a001e40:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e44:	f383 8811 	msr	BASEPRI, r3
1a001e48:	f3bf 8f6f 	isb	sy
1a001e4c:	f3bf 8f4f 	dsb	sy
1a001e50:	e7fe      	b.n	1a001e50 <vPortValidateInterruptPriority+0x48>
	}
1a001e52:	4770      	bx	lr
1a001e54:	e000e3f0 	.word	0xe000e3f0
1a001e58:	10002ac4 	.word	0x10002ac4
1a001e5c:	e000ed0c 	.word	0xe000ed0c
1a001e60:	10002ac8 	.word	0x10002ac8

1a001e64 <Board_Debug_Init>:
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
}


void Board_Debug_Init(void)
{
1a001e64:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a001e66:	4c07      	ldr	r4, [pc, #28]	; (1a001e84 <Board_Debug_Init+0x20>)
1a001e68:	4620      	mov	r0, r4
1a001e6a:	f000 f87f 	bl	1a001f6c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a001e6e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001e72:	4620      	mov	r0, r4
1a001e74:	f000 f8c4 	bl	1a002000 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001e78:	2303      	movs	r3, #3
1a001e7a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a001e7c:	2301      	movs	r3, #1
1a001e7e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a001e80:	bd10      	pop	{r4, pc}
1a001e82:	bf00      	nop
1a001e84:	400c1000 	.word	0x400c1000

1a001e88 <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a001e88:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a001e8a:	f7ff ffeb 	bl	1a001e64 <Board_Debug_Init>
1a001e8e:	bd08      	pop	{r3, pc}

1a001e90 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001e90:	2300      	movs	r3, #0
1a001e92:	2b1c      	cmp	r3, #28
1a001e94:	d812      	bhi.n	1a001ebc <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a001e96:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001e98:	4a09      	ldr	r2, [pc, #36]	; (1a001ec0 <Board_SetupMuxing+0x30>)
1a001e9a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a001e9e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001ea2:	784a      	ldrb	r2, [r1, #1]
1a001ea4:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001ea6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a001eaa:	4906      	ldr	r1, [pc, #24]	; (1a001ec4 <Board_SetupMuxing+0x34>)
1a001eac:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001eb0:	3301      	adds	r3, #1
1a001eb2:	2b1c      	cmp	r3, #28
1a001eb4:	d9f0      	bls.n	1a001e98 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a001eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001eba:	4770      	bx	lr
1a001ebc:	4770      	bx	lr
1a001ebe:	bf00      	nop
1a001ec0:	1a003274 	.word	0x1a003274
1a001ec4:	40086000 	.word	0x40086000

1a001ec8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a001ec8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a001eca:	4a17      	ldr	r2, [pc, #92]	; (1a001f28 <Board_SetupClocking+0x60>)
1a001ecc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001ed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001ed4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001ed8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001edc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001ee4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001ee8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001eec:	2201      	movs	r2, #1
1a001eee:	490f      	ldr	r1, [pc, #60]	; (1a001f2c <Board_SetupClocking+0x64>)
1a001ef0:	2006      	movs	r0, #6
1a001ef2:	f000 fbb3 	bl	1a00265c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001ef6:	2400      	movs	r4, #0
1a001ef8:	b14c      	cbz	r4, 1a001f0e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001efa:	4b0b      	ldr	r3, [pc, #44]	; (1a001f28 <Board_SetupClocking+0x60>)
1a001efc:	685a      	ldr	r2, [r3, #4]
1a001efe:	f022 020c 	bic.w	r2, r2, #12
1a001f02:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001f04:	685a      	ldr	r2, [r3, #4]
1a001f06:	f042 0203 	orr.w	r2, r2, #3
1a001f0a:	605a      	str	r2, [r3, #4]
}
1a001f0c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a001f0e:	4808      	ldr	r0, [pc, #32]	; (1a001f30 <Board_SetupClocking+0x68>)
1a001f10:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001f14:	2301      	movs	r3, #1
1a001f16:	788a      	ldrb	r2, [r1, #2]
1a001f18:	7849      	ldrb	r1, [r1, #1]
1a001f1a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001f1e:	f000 fb07 	bl	1a002530 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001f22:	3401      	adds	r4, #1
1a001f24:	e7e8      	b.n	1a001ef8 <Board_SetupClocking+0x30>
1a001f26:	bf00      	nop
1a001f28:	40043000 	.word	0x40043000
1a001f2c:	0c28cb00 	.word	0x0c28cb00
1a001f30:	1a003270 	.word	0x1a003270

1a001f34 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a001f34:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a001f36:	f7ff ffab 	bl	1a001e90 <Board_SetupMuxing>
    Board_SetupClocking();
1a001f3a:	f7ff ffc5 	bl	1a001ec8 <Board_SetupClocking>
}
1a001f3e:	bd08      	pop	{r3, pc}

1a001f40 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001f40:	4b09      	ldr	r3, [pc, #36]	; (1a001f68 <Chip_UART_GetIndex+0x28>)
1a001f42:	4298      	cmp	r0, r3
1a001f44:	d009      	beq.n	1a001f5a <Chip_UART_GetIndex+0x1a>
1a001f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001f4a:	4298      	cmp	r0, r3
1a001f4c:	d007      	beq.n	1a001f5e <Chip_UART_GetIndex+0x1e>
1a001f4e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001f52:	4298      	cmp	r0, r3
1a001f54:	d005      	beq.n	1a001f62 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001f56:	2000      	movs	r0, #0
1a001f58:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001f5a:	2002      	movs	r0, #2
1a001f5c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001f5e:	2003      	movs	r0, #3
1a001f60:	4770      	bx	lr
			return 1;
1a001f62:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a001f64:	4770      	bx	lr
1a001f66:	bf00      	nop
1a001f68:	400c1000 	.word	0x400c1000

1a001f6c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001f6c:	b530      	push	{r4, r5, lr}
1a001f6e:	b083      	sub	sp, #12
1a001f70:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001f72:	f7ff ffe5 	bl	1a001f40 <Chip_UART_GetIndex>
1a001f76:	2301      	movs	r3, #1
1a001f78:	461a      	mov	r2, r3
1a001f7a:	4619      	mov	r1, r3
1a001f7c:	4d0e      	ldr	r5, [pc, #56]	; (1a001fb8 <Chip_UART_Init+0x4c>)
1a001f7e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a001f82:	f000 fb1b 	bl	1a0025bc <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a001f86:	2307      	movs	r3, #7
1a001f88:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001f8a:	2300      	movs	r3, #0
1a001f8c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001f8e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001f90:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a001f92:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001f94:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001f96:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001f98:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001f9a:	4b08      	ldr	r3, [pc, #32]	; (1a001fbc <Chip_UART_Init+0x50>)
1a001f9c:	429c      	cmp	r4, r3
1a001f9e:	d006      	beq.n	1a001fae <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001fa0:	2303      	movs	r3, #3
1a001fa2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001fa4:	2310      	movs	r3, #16
1a001fa6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001fa8:	9b01      	ldr	r3, [sp, #4]
}
1a001faa:	b003      	add	sp, #12
1a001fac:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a001fae:	2300      	movs	r3, #0
1a001fb0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a001fb2:	69a3      	ldr	r3, [r4, #24]
1a001fb4:	9301      	str	r3, [sp, #4]
1a001fb6:	e7f3      	b.n	1a001fa0 <Chip_UART_Init+0x34>
1a001fb8:	1a0032f0 	.word	0x1a0032f0
1a001fbc:	40082000 	.word	0x40082000

1a001fc0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001fc0:	b538      	push	{r3, r4, r5, lr}
1a001fc2:	4605      	mov	r5, r0
1a001fc4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001fc6:	f7ff ffbb 	bl	1a001f40 <Chip_UART_GetIndex>
1a001fca:	4b0c      	ldr	r3, [pc, #48]	; (1a001ffc <Chip_UART_SetBaud+0x3c>)
1a001fcc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001fd0:	f000 fb12 	bl	1a0025f8 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a001fd4:	0123      	lsls	r3, r4, #4
1a001fd6:	fbb0 f3f3 	udiv	r3, r0, r3
1a001fda:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001fdc:	68ea      	ldr	r2, [r5, #12]
1a001fde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001fe2:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001fe4:	6029      	str	r1, [r5, #0]
1a001fe6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a001fea:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001fec:	68ea      	ldr	r2, [r5, #12]
1a001fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a001ff2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a001ff4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a001ff8:	0900      	lsrs	r0, r0, #4
1a001ffa:	bd38      	pop	{r3, r4, r5, pc}
1a001ffc:	1a0032e8 	.word	0x1a0032e8

1a002000 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002004:	b083      	sub	sp, #12
1a002006:	4683      	mov	fp, r0
1a002008:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00200a:	f7ff ff99 	bl	1a001f40 <Chip_UART_GetIndex>
1a00200e:	4b35      	ldr	r3, [pc, #212]	; (1a0020e4 <Chip_UART_SetBaudFDR+0xe4>)
1a002010:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002014:	f000 faf0 	bl	1a0025f8 <Chip_Clock_GetRate>
1a002018:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00201a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00201e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002020:	2300      	movs	r3, #0
1a002022:	9301      	str	r3, [sp, #4]
1a002024:	46a2      	mov	sl, r4
1a002026:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002028:	e02a      	b.n	1a002080 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00202a:	4242      	negs	r2, r0
				div ++;
1a00202c:	1c4b      	adds	r3, r1, #1
1a00202e:	e017      	b.n	1a002060 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002030:	b30a      	cbz	r2, 1a002076 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002032:	4617      	mov	r7, r2
			sd = d;
1a002034:	9501      	str	r5, [sp, #4]
			sm = m;
1a002036:	46a2      	mov	sl, r4
			sdiv = div;
1a002038:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00203a:	3501      	adds	r5, #1
1a00203c:	42ac      	cmp	r4, r5
1a00203e:	d91e      	bls.n	1a00207e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002040:	0933      	lsrs	r3, r6, #4
1a002042:	0730      	lsls	r0, r6, #28
1a002044:	fba4 0100 	umull	r0, r1, r4, r0
1a002048:	fb04 1103 	mla	r1, r4, r3, r1
1a00204c:	1962      	adds	r2, r4, r5
1a00204e:	fb08 f202 	mul.w	r2, r8, r2
1a002052:	2300      	movs	r3, #0
1a002054:	f000 ff2e 	bl	1a002eb4 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002058:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00205a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00205c:	2800      	cmp	r0, #0
1a00205e:	dbe4      	blt.n	1a00202a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002060:	4297      	cmp	r7, r2
1a002062:	d3ea      	bcc.n	1a00203a <Chip_UART_SetBaudFDR+0x3a>
1a002064:	2b00      	cmp	r3, #0
1a002066:	d0e8      	beq.n	1a00203a <Chip_UART_SetBaudFDR+0x3a>
1a002068:	0c19      	lsrs	r1, r3, #16
1a00206a:	d1e6      	bne.n	1a00203a <Chip_UART_SetBaudFDR+0x3a>
1a00206c:	2b02      	cmp	r3, #2
1a00206e:	d8df      	bhi.n	1a002030 <Chip_UART_SetBaudFDR+0x30>
1a002070:	2d00      	cmp	r5, #0
1a002072:	d0dd      	beq.n	1a002030 <Chip_UART_SetBaudFDR+0x30>
1a002074:	e7e1      	b.n	1a00203a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002076:	4617      	mov	r7, r2
			sd = d;
1a002078:	9501      	str	r5, [sp, #4]
			sm = m;
1a00207a:	46a2      	mov	sl, r4
			sdiv = div;
1a00207c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00207e:	3401      	adds	r4, #1
1a002080:	b11f      	cbz	r7, 1a00208a <Chip_UART_SetBaudFDR+0x8a>
1a002082:	2c0f      	cmp	r4, #15
1a002084:	d801      	bhi.n	1a00208a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002086:	2500      	movs	r5, #0
1a002088:	e7d8      	b.n	1a00203c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00208a:	f1b9 0f00 	cmp.w	r9, #0
1a00208e:	d024      	beq.n	1a0020da <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002090:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002098:	f8cb 300c 	str.w	r3, [fp, #12]
1a00209c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0020a0:	f8cb 3000 	str.w	r3, [fp]
1a0020a4:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0020a8:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0020ac:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0020b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0020b4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0020b8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0020bc:	b2db      	uxtb	r3, r3
1a0020be:	9901      	ldr	r1, [sp, #4]
1a0020c0:	f001 020f 	and.w	r2, r1, #15
1a0020c4:	4313      	orrs	r3, r2
1a0020c6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0020ca:	0933      	lsrs	r3, r6, #4
1a0020cc:	fb0a f303 	mul.w	r3, sl, r3
1a0020d0:	448a      	add	sl, r1
1a0020d2:	fb09 f90a 	mul.w	r9, r9, sl
1a0020d6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0020da:	4648      	mov	r0, r9
1a0020dc:	b003      	add	sp, #12
1a0020de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0020e2:	bf00      	nop
1a0020e4:	1a0032e8 	.word	0x1a0032e8

1a0020e8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0020e8:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0020ea:	680b      	ldr	r3, [r1, #0]
1a0020ec:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0020f0:	d002      	beq.n	1a0020f8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0020f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0020f6:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0020f8:	4607      	mov	r7, r0
1a0020fa:	2501      	movs	r5, #1
1a0020fc:	e03b      	b.n	1a002176 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0020fe:	694b      	ldr	r3, [r1, #20]
1a002100:	fb03 f302 	mul.w	r3, r3, r2
1a002104:	fbb3 f3f5 	udiv	r3, r3, r5
1a002108:	e014      	b.n	1a002134 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00210a:	461c      	mov	r4, r3
1a00210c:	e020      	b.n	1a002150 <pll_calc_divs+0x68>
		return -val;
1a00210e:	f1cc 0c00 	rsb	ip, ip, #0
1a002112:	e020      	b.n	1a002156 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002114:	3201      	adds	r2, #1
1a002116:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00211a:	dc26      	bgt.n	1a00216a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a00211c:	680c      	ldr	r4, [r1, #0]
1a00211e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002122:	d0ec      	beq.n	1a0020fe <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002124:	1c73      	adds	r3, r6, #1
1a002126:	fa02 fc03 	lsl.w	ip, r2, r3
1a00212a:	694b      	ldr	r3, [r1, #20]
1a00212c:	fb03 f30c 	mul.w	r3, r3, ip
1a002130:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002134:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a002184 <pll_calc_divs+0x9c>
1a002138:	4563      	cmp	r3, ip
1a00213a:	d9eb      	bls.n	1a002114 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a00213c:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a002188 <pll_calc_divs+0xa0>
1a002140:	4563      	cmp	r3, ip
1a002142:	d812      	bhi.n	1a00216a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002144:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002148:	d1df      	bne.n	1a00210a <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a00214a:	1c74      	adds	r4, r6, #1
1a00214c:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a002150:	ebb0 0c04 	subs.w	ip, r0, r4
1a002154:	d4db      	bmi.n	1a00210e <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a002156:	4567      	cmp	r7, ip
1a002158:	d9dc      	bls.n	1a002114 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a00215a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a00215c:	1c77      	adds	r7, r6, #1
1a00215e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002160:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002162:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002164:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002166:	4667      	mov	r7, ip
1a002168:	e7d4      	b.n	1a002114 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a00216a:	3601      	adds	r6, #1
1a00216c:	2e03      	cmp	r6, #3
1a00216e:	dc01      	bgt.n	1a002174 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a002170:	2201      	movs	r2, #1
1a002172:	e7d0      	b.n	1a002116 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a002174:	3501      	adds	r5, #1
1a002176:	2d04      	cmp	r5, #4
1a002178:	dc01      	bgt.n	1a00217e <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a00217a:	2600      	movs	r6, #0
1a00217c:	e7f6      	b.n	1a00216c <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a00217e:	bcf0      	pop	{r4, r5, r6, r7}
1a002180:	4770      	bx	lr
1a002182:	bf00      	nop
1a002184:	094c5eff 	.word	0x094c5eff
1a002188:	1312d000 	.word	0x1312d000

1a00218c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00218c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00218e:	b099      	sub	sp, #100	; 0x64
1a002190:	4605      	mov	r5, r0
1a002192:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002194:	225c      	movs	r2, #92	; 0x5c
1a002196:	2100      	movs	r1, #0
1a002198:	a801      	add	r0, sp, #4
1a00219a:	f001 f83a 	bl	1a003212 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00219e:	2380      	movs	r3, #128	; 0x80
1a0021a0:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0021a2:	6963      	ldr	r3, [r4, #20]
1a0021a4:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0021a6:	7923      	ldrb	r3, [r4, #4]
1a0021a8:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0021ac:	4669      	mov	r1, sp
1a0021ae:	4628      	mov	r0, r5
1a0021b0:	f7ff ff9a 	bl	1a0020e8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0021b4:	9b06      	ldr	r3, [sp, #24]
1a0021b6:	42ab      	cmp	r3, r5
1a0021b8:	d027      	beq.n	1a00220a <pll_get_frac+0x7e>
	if (val < 0)
1a0021ba:	1aeb      	subs	r3, r5, r3
1a0021bc:	d42e      	bmi.n	1a00221c <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0021be:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0021c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0021c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0021c6:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0021c8:	6963      	ldr	r3, [r4, #20]
1a0021ca:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0021cc:	7923      	ldrb	r3, [r4, #4]
1a0021ce:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0021d2:	a910      	add	r1, sp, #64	; 0x40
1a0021d4:	4628      	mov	r0, r5
1a0021d6:	f7ff ff87 	bl	1a0020e8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0021da:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0021dc:	42ab      	cmp	r3, r5
1a0021de:	d01f      	beq.n	1a002220 <pll_get_frac+0x94>
	if (val < 0)
1a0021e0:	1aeb      	subs	r3, r5, r3
1a0021e2:	d425      	bmi.n	1a002230 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0021e4:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0021e6:	4b2b      	ldr	r3, [pc, #172]	; (1a002294 <pll_get_frac+0x108>)
1a0021e8:	429d      	cmp	r5, r3
1a0021ea:	d923      	bls.n	1a002234 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0021ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0021ee:	1aed      	subs	r5, r5, r3
1a0021f0:	d433      	bmi.n	1a00225a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0021f2:	42ae      	cmp	r6, r5
1a0021f4:	dc3b      	bgt.n	1a00226e <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0021f6:	42be      	cmp	r6, r7
1a0021f8:	dc31      	bgt.n	1a00225e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0021fa:	466d      	mov	r5, sp
1a0021fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0021fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002200:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002208:	e006      	b.n	1a002218 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00220a:	466d      	mov	r5, sp
1a00220c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00220e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002210:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002218:	b019      	add	sp, #100	; 0x64
1a00221a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a00221c:	425b      	negs	r3, r3
1a00221e:	e7ce      	b.n	1a0021be <pll_get_frac+0x32>
		*ppll = pll[2];
1a002220:	ad10      	add	r5, sp, #64	; 0x40
1a002222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002226:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00222a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00222e:	e7f3      	b.n	1a002218 <pll_get_frac+0x8c>
		return -val;
1a002230:	425b      	negs	r3, r3
1a002232:	e7d7      	b.n	1a0021e4 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002234:	2340      	movs	r3, #64	; 0x40
1a002236:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002238:	6963      	ldr	r3, [r4, #20]
1a00223a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a00223c:	a908      	add	r1, sp, #32
1a00223e:	4628      	mov	r0, r5
1a002240:	f7ff ff52 	bl	1a0020e8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002246:	42ab      	cmp	r3, r5
1a002248:	d1d0      	bne.n	1a0021ec <pll_get_frac+0x60>
			*ppll = pll[1];
1a00224a:	ad08      	add	r5, sp, #32
1a00224c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00224e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002250:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002258:	e7de      	b.n	1a002218 <pll_get_frac+0x8c>
		return -val;
1a00225a:	426d      	negs	r5, r5
1a00225c:	e7c9      	b.n	1a0021f2 <pll_get_frac+0x66>
			*ppll = pll[2];
1a00225e:	ad10      	add	r5, sp, #64	; 0x40
1a002260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002264:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00226c:	e7d4      	b.n	1a002218 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00226e:	42af      	cmp	r7, r5
1a002270:	db07      	blt.n	1a002282 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002272:	ad08      	add	r5, sp, #32
1a002274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002278:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00227c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002280:	e7ca      	b.n	1a002218 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002282:	ad10      	add	r5, sp, #64	; 0x40
1a002284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002288:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00228c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002290:	e7c2      	b.n	1a002218 <pll_get_frac+0x8c>
1a002292:	bf00      	nop
1a002294:	068e7780 	.word	0x068e7780

1a002298 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002298:	b430      	push	{r4, r5}
1a00229a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a00229c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00229e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0022a0:	e000      	b.n	1a0022a4 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0022a2:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0022a4:	281c      	cmp	r0, #28
1a0022a6:	d118      	bne.n	1a0022da <Chip_Clock_FindBaseClock+0x42>
1a0022a8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0022ac:	0051      	lsls	r1, r2, #1
1a0022ae:	4a0c      	ldr	r2, [pc, #48]	; (1a0022e0 <Chip_Clock_FindBaseClock+0x48>)
1a0022b0:	440a      	add	r2, r1
1a0022b2:	7914      	ldrb	r4, [r2, #4]
1a0022b4:	4284      	cmp	r4, r0
1a0022b6:	d010      	beq.n	1a0022da <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0022b8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0022bc:	004a      	lsls	r2, r1, #1
1a0022be:	4908      	ldr	r1, [pc, #32]	; (1a0022e0 <Chip_Clock_FindBaseClock+0x48>)
1a0022c0:	5a8a      	ldrh	r2, [r1, r2]
1a0022c2:	42aa      	cmp	r2, r5
1a0022c4:	d8ed      	bhi.n	1a0022a2 <Chip_Clock_FindBaseClock+0xa>
1a0022c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0022ca:	0051      	lsls	r1, r2, #1
1a0022cc:	4a04      	ldr	r2, [pc, #16]	; (1a0022e0 <Chip_Clock_FindBaseClock+0x48>)
1a0022ce:	440a      	add	r2, r1
1a0022d0:	8852      	ldrh	r2, [r2, #2]
1a0022d2:	42aa      	cmp	r2, r5
1a0022d4:	d3e5      	bcc.n	1a0022a2 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0022d6:	4620      	mov	r0, r4
1a0022d8:	e7e4      	b.n	1a0022a4 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0022da:	bc30      	pop	{r4, r5}
1a0022dc:	4770      	bx	lr
1a0022de:	bf00      	nop
1a0022e0:	1a003304 	.word	0x1a003304

1a0022e4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0022e4:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0022e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0022ea:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0022ec:	4a0d      	ldr	r2, [pc, #52]	; (1a002324 <Chip_Clock_EnableCrystal+0x40>)
1a0022ee:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0022f0:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0022f4:	6992      	ldr	r2, [r2, #24]
1a0022f6:	428a      	cmp	r2, r1
1a0022f8:	d001      	beq.n	1a0022fe <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0022fa:	4a0a      	ldr	r2, [pc, #40]	; (1a002324 <Chip_Clock_EnableCrystal+0x40>)
1a0022fc:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0022fe:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002302:	4a09      	ldr	r2, [pc, #36]	; (1a002328 <Chip_Clock_EnableCrystal+0x44>)
1a002304:	6811      	ldr	r1, [r2, #0]
1a002306:	4a09      	ldr	r2, [pc, #36]	; (1a00232c <Chip_Clock_EnableCrystal+0x48>)
1a002308:	4291      	cmp	r1, r2
1a00230a:	d901      	bls.n	1a002310 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a00230c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002310:	4a04      	ldr	r2, [pc, #16]	; (1a002324 <Chip_Clock_EnableCrystal+0x40>)
1a002312:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002314:	9b01      	ldr	r3, [sp, #4]
1a002316:	1e5a      	subs	r2, r3, #1
1a002318:	9201      	str	r2, [sp, #4]
1a00231a:	2b00      	cmp	r3, #0
1a00231c:	d1fa      	bne.n	1a002314 <Chip_Clock_EnableCrystal+0x30>
}
1a00231e:	b002      	add	sp, #8
1a002320:	4770      	bx	lr
1a002322:	bf00      	nop
1a002324:	40050000 	.word	0x40050000
1a002328:	1a00326c 	.word	0x1a00326c
1a00232c:	01312cff 	.word	0x01312cff

1a002330 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002330:	3012      	adds	r0, #18
1a002332:	4b05      	ldr	r3, [pc, #20]	; (1a002348 <Chip_Clock_GetDividerSource+0x18>)
1a002334:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002338:	f010 0f01 	tst.w	r0, #1
1a00233c:	d102      	bne.n	1a002344 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00233e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002342:	4770      	bx	lr
		return CLKINPUT_PD;
1a002344:	2011      	movs	r0, #17
}
1a002346:	4770      	bx	lr
1a002348:	40050000 	.word	0x40050000

1a00234c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00234c:	f100 0212 	add.w	r2, r0, #18
1a002350:	4b03      	ldr	r3, [pc, #12]	; (1a002360 <Chip_Clock_GetDividerDivisor+0x14>)
1a002352:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002356:	4b03      	ldr	r3, [pc, #12]	; (1a002364 <Chip_Clock_GetDividerDivisor+0x18>)
1a002358:	5c18      	ldrb	r0, [r3, r0]
}
1a00235a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00235e:	4770      	bx	lr
1a002360:	40050000 	.word	0x40050000
1a002364:	1a0032fc 	.word	0x1a0032fc

1a002368 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002368:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00236a:	2810      	cmp	r0, #16
1a00236c:	d80a      	bhi.n	1a002384 <Chip_Clock_GetClockInputHz+0x1c>
1a00236e:	e8df f000 	tbb	[pc, r0]
1a002372:	0b42      	.short	0x0b42
1a002374:	091f160d 	.word	0x091f160d
1a002378:	2b282522 	.word	0x2b282522
1a00237c:	322e0909 	.word	0x322e0909
1a002380:	3a36      	.short	0x3a36
1a002382:	3e          	.byte	0x3e
1a002383:	00          	.byte	0x00
	uint32_t rate = 0;
1a002384:	2000      	movs	r0, #0
1a002386:	e038      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002388:	481e      	ldr	r0, [pc, #120]	; (1a002404 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00238a:	e036      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00238c:	4b1e      	ldr	r3, [pc, #120]	; (1a002408 <Chip_Clock_GetClockInputHz+0xa0>)
1a00238e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002392:	f003 0307 	and.w	r3, r3, #7
1a002396:	2b04      	cmp	r3, #4
1a002398:	d130      	bne.n	1a0023fc <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a00239a:	2000      	movs	r0, #0
1a00239c:	e02d      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00239e:	4b1a      	ldr	r3, [pc, #104]	; (1a002408 <Chip_Clock_GetClockInputHz+0xa0>)
1a0023a0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0023a4:	f003 0307 	and.w	r3, r3, #7
1a0023a8:	2b04      	cmp	r3, #4
1a0023aa:	d029      	beq.n	1a002400 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0023ac:	4817      	ldr	r0, [pc, #92]	; (1a00240c <Chip_Clock_GetClockInputHz+0xa4>)
1a0023ae:	e024      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0023b0:	4b17      	ldr	r3, [pc, #92]	; (1a002410 <Chip_Clock_GetClockInputHz+0xa8>)
1a0023b2:	6818      	ldr	r0, [r3, #0]
		break;
1a0023b4:	e021      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0023b6:	4b17      	ldr	r3, [pc, #92]	; (1a002414 <Chip_Clock_GetClockInputHz+0xac>)
1a0023b8:	6818      	ldr	r0, [r3, #0]
		break;
1a0023ba:	e01e      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0023bc:	4b16      	ldr	r3, [pc, #88]	; (1a002418 <Chip_Clock_GetClockInputHz+0xb0>)
1a0023be:	6818      	ldr	r0, [r3, #0]
		break;
1a0023c0:	e01b      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0023c2:	4b15      	ldr	r3, [pc, #84]	; (1a002418 <Chip_Clock_GetClockInputHz+0xb0>)
1a0023c4:	6858      	ldr	r0, [r3, #4]
		break;
1a0023c6:	e018      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0023c8:	f000 f86a 	bl	1a0024a0 <Chip_Clock_GetMainPLLHz>
		break;
1a0023cc:	e015      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0023ce:	2100      	movs	r1, #0
1a0023d0:	f000 f89c 	bl	1a00250c <Chip_Clock_GetDivRate>
		break;
1a0023d4:	e011      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0023d6:	2101      	movs	r1, #1
1a0023d8:	f000 f898 	bl	1a00250c <Chip_Clock_GetDivRate>
		break;
1a0023dc:	e00d      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0023de:	2102      	movs	r1, #2
1a0023e0:	f000 f894 	bl	1a00250c <Chip_Clock_GetDivRate>
		break;
1a0023e4:	e009      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0023e6:	2103      	movs	r1, #3
1a0023e8:	f000 f890 	bl	1a00250c <Chip_Clock_GetDivRate>
		break;
1a0023ec:	e005      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0023ee:	2104      	movs	r1, #4
1a0023f0:	f000 f88c 	bl	1a00250c <Chip_Clock_GetDivRate>
		break;
1a0023f4:	e001      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a0023f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0023fa:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a0023fc:	4803      	ldr	r0, [pc, #12]	; (1a00240c <Chip_Clock_GetClockInputHz+0xa4>)
1a0023fe:	e7fc      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a002400:	4806      	ldr	r0, [pc, #24]	; (1a00241c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002402:	e7fa      	b.n	1a0023fa <Chip_Clock_GetClockInputHz+0x92>
1a002404:	00b71b00 	.word	0x00b71b00
1a002408:	40043000 	.word	0x40043000
1a00240c:	017d7840 	.word	0x017d7840
1a002410:	1a003268 	.word	0x1a003268
1a002414:	1a00326c 	.word	0x1a00326c
1a002418:	10002acc 	.word	0x10002acc
1a00241c:	02faf080 	.word	0x02faf080

1a002420 <Chip_Clock_CalcMainPLLValue>:
{
1a002420:	b538      	push	{r3, r4, r5, lr}
1a002422:	4605      	mov	r5, r0
1a002424:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002426:	7908      	ldrb	r0, [r1, #4]
1a002428:	f7ff ff9e 	bl	1a002368 <Chip_Clock_GetClockInputHz>
1a00242c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00242e:	4b19      	ldr	r3, [pc, #100]	; (1a002494 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002430:	442b      	add	r3, r5
1a002432:	4a19      	ldr	r2, [pc, #100]	; (1a002498 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002434:	4293      	cmp	r3, r2
1a002436:	d821      	bhi.n	1a00247c <Chip_Clock_CalcMainPLLValue+0x5c>
1a002438:	b318      	cbz	r0, 1a002482 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00243a:	2380      	movs	r3, #128	; 0x80
1a00243c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00243e:	2300      	movs	r3, #0
1a002440:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002442:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002444:	fbb5 f3f0 	udiv	r3, r5, r0
1a002448:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00244a:	4a14      	ldr	r2, [pc, #80]	; (1a00249c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a00244c:	4295      	cmp	r5, r2
1a00244e:	d903      	bls.n	1a002458 <Chip_Clock_CalcMainPLLValue+0x38>
1a002450:	fb03 f000 	mul.w	r0, r3, r0
1a002454:	42a8      	cmp	r0, r5
1a002456:	d007      	beq.n	1a002468 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002458:	4621      	mov	r1, r4
1a00245a:	4628      	mov	r0, r5
1a00245c:	f7ff fe96 	bl	1a00218c <pll_get_frac>
		if (!ppll->nsel) {
1a002460:	68a3      	ldr	r3, [r4, #8]
1a002462:	b18b      	cbz	r3, 1a002488 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002464:	3b01      	subs	r3, #1
1a002466:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002468:	6923      	ldr	r3, [r4, #16]
1a00246a:	b183      	cbz	r3, 1a00248e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a00246c:	68e2      	ldr	r2, [r4, #12]
1a00246e:	b10a      	cbz	r2, 1a002474 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002470:	3a01      	subs	r2, #1
1a002472:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002474:	3b01      	subs	r3, #1
1a002476:	6123      	str	r3, [r4, #16]
	return 0;
1a002478:	2000      	movs	r0, #0
}
1a00247a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a00247c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002480:	e7fb      	b.n	1a00247a <Chip_Clock_CalcMainPLLValue+0x5a>
1a002482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002486:	e7f8      	b.n	1a00247a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00248c:	e7f5      	b.n	1a00247a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00248e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002492:	e7f2      	b.n	1a00247a <Chip_Clock_CalcMainPLLValue+0x5a>
1a002494:	ff6b3a10 	.word	0xff6b3a10
1a002498:	0b940510 	.word	0x0b940510
1a00249c:	094c5eff 	.word	0x094c5eff

1a0024a0 <Chip_Clock_GetMainPLLHz>:
{
1a0024a0:	b530      	push	{r4, r5, lr}
1a0024a2:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0024a4:	4d17      	ldr	r5, [pc, #92]	; (1a002504 <Chip_Clock_GetMainPLLHz+0x64>)
1a0024a6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0024a8:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0024ac:	f7ff ff5c 	bl	1a002368 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0024b0:	4b15      	ldr	r3, [pc, #84]	; (1a002508 <Chip_Clock_GetMainPLLHz+0x68>)
1a0024b2:	681b      	ldr	r3, [r3, #0]
1a0024b4:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0024b6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0024b8:	f013 0f01 	tst.w	r3, #1
1a0024bc:	d01f      	beq.n	1a0024fe <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a0024be:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0024c2:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0024c6:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0024ca:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0024ce:	3301      	adds	r3, #1
	n = nsel + 1;
1a0024d0:	3201      	adds	r2, #1
	p = ptab[psel];
1a0024d2:	f10d 0c08 	add.w	ip, sp, #8
1a0024d6:	4461      	add	r1, ip
1a0024d8:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0024dc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0024e0:	d108      	bne.n	1a0024f4 <Chip_Clock_GetMainPLLHz+0x54>
1a0024e2:	b93d      	cbnz	r5, 1a0024f4 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0024e4:	0049      	lsls	r1, r1, #1
1a0024e6:	fbb3 f3f1 	udiv	r3, r3, r1
1a0024ea:	fbb0 f0f2 	udiv	r0, r0, r2
1a0024ee:	fb00 f003 	mul.w	r0, r0, r3
1a0024f2:	e005      	b.n	1a002500 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a0024f4:	fbb0 f0f2 	udiv	r0, r0, r2
1a0024f8:	fb03 f000 	mul.w	r0, r3, r0
1a0024fc:	e000      	b.n	1a002500 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a0024fe:	2000      	movs	r0, #0
}
1a002500:	b003      	add	sp, #12
1a002502:	bd30      	pop	{r4, r5, pc}
1a002504:	40050000 	.word	0x40050000
1a002508:	1a0032f8 	.word	0x1a0032f8

1a00250c <Chip_Clock_GetDivRate>:
{
1a00250c:	b538      	push	{r3, r4, r5, lr}
1a00250e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002510:	4608      	mov	r0, r1
1a002512:	f7ff ff0d 	bl	1a002330 <Chip_Clock_GetDividerSource>
1a002516:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002518:	4620      	mov	r0, r4
1a00251a:	f7ff ff17 	bl	1a00234c <Chip_Clock_GetDividerDivisor>
1a00251e:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002520:	4628      	mov	r0, r5
1a002522:	f7ff ff21 	bl	1a002368 <Chip_Clock_GetClockInputHz>
1a002526:	3401      	adds	r4, #1
}
1a002528:	fbb0 f0f4 	udiv	r0, r0, r4
1a00252c:	bd38      	pop	{r3, r4, r5, pc}
1a00252e:	Address 0x000000001a00252e is out of bounds.


1a002530 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002530:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002532:	f100 0416 	add.w	r4, r0, #22
1a002536:	00a4      	lsls	r4, r4, #2
1a002538:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a00253c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002540:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002542:	281b      	cmp	r0, #27
1a002544:	d813      	bhi.n	1a00256e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002546:	2911      	cmp	r1, #17
1a002548:	d01a      	beq.n	1a002580 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00254a:	4d0e      	ldr	r5, [pc, #56]	; (1a002584 <Chip_Clock_SetBaseClock+0x54>)
1a00254c:	4025      	ands	r5, r4

			if (autoblocken) {
1a00254e:	b10a      	cbz	r2, 1a002554 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002550:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002554:	b10b      	cbz	r3, 1a00255a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002556:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00255a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00255e:	3016      	adds	r0, #22
1a002560:	0080      	lsls	r0, r0, #2
1a002562:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002566:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00256a:	6045      	str	r5, [r0, #4]
1a00256c:	e008      	b.n	1a002580 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00256e:	f044 0401 	orr.w	r4, r4, #1
1a002572:	3016      	adds	r0, #22
1a002574:	0080      	lsls	r0, r0, #2
1a002576:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00257a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00257e:	6044      	str	r4, [r0, #4]
	}
}
1a002580:	bc30      	pop	{r4, r5}
1a002582:	4770      	bx	lr
1a002584:	e0fff7fe 	.word	0xe0fff7fe

1a002588 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002588:	281b      	cmp	r0, #27
1a00258a:	d80c      	bhi.n	1a0025a6 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a00258c:	3016      	adds	r0, #22
1a00258e:	0080      	lsls	r0, r0, #2
1a002590:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002594:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002598:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00259a:	f010 0f01 	tst.w	r0, #1
1a00259e:	d104      	bne.n	1a0025aa <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0025a0:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0025a4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0025a6:	2011      	movs	r0, #17
1a0025a8:	4770      	bx	lr
		return CLKINPUT_PD;
1a0025aa:	2011      	movs	r0, #17
}
1a0025ac:	4770      	bx	lr

1a0025ae <Chip_Clock_GetBaseClocktHz>:
{
1a0025ae:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0025b0:	f7ff ffea 	bl	1a002588 <Chip_Clock_GetBaseClock>
1a0025b4:	f7ff fed8 	bl	1a002368 <Chip_Clock_GetClockInputHz>
}
1a0025b8:	bd08      	pop	{r3, pc}
1a0025ba:	Address 0x000000001a0025ba is out of bounds.


1a0025bc <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0025bc:	b969      	cbnz	r1, 1a0025da <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a0025be:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0025c0:	b10a      	cbz	r2, 1a0025c6 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0025c2:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0025c6:	2b02      	cmp	r3, #2
1a0025c8:	d009      	beq.n	1a0025de <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0025ca:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0025ce:	d209      	bcs.n	1a0025e4 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0025d0:	3020      	adds	r0, #32
1a0025d2:	4b07      	ldr	r3, [pc, #28]	; (1a0025f0 <Chip_Clock_EnableOpts+0x34>)
1a0025d4:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0025d8:	4770      	bx	lr
		reg |= (1 << 1);
1a0025da:	2103      	movs	r1, #3
1a0025dc:	e7f0      	b.n	1a0025c0 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0025de:	f041 0120 	orr.w	r1, r1, #32
1a0025e2:	e7f2      	b.n	1a0025ca <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0025e4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0025e8:	4b02      	ldr	r3, [pc, #8]	; (1a0025f4 <Chip_Clock_EnableOpts+0x38>)
1a0025ea:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0025ee:	4770      	bx	lr
1a0025f0:	40051000 	.word	0x40051000
1a0025f4:	40052000 	.word	0x40052000

1a0025f8 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0025f8:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0025fa:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0025fe:	d309      	bcc.n	1a002614 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002600:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002604:	4a0d      	ldr	r2, [pc, #52]	; (1a00263c <Chip_Clock_GetRate+0x44>)
1a002606:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00260a:	f014 0f01 	tst.w	r4, #1
1a00260e:	d107      	bne.n	1a002620 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002610:	2000      	movs	r0, #0
	}

	return rate;
}
1a002612:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002614:	f100 0320 	add.w	r3, r0, #32
1a002618:	4a09      	ldr	r2, [pc, #36]	; (1a002640 <Chip_Clock_GetRate+0x48>)
1a00261a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00261e:	e7f4      	b.n	1a00260a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002620:	f7ff fe3a 	bl	1a002298 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002624:	f7ff ffc3 	bl	1a0025ae <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002628:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00262c:	d103      	bne.n	1a002636 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00262e:	2301      	movs	r3, #1
		rate = rate / div;
1a002630:	fbb0 f0f3 	udiv	r0, r0, r3
1a002634:	e7ed      	b.n	1a002612 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002636:	2302      	movs	r3, #2
1a002638:	e7fa      	b.n	1a002630 <Chip_Clock_GetRate+0x38>
1a00263a:	bf00      	nop
1a00263c:	40052000 	.word	0x40052000
1a002640:	40051000 	.word	0x40051000

1a002644 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002644:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002646:	2069      	movs	r0, #105	; 0x69
1a002648:	f7ff ffd6 	bl	1a0025f8 <Chip_Clock_GetRate>
1a00264c:	4b01      	ldr	r3, [pc, #4]	; (1a002654 <SystemCoreClockUpdate+0x10>)
1a00264e:	6018      	str	r0, [r3, #0]
}
1a002650:	bd08      	pop	{r3, pc}
1a002652:	bf00      	nop
1a002654:	10002b58 	.word	0x10002b58

1a002658 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002658:	4770      	bx	lr
1a00265a:	Address 0x000000001a00265a is out of bounds.


1a00265c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00265c:	b570      	push	{r4, r5, r6, lr}
1a00265e:	b08a      	sub	sp, #40	; 0x28
1a002660:	4605      	mov	r5, r0
1a002662:	460e      	mov	r6, r1
1a002664:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002666:	f242 7310 	movw	r3, #10000	; 0x2710
1a00266a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a00266c:	2806      	cmp	r0, #6
1a00266e:	d018      	beq.n	1a0026a2 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002670:	2300      	movs	r3, #0
1a002672:	2201      	movs	r2, #1
1a002674:	4629      	mov	r1, r5
1a002676:	2004      	movs	r0, #4
1a002678:	f7ff ff5a 	bl	1a002530 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a00267c:	4a49      	ldr	r2, [pc, #292]	; (1a0027a4 <Chip_SetupCoreClock+0x148>)
1a00267e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002680:	f043 0301 	orr.w	r3, r3, #1
1a002684:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002686:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00268a:	a901      	add	r1, sp, #4
1a00268c:	4630      	mov	r0, r6
1a00268e:	f7ff fec7 	bl	1a002420 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002692:	4b45      	ldr	r3, [pc, #276]	; (1a0027a8 <Chip_SetupCoreClock+0x14c>)
1a002694:	429e      	cmp	r6, r3
1a002696:	d916      	bls.n	1a0026c6 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002698:	9b01      	ldr	r3, [sp, #4]
1a00269a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00269e:	d003      	beq.n	1a0026a8 <Chip_SetupCoreClock+0x4c>
1a0026a0:	e7fe      	b.n	1a0026a0 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0026a2:	f7ff fe1f 	bl	1a0022e4 <Chip_Clock_EnableCrystal>
1a0026a6:	e7e3      	b.n	1a002670 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0026a8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0026ac:	d005      	beq.n	1a0026ba <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0026ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0026b2:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0026b4:	2500      	movs	r5, #0
			direct = 1;
1a0026b6:	2601      	movs	r6, #1
1a0026b8:	e007      	b.n	1a0026ca <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0026ba:	9b04      	ldr	r3, [sp, #16]
1a0026bc:	3301      	adds	r3, #1
1a0026be:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0026c0:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0026c2:	2600      	movs	r6, #0
1a0026c4:	e001      	b.n	1a0026ca <Chip_SetupCoreClock+0x6e>
1a0026c6:	2500      	movs	r5, #0
1a0026c8:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0026ca:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0026ce:	9b01      	ldr	r3, [sp, #4]
1a0026d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0026d4:	9a05      	ldr	r2, [sp, #20]
1a0026d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0026da:	9a03      	ldr	r2, [sp, #12]
1a0026dc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0026e0:	9a04      	ldr	r2, [sp, #16]
1a0026e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0026e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0026ea:	4a2e      	ldr	r2, [pc, #184]	; (1a0027a4 <Chip_SetupCoreClock+0x148>)
1a0026ec:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0026ee:	4b2d      	ldr	r3, [pc, #180]	; (1a0027a4 <Chip_SetupCoreClock+0x148>)
1a0026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0026f2:	f013 0f01 	tst.w	r3, #1
1a0026f6:	d0fa      	beq.n	1a0026ee <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0026f8:	2300      	movs	r3, #0
1a0026fa:	2201      	movs	r2, #1
1a0026fc:	2109      	movs	r1, #9
1a0026fe:	2004      	movs	r0, #4
1a002700:	f7ff ff16 	bl	1a002530 <Chip_Clock_SetBaseClock>

	if (direct) {
1a002704:	b1fe      	cbz	r6, 1a002746 <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002706:	f242 7310 	movw	r3, #10000	; 0x2710
1a00270a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00270c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00270e:	1e5a      	subs	r2, r3, #1
1a002710:	9209      	str	r2, [sp, #36]	; 0x24
1a002712:	2b00      	cmp	r3, #0
1a002714:	d1fa      	bne.n	1a00270c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002716:	9b01      	ldr	r3, [sp, #4]
1a002718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00271c:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00271e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002722:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002726:	9a05      	ldr	r2, [sp, #20]
1a002728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00272c:	9a03      	ldr	r2, [sp, #12]
1a00272e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002732:	9a04      	ldr	r2, [sp, #16]
1a002734:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00273c:	4a19      	ldr	r2, [pc, #100]	; (1a0027a4 <Chip_SetupCoreClock+0x148>)
1a00273e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002740:	b36c      	cbz	r4, 1a00279e <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002742:	2400      	movs	r4, #0
1a002744:	e029      	b.n	1a00279a <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a002746:	2d00      	cmp	r5, #0
1a002748:	d0fa      	beq.n	1a002740 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00274a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00274e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002750:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002752:	1e5a      	subs	r2, r3, #1
1a002754:	9209      	str	r2, [sp, #36]	; 0x24
1a002756:	2b00      	cmp	r3, #0
1a002758:	d1fa      	bne.n	1a002750 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a00275a:	9b04      	ldr	r3, [sp, #16]
1a00275c:	1e5a      	subs	r2, r3, #1
1a00275e:	9204      	str	r2, [sp, #16]
1a002760:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002764:	9b01      	ldr	r3, [sp, #4]
1a002766:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00276a:	9905      	ldr	r1, [sp, #20]
1a00276c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002770:	9903      	ldr	r1, [sp, #12]
1a002772:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a002776:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00277a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00277e:	4a09      	ldr	r2, [pc, #36]	; (1a0027a4 <Chip_SetupCoreClock+0x148>)
1a002780:	6453      	str	r3, [r2, #68]	; 0x44
1a002782:	e7dd      	b.n	1a002740 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002784:	4809      	ldr	r0, [pc, #36]	; (1a0027ac <Chip_SetupCoreClock+0x150>)
1a002786:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00278a:	78cb      	ldrb	r3, [r1, #3]
1a00278c:	788a      	ldrb	r2, [r1, #2]
1a00278e:	7849      	ldrb	r1, [r1, #1]
1a002790:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002794:	f7ff fecc 	bl	1a002530 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002798:	3401      	adds	r4, #1
1a00279a:	2c11      	cmp	r4, #17
1a00279c:	d9f2      	bls.n	1a002784 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00279e:	b00a      	add	sp, #40	; 0x28
1a0027a0:	bd70      	pop	{r4, r5, r6, pc}
1a0027a2:	bf00      	nop
1a0027a4:	40050000 	.word	0x40050000
1a0027a8:	068e7780 	.word	0x068e7780
1a0027ac:	1a003370 	.word	0x1a003370

1a0027b0 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0027b0:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0027b2:	4a0a      	ldr	r2, [pc, #40]	; (1a0027dc <SystemInit+0x2c>)
1a0027b4:	4b0a      	ldr	r3, [pc, #40]	; (1a0027e0 <SystemInit+0x30>)
1a0027b6:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0027b8:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0027bc:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0027be:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0027c2:	2b20      	cmp	r3, #32
1a0027c4:	d002      	beq.n	1a0027cc <SystemInit+0x1c>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0027c6:	f7ff fbb5 	bl	1a001f34 <Board_SystemInit>
}
1a0027ca:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0027cc:	4a04      	ldr	r2, [pc, #16]	; (1a0027e0 <SystemInit+0x30>)
1a0027ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0027d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0027d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0027da:	e7f4      	b.n	1a0027c6 <SystemInit+0x16>
1a0027dc:	1a000000 	.word	0x1a000000
1a0027e0:	e000ed00 	.word	0xe000ed00

1a0027e4 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0027e4:	4b04      	ldr	r3, [pc, #16]	; (1a0027f8 <cyclesCounterInit+0x14>)
1a0027e6:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a0027e8:	4b04      	ldr	r3, [pc, #16]	; (1a0027fc <cyclesCounterInit+0x18>)
1a0027ea:	681a      	ldr	r2, [r3, #0]
1a0027ec:	6813      	ldr	r3, [r2, #0]
1a0027ee:	f043 0301 	orr.w	r3, r3, #1
1a0027f2:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0027f4:	2001      	movs	r0, #1
1a0027f6:	4770      	bx	lr
1a0027f8:	10000004 	.word	0x10000004
1a0027fc:	10000008 	.word	0x10000008

1a002800 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a002800:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002804:	0083      	lsls	r3, r0, #2
1a002806:	4a03      	ldr	r2, [pc, #12]	; (1a002814 <uartTxReady+0x14>)
1a002808:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00280a:	6958      	ldr	r0, [r3, #20]
}
1a00280c:	f000 0020 	and.w	r0, r0, #32
1a002810:	4770      	bx	lr
1a002812:	bf00      	nop
1a002814:	1a0033b8 	.word	0x1a0033b8

1a002818 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a002818:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00281c:	0083      	lsls	r3, r0, #2
1a00281e:	4a02      	ldr	r2, [pc, #8]	; (1a002828 <uartTxWrite+0x10>)
1a002820:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a002822:	6019      	str	r1, [r3, #0]
}
1a002824:	4770      	bx	lr
1a002826:	bf00      	nop
1a002828:	1a0033b8 	.word	0x1a0033b8

1a00282c <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a00282c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002830:	4680      	mov	r8, r0
1a002832:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a002834:	4c19      	ldr	r4, [pc, #100]	; (1a00289c <uartInit+0x70>)
1a002836:	0045      	lsls	r5, r0, #1
1a002838:	182a      	adds	r2, r5, r0
1a00283a:	0093      	lsls	r3, r2, #2
1a00283c:	18e6      	adds	r6, r4, r3
1a00283e:	58e7      	ldr	r7, [r4, r3]
1a002840:	4638      	mov	r0, r7
1a002842:	f7ff fb93 	bl	1a001f6c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a002846:	4649      	mov	r1, r9
1a002848:	4638      	mov	r0, r7
1a00284a:	f7ff fbb9 	bl	1a001fc0 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a00284e:	2307      	movs	r3, #7
1a002850:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002852:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a002854:	2301      	movs	r3, #1
1a002856:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a002858:	7930      	ldrb	r0, [r6, #4]
1a00285a:	7973      	ldrb	r3, [r6, #5]
1a00285c:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00285e:	f042 0218 	orr.w	r2, r2, #24
1a002862:	490f      	ldr	r1, [pc, #60]	; (1a0028a0 <uartInit+0x74>)
1a002864:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a00286c:	79f0      	ldrb	r0, [r6, #7]
1a00286e:	7a33      	ldrb	r3, [r6, #8]
1a002870:	7a72      	ldrb	r2, [r6, #9]
1a002872:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002876:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a00287e:	f1b8 0f01 	cmp.w	r8, #1
1a002882:	d001      	beq.n	1a002888 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a002884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002888:	4a06      	ldr	r2, [pc, #24]	; (1a0028a4 <uartInit+0x78>)
1a00288a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a00288c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002890:	64d3      	str	r3, [r2, #76]	; 0x4c
1a002892:	221a      	movs	r2, #26
1a002894:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a002898:	e7f4      	b.n	1a002884 <uartInit+0x58>
1a00289a:	bf00      	nop
1a00289c:	1a0033b8 	.word	0x1a0033b8
1a0028a0:	40086000 	.word	0x40086000
1a0028a4:	40081000 	.word	0x40081000

1a0028a8 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a0028a8:	b538      	push	{r3, r4, r5, lr}
1a0028aa:	4604      	mov	r4, r0
1a0028ac:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a0028ae:	4620      	mov	r0, r4
1a0028b0:	f7ff ffa6 	bl	1a002800 <uartTxReady>
1a0028b4:	2800      	cmp	r0, #0
1a0028b6:	d0fa      	beq.n	1a0028ae <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a0028b8:	4629      	mov	r1, r5
1a0028ba:	4620      	mov	r0, r4
1a0028bc:	f7ff ffac 	bl	1a002818 <uartTxWrite>
}
1a0028c0:	bd38      	pop	{r3, r4, r5, pc}

1a0028c2 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a0028c2:	b538      	push	{r3, r4, r5, lr}
1a0028c4:	4605      	mov	r5, r0
1a0028c6:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0028c8:	e003      	b.n	1a0028d2 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a0028ca:	4628      	mov	r0, r5
1a0028cc:	f7ff ffec 	bl	1a0028a8 <uartWriteByte>
      str++;
1a0028d0:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a0028d2:	7821      	ldrb	r1, [r4, #0]
1a0028d4:	2900      	cmp	r1, #0
1a0028d6:	d1f8      	bne.n	1a0028ca <uartWriteString+0x8>
   }
}
1a0028d8:	bd38      	pop	{r3, r4, r5, pc}
1a0028da:	Address 0x000000001a0028da is out of bounds.


1a0028dc <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0028dc:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a0028e0:	4908      	ldr	r1, [pc, #32]	; (1a002904 <tickerCallback+0x28>)
1a0028e2:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0028e6:	f112 0b01 	adds.w	fp, r2, #1
1a0028ea:	f143 0c00 	adc.w	ip, r3, #0
1a0028ee:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0028f2:	4b05      	ldr	r3, [pc, #20]	; (1a002908 <tickerCallback+0x2c>)
1a0028f4:	681b      	ldr	r3, [r3, #0]
1a0028f6:	b113      	cbz	r3, 1a0028fe <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a0028f8:	4a04      	ldr	r2, [pc, #16]	; (1a00290c <tickerCallback+0x30>)
1a0028fa:	6810      	ldr	r0, [r2, #0]
1a0028fc:	4798      	blx	r3
   }
}
1a0028fe:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a002902:	bf00      	nop
1a002904:	10002ad8 	.word	0x10002ad8
1a002908:	10002ae0 	.word	0x10002ae0
1a00290c:	10002ad4 	.word	0x10002ad4

1a002910 <tickInit>:
{
1a002910:	b510      	push	{r4, lr}
1a002912:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a002914:	4b0e      	ldr	r3, [pc, #56]	; (1a002950 <tickInit+0x40>)
1a002916:	9301      	str	r3, [sp, #4]
1a002918:	4b0e      	ldr	r3, [pc, #56]	; (1a002954 <tickInit+0x44>)
1a00291a:	9300      	str	r3, [sp, #0]
1a00291c:	2300      	movs	r3, #0
1a00291e:	2201      	movs	r2, #1
1a002920:	4601      	mov	r1, r0
1a002922:	480d      	ldr	r0, [pc, #52]	; (1a002958 <tickInit+0x48>)
1a002924:	f7fe ff3e 	bl	1a0017a4 <xTimerCreateStatic>
         if (h == NULL)
1a002928:	b178      	cbz	r0, 1a00294a <tickInit+0x3a>
1a00292a:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a00292c:	f7fe fbb2 	bl	1a001094 <xTaskGetTickCount>
1a002930:	2300      	movs	r3, #0
1a002932:	9300      	str	r3, [sp, #0]
1a002934:	4602      	mov	r2, r0
1a002936:	2101      	movs	r1, #1
1a002938:	4620      	mov	r0, r4
1a00293a:	f7fe ff59 	bl	1a0017f0 <xTimerGenericCommand>
1a00293e:	2801      	cmp	r0, #1
1a002940:	bf14      	ite	ne
1a002942:	2000      	movne	r0, #0
1a002944:	2001      	moveq	r0, #1
}
1a002946:	b002      	add	sp, #8
1a002948:	bd10      	pop	{r4, pc}
            return 0;
1a00294a:	2000      	movs	r0, #0
1a00294c:	e7fb      	b.n	1a002946 <tickInit+0x36>
1a00294e:	bf00      	nop
1a002950:	10002ae4 	.word	0x10002ae4
1a002954:	1a0028dd 	.word	0x1a0028dd
1a002958:	1a003400 	.word	0x1a003400

1a00295c <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a00295c:	e7fe      	b.n	1a00295c <errorOcurred>

1a00295e <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a00295e:	4770      	bx	lr

1a002960 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a002960:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002962:	2400      	movs	r4, #0
1a002964:	e001      	b.n	1a00296a <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002966:	3401      	adds	r4, #1
1a002968:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00296a:	2c03      	cmp	r4, #3
1a00296c:	d812      	bhi.n	1a002994 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00296e:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002970:	4b09      	ldr	r3, [pc, #36]	; (1a002998 <TIMER0_IRQHandler+0x38>)
1a002972:	681a      	ldr	r2, [r3, #0]
1a002974:	f004 010f 	and.w	r1, r4, #15
1a002978:	2301      	movs	r3, #1
1a00297a:	408b      	lsls	r3, r1
1a00297c:	421a      	tst	r2, r3
1a00297e:	d0f2      	beq.n	1a002966 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002980:	4b06      	ldr	r3, [pc, #24]	; (1a00299c <TIMER0_IRQHandler+0x3c>)
1a002982:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a002986:	2000      	movs	r0, #0
1a002988:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00298a:	2301      	movs	r3, #1
1a00298c:	40ab      	lsls	r3, r5
1a00298e:	4a02      	ldr	r2, [pc, #8]	; (1a002998 <TIMER0_IRQHandler+0x38>)
1a002990:	6013      	str	r3, [r2, #0]
1a002992:	e7e8      	b.n	1a002966 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a002994:	bd38      	pop	{r3, r4, r5, pc}
1a002996:	bf00      	nop
1a002998:	40084000 	.word	0x40084000
1a00299c:	1000000c 	.word	0x1000000c

1a0029a0 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0029a0:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0029a2:	2400      	movs	r4, #0
1a0029a4:	e001      	b.n	1a0029aa <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0029a6:	3401      	adds	r4, #1
1a0029a8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0029aa:	2c03      	cmp	r4, #3
1a0029ac:	d813      	bhi.n	1a0029d6 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0029ae:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0029b0:	4b09      	ldr	r3, [pc, #36]	; (1a0029d8 <TIMER1_IRQHandler+0x38>)
1a0029b2:	681a      	ldr	r2, [r3, #0]
1a0029b4:	f004 010f 	and.w	r1, r4, #15
1a0029b8:	2301      	movs	r3, #1
1a0029ba:	408b      	lsls	r3, r1
1a0029bc:	421a      	tst	r2, r3
1a0029be:	d0f2      	beq.n	1a0029a6 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0029c0:	1d23      	adds	r3, r4, #4
1a0029c2:	4a06      	ldr	r2, [pc, #24]	; (1a0029dc <TIMER1_IRQHandler+0x3c>)
1a0029c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0029c8:	2000      	movs	r0, #0
1a0029ca:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0029cc:	2301      	movs	r3, #1
1a0029ce:	40ab      	lsls	r3, r5
1a0029d0:	4a01      	ldr	r2, [pc, #4]	; (1a0029d8 <TIMER1_IRQHandler+0x38>)
1a0029d2:	6013      	str	r3, [r2, #0]
1a0029d4:	e7e7      	b.n	1a0029a6 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0029d6:	bd38      	pop	{r3, r4, r5, pc}
1a0029d8:	40085000 	.word	0x40085000
1a0029dc:	1000000c 	.word	0x1000000c

1a0029e0 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0029e0:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0029e2:	2400      	movs	r4, #0
1a0029e4:	e001      	b.n	1a0029ea <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0029e6:	3401      	adds	r4, #1
1a0029e8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0029ea:	2c03      	cmp	r4, #3
1a0029ec:	d814      	bhi.n	1a002a18 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0029ee:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0029f0:	4b0a      	ldr	r3, [pc, #40]	; (1a002a1c <TIMER2_IRQHandler+0x3c>)
1a0029f2:	681a      	ldr	r2, [r3, #0]
1a0029f4:	f004 010f 	and.w	r1, r4, #15
1a0029f8:	2301      	movs	r3, #1
1a0029fa:	408b      	lsls	r3, r1
1a0029fc:	421a      	tst	r2, r3
1a0029fe:	d0f2      	beq.n	1a0029e6 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002a00:	f104 0308 	add.w	r3, r4, #8
1a002a04:	4a06      	ldr	r2, [pc, #24]	; (1a002a20 <TIMER2_IRQHandler+0x40>)
1a002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002a0a:	2000      	movs	r0, #0
1a002a0c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002a0e:	2301      	movs	r3, #1
1a002a10:	40ab      	lsls	r3, r5
1a002a12:	4a02      	ldr	r2, [pc, #8]	; (1a002a1c <TIMER2_IRQHandler+0x3c>)
1a002a14:	6013      	str	r3, [r2, #0]
1a002a16:	e7e6      	b.n	1a0029e6 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a002a18:	bd38      	pop	{r3, r4, r5, pc}
1a002a1a:	bf00      	nop
1a002a1c:	400c3000 	.word	0x400c3000
1a002a20:	1000000c 	.word	0x1000000c

1a002a24 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a002a24:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002a26:	2400      	movs	r4, #0
1a002a28:	e001      	b.n	1a002a2e <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002a2a:	3401      	adds	r4, #1
1a002a2c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002a2e:	2c03      	cmp	r4, #3
1a002a30:	d814      	bhi.n	1a002a5c <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a002a32:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002a34:	4b0a      	ldr	r3, [pc, #40]	; (1a002a60 <TIMER3_IRQHandler+0x3c>)
1a002a36:	681a      	ldr	r2, [r3, #0]
1a002a38:	f004 010f 	and.w	r1, r4, #15
1a002a3c:	2301      	movs	r3, #1
1a002a3e:	408b      	lsls	r3, r1
1a002a40:	421a      	tst	r2, r3
1a002a42:	d0f2      	beq.n	1a002a2a <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002a44:	f104 030c 	add.w	r3, r4, #12
1a002a48:	4a06      	ldr	r2, [pc, #24]	; (1a002a64 <TIMER3_IRQHandler+0x40>)
1a002a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002a4e:	2000      	movs	r0, #0
1a002a50:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002a52:	2301      	movs	r3, #1
1a002a54:	40ab      	lsls	r3, r5
1a002a56:	4a02      	ldr	r2, [pc, #8]	; (1a002a60 <TIMER3_IRQHandler+0x3c>)
1a002a58:	6013      	str	r3, [r2, #0]
1a002a5a:	e7e6      	b.n	1a002a2a <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a002a5c:	bd38      	pop	{r3, r4, r5, pc}
1a002a5e:	bf00      	nop
1a002a60:	400c4000 	.word	0x400c4000
1a002a64:	1000000c 	.word	0x1000000c

1a002a68 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002a68:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002a6a:	4d0b      	ldr	r5, [pc, #44]	; (1a002a98 <gpioObtainPinInit+0x30>)
1a002a6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002a70:	182c      	adds	r4, r5, r0
1a002a72:	5628      	ldrsb	r0, [r5, r0]
1a002a74:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002a76:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a002a7a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002a7c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002a80:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002a82:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002a86:	9b02      	ldr	r3, [sp, #8]
1a002a88:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002a8a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a002a8e:	9b03      	ldr	r3, [sp, #12]
1a002a90:	701a      	strb	r2, [r3, #0]
}
1a002a92:	bc30      	pop	{r4, r5}
1a002a94:	4770      	bx	lr
1a002a96:	bf00      	nop
1a002a98:	1a00340c 	.word	0x1a00340c

1a002a9c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a002a9c:	b570      	push	{r4, r5, r6, lr}
1a002a9e:	b084      	sub	sp, #16
1a002aa0:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002aa2:	2300      	movs	r3, #0
1a002aa4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002aa8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002aac:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002ab0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002ab4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002ab8:	f10d 030b 	add.w	r3, sp, #11
1a002abc:	9301      	str	r3, [sp, #4]
1a002abe:	ab03      	add	r3, sp, #12
1a002ac0:	9300      	str	r3, [sp, #0]
1a002ac2:	f10d 030d 	add.w	r3, sp, #13
1a002ac6:	f10d 020e 	add.w	r2, sp, #14
1a002aca:	f10d 010f 	add.w	r1, sp, #15
1a002ace:	f7ff ffcb 	bl	1a002a68 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a002ad2:	2c05      	cmp	r4, #5
1a002ad4:	f200 80a5 	bhi.w	1a002c22 <gpioInit+0x186>
1a002ad8:	e8df f004 	tbb	[pc, r4]
1a002adc:	45278109 	.word	0x45278109
1a002ae0:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a002ae2:	4851      	ldr	r0, [pc, #324]	; (1a002c28 <gpioInit+0x18c>)
1a002ae4:	f7ff fdb8 	bl	1a002658 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a002ae8:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a002aea:	b004      	add	sp, #16
1a002aec:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a002aee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002af2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002af6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002afa:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002afe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002b02:	494a      	ldr	r1, [pc, #296]	; (1a002c2c <gpioInit+0x190>)
1a002b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002b08:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002b0c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002b10:	2001      	movs	r0, #1
1a002b12:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a002b16:	4c44      	ldr	r4, [pc, #272]	; (1a002c28 <gpioInit+0x18c>)
1a002b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002b1c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002b20:	ea22 0201 	bic.w	r2, r2, r1
1a002b24:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002b28:	e7df      	b.n	1a002aea <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002b2a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002b2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002b32:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002b36:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a002b3a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002b3e:	493b      	ldr	r1, [pc, #236]	; (1a002c2c <gpioInit+0x190>)
1a002b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002b44:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002b48:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002b4c:	2001      	movs	r0, #1
1a002b4e:	fa00 f102 	lsl.w	r1, r0, r2
1a002b52:	4c35      	ldr	r4, [pc, #212]	; (1a002c28 <gpioInit+0x18c>)
1a002b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002b58:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002b5c:	ea22 0201 	bic.w	r2, r2, r1
1a002b60:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002b64:	e7c1      	b.n	1a002aea <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002b66:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002b6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002b6e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002b72:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a002b76:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002b7a:	492c      	ldr	r1, [pc, #176]	; (1a002c2c <gpioInit+0x190>)
1a002b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002b80:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002b84:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002b88:	2001      	movs	r0, #1
1a002b8a:	fa00 f102 	lsl.w	r1, r0, r2
1a002b8e:	4c26      	ldr	r4, [pc, #152]	; (1a002c28 <gpioInit+0x18c>)
1a002b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002b94:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002b98:	ea22 0201 	bic.w	r2, r2, r1
1a002b9c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002ba0:	e7a3      	b.n	1a002aea <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002ba2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002ba6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002baa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002bae:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a002bb2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002bb6:	491d      	ldr	r1, [pc, #116]	; (1a002c2c <gpioInit+0x190>)
1a002bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002bbc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002bc0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002bc4:	2001      	movs	r0, #1
1a002bc6:	fa00 f102 	lsl.w	r1, r0, r2
1a002bca:	4c17      	ldr	r4, [pc, #92]	; (1a002c28 <gpioInit+0x18c>)
1a002bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002bd0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002bd4:	ea22 0201 	bic.w	r2, r2, r1
1a002bd8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002bdc:	e785      	b.n	1a002aea <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002bde:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002be2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002be6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002bea:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002bee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002bf2:	490e      	ldr	r1, [pc, #56]	; (1a002c2c <gpioInit+0x190>)
1a002bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a002bf8:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a002bfc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002c00:	2001      	movs	r0, #1
1a002c02:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a002c06:	4b08      	ldr	r3, [pc, #32]	; (1a002c28 <gpioInit+0x18c>)
1a002c08:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002c0c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a002c10:	4331      	orrs	r1, r6
1a002c12:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a002c16:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a002c18:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a002c1c:	2100      	movs	r1, #0
1a002c1e:	5499      	strb	r1, [r3, r2]
1a002c20:	e763      	b.n	1a002aea <gpioInit+0x4e>
      ret_val = 0;
1a002c22:	2000      	movs	r0, #0
1a002c24:	e761      	b.n	1a002aea <gpioInit+0x4e>
1a002c26:	bf00      	nop
1a002c28:	400f4000 	.word	0x400f4000
1a002c2c:	40086000 	.word	0x40086000

1a002c30 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a002c30:	b510      	push	{r4, lr}
1a002c32:	b084      	sub	sp, #16
1a002c34:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002c36:	2300      	movs	r3, #0
1a002c38:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002c3c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002c40:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002c44:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002c48:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002c4c:	f10d 030b 	add.w	r3, sp, #11
1a002c50:	9301      	str	r3, [sp, #4]
1a002c52:	ab03      	add	r3, sp, #12
1a002c54:	9300      	str	r3, [sp, #0]
1a002c56:	f10d 030d 	add.w	r3, sp, #13
1a002c5a:	f10d 020e 	add.w	r2, sp, #14
1a002c5e:	f10d 010f 	add.w	r1, sp, #15
1a002c62:	f7ff ff01 	bl	1a002a68 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002c66:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002c6a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a002c6e:	3400      	adds	r4, #0
1a002c70:	bf18      	it	ne
1a002c72:	2401      	movne	r4, #1
1a002c74:	015b      	lsls	r3, r3, #5
1a002c76:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002c7a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002c7e:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a002c80:	2001      	movs	r0, #1
1a002c82:	b004      	add	sp, #16
1a002c84:	bd10      	pop	{r4, pc}

1a002c86 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a002c86:	b500      	push	{lr}
1a002c88:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a002c8a:	2300      	movs	r3, #0
1a002c8c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002c90:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002c94:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002c98:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002c9c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002ca0:	f10d 030b 	add.w	r3, sp, #11
1a002ca4:	9301      	str	r3, [sp, #4]
1a002ca6:	ab03      	add	r3, sp, #12
1a002ca8:	9300      	str	r3, [sp, #0]
1a002caa:	f10d 030d 	add.w	r3, sp, #13
1a002cae:	f10d 020e 	add.w	r2, sp, #14
1a002cb2:	f10d 010f 	add.w	r1, sp, #15
1a002cb6:	f7ff fed7 	bl	1a002a68 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a002cba:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a002cbe:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a002cc2:	015b      	lsls	r3, r3, #5
1a002cc4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002cc8:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002ccc:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a002cce:	3000      	adds	r0, #0
1a002cd0:	bf18      	it	ne
1a002cd2:	2001      	movne	r0, #1
1a002cd4:	b005      	add	sp, #20
1a002cd6:	f85d fb04 	ldr.w	pc, [sp], #4

1a002cda <gpioToggle>:
{
1a002cda:	b510      	push	{r4, lr}
1a002cdc:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a002cde:	f7ff ffd2 	bl	1a002c86 <gpioRead>
1a002ce2:	fab0 f180 	clz	r1, r0
1a002ce6:	0949      	lsrs	r1, r1, #5
1a002ce8:	4620      	mov	r0, r4
1a002cea:	f7ff ffa1 	bl	1a002c30 <gpioWrite>
}
1a002cee:	bd10      	pop	{r4, pc}

1a002cf0 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a002cf0:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a002cf2:	4b04      	ldr	r3, [pc, #16]	; (1a002d04 <USB0_IRQHandler+0x14>)
1a002cf4:	681b      	ldr	r3, [r3, #0]
1a002cf6:	681b      	ldr	r3, [r3, #0]
1a002cf8:	68db      	ldr	r3, [r3, #12]
1a002cfa:	4a03      	ldr	r2, [pc, #12]	; (1a002d08 <USB0_IRQHandler+0x18>)
1a002cfc:	6810      	ldr	r0, [r2, #0]
1a002cfe:	4798      	blx	r3
}
1a002d00:	bd08      	pop	{r3, pc}
1a002d02:	bf00      	nop
1a002d04:	10002b5c 	.word	0x10002b5c
1a002d08:	10002b14 	.word	0x10002b14

1a002d0c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002d0c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a002d0e:	f7ff fc99 	bl	1a002644 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a002d12:	4b3a      	ldr	r3, [pc, #232]	; (1a002dfc <boardInit+0xf0>)
1a002d14:	6818      	ldr	r0, [r3, #0]
1a002d16:	f7ff fd65 	bl	1a0027e4 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a002d1a:	2001      	movs	r0, #1
1a002d1c:	2100      	movs	r1, #0
1a002d1e:	f7ff fdf7 	bl	1a002910 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a002d22:	2105      	movs	r1, #5
1a002d24:	2000      	movs	r0, #0
1a002d26:	f7ff feb9 	bl	1a002a9c <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a002d2a:	2100      	movs	r1, #0
1a002d2c:	2024      	movs	r0, #36	; 0x24
1a002d2e:	f7ff feb5 	bl	1a002a9c <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a002d32:	2100      	movs	r1, #0
1a002d34:	2025      	movs	r0, #37	; 0x25
1a002d36:	f7ff feb1 	bl	1a002a9c <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a002d3a:	2100      	movs	r1, #0
1a002d3c:	2026      	movs	r0, #38	; 0x26
1a002d3e:	f7ff fead 	bl	1a002a9c <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a002d42:	2100      	movs	r1, #0
1a002d44:	2027      	movs	r0, #39	; 0x27
1a002d46:	f7ff fea9 	bl	1a002a9c <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a002d4a:	2101      	movs	r1, #1
1a002d4c:	2028      	movs	r0, #40	; 0x28
1a002d4e:	f7ff fea5 	bl	1a002a9c <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a002d52:	2101      	movs	r1, #1
1a002d54:	2029      	movs	r0, #41	; 0x29
1a002d56:	f7ff fea1 	bl	1a002a9c <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a002d5a:	2101      	movs	r1, #1
1a002d5c:	202a      	movs	r0, #42	; 0x2a
1a002d5e:	f7ff fe9d 	bl	1a002a9c <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a002d62:	2101      	movs	r1, #1
1a002d64:	202b      	movs	r0, #43	; 0x2b
1a002d66:	f7ff fe99 	bl	1a002a9c <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a002d6a:	2101      	movs	r1, #1
1a002d6c:	202c      	movs	r0, #44	; 0x2c
1a002d6e:	f7ff fe95 	bl	1a002a9c <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a002d72:	2101      	movs	r1, #1
1a002d74:	202d      	movs	r0, #45	; 0x2d
1a002d76:	f7ff fe91 	bl	1a002a9c <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a002d7a:	2100      	movs	r1, #0
1a002d7c:	202e      	movs	r0, #46	; 0x2e
1a002d7e:	f7ff fe8d 	bl	1a002a9c <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a002d82:	2100      	movs	r1, #0
1a002d84:	202f      	movs	r0, #47	; 0x2f
1a002d86:	f7ff fe89 	bl	1a002a9c <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a002d8a:	2100      	movs	r1, #0
1a002d8c:	2030      	movs	r0, #48	; 0x30
1a002d8e:	f7ff fe85 	bl	1a002a9c <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a002d92:	2100      	movs	r1, #0
1a002d94:	2031      	movs	r0, #49	; 0x31
1a002d96:	f7ff fe81 	bl	1a002a9c <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a002d9a:	2100      	movs	r1, #0
1a002d9c:	2032      	movs	r0, #50	; 0x32
1a002d9e:	f7ff fe7d 	bl	1a002a9c <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a002da2:	2100      	movs	r1, #0
1a002da4:	2033      	movs	r0, #51	; 0x33
1a002da6:	f7ff fe79 	bl	1a002a9c <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a002daa:	2100      	movs	r1, #0
1a002dac:	2034      	movs	r0, #52	; 0x34
1a002dae:	f7ff fe75 	bl	1a002a9c <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a002db2:	2100      	movs	r1, #0
1a002db4:	2035      	movs	r0, #53	; 0x35
1a002db6:	f7ff fe71 	bl	1a002a9c <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a002dba:	2101      	movs	r1, #1
1a002dbc:	2036      	movs	r0, #54	; 0x36
1a002dbe:	f7ff fe6d 	bl	1a002a9c <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a002dc2:	2101      	movs	r1, #1
1a002dc4:	2037      	movs	r0, #55	; 0x37
1a002dc6:	f7ff fe69 	bl	1a002a9c <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a002dca:	2101      	movs	r1, #1
1a002dcc:	2038      	movs	r0, #56	; 0x38
1a002dce:	f7ff fe65 	bl	1a002a9c <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a002dd2:	2101      	movs	r1, #1
1a002dd4:	2039      	movs	r0, #57	; 0x39
1a002dd6:	f7ff fe61 	bl	1a002a9c <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a002dda:	2101      	movs	r1, #1
1a002ddc:	203a      	movs	r0, #58	; 0x3a
1a002dde:	f7ff fe5d 	bl	1a002a9c <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a002de2:	2101      	movs	r1, #1
1a002de4:	203b      	movs	r0, #59	; 0x3b
1a002de6:	f7ff fe59 	bl	1a002a9c <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a002dea:	2101      	movs	r1, #1
1a002dec:	203c      	movs	r0, #60	; 0x3c
1a002dee:	f7ff fe55 	bl	1a002a9c <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a002df2:	2101      	movs	r1, #1
1a002df4:	203d      	movs	r0, #61	; 0x3d
1a002df6:	f7ff fe51 	bl	1a002a9c <gpioInit>

}
1a002dfa:	bd08      	pop	{r3, pc}
1a002dfc:	10002b58 	.word	0x10002b58

1a002e00 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a002e00:	b508      	push	{r3, lr}
1a002e02:	460b      	mov	r3, r1
   *printer = uart;
1a002e04:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a002e06:	4611      	mov	r1, r2
1a002e08:	4618      	mov	r0, r3
1a002e0a:	f7ff fd0f 	bl	1a00282c <uartInit>
}
1a002e0e:	bd08      	pop	{r3, pc}

1a002e10 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a002e10:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a002e12:	f7ff fd56 	bl	1a0028c2 <uartWriteString>
}
1a002e16:	bd08      	pop	{r3, pc}

1a002e18 <printEnter>:

void printEnter( print_t printer )
{
1a002e18:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a002e1a:	4902      	ldr	r1, [pc, #8]	; (1a002e24 <printEnter+0xc>)
1a002e1c:	f7ff fd51 	bl	1a0028c2 <uartWriteString>
}
1a002e20:	bd08      	pop	{r3, pc}
1a002e22:	bf00      	nop
1a002e24:	1a003544 	.word	0x1a003544

1a002e28 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002e28:	2301      	movs	r3, #1
1a002e2a:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a002e2e:	4b01      	ldr	r3, [pc, #4]	; (1a002e34 <clearInterrupt+0xc>)
1a002e30:	6258      	str	r0, [r3, #36]	; 0x24
}
1a002e32:	4770      	bx	lr
1a002e34:	40087000 	.word	0x40087000

1a002e38 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a002e3a:	4b12      	ldr	r3, [pc, #72]	; (1a002e84 <serveInterrupt+0x4c>)
1a002e3c:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a002e3e:	4b12      	ldr	r3, [pc, #72]	; (1a002e88 <serveInterrupt+0x50>)
1a002e40:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a002e42:	2301      	movs	r3, #1
1a002e44:	4083      	lsls	r3, r0
1a002e46:	420b      	tst	r3, r1
1a002e48:	d111      	bne.n	1a002e6e <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a002e4a:	4910      	ldr	r1, [pc, #64]	; (1a002e8c <serveInterrupt+0x54>)
1a002e4c:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002e4e:	4d10      	ldr	r5, [pc, #64]	; (1a002e90 <serveInterrupt+0x58>)
1a002e50:	0051      	lsls	r1, r2, #1
1a002e52:	188f      	adds	r7, r1, r2
1a002e54:	00fc      	lsls	r4, r7, #3
1a002e56:	4627      	mov	r7, r4
1a002e58:	442c      	add	r4, r5
1a002e5a:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a002e5c:	6864      	ldr	r4, [r4, #4]
1a002e5e:	1b36      	subs	r6, r6, r4
1a002e60:	443d      	add	r5, r7
1a002e62:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a002e64:	4a08      	ldr	r2, [pc, #32]	; (1a002e88 <serveInterrupt+0x50>)
1a002e66:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a002e68:	f7ff ffde 	bl	1a002e28 <clearInterrupt>
}
1a002e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002e6e:	4907      	ldr	r1, [pc, #28]	; (1a002e8c <serveInterrupt+0x54>)
1a002e70:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002e72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a002e76:	00d1      	lsls	r1, r2, #3
1a002e78:	4a05      	ldr	r2, [pc, #20]	; (1a002e90 <serveInterrupt+0x58>)
1a002e7a:	440a      	add	r2, r1
1a002e7c:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a002e7e:	4a02      	ldr	r2, [pc, #8]	; (1a002e88 <serveInterrupt+0x50>)
1a002e80:	61d3      	str	r3, [r2, #28]
1a002e82:	e7f1      	b.n	1a002e68 <serveInterrupt+0x30>
1a002e84:	1a003548 	.word	0x1a003548
1a002e88:	40087000 	.word	0x40087000
1a002e8c:	40084000 	.word	0x40084000
1a002e90:	1000004c 	.word	0x1000004c

1a002e94 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a002e94:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a002e96:	2000      	movs	r0, #0
1a002e98:	f7ff ffce 	bl	1a002e38 <serveInterrupt>
}
1a002e9c:	bd08      	pop	{r3, pc}

1a002e9e <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a002e9e:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a002ea0:	2001      	movs	r0, #1
1a002ea2:	f7ff ffc9 	bl	1a002e38 <serveInterrupt>
}
1a002ea6:	bd08      	pop	{r3, pc}

1a002ea8 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a002ea8:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a002eaa:	2002      	movs	r0, #2
1a002eac:	f7ff ffc4 	bl	1a002e38 <serveInterrupt>
}
1a002eb0:	bd08      	pop	{r3, pc}
1a002eb2:	Address 0x000000001a002eb2 is out of bounds.


1a002eb4 <__aeabi_uldivmod>:
1a002eb4:	b953      	cbnz	r3, 1a002ecc <__aeabi_uldivmod+0x18>
1a002eb6:	b94a      	cbnz	r2, 1a002ecc <__aeabi_uldivmod+0x18>
1a002eb8:	2900      	cmp	r1, #0
1a002eba:	bf08      	it	eq
1a002ebc:	2800      	cmpeq	r0, #0
1a002ebe:	bf1c      	itt	ne
1a002ec0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a002ec4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002ec8:	f000 b972 	b.w	1a0031b0 <__aeabi_idiv0>
1a002ecc:	f1ad 0c08 	sub.w	ip, sp, #8
1a002ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002ed4:	f000 f806 	bl	1a002ee4 <__udivmoddi4>
1a002ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002ee0:	b004      	add	sp, #16
1a002ee2:	4770      	bx	lr

1a002ee4 <__udivmoddi4>:
1a002ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002ee8:	9e08      	ldr	r6, [sp, #32]
1a002eea:	4604      	mov	r4, r0
1a002eec:	4688      	mov	r8, r1
1a002eee:	2b00      	cmp	r3, #0
1a002ef0:	d14b      	bne.n	1a002f8a <__udivmoddi4+0xa6>
1a002ef2:	428a      	cmp	r2, r1
1a002ef4:	4615      	mov	r5, r2
1a002ef6:	d967      	bls.n	1a002fc8 <__udivmoddi4+0xe4>
1a002ef8:	fab2 f282 	clz	r2, r2
1a002efc:	b14a      	cbz	r2, 1a002f12 <__udivmoddi4+0x2e>
1a002efe:	f1c2 0720 	rsb	r7, r2, #32
1a002f02:	fa01 f302 	lsl.w	r3, r1, r2
1a002f06:	fa20 f707 	lsr.w	r7, r0, r7
1a002f0a:	4095      	lsls	r5, r2
1a002f0c:	ea47 0803 	orr.w	r8, r7, r3
1a002f10:	4094      	lsls	r4, r2
1a002f12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002f16:	0c23      	lsrs	r3, r4, #16
1a002f18:	fbb8 f7fe 	udiv	r7, r8, lr
1a002f1c:	fa1f fc85 	uxth.w	ip, r5
1a002f20:	fb0e 8817 	mls	r8, lr, r7, r8
1a002f24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002f28:	fb07 f10c 	mul.w	r1, r7, ip
1a002f2c:	4299      	cmp	r1, r3
1a002f2e:	d909      	bls.n	1a002f44 <__udivmoddi4+0x60>
1a002f30:	18eb      	adds	r3, r5, r3
1a002f32:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a002f36:	f080 811b 	bcs.w	1a003170 <__udivmoddi4+0x28c>
1a002f3a:	4299      	cmp	r1, r3
1a002f3c:	f240 8118 	bls.w	1a003170 <__udivmoddi4+0x28c>
1a002f40:	3f02      	subs	r7, #2
1a002f42:	442b      	add	r3, r5
1a002f44:	1a5b      	subs	r3, r3, r1
1a002f46:	b2a4      	uxth	r4, r4
1a002f48:	fbb3 f0fe 	udiv	r0, r3, lr
1a002f4c:	fb0e 3310 	mls	r3, lr, r0, r3
1a002f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002f54:	fb00 fc0c 	mul.w	ip, r0, ip
1a002f58:	45a4      	cmp	ip, r4
1a002f5a:	d909      	bls.n	1a002f70 <__udivmoddi4+0x8c>
1a002f5c:	192c      	adds	r4, r5, r4
1a002f5e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002f62:	f080 8107 	bcs.w	1a003174 <__udivmoddi4+0x290>
1a002f66:	45a4      	cmp	ip, r4
1a002f68:	f240 8104 	bls.w	1a003174 <__udivmoddi4+0x290>
1a002f6c:	3802      	subs	r0, #2
1a002f6e:	442c      	add	r4, r5
1a002f70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002f74:	eba4 040c 	sub.w	r4, r4, ip
1a002f78:	2700      	movs	r7, #0
1a002f7a:	b11e      	cbz	r6, 1a002f84 <__udivmoddi4+0xa0>
1a002f7c:	40d4      	lsrs	r4, r2
1a002f7e:	2300      	movs	r3, #0
1a002f80:	e9c6 4300 	strd	r4, r3, [r6]
1a002f84:	4639      	mov	r1, r7
1a002f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002f8a:	428b      	cmp	r3, r1
1a002f8c:	d909      	bls.n	1a002fa2 <__udivmoddi4+0xbe>
1a002f8e:	2e00      	cmp	r6, #0
1a002f90:	f000 80eb 	beq.w	1a00316a <__udivmoddi4+0x286>
1a002f94:	2700      	movs	r7, #0
1a002f96:	e9c6 0100 	strd	r0, r1, [r6]
1a002f9a:	4638      	mov	r0, r7
1a002f9c:	4639      	mov	r1, r7
1a002f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002fa2:	fab3 f783 	clz	r7, r3
1a002fa6:	2f00      	cmp	r7, #0
1a002fa8:	d147      	bne.n	1a00303a <__udivmoddi4+0x156>
1a002faa:	428b      	cmp	r3, r1
1a002fac:	d302      	bcc.n	1a002fb4 <__udivmoddi4+0xd0>
1a002fae:	4282      	cmp	r2, r0
1a002fb0:	f200 80fa 	bhi.w	1a0031a8 <__udivmoddi4+0x2c4>
1a002fb4:	1a84      	subs	r4, r0, r2
1a002fb6:	eb61 0303 	sbc.w	r3, r1, r3
1a002fba:	2001      	movs	r0, #1
1a002fbc:	4698      	mov	r8, r3
1a002fbe:	2e00      	cmp	r6, #0
1a002fc0:	d0e0      	beq.n	1a002f84 <__udivmoddi4+0xa0>
1a002fc2:	e9c6 4800 	strd	r4, r8, [r6]
1a002fc6:	e7dd      	b.n	1a002f84 <__udivmoddi4+0xa0>
1a002fc8:	b902      	cbnz	r2, 1a002fcc <__udivmoddi4+0xe8>
1a002fca:	deff      	udf	#255	; 0xff
1a002fcc:	fab2 f282 	clz	r2, r2
1a002fd0:	2a00      	cmp	r2, #0
1a002fd2:	f040 808f 	bne.w	1a0030f4 <__udivmoddi4+0x210>
1a002fd6:	1b49      	subs	r1, r1, r5
1a002fd8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002fdc:	fa1f f885 	uxth.w	r8, r5
1a002fe0:	2701      	movs	r7, #1
1a002fe2:	fbb1 fcfe 	udiv	ip, r1, lr
1a002fe6:	0c23      	lsrs	r3, r4, #16
1a002fe8:	fb0e 111c 	mls	r1, lr, ip, r1
1a002fec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002ff0:	fb08 f10c 	mul.w	r1, r8, ip
1a002ff4:	4299      	cmp	r1, r3
1a002ff6:	d907      	bls.n	1a003008 <__udivmoddi4+0x124>
1a002ff8:	18eb      	adds	r3, r5, r3
1a002ffa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a002ffe:	d202      	bcs.n	1a003006 <__udivmoddi4+0x122>
1a003000:	4299      	cmp	r1, r3
1a003002:	f200 80cd 	bhi.w	1a0031a0 <__udivmoddi4+0x2bc>
1a003006:	4684      	mov	ip, r0
1a003008:	1a59      	subs	r1, r3, r1
1a00300a:	b2a3      	uxth	r3, r4
1a00300c:	fbb1 f0fe 	udiv	r0, r1, lr
1a003010:	fb0e 1410 	mls	r4, lr, r0, r1
1a003014:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003018:	fb08 f800 	mul.w	r8, r8, r0
1a00301c:	45a0      	cmp	r8, r4
1a00301e:	d907      	bls.n	1a003030 <__udivmoddi4+0x14c>
1a003020:	192c      	adds	r4, r5, r4
1a003022:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003026:	d202      	bcs.n	1a00302e <__udivmoddi4+0x14a>
1a003028:	45a0      	cmp	r8, r4
1a00302a:	f200 80b6 	bhi.w	1a00319a <__udivmoddi4+0x2b6>
1a00302e:	4618      	mov	r0, r3
1a003030:	eba4 0408 	sub.w	r4, r4, r8
1a003034:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003038:	e79f      	b.n	1a002f7a <__udivmoddi4+0x96>
1a00303a:	f1c7 0c20 	rsb	ip, r7, #32
1a00303e:	40bb      	lsls	r3, r7
1a003040:	fa22 fe0c 	lsr.w	lr, r2, ip
1a003044:	ea4e 0e03 	orr.w	lr, lr, r3
1a003048:	fa01 f407 	lsl.w	r4, r1, r7
1a00304c:	fa20 f50c 	lsr.w	r5, r0, ip
1a003050:	fa21 f30c 	lsr.w	r3, r1, ip
1a003054:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a003058:	4325      	orrs	r5, r4
1a00305a:	fbb3 f9f8 	udiv	r9, r3, r8
1a00305e:	0c2c      	lsrs	r4, r5, #16
1a003060:	fb08 3319 	mls	r3, r8, r9, r3
1a003064:	fa1f fa8e 	uxth.w	sl, lr
1a003068:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a00306c:	fb09 f40a 	mul.w	r4, r9, sl
1a003070:	429c      	cmp	r4, r3
1a003072:	fa02 f207 	lsl.w	r2, r2, r7
1a003076:	fa00 f107 	lsl.w	r1, r0, r7
1a00307a:	d90b      	bls.n	1a003094 <__udivmoddi4+0x1b0>
1a00307c:	eb1e 0303 	adds.w	r3, lr, r3
1a003080:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a003084:	f080 8087 	bcs.w	1a003196 <__udivmoddi4+0x2b2>
1a003088:	429c      	cmp	r4, r3
1a00308a:	f240 8084 	bls.w	1a003196 <__udivmoddi4+0x2b2>
1a00308e:	f1a9 0902 	sub.w	r9, r9, #2
1a003092:	4473      	add	r3, lr
1a003094:	1b1b      	subs	r3, r3, r4
1a003096:	b2ad      	uxth	r5, r5
1a003098:	fbb3 f0f8 	udiv	r0, r3, r8
1a00309c:	fb08 3310 	mls	r3, r8, r0, r3
1a0030a0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a0030a4:	fb00 fa0a 	mul.w	sl, r0, sl
1a0030a8:	45a2      	cmp	sl, r4
1a0030aa:	d908      	bls.n	1a0030be <__udivmoddi4+0x1da>
1a0030ac:	eb1e 0404 	adds.w	r4, lr, r4
1a0030b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0030b4:	d26b      	bcs.n	1a00318e <__udivmoddi4+0x2aa>
1a0030b6:	45a2      	cmp	sl, r4
1a0030b8:	d969      	bls.n	1a00318e <__udivmoddi4+0x2aa>
1a0030ba:	3802      	subs	r0, #2
1a0030bc:	4474      	add	r4, lr
1a0030be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0030c2:	fba0 8902 	umull	r8, r9, r0, r2
1a0030c6:	eba4 040a 	sub.w	r4, r4, sl
1a0030ca:	454c      	cmp	r4, r9
1a0030cc:	46c2      	mov	sl, r8
1a0030ce:	464b      	mov	r3, r9
1a0030d0:	d354      	bcc.n	1a00317c <__udivmoddi4+0x298>
1a0030d2:	d051      	beq.n	1a003178 <__udivmoddi4+0x294>
1a0030d4:	2e00      	cmp	r6, #0
1a0030d6:	d069      	beq.n	1a0031ac <__udivmoddi4+0x2c8>
1a0030d8:	ebb1 050a 	subs.w	r5, r1, sl
1a0030dc:	eb64 0403 	sbc.w	r4, r4, r3
1a0030e0:	fa04 fc0c 	lsl.w	ip, r4, ip
1a0030e4:	40fd      	lsrs	r5, r7
1a0030e6:	40fc      	lsrs	r4, r7
1a0030e8:	ea4c 0505 	orr.w	r5, ip, r5
1a0030ec:	e9c6 5400 	strd	r5, r4, [r6]
1a0030f0:	2700      	movs	r7, #0
1a0030f2:	e747      	b.n	1a002f84 <__udivmoddi4+0xa0>
1a0030f4:	f1c2 0320 	rsb	r3, r2, #32
1a0030f8:	fa20 f703 	lsr.w	r7, r0, r3
1a0030fc:	4095      	lsls	r5, r2
1a0030fe:	fa01 f002 	lsl.w	r0, r1, r2
1a003102:	fa21 f303 	lsr.w	r3, r1, r3
1a003106:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00310a:	4338      	orrs	r0, r7
1a00310c:	0c01      	lsrs	r1, r0, #16
1a00310e:	fbb3 f7fe 	udiv	r7, r3, lr
1a003112:	fa1f f885 	uxth.w	r8, r5
1a003116:	fb0e 3317 	mls	r3, lr, r7, r3
1a00311a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00311e:	fb07 f308 	mul.w	r3, r7, r8
1a003122:	428b      	cmp	r3, r1
1a003124:	fa04 f402 	lsl.w	r4, r4, r2
1a003128:	d907      	bls.n	1a00313a <__udivmoddi4+0x256>
1a00312a:	1869      	adds	r1, r5, r1
1a00312c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003130:	d22f      	bcs.n	1a003192 <__udivmoddi4+0x2ae>
1a003132:	428b      	cmp	r3, r1
1a003134:	d92d      	bls.n	1a003192 <__udivmoddi4+0x2ae>
1a003136:	3f02      	subs	r7, #2
1a003138:	4429      	add	r1, r5
1a00313a:	1acb      	subs	r3, r1, r3
1a00313c:	b281      	uxth	r1, r0
1a00313e:	fbb3 f0fe 	udiv	r0, r3, lr
1a003142:	fb0e 3310 	mls	r3, lr, r0, r3
1a003146:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00314a:	fb00 f308 	mul.w	r3, r0, r8
1a00314e:	428b      	cmp	r3, r1
1a003150:	d907      	bls.n	1a003162 <__udivmoddi4+0x27e>
1a003152:	1869      	adds	r1, r5, r1
1a003154:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003158:	d217      	bcs.n	1a00318a <__udivmoddi4+0x2a6>
1a00315a:	428b      	cmp	r3, r1
1a00315c:	d915      	bls.n	1a00318a <__udivmoddi4+0x2a6>
1a00315e:	3802      	subs	r0, #2
1a003160:	4429      	add	r1, r5
1a003162:	1ac9      	subs	r1, r1, r3
1a003164:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003168:	e73b      	b.n	1a002fe2 <__udivmoddi4+0xfe>
1a00316a:	4637      	mov	r7, r6
1a00316c:	4630      	mov	r0, r6
1a00316e:	e709      	b.n	1a002f84 <__udivmoddi4+0xa0>
1a003170:	4607      	mov	r7, r0
1a003172:	e6e7      	b.n	1a002f44 <__udivmoddi4+0x60>
1a003174:	4618      	mov	r0, r3
1a003176:	e6fb      	b.n	1a002f70 <__udivmoddi4+0x8c>
1a003178:	4541      	cmp	r1, r8
1a00317a:	d2ab      	bcs.n	1a0030d4 <__udivmoddi4+0x1f0>
1a00317c:	ebb8 0a02 	subs.w	sl, r8, r2
1a003180:	eb69 020e 	sbc.w	r2, r9, lr
1a003184:	3801      	subs	r0, #1
1a003186:	4613      	mov	r3, r2
1a003188:	e7a4      	b.n	1a0030d4 <__udivmoddi4+0x1f0>
1a00318a:	4660      	mov	r0, ip
1a00318c:	e7e9      	b.n	1a003162 <__udivmoddi4+0x27e>
1a00318e:	4618      	mov	r0, r3
1a003190:	e795      	b.n	1a0030be <__udivmoddi4+0x1da>
1a003192:	4667      	mov	r7, ip
1a003194:	e7d1      	b.n	1a00313a <__udivmoddi4+0x256>
1a003196:	4681      	mov	r9, r0
1a003198:	e77c      	b.n	1a003094 <__udivmoddi4+0x1b0>
1a00319a:	3802      	subs	r0, #2
1a00319c:	442c      	add	r4, r5
1a00319e:	e747      	b.n	1a003030 <__udivmoddi4+0x14c>
1a0031a0:	f1ac 0c02 	sub.w	ip, ip, #2
1a0031a4:	442b      	add	r3, r5
1a0031a6:	e72f      	b.n	1a003008 <__udivmoddi4+0x124>
1a0031a8:	4638      	mov	r0, r7
1a0031aa:	e708      	b.n	1a002fbe <__udivmoddi4+0xda>
1a0031ac:	4637      	mov	r7, r6
1a0031ae:	e6e9      	b.n	1a002f84 <__udivmoddi4+0xa0>

1a0031b0 <__aeabi_idiv0>:
1a0031b0:	4770      	bx	lr
1a0031b2:	bf00      	nop

1a0031b4 <__libc_init_array>:
1a0031b4:	b570      	push	{r4, r5, r6, lr}
1a0031b6:	4e0d      	ldr	r6, [pc, #52]	; (1a0031ec <__libc_init_array+0x38>)
1a0031b8:	4c0d      	ldr	r4, [pc, #52]	; (1a0031f0 <__libc_init_array+0x3c>)
1a0031ba:	1ba4      	subs	r4, r4, r6
1a0031bc:	10a4      	asrs	r4, r4, #2
1a0031be:	2500      	movs	r5, #0
1a0031c0:	42a5      	cmp	r5, r4
1a0031c2:	d109      	bne.n	1a0031d8 <__libc_init_array+0x24>
1a0031c4:	4e0b      	ldr	r6, [pc, #44]	; (1a0031f4 <__libc_init_array+0x40>)
1a0031c6:	4c0c      	ldr	r4, [pc, #48]	; (1a0031f8 <__libc_init_array+0x44>)
1a0031c8:	f7fd f928 	bl	1a00041c <_init>
1a0031cc:	1ba4      	subs	r4, r4, r6
1a0031ce:	10a4      	asrs	r4, r4, #2
1a0031d0:	2500      	movs	r5, #0
1a0031d2:	42a5      	cmp	r5, r4
1a0031d4:	d105      	bne.n	1a0031e2 <__libc_init_array+0x2e>
1a0031d6:	bd70      	pop	{r4, r5, r6, pc}
1a0031d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0031dc:	4798      	blx	r3
1a0031de:	3501      	adds	r5, #1
1a0031e0:	e7ee      	b.n	1a0031c0 <__libc_init_array+0xc>
1a0031e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0031e6:	4798      	blx	r3
1a0031e8:	3501      	adds	r5, #1
1a0031ea:	e7f2      	b.n	1a0031d2 <__libc_init_array+0x1e>
1a0031ec:	1a00354c 	.word	0x1a00354c
1a0031f0:	1a00354c 	.word	0x1a00354c
1a0031f4:	1a00354c 	.word	0x1a00354c
1a0031f8:	1a003550 	.word	0x1a003550

1a0031fc <memcpy>:
1a0031fc:	b510      	push	{r4, lr}
1a0031fe:	1e43      	subs	r3, r0, #1
1a003200:	440a      	add	r2, r1
1a003202:	4291      	cmp	r1, r2
1a003204:	d100      	bne.n	1a003208 <memcpy+0xc>
1a003206:	bd10      	pop	{r4, pc}
1a003208:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00320c:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003210:	e7f7      	b.n	1a003202 <memcpy+0x6>

1a003212 <memset>:
1a003212:	4402      	add	r2, r0
1a003214:	4603      	mov	r3, r0
1a003216:	4293      	cmp	r3, r2
1a003218:	d100      	bne.n	1a00321c <memset+0xa>
1a00321a:	4770      	bx	lr
1a00321c:	f803 1b01 	strb.w	r1, [r3], #1
1a003220:	e7f9      	b.n	1a003216 <memset+0x4>
1a003222:	ffff 6c42 	vdup.8	q11, d2[7]
1a003226:	6e69      	.short	0x6e69
1a003228:	6320796b 	.word	0x6320796b
1a00322c:	66206e6f 	.word	0x66206e6f
1a003230:	52656572 	.word	0x52656572
1a003234:	20534f54 	.word	0x20534f54
1a003238:	41732079 	.word	0x41732079
1a00323c:	002e4950 	.word	0x002e4950
1a003240:	6154796d 	.word	0x6154796d
1a003244:	ff006b73 	.word	0xff006b73
1a003248:	6e696c42 	.word	0x6e696c42
1a00324c:	ff00216b 	.word	0xff00216b
1a003250:	454c4449 	.word	0x454c4449
1a003254:	ffffff00 	.word	0xffffff00
1a003258:	51726d54 	.word	0x51726d54
1a00325c:	ffffff00 	.word	0xffffff00
1a003260:	20726d54 	.word	0x20726d54
1a003264:	00637653 	.word	0x00637653

1a003268 <ExtRateIn>:
1a003268:	00000000                                ....

1a00326c <OscRateIn>:
1a00326c:	00b71b00                                ....

1a003270 <InitClkStates>:
1a003270:	01010f01                                ....

1a003274 <pinmuxing>:
1a003274:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a003284:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a003294:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0032a4:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0032b4:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0032c4:	00d50301 00d50401 00160107 00560207     ..............V.
1a0032d4:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0032e4:	00570206                                ..W.

1a0032e8 <UART_BClock>:
1a0032e8:	01a201c2 01620182                       ......b.

1a0032f0 <UART_PClock>:
1a0032f0:	00820081 00a200a1 08040201 0f0f0f03     ................
1a003300:	ffff00ff                                ....

1a003304 <periph_to_base>:
1a003304:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a003314:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a003324:	000100e0 01000100 01200003 00060120     .......... . ...
1a003334:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a003344:	01820013 00120182 01a201a2 01c20011     ................
1a003354:	001001c2 01e201e2 0202000f 000e0202     ................
1a003364:	02220222 0223000d 001c0223              "."...#.#...

1a003370 <InitClkStates>:
1a003370:	00010100 00010909 0001090a 01010701     ................
1a003380:	00010902 00010906 0101090c 0001090d     ................
1a003390:	0001090e 0001090f 00010910 00010911     ................
1a0033a0:	00010912 00010913 00011114 00011119     ................
1a0033b0:	0001111a 0001111b                       ........

1a0033b8 <lpcUarts>:
1a0033b8:	40081000 06020406 00180205 40081000     ...@...........@
1a0033c8:	09070509 00180706 40082000 00000000     ......... .@....
1a0033d8:	00190000 400c1000 07060107 001a0602     .......@........
1a0033e8:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0033f8:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a003408:	0072656d                                mer.

1a00340c <gpioPinsInit>:
1a00340c:	02000104 00050701 05010d03 04080100     ................
1a00341c:	02020002 02000304 00000403 04070002     ................
1a00342c:	030c0300 09050402 05040103 04030208     ................
1a00343c:	04020305 06040504 0802000c 03000b06     ................
1a00344c:	00090607 07060503 060f0504 03030004     ................
1a00345c:	02000404 00050404 06040502 04060200     ................
1a00346c:	0c050408 05040a04 0003010e 14010a00     ................
1a00347c:	010f0000 0d000012 00001101 0010010c     ................
1a00348c:	07070300 000f0300 01000001 00000000     ................
1a00349c:	000a0600 08060603 06100504 04030005     ................
1a0034ac:	03000106 04090400 04010d05 010b0000     ................
1a0034bc:	0200000f 00000001 00010104 02010800     ................
1a0034cc:	01090000 09010006 05040002 04010200     ................
1a0034dc:	02020105 02020504 0e00000a 01000b02     ................
1a0034ec:	000c020b 00040c01 04000200 01020001     ................
1a0034fc:	02000204 00030402 03070302 070b0300     ................
1a00350c:	0c030004 03000507 0006070d 01020e03     ................
1a00351c:	04010504 06020006 02000504 00040405     ................
1a00352c:	08040402 040c0504 0d050409 05040a04     ................
1a00353c:	0005010e ffff0801 00000a0d              ............

1a003548 <ultrasonicSensorsIrqMap>:
1a003548:	ff020100                                ....
