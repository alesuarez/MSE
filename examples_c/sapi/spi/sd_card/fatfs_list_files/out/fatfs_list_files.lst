
examples_c/sapi/spi/sd_card/fatfs_list_files/out/fatfs_list_files.elf:     file format elf32-littlearm
examples_c/sapi/spi/sd_card/fatfs_list_files/out/fatfs_list_files.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0003e9

Program Header:
0x70000001 off    0x000154d8 vaddr 0x1a0054d8 paddr 0x1a0054d8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000a0c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000054e0 memsz 0x000054e0 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0054e0 align 2**16
         filesz 0x000000fc memsz 0x000000fc flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000054d4  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fc  10000000  1a0054e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200fc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200fc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200fc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200fc  2**2
                  CONTENTS
  6 .bss          0000090c  10000100  10000100  00000100  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200fc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200fc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200fc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200fc  2**2
                  CONTENTS
 11 .init_array   00000004  1a0054d4  1a0054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0054d8  1a0054d8  000154d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200fc  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200fc  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200fc  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200fc  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200fc  2**2
                  CONTENTS
 18 .noinit       00000000  10000a0c  10000a0c  000200fc  2**2
                  CONTENTS
 19 .debug_info   0001fe29  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00003c5b  00000000  00000000  0003ff25  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000dd2c  00000000  00000000  00043b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000b70  00000000  00000000  000518ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000bc0  00000000  00000000  0005241c  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000c183  00000000  00000000  00052fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000c6e8  00000000  00000000  0005f15f  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002ac19  00000000  00000000  0006b847  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  00096460  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000964df  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002718  00000000  00000000  00096518  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000100 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0054d4 l    d  .init_array	00000000 .init_array
1a0054d8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000a0c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 sd_spi.c
10000100 l     O .bss	00000120 fno.13767
00000000 l    df *ABS*	00000000 system.c
10000220 l     O .bss	00000004 heap_end.5742
00000000 l    df *ABS*	00000000 ff.c
1a000534 l     F .text	0000000a ld_word
1a00053e l     F .text	00000016 ld_dword
1a000554 l     F .text	000000a8 ld_qword
1a0005fc l     F .text	00000008 st_word
1a000604 l     F .text	00000014 st_dword
1a000618 l     F .text	00000012 mem_cpy
1a00062a l     F .text	0000000a mem_set
1a000634 l     F .text	0000001e mem_cmp
1a000652 l     F .text	00000010 chk_chr
1a000662 l     F .text	00000004 dbc_1st
1a000666 l     F .text	00000004 dbc_2nd
1a00066c l     F .text	000000c0 tchar2uni
1a00072c l     F .text	000000d4 put_utf
1a000800 l     F .text	00000018 clst2sect
1a000818 l     F .text	00000026 ld_clust
1a000840 l     F .text	00000088 pick_lfn
1a0008c8 l     F .text	0000001c sum_sfn
1a0008e4 l     F .text	00000030 xdir_sum
1a000914 l     F .text	000000c2 get_xfileinfo
1a0009d6 l     F .text	0000002e init_alloc_info
1a000a04 l     F .text	000000b0 get_ldnumber
1a000ab4 l     F .text	00000048 validate
1a000afc l     F .text	00000050 sync_window
1a000b4c l     F .text	00000034 move_window
1a000b80 l     F .text	00000084 check_fs
1a000c04 l     F .text	000004b4 find_volume
1a0010b8 l     F .text	00000086 find_bitmap
1a00113e l     F .text	00000078 change_bitmap
1a0011b6 l     F .text	0000011e put_fat
1a0012d4 l     F .text	00000030 fill_last_frag
1a001304 l     F .text	00000172 get_fat
1a001476 l     F .text	000000b4 dir_sdi
1a00152a l     F .text	000001cc create_chain
1a0016f6 l     F .text	00000052 dir_clear
1a001748 l     F .text	000000dc dir_next
1a001824 l     F .text	00000100 load_xdir
1a001924 l     F .text	000000ea dir_read
1a001a10 l     F .text	00000244 create_name
1a001c54 l     F .text	00000036 xname_sum
1a001c8c l     F .text	000000a4 cmp_lfn
1a001d30 l     F .text	0000015c dir_find
1a001e8c l     F .text	000000b4 follow_path
1a001f40 l     F .text	000001ae get_fileinfo
10000224 l     O .bss	00000260 DirBuf
10000484 l     O .bss	00000008 FatFs
1000048c l     O .bss	00000002 Fsid
10000490 l     O .bss	00000200 LfnBuf
1a004ca0 l     O .text	00000080 ExCvt
1a004d20 l     O .text	0000000d LfnOfs
1a004d30 l     O .text	00000008 VolumeStr
00000000 l    df *ABS*	00000000 ffunicode.c
1a004d6c l     O .text	000001f2 cvt1.5491
1a004f60 l     O .text	000000bc cvt2.5492
1a00501c l     O .text	00000100 uc850
00000000 l    df *ABS*	00000000 fssdc.c
1a002344 l     F .text	00000018 newCardStatus
1a00235c l     F .text	00000024 SSPSend
1a002380 l     F .text	00000018 xmit_spi
1a0023bc l     F .text	0000001c rcvr_spi
1a0023d8 l     F .text	00000024 wait_ready
1a0023fc l     F .text	00000018 deselect
1a002414 l     F .text	00000024 select_
1a002438 l     F .text	00000084 send_cmd
1a0024bc l     F .text	0000005c xmit_datablock
1a002518 l     F .text	00000060 rcvr_datablock
10000690 l     O .bss	00000001 CardType
10000691 l     O .bss	00000001 Timer1
10000692 l     O .bss	00000001 Timer2
10000694 l     O .bss	00000004 g_statusUpdateCallback
10000000 l     O .data	00000001 g_cardStatus
10000001 l     O .data	00000001 g_diskStats
10000004 l     O .data	00000004 g_spiFastClock
10000008 l     O .data	00000004 g_spiSlowClock
00000000 l    df *ABS*	00000000 ffdisks.c
00000000 l    df *ABS*	00000000 board.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0052f0 l     O .text	00000004 InitClkStates
1a0052f4 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002a94 l     F .text	0000002c Chip_UART_GetIndex
1a005368 l     O .text	00000008 UART_BClock
1a005370 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002bfc l     F .text	000000a4 pll_calc_divs
1a002ca0 l     F .text	0000010c pll_get_frac
1a002dac l     F .text	0000004c Chip_Clock_FindBaseClock
1a003020 l     F .text	00000022 Chip_Clock_GetDivRate
10000698 l     O .bss	00000008 audio_usb_pll_freq
1a005384 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0053f0 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0032e0 l     F .text	0000001a SSP_Write2BFifo
1a0032fa l     F .text	00000018 SSP_Write1BFifo
1a003312 l     F .text	00000042 SSP_Read2BFifo
1a003354 l     F .text	00000040 SSP_Read1BFifo
1a003394 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0033a8 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_tick.c
100006a0 l     O .bss	00000004 callBackFuncParams
100006a8 l     O .bss	00000008 tickCounter
100006b0 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_timer.c
1a003660 l     F .text	00000002 errorOcurred
1a003662 l     F .text	00000002 doNothing
10000010 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100006b4 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a003788 l     F .text	00000010 clearInterrupt
1a003798 l     F .text	0000005c serveInterrupt
10000050 l     O .data	00000048 ultrasonicSensors
1a005438 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003ee4 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a004534 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
1000009c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 
1a0054d8 l       .init_array	00000000 __init_array_end
1a0054d4 l       .bss_RAM5	00000000 __preinit_array_end
1a0054d4 l       .init_array	00000000 __init_array_start
1a0054d4 l       .bss_RAM5	00000000 __preinit_array_start
1a004c72 g     F .text	00000010 _malloc_usable_size_r
1a002e44 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000482 g     F .text	00000012 _isatty_r
1a0036e4 g     F .text	00000044 TIMER2_IRQHandler
1a000494 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a002578 g     F .text	0000000c FSSDC_FatFs_DiskStatus
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a003b84 g     F .text	00000030 printf
1a0029da g     F .text	00000008 __stdio_init
1a004b1e g     F .text	00000024 __sseek
1a003f64 g     F .text	00000060 __sinit
1a003c04 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a003f38 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a004c24 g     F .text	00000002 __malloc_unlock
1a0029b4 g     F .text	00000014 Board_UARTPutSTR
1a00362c g     F .text	00000034 SysTick_Handler
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002998 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a004bf0 g     F .text	00000032 memmove
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a0054e0 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a000478 g     F .text	0000000a _fstat_r
53ff74a6 g       *ABS*	00000000 __valid_user_code_checksum
1a0054e0 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0022a8 g     F .text	0000009c ff_wtoupper
100006c0 g     O .bss	00000238 fs
1a003728 g     F .text	00000044 TIMER3_IRQHandler
1a0030c2 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a003b5c g     F .text	00000016 memcpy
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003f2c g     F .text	0000000c _cleanup_r
1a004344 g     F .text	000001f0 _svfprintf_r
1a002912 g     F .text	0000000e disk_initialize
1a003814 g     F .text	00000000 .hidden __aeabi_uldivmod
10000a0c g       .noinit	00000000 _noinit
100009fc g     O .bss	00000004 SystemCoreClock
1a002ac0 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a003140 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002904 g     F .text	0000000e disk_status
100008f8 g     O .bss	00000100 buff
1a002a1c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003844 g     F .text	000002cc .hidden __udivmoddi4
1a0004ec g     F .text	00000020 _sbrk_r
1a0052e8 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0021d2 g     F .text	0000001a f_closedir
1a00049e g     F .text	0000004e _read_r
1a0037fe g     F .text	0000000a GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0054d8 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00549c g     O .text	00000004 _global_impure_ptr
1a0027bc g     F .text	000000b4 FSSDC_FatFs_DiskWrite
1000000c g     O .data	00000004 VolToPart
1a004c26 g     F .text	0000004c _realloc_r
1a003b14 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a00046c g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0033d2 g     F .text	000000aa Chip_SSP_RWFrames_Blocking
1a00223c g     F .text	00000040 ff_uni2oem
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000a0c g       .bss	00000000 _ebss
1a003664 g     F .text	00000040 TIMER0_IRQHandler
1a002738 g     F .text	00000084 FSSDC_FatFs_DiskRead
1a0003e8 g     F .text	00000084 Reset_Handler
1a0035b0 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002df8 g     F .text	0000004c Chip_Clock_EnableCrystal
1a002584 g     F .text	000001b4 FSSDC_FatFs_DiskInitialize
1a002870 g     F .text	00000060 FSSDC_InitSPI
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0036a4 g     F .text	00000040 TIMER1_IRQHandler
1a00543c g     O .text	00000020 __sf_fake_stderr
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a002fb4 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004290 g     F .text	000000b4 __ssputs_r
1a0033c0 g     F .text	00000012 Chip_SSP_SetClockRate
1a004562 g     F .text	00000024 __sfputs_r
1a003808 g     F .text	0000000a GPIO2_IRQHandler
1a004b50 g     F .text	00000000 memchr
1a004140 g     F .text	0000009c _free_r
1a00309c g     F .text	00000026 Chip_Clock_GetBaseClock
1a0028fc g     F .text	00000008 disk_timerproc
10000100 g       .bss	00000000 _bss
1a002398 g     F .text	00000024 SSPReceive
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00347c g     F .text	0000003e Chip_SSP_SetBitRate
1a0052ec g     O .text	00000004 OscRateIn
1a0021ec g     F .text	0000004e f_readdir
10000a0c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000300 g     F .text	00000008 diskTickHook
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a00046e g     F .text	0000000a _close_r
1a003ca8 g     F .text	000000dc __swsetup_r
1a003b10  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003fc4 g     F .text	00000078 __sfp
1a004ac4 g     F .text	00000022 __sread
1a00376c g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004c22 g     F .text	00000002 __malloc_lock
1a002984 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003e90 g     F .text	00000054 _fflush_r
1a00545c g     O .text	00000020 __sf_fake_stdin
1a002e60 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003b72 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000380 g     F .text	00000068 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a003528 g     F .text	00000050 spiInit
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a004b42 g     F .text	00000008 __sclose
1a0041dc g     F .text	000000b4 _malloc_r
1a0020f0 g     F .text	00000050 f_mount
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0030d0 g     F .text	0000003c Chip_Clock_EnableOpts
1a0029d2 g     F .text	00000008 __stdio_getchar
1a002140 g     F .text	00000092 f_opendir
1a002e7c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000308 g     F .text	00000078 scan_files
1a00227c g     F .text	0000002c ff_oem2uni
1a002f34 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0034f4 g     F .text	00000034 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003b84 g     F .text	00000030 iprintf
1a003bb4 g     F .text	00000040 sprintf
10000a08 g     O .bss	00000004 g_pUsbApi
1a0029e4 g     F .text	00000038 Board_SetupMuxing
1a002b14 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00050c g     F .text	00000028 _write_r
10000a00 g     O .bss	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a0047b4 g     F .text	000000ea _printf_common
10000098 g     O .data	00000004 _impure_ptr
1a003d84 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a004344 g     F .text	000001f0 _svfiprintf_r
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a003578 g     F .text	00000020 tickCallbackSet
10000a0c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0034bc g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a004078 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a002960 g     F .text	00000024 Board_Debug_Init
1a0029c8 g     F .text	0000000a __stdio_putchar
100000fc g       .data	00000000 _edata
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00318c g     F .text	00000154 Chip_SetupCoreClock
1a004ae6 g     F .text	00000038 __swrite
1a0037f4 g     F .text	0000000a GPIO0_IRQHandler
100009f8 g     O .bss	00000001 res
1a002940 g     F .text	00000020 disk_write
1a004588 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a00403c g     F .text	0000003c _fwalk_reent
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00547c g     O .text	00000020 __sf_fake_stdout
1a003bb4 g     F .text	00000040 siprintf
1a003b10  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0040c0 g     F .text	00000080 __smakebuf_r
1a003bf4 g     F .text	00000010 strlen
1a002920 g     F .text	00000020 disk_read
1a0048a0 g     F .text	00000224 _printf_i
1a00310c g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
100006bc g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
100006b8 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a004588 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a003598 g     F .text	00000018 tickPowerSet
1a0028d0 g     F .text	0000002c FSSDC_Update
1a003044 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002a88 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 e9 03 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a a6 74 ff 53     }............t.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	2d 36 00 1a                                         -6..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	6d 37 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     m7..............
1a000070:	65 36 00 1a a5 36 00 1a e5 36 00 1a 29 37 00 1a     e6...6...6..)7..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	f5 37 00 1a ff 37 00 1a 09 38 00 1a bb 01 00 1a     .7...7...8......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0054e0 	.word	0x1a0054e0
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000fc 	.word	0x000000fc
1a000120:	1a0054e0 	.word	0x1a0054e0
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0054e0 	.word	0x1a0054e0
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0054e0 	.word	0x1a0054e0
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0054e0 	.word	0x1a0054e0
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000100 	.word	0x10000100
1a000154:	0000090c 	.word	0x0000090c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __WFI();
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <diskTickHook>:
}


// FUNCION que se ejecuta cada vezque ocurre un Tick
void diskTickHook( void *ptr )
{
1a000300:	b508      	push	{r3, lr}
   disk_timerproc();   // Disk timer process
1a000302:	f002 fafb 	bl	1a0028fc <disk_timerproc>
}
1a000306:	bd08      	pop	{r3, pc}

1a000308 <scan_files>:
{
1a000308:	b570      	push	{r4, r5, r6, lr}
1a00030a:	b094      	sub	sp, #80	; 0x50
1a00030c:	4604      	mov	r4, r0
   res = f_opendir(&dir, path);                       /* Open the directory */
1a00030e:	4601      	mov	r1, r0
1a000310:	4668      	mov	r0, sp
1a000312:	f001 ff15 	bl	1a002140 <f_opendir>
   if (res == FR_OK) {
1a000316:	4605      	mov	r5, r0
1a000318:	bb38      	cbnz	r0, 1a00036a <scan_files+0x62>
         res = f_readdir(&dir, &fno);                   /* Read a directory item */
1a00031a:	4915      	ldr	r1, [pc, #84]	; (1a000370 <scan_files+0x68>)
1a00031c:	4668      	mov	r0, sp
1a00031e:	f001 ff65 	bl	1a0021ec <f_readdir>
         if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
1a000322:	4605      	mov	r5, r0
1a000324:	b9f0      	cbnz	r0, 1a000364 <scan_files+0x5c>
1a000326:	4b12      	ldr	r3, [pc, #72]	; (1a000370 <scan_files+0x68>)
1a000328:	7e9b      	ldrb	r3, [r3, #26]
1a00032a:	b1db      	cbz	r3, 1a000364 <scan_files+0x5c>
         if (fno.fattrib & AM_DIR) {                    /* It is a directory */
1a00032c:	4b10      	ldr	r3, [pc, #64]	; (1a000370 <scan_files+0x68>)
1a00032e:	7b1b      	ldrb	r3, [r3, #12]
1a000330:	f013 0f10 	tst.w	r3, #16
1a000334:	d105      	bne.n	1a000342 <scan_files+0x3a>
            printf("%s/%s\r\n", path, fno.fname);
1a000336:	4a0f      	ldr	r2, [pc, #60]	; (1a000374 <scan_files+0x6c>)
1a000338:	4621      	mov	r1, r4
1a00033a:	480f      	ldr	r0, [pc, #60]	; (1a000378 <scan_files+0x70>)
1a00033c:	f003 fc22 	bl	1a003b84 <iprintf>
1a000340:	e7eb      	b.n	1a00031a <scan_files+0x12>
            i = strlen(path);
1a000342:	4620      	mov	r0, r4
1a000344:	f003 fc56 	bl	1a003bf4 <strlen>
1a000348:	4606      	mov	r6, r0
            sprintf(&path[i], "/%s\r\n", fno.fname);
1a00034a:	4a0a      	ldr	r2, [pc, #40]	; (1a000374 <scan_files+0x6c>)
1a00034c:	490b      	ldr	r1, [pc, #44]	; (1a00037c <scan_files+0x74>)
1a00034e:	1820      	adds	r0, r4, r0
1a000350:	f003 fc30 	bl	1a003bb4 <siprintf>
            res = scan_files(path);                    /* Enter the directory */
1a000354:	4620      	mov	r0, r4
1a000356:	f7ff ffd7 	bl	1a000308 <scan_files>
            if (res != FR_OK) break;
1a00035a:	4605      	mov	r5, r0
1a00035c:	b910      	cbnz	r0, 1a000364 <scan_files+0x5c>
            path[i] = 0;
1a00035e:	2300      	movs	r3, #0
1a000360:	55a3      	strb	r3, [r4, r6]
1a000362:	e7da      	b.n	1a00031a <scan_files+0x12>
      f_closedir(&dir);
1a000364:	4668      	mov	r0, sp
1a000366:	f001 ff34 	bl	1a0021d2 <f_closedir>
}
1a00036a:	4628      	mov	r0, r5
1a00036c:	b014      	add	sp, #80	; 0x50
1a00036e:	bd70      	pop	{r4, r5, r6, pc}
1a000370:	10000100 	.word	0x10000100
1a000374:	1000011a 	.word	0x1000011a
1a000378:	1a004c98 	.word	0x1a004c98
1a00037c:	1a004c90 	.word	0x1a004c90

1a000380 <main>:
{
1a000380:	b508      	push	{r3, lr}
   spiConfig( SPI0 );
1a000382:	2000      	movs	r0, #0
1a000384:	f003 f8d0 	bl	1a003528 <spiInit>
   tickConfig( 10 );
1a000388:	200a      	movs	r0, #10
1a00038a:	2100      	movs	r1, #0
1a00038c:	f003 f910 	bl	1a0035b0 <tickInit>
   tickCallbackSet( diskTickHook, NULL );   
1a000390:	2100      	movs	r1, #0
1a000392:	480f      	ldr	r0, [pc, #60]	; (1a0003d0 <main+0x50>)
1a000394:	f003 f8f0 	bl	1a003578 <tickCallbackSet>
   FSSDC_InitSPI ();
1a000398:	f002 fa6a 	bl	1a002870 <FSSDC_InitSPI>
   strcpy (buff, "SDC:");   
1a00039c:	4b0d      	ldr	r3, [pc, #52]	; (1a0003d4 <main+0x54>)
1a00039e:	490e      	ldr	r1, [pc, #56]	; (1a0003d8 <main+0x58>)
1a0003a0:	6808      	ldr	r0, [r1, #0]
1a0003a2:	6018      	str	r0, [r3, #0]
1a0003a4:	790a      	ldrb	r2, [r1, #4]
1a0003a6:	711a      	strb	r2, [r3, #4]
   res = f_mount(&fs, "SDC:", 1);
1a0003a8:	2201      	movs	r2, #1
1a0003aa:	480c      	ldr	r0, [pc, #48]	; (1a0003dc <main+0x5c>)
1a0003ac:	f001 fea0 	bl	1a0020f0 <f_mount>
1a0003b0:	4b0b      	ldr	r3, [pc, #44]	; (1a0003e0 <main+0x60>)
1a0003b2:	7018      	strb	r0, [r3, #0]
   if (res == FR_OK) {
1a0003b4:	b110      	cbz	r0, 1a0003bc <main+0x3c>
}
1a0003b6:	4b0a      	ldr	r3, [pc, #40]	; (1a0003e0 <main+0x60>)
1a0003b8:	7818      	ldrb	r0, [r3, #0]
1a0003ba:	bd08      	pop	{r3, pc}
      strcpy(buff, "/");
1a0003bc:	4805      	ldr	r0, [pc, #20]	; (1a0003d4 <main+0x54>)
1a0003be:	4b09      	ldr	r3, [pc, #36]	; (1a0003e4 <main+0x64>)
1a0003c0:	881b      	ldrh	r3, [r3, #0]
1a0003c2:	8003      	strh	r3, [r0, #0]
      res = scan_files(buff);
1a0003c4:	f7ff ffa0 	bl	1a000308 <scan_files>
1a0003c8:	4b05      	ldr	r3, [pc, #20]	; (1a0003e0 <main+0x60>)
1a0003ca:	7018      	strb	r0, [r3, #0]
1a0003cc:	e7f3      	b.n	1a0003b6 <main+0x36>
1a0003ce:	bf00      	nop
1a0003d0:	1a000301 	.word	0x1a000301
1a0003d4:	100008f8 	.word	0x100008f8
1a0003d8:	1a004c84 	.word	0x1a004c84
1a0003dc:	100006c0 	.word	0x100006c0
1a0003e0:	100009f8 	.word	0x100009f8
1a0003e4:	1a004c8c 	.word	0x1a004c8c

1a0003e8 <Reset_Handler>:
void Reset_Handler(void) {
1a0003e8:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1a0003ea:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0003ec:	4b18      	ldr	r3, [pc, #96]	; (1a000450 <Reset_Handler+0x68>)
1a0003ee:	4a19      	ldr	r2, [pc, #100]	; (1a000454 <Reset_Handler+0x6c>)
1a0003f0:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0003f2:	3304      	adds	r3, #4
1a0003f4:	4a18      	ldr	r2, [pc, #96]	; (1a000458 <Reset_Handler+0x70>)
1a0003f6:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0003f8:	2300      	movs	r3, #0
1a0003fa:	e005      	b.n	1a000408 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0003fc:	4a17      	ldr	r2, [pc, #92]	; (1a00045c <Reset_Handler+0x74>)
1a0003fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000402:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000406:	3301      	adds	r3, #1
1a000408:	2b07      	cmp	r3, #7
1a00040a:	d9f7      	bls.n	1a0003fc <Reset_Handler+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
1a00040c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00040e:	4b14      	ldr	r3, [pc, #80]	; (1a000460 <Reset_Handler+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000410:	e007      	b.n	1a000422 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000412:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000416:	689a      	ldr	r2, [r3, #8]
1a000418:	6859      	ldr	r1, [r3, #4]
1a00041a:	6818      	ldr	r0, [r3, #0]
1a00041c:	f7ff feb5 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000420:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000422:	4a10      	ldr	r2, [pc, #64]	; (1a000464 <Reset_Handler+0x7c>)
1a000424:	4293      	cmp	r3, r2
1a000426:	d3f4      	bcc.n	1a000412 <Reset_Handler+0x2a>
1a000428:	e006      	b.n	1a000438 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00042a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00042c:	6859      	ldr	r1, [r3, #4]
1a00042e:	f854 0b08 	ldr.w	r0, [r4], #8
1a000432:	f7ff feb9 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000436:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000438:	4a0b      	ldr	r2, [pc, #44]	; (1a000468 <Reset_Handler+0x80>)
1a00043a:	4293      	cmp	r3, r2
1a00043c:	d3f5      	bcc.n	1a00042a <Reset_Handler+0x42>
    SystemInit();
1a00043e:	f003 f859 	bl	1a0034f4 <SystemInit>
    __libc_init_array();
1a000442:	f003 fb67 	bl	1a003b14 <__libc_init_array>
    main();
1a000446:	f7ff ff9b 	bl	1a000380 <main>
        __WFI();
1a00044a:	bf30      	wfi
1a00044c:	e7fd      	b.n	1a00044a <Reset_Handler+0x62>
1a00044e:	bf00      	nop
1a000450:	40053100 	.word	0x40053100
1a000454:	10df1000 	.word	0x10df1000
1a000458:	01dff7ff 	.word	0x01dff7ff
1a00045c:	e000e280 	.word	0xe000e280
1a000460:	1a000114 	.word	0x1a000114
1a000464:	1a000150 	.word	0x1a000150
1a000468:	1a000178 	.word	0x1a000178

1a00046c <_init>:
void _init(void) {}
1a00046c:	4770      	bx	lr

1a00046e <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a00046e:	2309      	movs	r3, #9
1a000470:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000476:	4770      	bx	lr

1a000478 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000478:	2358      	movs	r3, #88	; 0x58
1a00047a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00047c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000480:	4770      	bx	lr

1a000482 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000482:	2902      	cmp	r1, #2
1a000484:	d801      	bhi.n	1a00048a <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000486:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000488:	4770      	bx	lr
       SET_ERR(EBADF);
1a00048a:	2309      	movs	r3, #9
1a00048c:	6003      	str	r3, [r0, #0]
       return -1;
1a00048e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000492:	4770      	bx	lr

1a000494 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000494:	2358      	movs	r3, #88	; 0x58
1a000496:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00049c:	4770      	bx	lr

1a00049e <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a00049e:	2902      	cmp	r1, #2
1a0004a0:	d81f      	bhi.n	1a0004e2 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0004a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0004a6:	461d      	mov	r5, r3
1a0004a8:	4617      	mov	r7, r2
1a0004aa:	4606      	mov	r6, r0
  size_t i = 0;
1a0004ac:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0004ae:	42ac      	cmp	r4, r5
1a0004b0:	d211      	bcs.n	1a0004d6 <_read_r+0x38>
         int c = __stdio_getchar();
1a0004b2:	f002 fa8e 	bl	1a0029d2 <__stdio_getchar>
         if( c != -1 ){
1a0004b6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0004ba:	d0f8      	beq.n	1a0004ae <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0004bc:	f104 0801 	add.w	r8, r4, #1
1a0004c0:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0004c2:	280d      	cmp	r0, #13
1a0004c4:	d003      	beq.n	1a0004ce <_read_r+0x30>
1a0004c6:	280a      	cmp	r0, #10
1a0004c8:	d001      	beq.n	1a0004ce <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0004ca:	4644      	mov	r4, r8
1a0004cc:	e7ef      	b.n	1a0004ae <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0004ce:	f002 fa80 	bl	1a0029d2 <__stdio_getchar>
               return i;
1a0004d2:	4640      	mov	r0, r8
1a0004d4:	e003      	b.n	1a0004de <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0004d6:	2313      	movs	r3, #19
1a0004d8:	6033      	str	r3, [r6, #0]
      return -1;
1a0004da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0004de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0004e2:	2313      	movs	r3, #19
1a0004e4:	6003      	str	r3, [r0, #0]
      return -1;
1a0004e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0004ea:	4770      	bx	lr

1a0004ec <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0004ec:	4b05      	ldr	r3, [pc, #20]	; (1a000504 <_sbrk_r+0x18>)
1a0004ee:	681b      	ldr	r3, [r3, #0]
1a0004f0:	b123      	cbz	r3, 1a0004fc <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0004f2:	4b04      	ldr	r3, [pc, #16]	; (1a000504 <_sbrk_r+0x18>)
1a0004f4:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0004f6:	4401      	add	r1, r0
1a0004f8:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0004fa:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0004fc:	4b01      	ldr	r3, [pc, #4]	; (1a000504 <_sbrk_r+0x18>)
1a0004fe:	4a02      	ldr	r2, [pc, #8]	; (1a000508 <_sbrk_r+0x1c>)
1a000500:	601a      	str	r2, [r3, #0]
1a000502:	e7f6      	b.n	1a0004f2 <_sbrk_r+0x6>
1a000504:	10000220 	.word	0x10000220
1a000508:	10000a0c 	.word	0x10000a0c

1a00050c <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00050c:	2902      	cmp	r1, #2
1a00050e:	d80c      	bhi.n	1a00052a <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000510:	b570      	push	{r4, r5, r6, lr}
1a000512:	461d      	mov	r5, r3
1a000514:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000516:	2400      	movs	r4, #0
1a000518:	e003      	b.n	1a000522 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a00051a:	5d30      	ldrb	r0, [r6, r4]
1a00051c:	f002 fa54 	bl	1a0029c8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000520:	3401      	adds	r4, #1
1a000522:	42ac      	cmp	r4, r5
1a000524:	d3f9      	bcc.n	1a00051a <_write_r+0xe>
       return n;
1a000526:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000528:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a00052a:	2313      	movs	r3, #19
1a00052c:	6003      	str	r3, [r0, #0]
       return -1;
1a00052e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000532:	4770      	bx	lr

1a000534 <ld_word>:

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
1a000534:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
1a000536:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000538:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
1a00053c:	4770      	bx	lr

1a00053e <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
1a00053e:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
1a000540:	7883      	ldrb	r3, [r0, #2]
1a000542:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
1a000546:	7843      	ldrb	r3, [r0, #1]
1a000548:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
1a00054c:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a00054e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
1a000552:	4770      	bx	lr

1a000554 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
1a000554:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
	QWORD rv;

	rv = ptr[7];
1a000558:	79c2      	ldrb	r2, [r0, #7]
	rv = rv << 8 | ptr[6];
1a00055a:	2500      	movs	r5, #0
1a00055c:	0214      	lsls	r4, r2, #8
1a00055e:	7982      	ldrb	r2, [r0, #6]
1a000560:	2300      	movs	r3, #0
1a000562:	ea44 0b02 	orr.w	fp, r4, r2
1a000566:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[5];
1a00056a:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a00056e:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a000572:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a000576:	7944      	ldrb	r4, [r0, #5]
1a000578:	2500      	movs	r5, #0
1a00057a:	ea44 0b02 	orr.w	fp, r4, r2
1a00057e:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[4];
1a000582:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a000586:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a00058a:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a00058e:	7904      	ldrb	r4, [r0, #4]
1a000590:	2500      	movs	r5, #0
1a000592:	ea44 0b02 	orr.w	fp, r4, r2
1a000596:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[3];
1a00059a:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a00059e:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a0005a2:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a0005a6:	78c4      	ldrb	r4, [r0, #3]
1a0005a8:	2500      	movs	r5, #0
1a0005aa:	ea44 0b02 	orr.w	fp, r4, r2
1a0005ae:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[2];
1a0005b2:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a0005b6:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a0005ba:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a0005be:	7884      	ldrb	r4, [r0, #2]
1a0005c0:	2500      	movs	r5, #0
1a0005c2:	ea44 0602 	orr.w	r6, r4, r2
1a0005c6:	ea45 0703 	orr.w	r7, r5, r3
	rv = rv << 8 | ptr[1];
1a0005ca:	ea4f 2c07 	mov.w	ip, r7, lsl #8
1a0005ce:	ea4c 6c16 	orr.w	ip, ip, r6, lsr #24
1a0005d2:	ea4f 2b06 	mov.w	fp, r6, lsl #8
1a0005d6:	7844      	ldrb	r4, [r0, #1]
1a0005d8:	2500      	movs	r5, #0
1a0005da:	ea4b 0204 	orr.w	r2, fp, r4
1a0005de:	ea4c 0305 	orr.w	r3, ip, r5
	rv = rv << 8 | ptr[0];
1a0005e2:	021d      	lsls	r5, r3, #8
1a0005e4:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
1a0005e8:	0214      	lsls	r4, r2, #8
1a0005ea:	7802      	ldrb	r2, [r0, #0]
1a0005ec:	2300      	movs	r3, #0
	return rv;
}
1a0005ee:	ea42 0004 	orr.w	r0, r2, r4
1a0005f2:	ea43 0105 	orr.w	r1, r3, r5
1a0005f6:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
1a0005fa:	4770      	bx	lr

1a0005fc <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a0005fc:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
1a0005fe:	0a09      	lsrs	r1, r1, #8
1a000600:	7041      	strb	r1, [r0, #1]
}
1a000602:	4770      	bx	lr

1a000604 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a000604:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a000606:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a00060a:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a00060c:	f3c1 4307 	ubfx	r3, r1, #16, #8
1a000610:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
1a000612:	0e09      	lsrs	r1, r1, #24
1a000614:	70c1      	strb	r1, [r0, #3]
}
1a000616:	4770      	bx	lr

1a000618 <mem_cpy>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
1a000618:	4613      	mov	r3, r2
1a00061a:	b12a      	cbz	r2, 1a000628 <mem_cpy+0x10>
		do {
			*d++ = *s++;
1a00061c:	780a      	ldrb	r2, [r1, #0]
1a00061e:	7002      	strb	r2, [r0, #0]
1a000620:	3001      	adds	r0, #1
1a000622:	3101      	adds	r1, #1
		} while (--cnt);
1a000624:	3b01      	subs	r3, #1
1a000626:	d1f9      	bne.n	1a00061c <mem_cpy+0x4>
	}
}
1a000628:	4770      	bx	lr

1a00062a <mem_set>:
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
1a00062a:	7001      	strb	r1, [r0, #0]
1a00062c:	3001      	adds	r0, #1
	} while (--cnt);
1a00062e:	3a01      	subs	r2, #1
1a000630:	d1fb      	bne.n	1a00062a <mem_set>
}
1a000632:	4770      	bx	lr

1a000634 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
1a000634:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
1a000636:	1c45      	adds	r5, r0, #1
1a000638:	7803      	ldrb	r3, [r0, #0]
1a00063a:	7808      	ldrb	r0, [r1, #0]
1a00063c:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
1a00063e:	3a01      	subs	r2, #1
1a000640:	d004      	beq.n	1a00064c <mem_cmp+0x18>
1a000642:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
1a000644:	4628      	mov	r0, r5
1a000646:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
1a000648:	2b00      	cmp	r3, #0
1a00064a:	d0f4      	beq.n	1a000636 <mem_cmp+0x2>

	return r;
}
1a00064c:	4618      	mov	r0, r3
1a00064e:	bc30      	pop	{r4, r5}
1a000650:	4770      	bx	lr

1a000652 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
1a000652:	e000      	b.n	1a000656 <chk_chr+0x4>
1a000654:	3001      	adds	r0, #1
1a000656:	7803      	ldrb	r3, [r0, #0]
1a000658:	b10b      	cbz	r3, 1a00065e <chk_chr+0xc>
1a00065a:	428b      	cmp	r3, r1
1a00065c:	d1fa      	bne.n	1a000654 <chk_chr+0x2>
	return *str;
}
1a00065e:	4618      	mov	r0, r3
1a000660:	4770      	bx	lr

1a000662 <dbc_1st>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
1a000662:	2000      	movs	r0, #0
1a000664:	4770      	bx	lr

1a000666 <dbc_2nd>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
1a000666:	2000      	movs	r0, #0
1a000668:	4770      	bx	lr
1a00066a:	Address 0x000000001a00066a is out of bounds.


1a00066c <tchar2uni>:
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
	DWORD uc;
	const TCHAR *p = *str;
1a00066c:	6802      	ldr	r2, [r0, #0]

#elif FF_LFN_UNICODE == 2	/* UTF-8 input */
	BYTE b;
	int nf;

	uc = (BYTE)*p++;	/* Get a unit */
1a00066e:	1c53      	adds	r3, r2, #1
1a000670:	7811      	ldrb	r1, [r2, #0]
1a000672:	460a      	mov	r2, r1
	if (uc & 0x80) {	/* Multiple byte code? */
1a000674:	f011 0f80 	tst.w	r1, #128	; 0x80
1a000678:	d101      	bne.n	1a00067e <tchar2uni+0x12>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
	}
	uc = wc;

#endif
	*str = p;	/* Next read pointer */
1a00067a:	6003      	str	r3, [r0, #0]
1a00067c:	e046      	b.n	1a00070c <tchar2uni+0xa0>
		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
1a00067e:	f001 02e0 	and.w	r2, r1, #224	; 0xe0
1a000682:	2ac0      	cmp	r2, #192	; 0xc0
1a000684:	d00b      	beq.n	1a00069e <tchar2uni+0x32>
			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
1a000686:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
1a00068a:	2ae0      	cmp	r2, #224	; 0xe0
1a00068c:	d036      	beq.n	1a0006fc <tchar2uni+0x90>
				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
1a00068e:	f001 02f8 	and.w	r2, r1, #248	; 0xf8
1a000692:	2af0      	cmp	r2, #240	; 0xf0
1a000694:	d138      	bne.n	1a000708 <tchar2uni+0x9c>
					uc &= 0x07; nf = 3;
1a000696:	f001 0207 	and.w	r2, r1, #7
1a00069a:	2103      	movs	r1, #3
1a00069c:	e002      	b.n	1a0006a4 <tchar2uni+0x38>
			uc &= 0x1F; nf = 1;
1a00069e:	f001 021f 	and.w	r2, r1, #31
1a0006a2:	2101      	movs	r1, #1
{
1a0006a4:	b430      	push	{r4, r5}
			b = (BYTE)*p++;
1a0006a6:	1c5d      	adds	r5, r3, #1
1a0006a8:	781b      	ldrb	r3, [r3, #0]
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a0006aa:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
1a0006ae:	2c80      	cmp	r4, #128	; 0x80
1a0006b0:	d12e      	bne.n	1a000710 <tchar2uni+0xa4>
			uc = uc << 6 | (b & 0x3F);
1a0006b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a0006b6:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
			b = (BYTE)*p++;
1a0006ba:	462b      	mov	r3, r5
		} while (--nf != 0);
1a0006bc:	3901      	subs	r1, #1
1a0006be:	d1f2      	bne.n	1a0006a6 <tchar2uni+0x3a>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a0006c0:	2a7f      	cmp	r2, #127	; 0x7f
1a0006c2:	d928      	bls.n	1a000716 <tchar2uni+0xaa>
1a0006c4:	f5a2 4358 	sub.w	r3, r2, #55296	; 0xd800
1a0006c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1a0006cc:	d326      	bcc.n	1a00071c <tchar2uni+0xb0>
1a0006ce:	f5b2 1f88 	cmp.w	r2, #1114112	; 0x110000
1a0006d2:	d226      	bcs.n	1a000722 <tchar2uni+0xb6>
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
1a0006d4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
1a0006d8:	d314      	bcc.n	1a000704 <tchar2uni+0x98>
1a0006da:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
1a0006de:	4b12      	ldr	r3, [pc, #72]	; (1a000728 <tchar2uni+0xbc>)
1a0006e0:	ea03 1381 	and.w	r3, r3, r1, lsl #6
1a0006e4:	f3c2 0209 	ubfx	r2, r2, #0, #10
1a0006e8:	431a      	orrs	r2, r3
1a0006ea:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
1a0006ee:	f442 425c 	orr.w	r2, r2, #56320	; 0xdc00
			b = (BYTE)*p++;
1a0006f2:	462b      	mov	r3, r5
	*str = p;	/* Next read pointer */
1a0006f4:	6003      	str	r3, [r0, #0]
	return uc;
}
1a0006f6:	4610      	mov	r0, r2
1a0006f8:	bc30      	pop	{r4, r5}
1a0006fa:	4770      	bx	lr
				uc &= 0x0F; nf = 2;
1a0006fc:	f001 020f 	and.w	r2, r1, #15
1a000700:	2102      	movs	r1, #2
1a000702:	e7cf      	b.n	1a0006a4 <tchar2uni+0x38>
			b = (BYTE)*p++;
1a000704:	462b      	mov	r3, r5
1a000706:	e7f5      	b.n	1a0006f4 <tchar2uni+0x88>
					return 0xFFFFFFFF;
1a000708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
1a00070c:	4610      	mov	r0, r2
1a00070e:	4770      	bx	lr
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a000710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000714:	e7ef      	b.n	1a0006f6 <tchar2uni+0x8a>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a000716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00071a:	e7ec      	b.n	1a0006f6 <tchar2uni+0x8a>
1a00071c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000720:	e7e9      	b.n	1a0006f6 <tchar2uni+0x8a>
1a000722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000726:	e7e6      	b.n	1a0006f6 <tchar2uni+0x8a>
1a000728:	03ff0000 	.word	0x03ff0000

1a00072c <put_utf>:
	return 2;

#elif FF_LFN_UNICODE == 2	/* UTF-8 output */
	DWORD hc;

	if (chr < 0x80) {	/* Single byte code? */
1a00072c:	287f      	cmp	r0, #127	; 0x7f
1a00072e:	d804      	bhi.n	1a00073a <put_utf+0xe>
		if (szb < 1) return 0;	/* Buffer overflow? */
1a000730:	2a00      	cmp	r2, #0
1a000732:	d05d      	beq.n	1a0007f0 <put_utf+0xc4>
		*buf = (TCHAR)chr;
1a000734:	7008      	strb	r0, [r1, #0]
		return 1;
1a000736:	2001      	movs	r0, #1
1a000738:	4770      	bx	lr
	}
	if (chr < 0x800) {	/* 2-byte sequence? */
1a00073a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
1a00073e:	d20f      	bcs.n	1a000760 <put_utf+0x34>
		if (szb < 2) return 0;	/* Buffer overflow? */
1a000740:	2a01      	cmp	r2, #1
1a000742:	d801      	bhi.n	1a000748 <put_utf+0x1c>
1a000744:	2000      	movs	r0, #0
1a000746:	4770      	bx	lr
		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1a000748:	f3c0 1384 	ubfx	r3, r0, #6, #5
1a00074c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
1a000750:	700b      	strb	r3, [r1, #0]
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1a000752:	f000 003f 	and.w	r0, r0, #63	; 0x3f
1a000756:	f040 0080 	orr.w	r0, r0, #128	; 0x80
1a00075a:	7048      	strb	r0, [r1, #1]
		return 2;
1a00075c:	2002      	movs	r0, #2
1a00075e:	4770      	bx	lr
	}
	if (chr < 0x10000) {	/* 3-byte sequence? */
1a000760:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a000764:	d219      	bcs.n	1a00079a <put_utf+0x6e>
		if (szb < 3 || IsSurrogate(chr)) return 0;	/* Buffer overflow or wrong code? */
1a000766:	2a02      	cmp	r2, #2
1a000768:	d944      	bls.n	1a0007f4 <put_utf+0xc8>
1a00076a:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
1a00076e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1a000772:	d201      	bcs.n	1a000778 <put_utf+0x4c>
1a000774:	2000      	movs	r0, #0
1a000776:	4770      	bx	lr
		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1a000778:	f3c0 3303 	ubfx	r3, r0, #12, #4
1a00077c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
1a000780:	700b      	strb	r3, [r1, #0]
		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1a000782:	f3c0 1385 	ubfx	r3, r0, #6, #6
1a000786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00078a:	704b      	strb	r3, [r1, #1]
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1a00078c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
1a000790:	f040 0080 	orr.w	r0, r0, #128	; 0x80
1a000794:	7088      	strb	r0, [r1, #2]
		return 3;
1a000796:	2003      	movs	r0, #3
1a000798:	4770      	bx	lr
	}
	/* 4-byte sequence */
	if (szb < 4) return 0;	/* Buffer overflow? */
1a00079a:	2a03      	cmp	r2, #3
1a00079c:	d92c      	bls.n	1a0007f8 <put_utf+0xcc>
	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
1a00079e:	0c03      	lsrs	r3, r0, #16
1a0007a0:	041b      	lsls	r3, r3, #16
1a0007a2:	f103 5320 	add.w	r3, r3, #671088640	; 0x28000000
1a0007a6:	099b      	lsrs	r3, r3, #6
	chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
1a0007a8:	b280      	uxth	r0, r0
1a0007aa:	f5a0 405c 	sub.w	r0, r0, #56320	; 0xdc00
	if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
1a0007ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
1a0007b2:	d223      	bcs.n	1a0007fc <put_utf+0xd0>
1a0007b4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
1a0007b8:	d301      	bcc.n	1a0007be <put_utf+0x92>
1a0007ba:	2000      	movs	r0, #0
	}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
	*buf++ = (TCHAR)wc;					/* Store the character */
	return 1;
#endif
}
1a0007bc:	4770      	bx	lr
	chr = (hc | chr) + 0x10000;
1a0007be:	4303      	orrs	r3, r0
1a0007c0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1a0007c4:	f3c3 4282 	ubfx	r2, r3, #18, #3
1a0007c8:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
1a0007cc:	700a      	strb	r2, [r1, #0]
	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1a0007ce:	f3c3 3205 	ubfx	r2, r3, #12, #6
1a0007d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0007d6:	704a      	strb	r2, [r1, #1]
	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1a0007d8:	f3c3 1285 	ubfx	r2, r3, #6, #6
1a0007dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0007e0:	708a      	strb	r2, [r1, #2]
	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1a0007e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a0007e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0007ea:	70cb      	strb	r3, [r1, #3]
	return 4;
1a0007ec:	2004      	movs	r0, #4
1a0007ee:	4770      	bx	lr
		if (szb < 1) return 0;	/* Buffer overflow? */
1a0007f0:	2000      	movs	r0, #0
1a0007f2:	4770      	bx	lr
		if (szb < 3 || IsSurrogate(chr)) return 0;	/* Buffer overflow or wrong code? */
1a0007f4:	2000      	movs	r0, #0
1a0007f6:	4770      	bx	lr
	if (szb < 4) return 0;	/* Buffer overflow? */
1a0007f8:	2000      	movs	r0, #0
1a0007fa:	4770      	bx	lr
	if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
1a0007fc:	2000      	movs	r0, #0
1a0007fe:	4770      	bx	lr

1a000800 <clst2sect>:
static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
1a000800:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a000802:	69c3      	ldr	r3, [r0, #28]
1a000804:	3b02      	subs	r3, #2
1a000806:	428b      	cmp	r3, r1
1a000808:	d904      	bls.n	1a000814 <clst2sect+0x14>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
1a00080a:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00080c:	8940      	ldrh	r0, [r0, #10]
1a00080e:	fb01 3000 	mla	r0, r1, r0, r3
1a000812:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a000814:	2000      	movs	r0, #0
}
1a000816:	4770      	bx	lr

1a000818 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
1a000818:	b570      	push	{r4, r5, r6, lr}
1a00081a:	4606      	mov	r6, r0
1a00081c:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
1a00081e:	f101 001a 	add.w	r0, r1, #26
1a000822:	f7ff fe87 	bl	1a000534 <ld_word>
	if (fs->fs_type == FS_FAT32) {
1a000826:	7833      	ldrb	r3, [r6, #0]
1a000828:	2b03      	cmp	r3, #3
1a00082a:	d000      	beq.n	1a00082e <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
1a00082c:	bd70      	pop	{r4, r5, r6, pc}
1a00082e:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1a000830:	f105 0014 	add.w	r0, r5, #20
1a000834:	f7ff fe7e 	bl	1a000534 <ld_word>
1a000838:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
1a00083c:	e7f6      	b.n	1a00082c <ld_clust+0x14>
1a00083e:	Address 0x000000001a00083e is out of bounds.


1a000840 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
1a000840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000844:	4607      	mov	r7, r0
1a000846:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a000848:	f101 001a 	add.w	r0, r1, #26
1a00084c:	f7ff fe72 	bl	1a000534 <ld_word>
1a000850:	bb60      	cbnz	r0, 1a0008ac <pick_lfn+0x6c>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1a000852:	7835      	ldrb	r5, [r6, #0]
1a000854:	f025 0540 	bic.w	r5, r5, #64	; 0x40
1a000858:	3d01      	subs	r5, #1
1a00085a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a00085e:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a000862:	f04f 0801 	mov.w	r8, #1
1a000866:	2400      	movs	r4, #0
1a000868:	e004      	b.n	1a000874 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc != 0) {
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a00086a:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a00086e:	4298      	cmp	r0, r3
1a000870:	d121      	bne.n	1a0008b6 <pick_lfn+0x76>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a000872:	3401      	adds	r4, #1
1a000874:	2c0c      	cmp	r4, #12
1a000876:	d80e      	bhi.n	1a000896 <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a000878:	4b12      	ldr	r3, [pc, #72]	; (1a0008c4 <pick_lfn+0x84>)
1a00087a:	5d18      	ldrb	r0, [r3, r4]
1a00087c:	4430      	add	r0, r6
1a00087e:	f7ff fe59 	bl	1a000534 <ld_word>
		if (wc != 0) {
1a000882:	f1b8 0f00 	cmp.w	r8, #0
1a000886:	d0f0      	beq.n	1a00086a <pick_lfn+0x2a>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a000888:	2dfe      	cmp	r5, #254	; 0xfe
1a00088a:	d812      	bhi.n	1a0008b2 <pick_lfn+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
1a00088c:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
1a000890:	4680      	mov	r8, r0
1a000892:	3501      	adds	r5, #1
1a000894:	e7ed      	b.n	1a000872 <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1a000896:	7833      	ldrb	r3, [r6, #0]
1a000898:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00089c:	d00d      	beq.n	1a0008ba <pick_lfn+0x7a>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a00089e:	2dfe      	cmp	r5, #254	; 0xfe
1a0008a0:	d80d      	bhi.n	1a0008be <pick_lfn+0x7e>
		lfnbuf[i] = 0;
1a0008a2:	2300      	movs	r3, #0
1a0008a4:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
1a0008a8:	2001      	movs	r0, #1
1a0008aa:	e000      	b.n	1a0008ae <pick_lfn+0x6e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a0008ac:	2000      	movs	r0, #0
}
1a0008ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a0008b2:	2000      	movs	r0, #0
1a0008b4:	e7fb      	b.n	1a0008ae <pick_lfn+0x6e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a0008b6:	2000      	movs	r0, #0
1a0008b8:	e7f9      	b.n	1a0008ae <pick_lfn+0x6e>
	return 1;		/* The part of LFN is valid */
1a0008ba:	2001      	movs	r0, #1
1a0008bc:	e7f7      	b.n	1a0008ae <pick_lfn+0x6e>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a0008be:	2000      	movs	r0, #0
1a0008c0:	e7f5      	b.n	1a0008ae <pick_lfn+0x6e>
1a0008c2:	bf00      	nop
1a0008c4:	1a004d20 	.word	0x1a004d20

1a0008c8 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
1a0008c8:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
1a0008ca:	220b      	movs	r2, #11
	BYTE sum = 0;
1a0008cc:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
1a0008ce:	01c3      	lsls	r3, r0, #7
1a0008d0:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
1a0008d4:	7808      	ldrb	r0, [r1, #0]
1a0008d6:	fa50 f383 	uxtab	r3, r0, r3
1a0008da:	b2d8      	uxtb	r0, r3
1a0008dc:	3101      	adds	r1, #1
	} while (--n);
1a0008de:	3a01      	subs	r2, #1
1a0008e0:	d1f5      	bne.n	1a0008ce <sum_sfn+0x6>
	return sum;
}
1a0008e2:	4770      	bx	lr

1a0008e4 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
1a0008e4:	b430      	push	{r4, r5}
1a0008e6:	4605      	mov	r5, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
1a0008e8:	7841      	ldrb	r1, [r0, #1]
1a0008ea:	3101      	adds	r1, #1
1a0008ec:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
1a0008ee:	2000      	movs	r0, #0
1a0008f0:	4603      	mov	r3, r0
1a0008f2:	e001      	b.n	1a0008f8 <xdir_sum+0x14>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
			i++;
1a0008f4:	3301      	adds	r3, #1
	for (i = sum = 0; i < szblk; i++) {
1a0008f6:	3301      	adds	r3, #1
1a0008f8:	428b      	cmp	r3, r1
1a0008fa:	d209      	bcs.n	1a000910 <xdir_sum+0x2c>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
1a0008fc:	2b02      	cmp	r3, #2
1a0008fe:	d0f9      	beq.n	1a0008f4 <xdir_sum+0x10>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1a000900:	0842      	lsrs	r2, r0, #1
1a000902:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
1a000906:	5cec      	ldrb	r4, [r5, r3]
1a000908:	fa14 f282 	uxtah	r2, r4, r2
1a00090c:	b290      	uxth	r0, r2
1a00090e:	e7f2      	b.n	1a0008f6 <xdir_sum+0x12>
		}
	}
	return sum;
}
1a000910:	bc30      	pop	{r4, r5}
1a000912:	4770      	bx	lr

1a000914 <get_xfileinfo>:

static void get_xfileinfo (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
1a000914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000918:	4680      	mov	r8, r0
1a00091a:	4689      	mov	r9, r1
	WCHAR wc, hs;
	UINT di, si, nc;

	/* Get file name from the entry block */
	si = SZDIRE * 2;	/* 1st C1 entry */
	nc = 0; hs = 0; di = 0;
1a00091c:	2600      	movs	r6, #0
	si = SZDIRE * 2;	/* 1st C1 entry */
1a00091e:	2440      	movs	r4, #64	; 0x40
	nc = 0; hs = 0; di = 0;
1a000920:	4635      	mov	r5, r6
1a000922:	4637      	mov	r7, r6
	while (nc < dirb[XDIR_NumName]) {
1a000924:	e00d      	b.n	1a000942 <get_xfileinfo+0x2e>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
			hs = wc; continue;	/* Get low surrogate */
		}
		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
1a000926:	f105 0118 	add.w	r1, r5, #24
1a00092a:	4449      	add	r1, r9
1a00092c:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
1a000930:	3102      	adds	r1, #2
1a000932:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a000936:	f7ff fef9 	bl	1a00072c <put_utf>
1a00093a:	b283      	uxth	r3, r0
		if (wc == 0) { di = 0; break; }	/* Buffer overflow or wrong encoding? */
1a00093c:	b30b      	cbz	r3, 1a000982 <get_xfileinfo+0x6e>
		di += wc;
1a00093e:	4405      	add	r5, r0
		hs = 0;
1a000940:	2700      	movs	r7, #0
	while (nc < dirb[XDIR_NumName]) {
1a000942:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
1a000946:	42b3      	cmp	r3, r6
1a000948:	d917      	bls.n	1a00097a <get_xfileinfo+0x66>
		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
1a00094a:	f5b4 7f18 	cmp.w	r4, #608	; 0x260
1a00094e:	d213      	bcs.n	1a000978 <get_xfileinfo+0x64>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
1a000950:	f014 0f1f 	tst.w	r4, #31
1a000954:	d100      	bne.n	1a000958 <get_xfileinfo+0x44>
1a000956:	3402      	adds	r4, #2
		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
1a000958:	eb08 0004 	add.w	r0, r8, r4
1a00095c:	f7ff fdea 	bl	1a000534 <ld_word>
1a000960:	3402      	adds	r4, #2
1a000962:	3601      	adds	r6, #1
		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
1a000964:	2f00      	cmp	r7, #0
1a000966:	d1de      	bne.n	1a000926 <get_xfileinfo+0x12>
1a000968:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
1a00096c:	b29b      	uxth	r3, r3
1a00096e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1a000972:	d2d8      	bcs.n	1a000926 <get_xfileinfo+0x12>
			hs = wc; continue;	/* Get low surrogate */
1a000974:	4607      	mov	r7, r0
1a000976:	e7e4      	b.n	1a000942 <get_xfileinfo+0x2e>
		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
1a000978:	2500      	movs	r5, #0
	}
	if (hs != 0) di = 0;					/* Broken surrogate pair? */
1a00097a:	b927      	cbnz	r7, 1a000986 <get_xfileinfo+0x72>
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
1a00097c:	b125      	cbz	r5, 1a000988 <get_xfileinfo+0x74>
1a00097e:	462b      	mov	r3, r5
1a000980:	e006      	b.n	1a000990 <get_xfileinfo+0x7c>
		if (wc == 0) { di = 0; break; }	/* Buffer overflow or wrong encoding? */
1a000982:	2500      	movs	r5, #0
1a000984:	e7f9      	b.n	1a00097a <get_xfileinfo+0x66>
	if (hs != 0) di = 0;					/* Broken surrogate pair? */
1a000986:	2500      	movs	r5, #0
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
1a000988:	1c6b      	adds	r3, r5, #1
1a00098a:	444d      	add	r5, r9
1a00098c:	223f      	movs	r2, #63	; 0x3f
1a00098e:	76aa      	strb	r2, [r5, #26]
	fno->fname[di] = 0;						/* Terminate the name */
1a000990:	444b      	add	r3, r9
1a000992:	2200      	movs	r2, #0
1a000994:	769a      	strb	r2, [r3, #26]
	fno->altname[0] = 0;					/* exFAT does not support SFN */
1a000996:	f889 200d 	strb.w	r2, [r9, #13]

	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
1a00099a:	f898 3004 	ldrb.w	r3, [r8, #4]
1a00099e:	f889 300c 	strb.w	r3, [r9, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
1a0009a2:	f013 0f10 	tst.w	r3, #16
1a0009a6:	d113      	bne.n	1a0009d0 <get_xfileinfo+0xbc>
1a0009a8:	f108 0038 	add.w	r0, r8, #56	; 0x38
1a0009ac:	f7ff fdd2 	bl	1a000554 <ld_qword>
1a0009b0:	e9c9 0100 	strd	r0, r1, [r9]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
1a0009b4:	f108 000c 	add.w	r0, r8, #12
1a0009b8:	f7ff fdbc 	bl	1a000534 <ld_word>
1a0009bc:	f8a9 000a 	strh.w	r0, [r9, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
1a0009c0:	f108 000e 	add.w	r0, r8, #14
1a0009c4:	f7ff fdb6 	bl	1a000534 <ld_word>
1a0009c8:	f8a9 0008 	strh.w	r0, [r9, #8]
}
1a0009cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
1a0009d0:	2000      	movs	r0, #0
1a0009d2:	2100      	movs	r1, #0
1a0009d4:	e7ec      	b.n	1a0009b0 <get_xfileinfo+0x9c>

1a0009d6 <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
1a0009d6:	b538      	push	{r3, r4, r5, lr}
1a0009d8:	4605      	mov	r5, r0
1a0009da:	460c      	mov	r4, r1
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
1a0009dc:	6900      	ldr	r0, [r0, #16]
1a0009de:	3034      	adds	r0, #52	; 0x34
1a0009e0:	f7ff fdad 	bl	1a00053e <ld_dword>
1a0009e4:	60a0      	str	r0, [r4, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
1a0009e6:	6928      	ldr	r0, [r5, #16]
1a0009e8:	3038      	adds	r0, #56	; 0x38
1a0009ea:	f7ff fdb3 	bl	1a000554 <ld_qword>
1a0009ee:	e9c4 0104 	strd	r0, r1, [r4, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
1a0009f2:	692b      	ldr	r3, [r5, #16]
1a0009f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
1a0009f8:	f003 0302 	and.w	r3, r3, #2
1a0009fc:	71e3      	strb	r3, [r4, #7]
	obj->n_frag = 0;										/* No last fragment info */
1a0009fe:	2300      	movs	r3, #0
1a000a00:	61e3      	str	r3, [r4, #28]
}
1a000a02:	bd38      	pop	{r3, r4, r5, pc}

1a000a04 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
1a000a04:	b5f0      	push	{r4, r5, r6, r7, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
1a000a06:	6807      	ldr	r7, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
1a000a08:	2f00      	cmp	r7, #0
1a000a0a:	d04a      	beq.n	1a000aa2 <get_ldnumber+0x9e>
	tt = tp = *path;
1a000a0c:	463a      	mov	r2, r7
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
1a000a0e:	1c54      	adds	r4, r2, #1
1a000a10:	7813      	ldrb	r3, [r2, #0]
1a000a12:	2b1f      	cmp	r3, #31
1a000a14:	d902      	bls.n	1a000a1c <get_ldnumber+0x18>
1a000a16:	4622      	mov	r2, r4
1a000a18:	2b3a      	cmp	r3, #58	; 0x3a
1a000a1a:	d1f8      	bne.n	1a000a0e <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
1a000a1c:	2b3a      	cmp	r3, #58	; 0x3a
1a000a1e:	d003      	beq.n	1a000a28 <get_ldnumber+0x24>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
1a000a20:	f04f 0e00 	mov.w	lr, #0
}
1a000a24:	4670      	mov	r0, lr
1a000a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
1a000a28:	f897 e000 	ldrb.w	lr, [r7]
1a000a2c:	f1ae 0330 	sub.w	r3, lr, #48	; 0x30
1a000a30:	b2db      	uxtb	r3, r3
1a000a32:	2b09      	cmp	r3, #9
1a000a34:	d808      	bhi.n	1a000a48 <get_ldnumber+0x44>
1a000a36:	1cbb      	adds	r3, r7, #2
1a000a38:	42a3      	cmp	r3, r4
1a000a3a:	d002      	beq.n	1a000a42 <get_ldnumber+0x3e>
1a000a3c:	f04f 0e00 	mov.w	lr, #0
1a000a40:	e004      	b.n	1a000a4c <get_ldnumber+0x48>
			i = (int)*tp - '0';	/* Get the LD number */
1a000a42:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
1a000a46:	e027      	b.n	1a000a98 <get_ldnumber+0x94>
1a000a48:	f04f 0e00 	mov.w	lr, #0
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
1a000a4c:	4b18      	ldr	r3, [pc, #96]	; (1a000ab0 <get_ldnumber+0xac>)
1a000a4e:	f853 502e 	ldr.w	r5, [r3, lr, lsl #2]
1a000a52:	4639      	mov	r1, r7
1a000a54:	e004      	b.n	1a000a60 <get_ldnumber+0x5c>
				} while (c && (TCHAR)c == tc);
1a000a56:	b1bb      	cbz	r3, 1a000a88 <get_ldnumber+0x84>
					c = *sp++; tc = *tp++;
1a000a58:	4631      	mov	r1, r6
1a000a5a:	4665      	mov	r5, ip
				} while (c && (TCHAR)c == tc);
1a000a5c:	429a      	cmp	r2, r3
1a000a5e:	d113      	bne.n	1a000a88 <get_ldnumber+0x84>
					c = *sp++; tc = *tp++;
1a000a60:	f105 0c01 	add.w	ip, r5, #1
1a000a64:	782b      	ldrb	r3, [r5, #0]
1a000a66:	1c4e      	adds	r6, r1, #1
1a000a68:	780a      	ldrb	r2, [r1, #0]
					if (IsLower(c)) c -= 0x20;
1a000a6a:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
1a000a6e:	b2c9      	uxtb	r1, r1
1a000a70:	2919      	cmp	r1, #25
1a000a72:	d801      	bhi.n	1a000a78 <get_ldnumber+0x74>
1a000a74:	3b20      	subs	r3, #32
1a000a76:	b2db      	uxtb	r3, r3
					if (IsLower(tc)) tc -= 0x20;
1a000a78:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
1a000a7c:	b2c9      	uxtb	r1, r1
1a000a7e:	2919      	cmp	r1, #25
1a000a80:	d8e9      	bhi.n	1a000a56 <get_ldnumber+0x52>
1a000a82:	3a20      	subs	r2, #32
1a000a84:	b2d2      	uxtb	r2, r2
1a000a86:	e7e6      	b.n	1a000a56 <get_ldnumber+0x52>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
1a000a88:	b90b      	cbnz	r3, 1a000a8e <get_ldnumber+0x8a>
1a000a8a:	42b4      	cmp	r4, r6
1a000a8c:	d004      	beq.n	1a000a98 <get_ldnumber+0x94>
1a000a8e:	f10e 0e01 	add.w	lr, lr, #1
1a000a92:	f1be 0f01 	cmp.w	lr, #1
1a000a96:	ddd9      	ble.n	1a000a4c <get_ldnumber+0x48>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
1a000a98:	f1be 0f01 	cmp.w	lr, #1
1a000a9c:	dc04      	bgt.n	1a000aa8 <get_ldnumber+0xa4>
			*path = tt;		/* Snip the drive prefix off */
1a000a9e:	6004      	str	r4, [r0, #0]
1a000aa0:	e7c0      	b.n	1a000a24 <get_ldnumber+0x20>
	if (!tp) return vol;	/* Invalid path name? */
1a000aa2:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
1a000aa6:	e7bd      	b.n	1a000a24 <get_ldnumber+0x20>
	int i, vol = -1;
1a000aa8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
1a000aac:	e7ba      	b.n	1a000a24 <get_ldnumber+0x20>
1a000aae:	bf00      	nop
1a000ab0:	1a004d30 	.word	0x1a004d30

1a000ab4 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
1a000ab4:	b538      	push	{r3, r4, r5, lr}
1a000ab6:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
1a000ab8:	b1a8      	cbz	r0, 1a000ae6 <validate+0x32>
1a000aba:	4604      	mov	r4, r0
1a000abc:	6803      	ldr	r3, [r0, #0]
1a000abe:	b1ab      	cbz	r3, 1a000aec <validate+0x38>
1a000ac0:	781a      	ldrb	r2, [r3, #0]
1a000ac2:	b1aa      	cbz	r2, 1a000af0 <validate+0x3c>
1a000ac4:	8881      	ldrh	r1, [r0, #4]
1a000ac6:	88da      	ldrh	r2, [r3, #6]
1a000ac8:	4291      	cmp	r1, r2
1a000aca:	d003      	beq.n	1a000ad4 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
1a000acc:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000ace:	2300      	movs	r3, #0
1a000ad0:	602b      	str	r3, [r5, #0]
	return res;
}
1a000ad2:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
1a000ad4:	7858      	ldrb	r0, [r3, #1]
1a000ad6:	f001 ff15 	bl	1a002904 <disk_status>
1a000ada:	f010 0f01 	tst.w	r0, #1
1a000ade:	d10a      	bne.n	1a000af6 <validate+0x42>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000ae0:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
1a000ae2:	2000      	movs	r0, #0
1a000ae4:	e7f4      	b.n	1a000ad0 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a000ae6:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000ae8:	2300      	movs	r3, #0
1a000aea:	e7f1      	b.n	1a000ad0 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a000aec:	2009      	movs	r0, #9
1a000aee:	e7ef      	b.n	1a000ad0 <validate+0x1c>
1a000af0:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000af2:	2300      	movs	r3, #0
1a000af4:	e7ec      	b.n	1a000ad0 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a000af6:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000af8:	2300      	movs	r3, #0
1a000afa:	e7e9      	b.n	1a000ad0 <validate+0x1c>

1a000afc <sync_window>:
{
1a000afc:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty */
1a000afe:	78c3      	ldrb	r3, [r0, #3]
1a000b00:	b90b      	cbnz	r3, 1a000b06 <sync_window+0xa>
	FRESULT res = FR_OK;
1a000b02:	2000      	movs	r0, #0
}
1a000b04:	bd38      	pop	{r3, r4, r5, pc}
1a000b06:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
1a000b08:	f100 0538 	add.w	r5, r0, #56	; 0x38
1a000b0c:	2301      	movs	r3, #1
1a000b0e:	6b42      	ldr	r2, [r0, #52]	; 0x34
1a000b10:	4629      	mov	r1, r5
1a000b12:	7840      	ldrb	r0, [r0, #1]
1a000b14:	f001 ff14 	bl	1a002940 <disk_write>
1a000b18:	b9a0      	cbnz	r0, 1a000b44 <sync_window+0x48>
			fs->wflag = 0;	/* Clear window dirty flag */
1a000b1a:	2300      	movs	r3, #0
1a000b1c:	70e3      	strb	r3, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
1a000b1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a000b20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a000b22:	1acb      	subs	r3, r1, r3
1a000b24:	6a22      	ldr	r2, [r4, #32]
1a000b26:	4293      	cmp	r3, r2
1a000b28:	d20e      	bcs.n	1a000b48 <sync_window+0x4c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a000b2a:	78a3      	ldrb	r3, [r4, #2]
1a000b2c:	2b02      	cmp	r3, #2
1a000b2e:	d001      	beq.n	1a000b34 <sync_window+0x38>
	FRESULT res = FR_OK;
1a000b30:	2000      	movs	r0, #0
1a000b32:	e7e7      	b.n	1a000b04 <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a000b34:	2301      	movs	r3, #1
1a000b36:	440a      	add	r2, r1
1a000b38:	4629      	mov	r1, r5
1a000b3a:	7860      	ldrb	r0, [r4, #1]
1a000b3c:	f001 ff00 	bl	1a002940 <disk_write>
	FRESULT res = FR_OK;
1a000b40:	2000      	movs	r0, #0
1a000b42:	e7df      	b.n	1a000b04 <sync_window+0x8>
			res = FR_DISK_ERR;
1a000b44:	2001      	movs	r0, #1
1a000b46:	e7dd      	b.n	1a000b04 <sync_window+0x8>
	FRESULT res = FR_OK;
1a000b48:	2000      	movs	r0, #0
1a000b4a:	e7db      	b.n	1a000b04 <sync_window+0x8>

1a000b4c <move_window>:
{
1a000b4c:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
1a000b4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
1a000b50:	428b      	cmp	r3, r1
1a000b52:	d012      	beq.n	1a000b7a <move_window+0x2e>
1a000b54:	4604      	mov	r4, r0
1a000b56:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
1a000b58:	f7ff ffd0 	bl	1a000afc <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
1a000b5c:	4606      	mov	r6, r0
1a000b5e:	b968      	cbnz	r0, 1a000b7c <move_window+0x30>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
1a000b60:	2301      	movs	r3, #1
1a000b62:	462a      	mov	r2, r5
1a000b64:	f104 0138 	add.w	r1, r4, #56	; 0x38
1a000b68:	7860      	ldrb	r0, [r4, #1]
1a000b6a:	f001 fed9 	bl	1a002920 <disk_read>
1a000b6e:	b110      	cbz	r0, 1a000b76 <move_window+0x2a>
				res = FR_DISK_ERR;
1a000b70:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
1a000b72:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
1a000b76:	6365      	str	r5, [r4, #52]	; 0x34
1a000b78:	e000      	b.n	1a000b7c <move_window+0x30>
	FRESULT res = FR_OK;
1a000b7a:	2600      	movs	r6, #0
}
1a000b7c:	4630      	mov	r0, r6
1a000b7e:	bd70      	pop	{r4, r5, r6, pc}

1a000b80 <check_fs>:
{
1a000b80:	b510      	push	{r4, lr}
1a000b82:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
1a000b84:	2300      	movs	r3, #0
1a000b86:	70c3      	strb	r3, [r0, #3]
1a000b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000b8c:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a000b8e:	f7ff ffdd 	bl	1a000b4c <move_window>
1a000b92:	bb30      	cbnz	r0, 1a000be2 <check_fs+0x62>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a000b94:	f204 2036 	addw	r0, r4, #566	; 0x236
1a000b98:	f7ff fccc 	bl	1a000534 <ld_word>
1a000b9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a000ba0:	4298      	cmp	r0, r3
1a000ba2:	d120      	bne.n	1a000be6 <check_fs+0x66>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a000ba4:	220b      	movs	r2, #11
1a000ba6:	4914      	ldr	r1, [pc, #80]	; (1a000bf8 <check_fs+0x78>)
1a000ba8:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a000bac:	f7ff fd42 	bl	1a000634 <mem_cmp>
1a000bb0:	b1d8      	cbz	r0, 1a000bea <check_fs+0x6a>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
1a000bb2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
1a000bb6:	2be9      	cmp	r3, #233	; 0xe9
1a000bb8:	d003      	beq.n	1a000bc2 <check_fs+0x42>
1a000bba:	2beb      	cmp	r3, #235	; 0xeb
1a000bbc:	d001      	beq.n	1a000bc2 <check_fs+0x42>
1a000bbe:	2be8      	cmp	r3, #232	; 0xe8
1a000bc0:	d115      	bne.n	1a000bee <check_fs+0x6e>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a000bc2:	2203      	movs	r2, #3
1a000bc4:	490d      	ldr	r1, [pc, #52]	; (1a000bfc <check_fs+0x7c>)
1a000bc6:	f104 006e 	add.w	r0, r4, #110	; 0x6e
1a000bca:	f7ff fd33 	bl	1a000634 <mem_cmp>
1a000bce:	b180      	cbz	r0, 1a000bf2 <check_fs+0x72>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
1a000bd0:	2205      	movs	r2, #5
1a000bd2:	490b      	ldr	r1, [pc, #44]	; (1a000c00 <check_fs+0x80>)
1a000bd4:	f104 008a 	add.w	r0, r4, #138	; 0x8a
1a000bd8:	f7ff fd2c 	bl	1a000634 <mem_cmp>
1a000bdc:	b120      	cbz	r0, 1a000be8 <check_fs+0x68>
	return 2;	/* Valid BS but not FAT */
1a000bde:	2002      	movs	r0, #2
1a000be0:	e002      	b.n	1a000be8 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a000be2:	2004      	movs	r0, #4
1a000be4:	e000      	b.n	1a000be8 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a000be6:	2003      	movs	r0, #3
}
1a000be8:	bd10      	pop	{r4, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a000bea:	2001      	movs	r0, #1
1a000bec:	e7fc      	b.n	1a000be8 <check_fs+0x68>
	return 2;	/* Valid BS but not FAT */
1a000bee:	2002      	movs	r0, #2
1a000bf0:	e7fa      	b.n	1a000be8 <check_fs+0x68>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a000bf2:	2000      	movs	r0, #0
1a000bf4:	e7f8      	b.n	1a000be8 <check_fs+0x68>
1a000bf6:	bf00      	nop
1a000bf8:	1a004d38 	.word	0x1a004d38
1a000bfc:	1a004d44 	.word	0x1a004d44
1a000c00:	1a004d48 	.word	0x1a004d48

1a000c04 <find_volume>:
{
1a000c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000c08:	b084      	sub	sp, #16
1a000c0a:	460d      	mov	r5, r1
1a000c0c:	4617      	mov	r7, r2
	*rfs = 0;
1a000c0e:	2300      	movs	r3, #0
1a000c10:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
1a000c12:	f7ff fef7 	bl	1a000a04 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a000c16:	1e06      	subs	r6, r0, #0
1a000c18:	f2c0 8205 	blt.w	1a001026 <find_volume+0x422>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
1a000c1c:	4bbf      	ldr	r3, [pc, #764]	; (1a000f1c <find_volume+0x318>)
1a000c1e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a000c22:	2c00      	cmp	r4, #0
1a000c24:	f000 8203 	beq.w	1a00102e <find_volume+0x42a>
	*rfs = fs;							/* Return pointer to the filesystem object */
1a000c28:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
1a000c2a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
1a000c2e:	7823      	ldrb	r3, [r4, #0]
1a000c30:	b173      	cbz	r3, 1a000c50 <find_volume+0x4c>
		stat = disk_status(fs->pdrv);
1a000c32:	7860      	ldrb	r0, [r4, #1]
1a000c34:	f001 fe66 	bl	1a002904 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
1a000c38:	f010 0f01 	tst.w	r0, #1
1a000c3c:	d108      	bne.n	1a000c50 <find_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
1a000c3e:	2f00      	cmp	r7, #0
1a000c40:	f000 81f7 	beq.w	1a001032 <find_volume+0x42e>
1a000c44:	f010 0f04 	tst.w	r0, #4
1a000c48:	f040 81f5 	bne.w	1a001036 <find_volume+0x432>
			return FR_OK;				/* The filesystem object is valid */
1a000c4c:	2000      	movs	r0, #0
1a000c4e:	e1eb      	b.n	1a001028 <find_volume+0x424>
	fs->fs_type = 0;					/* Clear the filesystem object */
1a000c50:	2300      	movs	r3, #0
1a000c52:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
1a000c54:	4bb2      	ldr	r3, [pc, #712]	; (1a000f20 <find_volume+0x31c>)
1a000c56:	f813 0016 	ldrb.w	r0, [r3, r6, lsl #1]
1a000c5a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
1a000c5c:	f001 fe59 	bl	1a002912 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
1a000c60:	f010 0f01 	tst.w	r0, #1
1a000c64:	f040 81e9 	bne.w	1a00103a <find_volume+0x436>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
1a000c68:	b11f      	cbz	r7, 1a000c72 <find_volume+0x6e>
1a000c6a:	f010 0f04 	tst.w	r0, #4
1a000c6e:	f040 81e6 	bne.w	1a00103e <find_volume+0x43a>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
1a000c72:	2100      	movs	r1, #0
1a000c74:	4620      	mov	r0, r4
1a000c76:	f7ff ff83 	bl	1a000b80 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a000c7a:	2802      	cmp	r0, #2
1a000c7c:	f000 8095 	beq.w	1a000daa <find_volume+0x1a6>
1a000c80:	2801      	cmp	r0, #1
1a000c82:	d975      	bls.n	1a000d70 <find_volume+0x16c>
	bsect = 0;
1a000c84:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a000c86:	2804      	cmp	r0, #4
1a000c88:	f000 81db 	beq.w	1a001042 <find_volume+0x43e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a000c8c:	2801      	cmp	r0, #1
1a000c8e:	f200 81da 	bhi.w	1a001046 <find_volume+0x442>
	if (fmt == 1) {
1a000c92:	f000 8120 	beq.w	1a000ed6 <find_volume+0x2d2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a000c96:	f104 0043 	add.w	r0, r4, #67	; 0x43
1a000c9a:	f7ff fc4b 	bl	1a000534 <ld_word>
1a000c9e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a000ca2:	f040 81e6 	bne.w	1a001072 <find_volume+0x46e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
1a000ca6:	f104 004e 	add.w	r0, r4, #78	; 0x4e
1a000caa:	f7ff fc43 	bl	1a000534 <ld_word>
1a000cae:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
1a000cb0:	b920      	cbnz	r0, 1a000cbc <find_volume+0xb8>
1a000cb2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a000cb6:	f7ff fc42 	bl	1a00053e <ld_dword>
1a000cba:	4606      	mov	r6, r0
		fs->fsize = fasize;
1a000cbc:	6226      	str	r6, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
1a000cbe:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
1a000cc2:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a000cc4:	1e53      	subs	r3, r2, #1
1a000cc6:	b2db      	uxtb	r3, r3
1a000cc8:	2b01      	cmp	r3, #1
1a000cca:	f200 81d4 	bhi.w	1a001076 <find_volume+0x472>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
1a000cce:	fb06 f502 	mul.w	r5, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
1a000cd2:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
1a000cd6:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a000cda:	f1b8 0f00 	cmp.w	r8, #0
1a000cde:	f000 81cc 	beq.w	1a00107a <find_volume+0x476>
1a000ce2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a000ce6:	ea18 0f03 	tst.w	r8, r3
1a000cea:	f040 81c8 	bne.w	1a00107e <find_volume+0x47a>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
1a000cee:	f104 0049 	add.w	r0, r4, #73	; 0x49
1a000cf2:	f7ff fc1f 	bl	1a000534 <ld_word>
1a000cf6:	4682      	mov	sl, r0
1a000cf8:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a000cfa:	f010 0f0f 	tst.w	r0, #15
1a000cfe:	f040 81c0 	bne.w	1a001082 <find_volume+0x47e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
1a000d02:	f104 004b 	add.w	r0, r4, #75	; 0x4b
1a000d06:	f7ff fc15 	bl	1a000534 <ld_word>
1a000d0a:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
1a000d0c:	b920      	cbnz	r0, 1a000d18 <find_volume+0x114>
1a000d0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a000d12:	f7ff fc14 	bl	1a00053e <ld_dword>
1a000d16:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
1a000d18:	f104 0046 	add.w	r0, r4, #70	; 0x46
1a000d1c:	f7ff fc0a 	bl	1a000534 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a000d20:	4601      	mov	r1, r0
1a000d22:	2800      	cmp	r0, #0
1a000d24:	f000 81af 	beq.w	1a001086 <find_volume+0x482>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
1a000d28:	1942      	adds	r2, r0, r5
1a000d2a:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a000d2e:	4591      	cmp	r9, r2
1a000d30:	f0c0 81ab 	bcc.w	1a00108a <find_volume+0x486>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
1a000d34:	eba9 0302 	sub.w	r3, r9, r2
1a000d38:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a000d3c:	2b00      	cmp	r3, #0
1a000d3e:	f000 81a6 	beq.w	1a00108e <find_volume+0x48a>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a000d42:	4878      	ldr	r0, [pc, #480]	; (1a000f24 <find_volume+0x320>)
1a000d44:	4283      	cmp	r3, r0
1a000d46:	f240 80e5 	bls.w	1a000f14 <find_volume+0x310>
		fmt = 0;
1a000d4a:	f04f 0900 	mov.w	r9, #0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a000d4e:	f64f 70f5 	movw	r0, #65525	; 0xfff5
1a000d52:	4283      	cmp	r3, r0
1a000d54:	d801      	bhi.n	1a000d5a <find_volume+0x156>
1a000d56:	f04f 0902 	mov.w	r9, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a000d5a:	f640 70f5 	movw	r0, #4085	; 0xff5
1a000d5e:	4283      	cmp	r3, r0
1a000d60:	f240 80e4 	bls.w	1a000f2c <find_volume+0x328>
		if (fmt == 0) return FR_NO_FILESYSTEM;
1a000d64:	f1b9 0f00 	cmp.w	r9, #0
1a000d68:	f040 80e2 	bne.w	1a000f30 <find_volume+0x32c>
1a000d6c:	200d      	movs	r0, #13
1a000d6e:	e15b      	b.n	1a001028 <find_volume+0x424>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a000d70:	4b6b      	ldr	r3, [pc, #428]	; (1a000f20 <find_volume+0x31c>)
1a000d72:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a000d76:	785b      	ldrb	r3, [r3, #1]
1a000d78:	b9cb      	cbnz	r3, 1a000dae <find_volume+0x1aa>
	bsect = 0;
1a000d7a:	2700      	movs	r7, #0
1a000d7c:	e783      	b.n	1a000c86 <find_volume+0x82>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a000d7e:	2000      	movs	r0, #0
1a000d80:	ab04      	add	r3, sp, #16
1a000d82:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a000d86:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
1a000d8a:	3501      	adds	r5, #1
1a000d8c:	2d03      	cmp	r5, #3
1a000d8e:	d810      	bhi.n	1a000db2 <find_volume+0x1ae>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a000d90:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a000d94:	012b      	lsls	r3, r5, #4
1a000d96:	f503 73df 	add.w	r3, r3, #446	; 0x1be
1a000d9a:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a000d9c:	7903      	ldrb	r3, [r0, #4]
1a000d9e:	2b00      	cmp	r3, #0
1a000da0:	d0ed      	beq.n	1a000d7e <find_volume+0x17a>
1a000da2:	3008      	adds	r0, #8
1a000da4:	f7ff fbcb 	bl	1a00053e <ld_dword>
1a000da8:	e7ea      	b.n	1a000d80 <find_volume+0x17c>
1a000daa:	2500      	movs	r5, #0
1a000dac:	e7ee      	b.n	1a000d8c <find_volume+0x188>
1a000dae:	2500      	movs	r5, #0
1a000db0:	e7ec      	b.n	1a000d8c <find_volume+0x188>
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
1a000db2:	4b5b      	ldr	r3, [pc, #364]	; (1a000f20 <find_volume+0x31c>)
1a000db4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a000db8:	785d      	ldrb	r5, [r3, #1]
		if (i != 0) i--;
1a000dba:	b19d      	cbz	r5, 1a000de4 <find_volume+0x1e0>
1a000dbc:	3d01      	subs	r5, #1
1a000dbe:	e011      	b.n	1a000de4 <find_volume+0x1e0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a000dc0:	4639      	mov	r1, r7
1a000dc2:	4620      	mov	r0, r4
1a000dc4:	f7ff fedc 	bl	1a000b80 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
1a000dc8:	4b55      	ldr	r3, [pc, #340]	; (1a000f20 <find_volume+0x31c>)
1a000dca:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a000dce:	785b      	ldrb	r3, [r3, #1]
1a000dd0:	2b00      	cmp	r3, #0
1a000dd2:	f47f af58 	bne.w	1a000c86 <find_volume+0x82>
1a000dd6:	2801      	cmp	r0, #1
1a000dd8:	f67f af55 	bls.w	1a000c86 <find_volume+0x82>
1a000ddc:	3501      	adds	r5, #1
1a000dde:	2d03      	cmp	r5, #3
1a000de0:	f63f af51 	bhi.w	1a000c86 <find_volume+0x82>
			bsect = br[i];
1a000de4:	ab04      	add	r3, sp, #16
1a000de6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a000dea:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a000dee:	2f00      	cmp	r7, #0
1a000df0:	d1e6      	bne.n	1a000dc0 <find_volume+0x1bc>
1a000df2:	2003      	movs	r0, #3
1a000df4:	e7e8      	b.n	1a000dc8 <find_volume+0x1c4>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a000df6:	3301      	adds	r3, #1
1a000df8:	2b3f      	cmp	r3, #63	; 0x3f
1a000dfa:	d804      	bhi.n	1a000e06 <find_volume+0x202>
1a000dfc:	18e2      	adds	r2, r4, r3
1a000dfe:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a000e02:	2a00      	cmp	r2, #0
1a000e04:	d0f7      	beq.n	1a000df6 <find_volume+0x1f2>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a000e06:	2b3f      	cmp	r3, #63	; 0x3f
1a000e08:	f240 811f 	bls.w	1a00104a <find_volume+0x446>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a000e0c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
1a000e10:	f7ff fb90 	bl	1a000534 <ld_word>
1a000e14:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
1a000e18:	f040 8119 	bne.w	1a00104e <find_volume+0x44a>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
1a000e1c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
1a000e20:	2b09      	cmp	r3, #9
1a000e22:	f040 8116 	bne.w	1a001052 <find_volume+0x44e>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
1a000e26:	f104 0080 	add.w	r0, r4, #128	; 0x80
1a000e2a:	f7ff fb93 	bl	1a000554 <ld_qword>
1a000e2e:	eb10 0807 	adds.w	r8, r0, r7
1a000e32:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a000e36:	f1b9 0f01 	cmp.w	r9, #1
1a000e3a:	bf08      	it	eq
1a000e3c:	f1b8 0f00 	cmpeq.w	r8, #0
1a000e40:	f080 8109 	bcs.w	1a001056 <find_volume+0x452>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
1a000e44:	f104 008c 	add.w	r0, r4, #140	; 0x8c
1a000e48:	f7ff fb79 	bl	1a00053e <ld_dword>
1a000e4c:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
1a000e4e:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
1a000e52:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a000e54:	2b01      	cmp	r3, #1
1a000e56:	f040 8100 	bne.w	1a00105a <find_volume+0x456>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
1a000e5a:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
1a000e5e:	2501      	movs	r5, #1
1a000e60:	409d      	lsls	r5, r3
1a000e62:	b2ad      	uxth	r5, r5
1a000e64:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a000e66:	2d00      	cmp	r5, #0
1a000e68:	f000 80f9 	beq.w	1a00105e <find_volume+0x45a>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
1a000e6c:	f104 0094 	add.w	r0, r4, #148	; 0x94
1a000e70:	f7ff fb65 	bl	1a00053e <ld_dword>
1a000e74:	4682      	mov	sl, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a000e76:	4b2c      	ldr	r3, [pc, #176]	; (1a000f28 <find_volume+0x324>)
1a000e78:	4298      	cmp	r0, r3
1a000e7a:	f200 80f2 	bhi.w	1a001062 <find_volume+0x45e>
		fs->n_fatent = nclst + 2;
1a000e7e:	1c83      	adds	r3, r0, #2
1a000e80:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
1a000e82:	6267      	str	r7, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
1a000e84:	f104 0090 	add.w	r0, r4, #144	; 0x90
1a000e88:	f7ff fb59 	bl	1a00053e <ld_dword>
1a000e8c:	19c6      	adds	r6, r0, r7
1a000e8e:	6326      	str	r6, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
1a000e90:	f104 0088 	add.w	r0, r4, #136	; 0x88
1a000e94:	f7ff fb53 	bl	1a00053e <ld_dword>
1a000e98:	4438      	add	r0, r7
1a000e9a:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a000e9c:	fb0a f205 	mul.w	r2, sl, r5
1a000ea0:	2100      	movs	r1, #0
1a000ea2:	1992      	adds	r2, r2, r6
1a000ea4:	f141 0300 	adc.w	r3, r1, #0
1a000ea8:	4599      	cmp	r9, r3
1a000eaa:	bf08      	it	eq
1a000eac:	4590      	cmpeq	r8, r2
1a000eae:	f0c0 80da 	bcc.w	1a001066 <find_volume+0x462>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
1a000eb2:	f104 0098 	add.w	r0, r4, #152	; 0x98
1a000eb6:	f7ff fb42 	bl	1a00053e <ld_dword>
1a000eba:	4601      	mov	r1, r0
1a000ebc:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a000ebe:	4620      	mov	r0, r4
1a000ec0:	f7ff fc9e 	bl	1a000800 <clst2sect>
1a000ec4:	4601      	mov	r1, r0
1a000ec6:	4620      	mov	r0, r4
1a000ec8:	f7ff fe40 	bl	1a000b4c <move_window>
1a000ecc:	2800      	cmp	r0, #0
1a000ece:	f040 80cc 	bne.w	1a00106a <find_volume+0x466>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a000ed2:	2500      	movs	r5, #0
1a000ed4:	e002      	b.n	1a000edc <find_volume+0x2d8>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a000ed6:	230b      	movs	r3, #11
1a000ed8:	e78e      	b.n	1a000df8 <find_volume+0x1f4>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a000eda:	3520      	adds	r5, #32
1a000edc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a000ee0:	d20d      	bcs.n	1a000efe <find_volume+0x2fa>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
1a000ee2:	1963      	adds	r3, r4, r5
1a000ee4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a000ee8:	2b81      	cmp	r3, #129	; 0x81
1a000eea:	d1f6      	bne.n	1a000eda <find_volume+0x2d6>
1a000eec:	f104 0338 	add.w	r3, r4, #56	; 0x38
1a000ef0:	f105 0014 	add.w	r0, r5, #20
1a000ef4:	4418      	add	r0, r3
1a000ef6:	f7ff fb22 	bl	1a00053e <ld_dword>
1a000efa:	2802      	cmp	r0, #2
1a000efc:	d1ed      	bne.n	1a000eda <find_volume+0x2d6>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a000efe:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a000f02:	f000 80b4 	beq.w	1a00106e <find_volume+0x46a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a000f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000f0a:	61a3      	str	r3, [r4, #24]
1a000f0c:	6163      	str	r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
1a000f0e:	f04f 0904 	mov.w	r9, #4
1a000f12:	e037      	b.n	1a000f84 <find_volume+0x380>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a000f14:	f04f 0903 	mov.w	r9, #3
1a000f18:	e719      	b.n	1a000d4e <find_volume+0x14a>
1a000f1a:	bf00      	nop
1a000f1c:	10000484 	.word	0x10000484
1a000f20:	1000000c 	.word	0x1000000c
1a000f24:	0ffffff5 	.word	0x0ffffff5
1a000f28:	7ffffffd 	.word	0x7ffffffd
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a000f2c:	f04f 0901 	mov.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
1a000f30:	f103 0802 	add.w	r8, r3, #2
1a000f34:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
1a000f38:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
1a000f3a:	19cb      	adds	r3, r1, r7
1a000f3c:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
1a000f3e:	443a      	add	r2, r7
1a000f40:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
1a000f42:	f1b9 0f03 	cmp.w	r9, #3
1a000f46:	d02b      	beq.n	1a000fa0 <find_volume+0x39c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a000f48:	f1ba 0f00 	cmp.w	sl, #0
1a000f4c:	f000 80a5 	beq.w	1a00109a <find_volume+0x496>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
1a000f50:	442b      	add	r3, r5
1a000f52:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a000f54:	f1b9 0f02 	cmp.w	r9, #2
1a000f58:	d033      	beq.n	1a000fc2 <find_volume+0x3be>
1a000f5a:	eb08 0248 	add.w	r2, r8, r8, lsl #1
1a000f5e:	f008 0301 	and.w	r3, r8, #1
1a000f62:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a000f66:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
1a000f6a:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
1a000f6e:	f0c0 8096 	bcc.w	1a00109e <find_volume+0x49a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a000f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000f76:	61a3      	str	r3, [r4, #24]
1a000f78:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
1a000f7a:	2380      	movs	r3, #128	; 0x80
1a000f7c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
1a000f7e:	f1b9 0f03 	cmp.w	r9, #3
1a000f82:	d021      	beq.n	1a000fc8 <find_volume+0x3c4>
	fs->fs_type = fmt;		/* FAT sub-type */
1a000f84:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
1a000f88:	4a46      	ldr	r2, [pc, #280]	; (1a0010a4 <find_volume+0x4a0>)
1a000f8a:	8813      	ldrh	r3, [r2, #0]
1a000f8c:	3301      	adds	r3, #1
1a000f8e:	b29b      	uxth	r3, r3
1a000f90:	8013      	strh	r3, [r2, #0]
1a000f92:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
1a000f94:	4b44      	ldr	r3, [pc, #272]	; (1a0010a8 <find_volume+0x4a4>)
1a000f96:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
1a000f98:	4b44      	ldr	r3, [pc, #272]	; (1a0010ac <find_volume+0x4a8>)
1a000f9a:	6123      	str	r3, [r4, #16]
	return FR_OK;
1a000f9c:	2000      	movs	r0, #0
1a000f9e:	e043      	b.n	1a001028 <find_volume+0x424>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a000fa0:	f104 0062 	add.w	r0, r4, #98	; 0x62
1a000fa4:	f7ff fac6 	bl	1a000534 <ld_word>
1a000fa8:	2800      	cmp	r0, #0
1a000faa:	d172      	bne.n	1a001092 <find_volume+0x48e>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a000fac:	f1ba 0f00 	cmp.w	sl, #0
1a000fb0:	d171      	bne.n	1a001096 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
1a000fb2:	f104 0064 	add.w	r0, r4, #100	; 0x64
1a000fb6:	f7ff fac2 	bl	1a00053e <ld_dword>
1a000fba:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
1a000fbc:	ea4f 0388 	mov.w	r3, r8, lsl #2
1a000fc0:	e7d1      	b.n	1a000f66 <find_volume+0x362>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a000fc2:	ea4f 0348 	mov.w	r3, r8, lsl #1
1a000fc6:	e7ce      	b.n	1a000f66 <find_volume+0x362>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
1a000fc8:	f104 0068 	add.w	r0, r4, #104	; 0x68
1a000fcc:	f7ff fab2 	bl	1a000534 <ld_word>
1a000fd0:	2801      	cmp	r0, #1
1a000fd2:	d1d7      	bne.n	1a000f84 <find_volume+0x380>
			&& move_window(fs, bsect + 1) == FR_OK)
1a000fd4:	1c79      	adds	r1, r7, #1
1a000fd6:	4620      	mov	r0, r4
1a000fd8:	f7ff fdb8 	bl	1a000b4c <move_window>
1a000fdc:	2800      	cmp	r0, #0
1a000fde:	d1d1      	bne.n	1a000f84 <find_volume+0x380>
			fs->fsi_flag = 0;
1a000fe0:	2300      	movs	r3, #0
1a000fe2:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
1a000fe4:	f204 2036 	addw	r0, r4, #566	; 0x236
1a000fe8:	f7ff faa4 	bl	1a000534 <ld_word>
1a000fec:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a000ff0:	4298      	cmp	r0, r3
1a000ff2:	d1c7      	bne.n	1a000f84 <find_volume+0x380>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
1a000ff4:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a000ff8:	f7ff faa1 	bl	1a00053e <ld_dword>
1a000ffc:	4b2c      	ldr	r3, [pc, #176]	; (1a0010b0 <find_volume+0x4ac>)
1a000ffe:	4298      	cmp	r0, r3
1a001000:	d1c0      	bne.n	1a000f84 <find_volume+0x380>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
1a001002:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a001006:	f7ff fa9a 	bl	1a00053e <ld_dword>
1a00100a:	4b2a      	ldr	r3, [pc, #168]	; (1a0010b4 <find_volume+0x4b0>)
1a00100c:	4298      	cmp	r0, r3
1a00100e:	d1b9      	bne.n	1a000f84 <find_volume+0x380>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
1a001010:	f504 7008 	add.w	r0, r4, #544	; 0x220
1a001014:	f7ff fa93 	bl	1a00053e <ld_dword>
1a001018:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
1a00101a:	f504 7009 	add.w	r0, r4, #548	; 0x224
1a00101e:	f7ff fa8e 	bl	1a00053e <ld_dword>
1a001022:	6160      	str	r0, [r4, #20]
1a001024:	e7ae      	b.n	1a000f84 <find_volume+0x380>
	if (vol < 0) return FR_INVALID_DRIVE;
1a001026:	200b      	movs	r0, #11
}
1a001028:	b004      	add	sp, #16
1a00102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a00102e:	200c      	movs	r0, #12
1a001030:	e7fa      	b.n	1a001028 <find_volume+0x424>
			return FR_OK;				/* The filesystem object is valid */
1a001032:	2000      	movs	r0, #0
1a001034:	e7f8      	b.n	1a001028 <find_volume+0x424>
				return FR_WRITE_PROTECTED;
1a001036:	200a      	movs	r0, #10
1a001038:	e7f6      	b.n	1a001028 <find_volume+0x424>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
1a00103a:	2003      	movs	r0, #3
1a00103c:	e7f4      	b.n	1a001028 <find_volume+0x424>
		return FR_WRITE_PROTECTED;
1a00103e:	200a      	movs	r0, #10
1a001040:	e7f2      	b.n	1a001028 <find_volume+0x424>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a001042:	2001      	movs	r0, #1
1a001044:	e7f0      	b.n	1a001028 <find_volume+0x424>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a001046:	200d      	movs	r0, #13
1a001048:	e7ee      	b.n	1a001028 <find_volume+0x424>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a00104a:	200d      	movs	r0, #13
1a00104c:	e7ec      	b.n	1a001028 <find_volume+0x424>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a00104e:	200d      	movs	r0, #13
1a001050:	e7ea      	b.n	1a001028 <find_volume+0x424>
			return FR_NO_FILESYSTEM;
1a001052:	200d      	movs	r0, #13
1a001054:	e7e8      	b.n	1a001028 <find_volume+0x424>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a001056:	200d      	movs	r0, #13
1a001058:	e7e6      	b.n	1a001028 <find_volume+0x424>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a00105a:	200d      	movs	r0, #13
1a00105c:	e7e4      	b.n	1a001028 <find_volume+0x424>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a00105e:	200d      	movs	r0, #13
1a001060:	e7e2      	b.n	1a001028 <find_volume+0x424>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a001062:	200d      	movs	r0, #13
1a001064:	e7e0      	b.n	1a001028 <find_volume+0x424>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a001066:	200d      	movs	r0, #13
1a001068:	e7de      	b.n	1a001028 <find_volume+0x424>
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a00106a:	2001      	movs	r0, #1
1a00106c:	e7dc      	b.n	1a001028 <find_volume+0x424>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a00106e:	200d      	movs	r0, #13
1a001070:	e7da      	b.n	1a001028 <find_volume+0x424>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a001072:	200d      	movs	r0, #13
1a001074:	e7d8      	b.n	1a001028 <find_volume+0x424>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a001076:	200d      	movs	r0, #13
1a001078:	e7d6      	b.n	1a001028 <find_volume+0x424>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a00107a:	200d      	movs	r0, #13
1a00107c:	e7d4      	b.n	1a001028 <find_volume+0x424>
1a00107e:	200d      	movs	r0, #13
1a001080:	e7d2      	b.n	1a001028 <find_volume+0x424>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a001082:	200d      	movs	r0, #13
1a001084:	e7d0      	b.n	1a001028 <find_volume+0x424>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a001086:	200d      	movs	r0, #13
1a001088:	e7ce      	b.n	1a001028 <find_volume+0x424>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a00108a:	200d      	movs	r0, #13
1a00108c:	e7cc      	b.n	1a001028 <find_volume+0x424>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a00108e:	200d      	movs	r0, #13
1a001090:	e7ca      	b.n	1a001028 <find_volume+0x424>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a001092:	200d      	movs	r0, #13
1a001094:	e7c8      	b.n	1a001028 <find_volume+0x424>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a001096:	200d      	movs	r0, #13
1a001098:	e7c6      	b.n	1a001028 <find_volume+0x424>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a00109a:	200d      	movs	r0, #13
1a00109c:	e7c4      	b.n	1a001028 <find_volume+0x424>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a00109e:	200d      	movs	r0, #13
1a0010a0:	e7c2      	b.n	1a001028 <find_volume+0x424>
1a0010a2:	bf00      	nop
1a0010a4:	1000048c 	.word	0x1000048c
1a0010a8:	10000490 	.word	0x10000490
1a0010ac:	10000224 	.word	0x10000224
1a0010b0:	41615252 	.word	0x41615252
1a0010b4:	61417272 	.word	0x61417272

1a0010b8 <find_bitmap>:
{
1a0010b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0010bc:	4605      	mov	r5, r0
1a0010be:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1a0010c0:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
1a0010c2:	69c3      	ldr	r3, [r0, #28]
1a0010c4:	3b02      	subs	r3, #2
1a0010c6:	42bb      	cmp	r3, r7
1a0010c8:	d800      	bhi.n	1a0010cc <find_bitmap+0x14>
1a0010ca:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
1a0010cc:	46b8      	mov	r8, r7
1a0010ce:	463c      	mov	r4, r7
1a0010d0:	2600      	movs	r6, #0
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a0010d2:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a0010d4:	eb01 3114 	add.w	r1, r1, r4, lsr #12
1a0010d8:	4628      	mov	r0, r5
1a0010da:	f7ff fd37 	bl	1a000b4c <move_window>
1a0010de:	bb40      	cbnz	r0, 1a001132 <find_bitmap+0x7a>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1a0010e0:	f3c4 00c8 	ubfx	r0, r4, #3, #9
1a0010e4:	f004 0207 	and.w	r2, r4, #7
1a0010e8:	2301      	movs	r3, #1
1a0010ea:	4093      	lsls	r3, r2
1a0010ec:	b2db      	uxtb	r3, r3
1a0010ee:	e009      	b.n	1a001104 <find_bitmap+0x4c>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1a0010f0:	46a0      	mov	r8, r4
1a0010f2:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
1a0010f4:	42a7      	cmp	r7, r4
1a0010f6:	d01f      	beq.n	1a001138 <find_bitmap+0x80>
			} while (bm != 0);
1a0010f8:	b923      	cbnz	r3, 1a001104 <find_bitmap+0x4c>
		} while (++i < SS(fs));
1a0010fa:	3001      	adds	r0, #1
1a0010fc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a001100:	d2e7      	bcs.n	1a0010d2 <find_bitmap+0x1a>
			bm = 1;
1a001102:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1a001104:	182a      	adds	r2, r5, r0
1a001106:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a00110a:	401a      	ands	r2, r3
1a00110c:	005b      	lsls	r3, r3, #1
1a00110e:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1a001110:	3401      	adds	r4, #1
1a001112:	69e9      	ldr	r1, [r5, #28]
1a001114:	3902      	subs	r1, #2
1a001116:	42a1      	cmp	r1, r4
1a001118:	d803      	bhi.n	1a001122 <find_bitmap+0x6a>
					val = 0; bm = 0; i = SS(fs);
1a00111a:	2400      	movs	r4, #0
1a00111c:	f44f 7000 	mov.w	r0, #512	; 0x200
1a001120:	4623      	mov	r3, r4
				if (bv == 0) {	/* Is it a free cluster? */
1a001122:	2a00      	cmp	r2, #0
1a001124:	d1e4      	bne.n	1a0010f0 <find_bitmap+0x38>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1a001126:	3601      	adds	r6, #1
1a001128:	454e      	cmp	r6, r9
1a00112a:	d1e3      	bne.n	1a0010f4 <find_bitmap+0x3c>
1a00112c:	f108 0002 	add.w	r0, r8, #2
1a001130:	e003      	b.n	1a00113a <find_bitmap+0x82>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a001132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001136:	e000      	b.n	1a00113a <find_bitmap+0x82>
				if (val == clst) return 0;	/* All cluster scanned? */
1a001138:	2000      	movs	r0, #0
}
1a00113a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a00113e <change_bitmap>:
{
1a00113e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001142:	4606      	mov	r6, r0
1a001144:	4617      	mov	r7, r2
1a001146:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
1a001148:	1e8c      	subs	r4, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
1a00114a:	6b01      	ldr	r1, [r0, #48]	; 0x30
1a00114c:	eb01 3114 	add.w	r1, r1, r4, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1a001150:	f3c4 05c8 	ubfx	r5, r4, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1a001154:	f004 0407 	and.w	r4, r4, #7
1a001158:	2301      	movs	r3, #1
1a00115a:	fa03 f404 	lsl.w	r4, r3, r4
1a00115e:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a001160:	f101 0901 	add.w	r9, r1, #1
1a001164:	4630      	mov	r0, r6
1a001166:	f7ff fcf1 	bl	1a000b4c <move_window>
1a00116a:	4601      	mov	r1, r0
1a00116c:	b110      	cbz	r0, 1a001174 <change_bitmap+0x36>
1a00116e:	2101      	movs	r1, #1
1a001170:	e01e      	b.n	1a0011b0 <change_bitmap+0x72>
			bm = 1;
1a001172:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a001174:	1973      	adds	r3, r6, r5
1a001176:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a00117a:	4223      	tst	r3, r4
1a00117c:	bf14      	ite	ne
1a00117e:	2201      	movne	r2, #1
1a001180:	2200      	moveq	r2, #0
1a001182:	4542      	cmp	r2, r8
1a001184:	d013      	beq.n	1a0011ae <change_bitmap+0x70>
				fs->win[i] ^= bm;	/* Flip the bit */
1a001186:	1972      	adds	r2, r6, r5
1a001188:	4063      	eors	r3, r4
1a00118a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				fs->wflag = 1;
1a00118e:	2301      	movs	r3, #1
1a001190:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1a001192:	3f01      	subs	r7, #1
1a001194:	d00c      	beq.n	1a0011b0 <change_bitmap+0x72>
			} while (bm <<= 1);		/* Next bit */
1a001196:	409c      	lsls	r4, r3
1a001198:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
1a00119c:	d1ea      	bne.n	1a001174 <change_bitmap+0x36>
		} while (++i < SS(fs));		/* Next byte */
1a00119e:	441d      	add	r5, r3
			bm = 1;
1a0011a0:	461c      	mov	r4, r3
		} while (++i < SS(fs));		/* Next byte */
1a0011a2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a0011a6:	d3e4      	bcc.n	1a001172 <change_bitmap+0x34>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a0011a8:	4649      	mov	r1, r9
		i = 0;
1a0011aa:	2500      	movs	r5, #0
1a0011ac:	e7d8      	b.n	1a001160 <change_bitmap+0x22>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a0011ae:	2102      	movs	r1, #2
}
1a0011b0:	4608      	mov	r0, r1
1a0011b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a0011b6 <put_fat>:
{
1a0011b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1a0011ba:	2901      	cmp	r1, #1
1a0011bc:	f240 8082 	bls.w	1a0012c4 <put_fat+0x10e>
1a0011c0:	4605      	mov	r5, r0
1a0011c2:	460c      	mov	r4, r1
1a0011c4:	4617      	mov	r7, r2
1a0011c6:	69c3      	ldr	r3, [r0, #28]
1a0011c8:	428b      	cmp	r3, r1
1a0011ca:	d97d      	bls.n	1a0012c8 <put_fat+0x112>
		switch (fs->fs_type) {
1a0011cc:	7803      	ldrb	r3, [r0, #0]
1a0011ce:	3b01      	subs	r3, #1
1a0011d0:	2b03      	cmp	r3, #3
1a0011d2:	d87d      	bhi.n	1a0012d0 <put_fat+0x11a>
1a0011d4:	e8df f003 	tbb	[pc, r3]
1a0011d8:	53534002 	.word	0x53534002
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
1a0011dc:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a0011e0:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a0011e2:	eb01 2158 	add.w	r1, r1, r8, lsr #9
1a0011e6:	f7ff fcb1 	bl	1a000b4c <move_window>
			if (res != FR_OK) break;
1a0011ea:	4606      	mov	r6, r0
1a0011ec:	2800      	cmp	r0, #0
1a0011ee:	d16c      	bne.n	1a0012ca <put_fat+0x114>
			p = fs->win + bc++ % SS(fs);
1a0011f0:	f105 0a38 	add.w	sl, r5, #56	; 0x38
1a0011f4:	f108 0901 	add.w	r9, r8, #1
1a0011f8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a0011fc:	f014 0401 	ands.w	r4, r4, #1
1a001200:	d01f      	beq.n	1a001242 <put_fat+0x8c>
1a001202:	f91a 3008 	ldrsb.w	r3, [sl, r8]
1a001206:	f003 030f 	and.w	r3, r3, #15
1a00120a:	013a      	lsls	r2, r7, #4
1a00120c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
1a001210:	4313      	orrs	r3, r2
1a001212:	b2db      	uxtb	r3, r3
1a001214:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
1a001218:	2301      	movs	r3, #1
1a00121a:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a00121c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a00121e:	eb01 2159 	add.w	r1, r1, r9, lsr #9
1a001222:	4628      	mov	r0, r5
1a001224:	f7ff fc92 	bl	1a000b4c <move_window>
			if (res != FR_OK) break;
1a001228:	4606      	mov	r6, r0
1a00122a:	2800      	cmp	r0, #0
1a00122c:	d14d      	bne.n	1a0012ca <put_fat+0x114>
			p = fs->win + bc % SS(fs);
1a00122e:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a001232:	b144      	cbz	r4, 1a001246 <put_fat+0x90>
1a001234:	f3c7 1707 	ubfx	r7, r7, #4, #8
1a001238:	f80a 7009 	strb.w	r7, [sl, r9]
			fs->wflag = 1;
1a00123c:	2301      	movs	r3, #1
1a00123e:	70eb      	strb	r3, [r5, #3]
			break;
1a001240:	e043      	b.n	1a0012ca <put_fat+0x114>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a001242:	b2fb      	uxtb	r3, r7
1a001244:	e7e6      	b.n	1a001214 <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a001246:	f91a 3009 	ldrsb.w	r3, [sl, r9]
1a00124a:	f023 030f 	bic.w	r3, r3, #15
1a00124e:	f3c7 2703 	ubfx	r7, r7, #8, #4
1a001252:	431f      	orrs	r7, r3
1a001254:	b2ff      	uxtb	r7, r7
1a001256:	e7ef      	b.n	1a001238 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1a001258:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a00125a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a00125e:	f7ff fc75 	bl	1a000b4c <move_window>
			if (res != FR_OK) break;
1a001262:	4606      	mov	r6, r0
1a001264:	bb88      	cbnz	r0, 1a0012ca <put_fat+0x114>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
1a001266:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a00126a:	0064      	lsls	r4, r4, #1
1a00126c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a001270:	b2b9      	uxth	r1, r7
1a001272:	4420      	add	r0, r4
1a001274:	f7ff f9c2 	bl	1a0005fc <st_word>
			fs->wflag = 1;
1a001278:	2301      	movs	r3, #1
1a00127a:	70eb      	strb	r3, [r5, #3]
			break;
1a00127c:	e025      	b.n	1a0012ca <put_fat+0x114>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1a00127e:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a001280:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a001284:	f7ff fc62 	bl	1a000b4c <move_window>
			if (res != FR_OK) break;
1a001288:	4606      	mov	r6, r0
1a00128a:	b9f0      	cbnz	r0, 1a0012ca <put_fat+0x114>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1a00128c:	782b      	ldrb	r3, [r5, #0]
1a00128e:	2b04      	cmp	r3, #4
1a001290:	d00c      	beq.n	1a0012ac <put_fat+0xf6>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1a001292:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
1a001296:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a00129a:	00a3      	lsls	r3, r4, #2
1a00129c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a0012a0:	4418      	add	r0, r3
1a0012a2:	f7ff f94c 	bl	1a00053e <ld_dword>
1a0012a6:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
1a0012aa:	4307      	orrs	r7, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
1a0012ac:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a0012b0:	00a4      	lsls	r4, r4, #2
1a0012b2:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a0012b6:	4639      	mov	r1, r7
1a0012b8:	4420      	add	r0, r4
1a0012ba:	f7ff f9a3 	bl	1a000604 <st_dword>
			fs->wflag = 1;
1a0012be:	2301      	movs	r3, #1
1a0012c0:	70eb      	strb	r3, [r5, #3]
			break;
1a0012c2:	e002      	b.n	1a0012ca <put_fat+0x114>
	FRESULT res = FR_INT_ERR;
1a0012c4:	2602      	movs	r6, #2
1a0012c6:	e000      	b.n	1a0012ca <put_fat+0x114>
1a0012c8:	2602      	movs	r6, #2
}
1a0012ca:	4630      	mov	r0, r6
1a0012cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
1a0012d0:	2602      	movs	r6, #2
1a0012d2:	e7fa      	b.n	1a0012ca <put_fat+0x114>

1a0012d4 <fill_last_frag>:
{
1a0012d4:	b570      	push	{r4, r5, r6, lr}
1a0012d6:	4604      	mov	r4, r0
1a0012d8:	460d      	mov	r5, r1
1a0012da:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a0012dc:	e007      	b.n	1a0012ee <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a0012de:	4632      	mov	r2, r6
1a0012e0:	f7ff ff69 	bl	1a0011b6 <put_fat>
		if (res != FR_OK) return res;
1a0012e4:	4603      	mov	r3, r0
1a0012e6:	b958      	cbnz	r0, 1a001300 <fill_last_frag+0x2c>
		obj->n_frag--;
1a0012e8:	69e3      	ldr	r3, [r4, #28]
1a0012ea:	3b01      	subs	r3, #1
1a0012ec:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a0012ee:	69e3      	ldr	r3, [r4, #28]
1a0012f0:	b133      	cbz	r3, 1a001300 <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a0012f2:	6820      	ldr	r0, [r4, #0]
1a0012f4:	1aea      	subs	r2, r5, r3
1a0012f6:	1c51      	adds	r1, r2, #1
1a0012f8:	2b01      	cmp	r3, #1
1a0012fa:	d9f0      	bls.n	1a0012de <fill_last_frag+0xa>
1a0012fc:	3202      	adds	r2, #2
1a0012fe:	e7ef      	b.n	1a0012e0 <fill_last_frag+0xc>
}
1a001300:	4618      	mov	r0, r3
1a001302:	bd70      	pop	{r4, r5, r6, pc}

1a001304 <get_fat>:
{
1a001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
1a001306:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1a001308:	2901      	cmp	r1, #1
1a00130a:	f240 8095 	bls.w	1a001438 <get_fat+0x134>
1a00130e:	69eb      	ldr	r3, [r5, #28]
1a001310:	428b      	cmp	r3, r1
1a001312:	f240 8093 	bls.w	1a00143c <get_fat+0x138>
1a001316:	460c      	mov	r4, r1
		switch (fs->fs_type) {
1a001318:	782b      	ldrb	r3, [r5, #0]
1a00131a:	3b01      	subs	r3, #1
1a00131c:	2b03      	cmp	r3, #3
1a00131e:	f200 808f 	bhi.w	1a001440 <get_fat+0x13c>
1a001322:	e8df f003 	tbb	[pc, r3]
1a001326:	2a02      	.short	0x2a02
1a001328:	4e3b      	.short	0x4e3b
			bc = (UINT)clst; bc += bc / 2;
1a00132a:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a00132e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001330:	eb01 2156 	add.w	r1, r1, r6, lsr #9
1a001334:	4628      	mov	r0, r5
1a001336:	f7ff fc09 	bl	1a000b4c <move_window>
1a00133a:	2800      	cmp	r0, #0
1a00133c:	f040 8082 	bne.w	1a001444 <get_fat+0x140>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
1a001340:	1c77      	adds	r7, r6, #1
1a001342:	f3c6 0608 	ubfx	r6, r6, #0, #9
1a001346:	442e      	add	r6, r5
1a001348:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a00134c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a00134e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
1a001352:	4628      	mov	r0, r5
1a001354:	f7ff fbfa 	bl	1a000b4c <move_window>
1a001358:	2800      	cmp	r0, #0
1a00135a:	d176      	bne.n	1a00144a <get_fat+0x146>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
1a00135c:	f3c7 0008 	ubfx	r0, r7, #0, #9
1a001360:	4428      	add	r0, r5
1a001362:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
1a001366:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
1a00136a:	f014 0f01 	tst.w	r4, #1
1a00136e:	d001      	beq.n	1a001374 <get_fat+0x70>
1a001370:	0900      	lsrs	r0, r0, #4
1a001372:	e062      	b.n	1a00143a <get_fat+0x136>
1a001374:	f3c0 000b 	ubfx	r0, r0, #0, #12
1a001378:	e05f      	b.n	1a00143a <get_fat+0x136>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1a00137a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a00137c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a001380:	4628      	mov	r0, r5
1a001382:	f7ff fbe3 	bl	1a000b4c <move_window>
1a001386:	2800      	cmp	r0, #0
1a001388:	d162      	bne.n	1a001450 <get_fat+0x14c>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
1a00138a:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a00138e:	0064      	lsls	r4, r4, #1
1a001390:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a001394:	4420      	add	r0, r4
1a001396:	f7ff f8cd 	bl	1a000534 <ld_word>
			break;
1a00139a:	e04e      	b.n	1a00143a <get_fat+0x136>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a00139c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a00139e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a0013a2:	4628      	mov	r0, r5
1a0013a4:	f7ff fbd2 	bl	1a000b4c <move_window>
1a0013a8:	2800      	cmp	r0, #0
1a0013aa:	d154      	bne.n	1a001456 <get_fat+0x152>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
1a0013ac:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a0013b0:	00a4      	lsls	r4, r4, #2
1a0013b2:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a0013b6:	4420      	add	r0, r4
1a0013b8:	f7ff f8c1 	bl	1a00053e <ld_dword>
1a0013bc:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
1a0013c0:	e03b      	b.n	1a00143a <get_fat+0x136>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
1a0013c2:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
1a0013c6:	ea52 0103 	orrs.w	r1, r2, r3
1a0013ca:	d001      	beq.n	1a0013d0 <get_fat+0xcc>
1a0013cc:	6881      	ldr	r1, [r0, #8]
1a0013ce:	b911      	cbnz	r1, 1a0013d6 <get_fat+0xd2>
1a0013d0:	79c1      	ldrb	r1, [r0, #7]
1a0013d2:	2900      	cmp	r1, #0
1a0013d4:	d142      	bne.n	1a00145c <get_fat+0x158>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1a0013d6:	6881      	ldr	r1, [r0, #8]
1a0013d8:	1a61      	subs	r1, r4, r1
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1a0013da:	f112 36ff 	adds.w	r6, r2, #4294967295	; 0xffffffff
1a0013de:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
1a0013e2:	0a72      	lsrs	r2, r6, #9
1a0013e4:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
1a0013e8:	896b      	ldrh	r3, [r5, #10]
1a0013ea:	fbb2 f2f3 	udiv	r2, r2, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a0013ee:	79c3      	ldrb	r3, [r0, #7]
1a0013f0:	2b02      	cmp	r3, #2
1a0013f2:	d017      	beq.n	1a001424 <get_fat+0x120>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a0013f4:	2b03      	cmp	r3, #3
1a0013f6:	d01a      	beq.n	1a00142e <get_fat+0x12a>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1a0013f8:	2b02      	cmp	r3, #2
1a0013fa:	d034      	beq.n	1a001466 <get_fat+0x162>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1a0013fc:	69c3      	ldr	r3, [r0, #28]
1a0013fe:	bba3      	cbnz	r3, 1a00146a <get_fat+0x166>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a001400:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001402:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a001406:	4628      	mov	r0, r5
1a001408:	f7ff fba0 	bl	1a000b4c <move_window>
1a00140c:	bb80      	cbnz	r0, 1a001470 <get_fat+0x16c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1a00140e:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001412:	00a3      	lsls	r3, r4, #2
1a001414:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a001418:	4418      	add	r0, r3
1a00141a:	f7ff f890 	bl	1a00053e <ld_dword>
1a00141e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a001422:	e00a      	b.n	1a00143a <get_fat+0x136>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a001424:	4291      	cmp	r1, r2
1a001426:	d8e5      	bhi.n	1a0013f4 <get_fat+0xf0>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a001428:	d01a      	beq.n	1a001460 <get_fat+0x15c>
1a00142a:	1c60      	adds	r0, r4, #1
1a00142c:	e005      	b.n	1a00143a <get_fat+0x136>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a00142e:	6982      	ldr	r2, [r0, #24]
1a001430:	428a      	cmp	r2, r1
1a001432:	d9e1      	bls.n	1a0013f8 <get_fat+0xf4>
					val = clst + 1; 	/* Generate the value */
1a001434:	1c60      	adds	r0, r4, #1
					break;
1a001436:	e000      	b.n	1a00143a <get_fat+0x136>
		val = 1;	/* Internal error */
1a001438:	2001      	movs	r0, #1
}
1a00143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
1a00143c:	2001      	movs	r0, #1
1a00143e:	e7fc      	b.n	1a00143a <get_fat+0x136>
			val = 1;	/* Internal error */
1a001440:	2001      	movs	r0, #1
1a001442:	e7fa      	b.n	1a00143a <get_fat+0x136>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a001444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001448:	e7f7      	b.n	1a00143a <get_fat+0x136>
1a00144a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00144e:	e7f4      	b.n	1a00143a <get_fat+0x136>
1a001450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001454:	e7f1      	b.n	1a00143a <get_fat+0x136>
1a001456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00145a:	e7ee      	b.n	1a00143a <get_fat+0x136>
			val = 1;	/* Internal error */
1a00145c:	2001      	movs	r0, #1
1a00145e:	e7ec      	b.n	1a00143a <get_fat+0x136>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a001460:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a001464:	e7e9      	b.n	1a00143a <get_fat+0x136>
			val = 1;	/* Internal error */
1a001466:	2001      	movs	r0, #1
1a001468:	e7e7      	b.n	1a00143a <get_fat+0x136>
						val = 0x7FFFFFFF;	/* Generate EOC */
1a00146a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a00146e:	e7e4      	b.n	1a00143a <get_fat+0x136>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a001470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
1a001474:	e7e1      	b.n	1a00143a <get_fat+0x136>

1a001476 <dir_sdi>:
{
1a001476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00147a:	4606      	mov	r6, r0
1a00147c:	460d      	mov	r5, r1
	FATFS *fs = dp->obj.fs;
1a00147e:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a001480:	783b      	ldrb	r3, [r7, #0]
1a001482:	2b04      	cmp	r3, #4
1a001484:	d023      	beq.n	1a0014ce <dir_sdi+0x58>
1a001486:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
1a00148a:	42ab      	cmp	r3, r5
1a00148c:	d93e      	bls.n	1a00150c <dir_sdi+0x96>
1a00148e:	f015 0f1f 	tst.w	r5, #31
1a001492:	d13e      	bne.n	1a001512 <dir_sdi+0x9c>
	dp->dptr = ofs;				/* Set current offset */
1a001494:	6335      	str	r5, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1a001496:	68b4      	ldr	r4, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1a001498:	b92c      	cbnz	r4, 1a0014a6 <dir_sdi+0x30>
1a00149a:	783b      	ldrb	r3, [r7, #0]
1a00149c:	2b02      	cmp	r3, #2
1a00149e:	d902      	bls.n	1a0014a6 <dir_sdi+0x30>
		clst = fs->dirbase;
1a0014a0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1a0014a2:	2300      	movs	r3, #0
1a0014a4:	71f3      	strb	r3, [r6, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
1a0014a6:	b9ac      	cbnz	r4, 1a0014d4 <dir_sdi+0x5e>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a0014a8:	893b      	ldrh	r3, [r7, #8]
1a0014aa:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a0014ae:	d932      	bls.n	1a001516 <dir_sdi+0xa0>
		dp->sect = fs->dirbase;
1a0014b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0014b2:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
1a0014b4:	6374      	str	r4, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
1a0014b6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
1a0014b8:	b3ab      	cbz	r3, 1a001526 <dir_sdi+0xb0>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1a0014ba:	eb03 2355 	add.w	r3, r3, r5, lsr #9
1a0014be:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1a0014c0:	3738      	adds	r7, #56	; 0x38
1a0014c2:	f3c5 0508 	ubfx	r5, r5, #0, #9
1a0014c6:	443d      	add	r5, r7
1a0014c8:	63f5      	str	r5, [r6, #60]	; 0x3c
	return FR_OK;
1a0014ca:	2000      	movs	r0, #0
1a0014cc:	e01f      	b.n	1a00150e <dir_sdi+0x98>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a0014ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
1a0014d2:	e7da      	b.n	1a00148a <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1a0014d4:	f8b7 800a 	ldrh.w	r8, [r7, #10]
1a0014d8:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
1a0014dc:	4545      	cmp	r5, r8
1a0014de:	d30f      	bcc.n	1a001500 <dir_sdi+0x8a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1a0014e0:	4621      	mov	r1, r4
1a0014e2:	4630      	mov	r0, r6
1a0014e4:	f7ff ff0e 	bl	1a001304 <get_fat>
1a0014e8:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a0014ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0014ee:	d014      	beq.n	1a00151a <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a0014f0:	2801      	cmp	r0, #1
1a0014f2:	d914      	bls.n	1a00151e <dir_sdi+0xa8>
1a0014f4:	69fb      	ldr	r3, [r7, #28]
1a0014f6:	4283      	cmp	r3, r0
1a0014f8:	d913      	bls.n	1a001522 <dir_sdi+0xac>
			ofs -= csz;
1a0014fa:	eba5 0508 	sub.w	r5, r5, r8
1a0014fe:	e7ed      	b.n	1a0014dc <dir_sdi+0x66>
		dp->sect = clst2sect(fs, clst);
1a001500:	4621      	mov	r1, r4
1a001502:	4638      	mov	r0, r7
1a001504:	f7ff f97c 	bl	1a000800 <clst2sect>
1a001508:	63b0      	str	r0, [r6, #56]	; 0x38
1a00150a:	e7d3      	b.n	1a0014b4 <dir_sdi+0x3e>
		return FR_INT_ERR;
1a00150c:	2002      	movs	r0, #2
}
1a00150e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
1a001512:	2002      	movs	r0, #2
1a001514:	e7fb      	b.n	1a00150e <dir_sdi+0x98>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a001516:	2002      	movs	r0, #2
1a001518:	e7f9      	b.n	1a00150e <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a00151a:	2001      	movs	r0, #1
1a00151c:	e7f7      	b.n	1a00150e <dir_sdi+0x98>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a00151e:	2002      	movs	r0, #2
1a001520:	e7f5      	b.n	1a00150e <dir_sdi+0x98>
1a001522:	2002      	movs	r0, #2
1a001524:	e7f3      	b.n	1a00150e <dir_sdi+0x98>
	if (dp->sect == 0) return FR_INT_ERR;
1a001526:	2002      	movs	r0, #2
1a001528:	e7f1      	b.n	1a00150e <dir_sdi+0x98>

1a00152a <create_chain>:
{
1a00152a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00152e:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
1a001530:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
1a001532:	4689      	mov	r9, r1
1a001534:	b931      	cbnz	r1, 1a001544 <create_chain+0x1a>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
1a001536:	697e      	ldr	r6, [r7, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a001538:	b1a6      	cbz	r6, 1a001564 <create_chain+0x3a>
1a00153a:	69fb      	ldr	r3, [r7, #28]
1a00153c:	42b3      	cmp	r3, r6
1a00153e:	d812      	bhi.n	1a001566 <create_chain+0x3c>
1a001540:	2601      	movs	r6, #1
1a001542:	e010      	b.n	1a001566 <create_chain+0x3c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
1a001544:	f7ff fede 	bl	1a001304 <get_fat>
1a001548:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Test for insanity */
1a00154a:	2801      	cmp	r0, #1
1a00154c:	f240 80c6 	bls.w	1a0016dc <create_chain+0x1b2>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
1a001550:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001554:	f000 80c3 	beq.w	1a0016de <create_chain+0x1b4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1a001558:	69fb      	ldr	r3, [r7, #28]
1a00155a:	4283      	cmp	r3, r0
1a00155c:	f200 80bf 	bhi.w	1a0016de <create_chain+0x1b4>
		scl = clst;							/* Cluster to start to find */
1a001560:	464e      	mov	r6, r9
1a001562:	e000      	b.n	1a001566 <create_chain+0x3c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a001564:	2601      	movs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
1a001566:	69bd      	ldr	r5, [r7, #24]
1a001568:	2d00      	cmp	r5, #0
1a00156a:	f000 80b8 	beq.w	1a0016de <create_chain+0x1b4>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a00156e:	783b      	ldrb	r3, [r7, #0]
1a001570:	2b04      	cmp	r3, #4
1a001572:	d003      	beq.n	1a00157c <create_chain+0x52>
		if (scl == clst) {						/* Stretching an existing chain? */
1a001574:	454e      	cmp	r6, r9
1a001576:	d055      	beq.n	1a001624 <create_chain+0xfa>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a001578:	4634      	mov	r4, r6
1a00157a:	e095      	b.n	1a0016a8 <create_chain+0x17e>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a00157c:	2201      	movs	r2, #1
1a00157e:	4631      	mov	r1, r6
1a001580:	4638      	mov	r0, r7
1a001582:	f7ff fd99 	bl	1a0010b8 <find_bitmap>
1a001586:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1a001588:	1e43      	subs	r3, r0, #1
1a00158a:	f113 0f03 	cmn.w	r3, #3
1a00158e:	f200 80a6 	bhi.w	1a0016de <create_chain+0x1b4>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1a001592:	2301      	movs	r3, #1
1a001594:	461a      	mov	r2, r3
1a001596:	4601      	mov	r1, r0
1a001598:	4638      	mov	r0, r7
1a00159a:	f7ff fdd0 	bl	1a00113e <change_bitmap>
1a00159e:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
1a0015a0:	2802      	cmp	r0, #2
1a0015a2:	f000 809f 	beq.w	1a0016e4 <create_chain+0x1ba>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a0015a6:	2801      	cmp	r0, #1
1a0015a8:	f000 809e 	beq.w	1a0016e8 <create_chain+0x1be>
		if (clst == 0) {							/* Is it a new chain? */
1a0015ac:	f1b9 0f00 	cmp.w	r9, #0
1a0015b0:	d11e      	bne.n	1a0015f0 <create_chain+0xc6>
			obj->stat = 2;							/* Set status 'contiguous' */
1a0015b2:	2202      	movs	r2, #2
1a0015b4:	f888 2007 	strb.w	r2, [r8, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1a0015b8:	f898 2007 	ldrb.w	r2, [r8, #7]
1a0015bc:	2a02      	cmp	r2, #2
1a0015be:	f000 8082 	beq.w	1a0016c6 <create_chain+0x19c>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1a0015c2:	f109 0201 	add.w	r2, r9, #1
1a0015c6:	42aa      	cmp	r2, r5
1a0015c8:	d022      	beq.n	1a001610 <create_chain+0xe6>
				if (obj->n_frag == 0) obj->n_frag = 1;
1a0015ca:	f8d8 301c 	ldr.w	r3, [r8, #28]
1a0015ce:	b913      	cbnz	r3, 1a0015d6 <create_chain+0xac>
1a0015d0:	2301      	movs	r3, #1
1a0015d2:	f8c8 301c 	str.w	r3, [r8, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
1a0015d6:	462a      	mov	r2, r5
1a0015d8:	4649      	mov	r1, r9
1a0015da:	4640      	mov	r0, r8
1a0015dc:	f7ff fe7a 	bl	1a0012d4 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
1a0015e0:	4603      	mov	r3, r0
1a0015e2:	2800      	cmp	r0, #0
1a0015e4:	d171      	bne.n	1a0016ca <create_chain+0x1a0>
1a0015e6:	2201      	movs	r2, #1
1a0015e8:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a0015ec:	462c      	mov	r4, r5
1a0015ee:	e03e      	b.n	1a00166e <create_chain+0x144>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1a0015f0:	f898 2007 	ldrb.w	r2, [r8, #7]
1a0015f4:	2a02      	cmp	r2, #2
1a0015f6:	d1df      	bne.n	1a0015b8 <create_chain+0x8e>
1a0015f8:	1c72      	adds	r2, r6, #1
1a0015fa:	42aa      	cmp	r2, r5
1a0015fc:	d0dc      	beq.n	1a0015b8 <create_chain+0x8e>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1a0015fe:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a001602:	1ab2      	subs	r2, r6, r2
1a001604:	f8c8 2018 	str.w	r2, [r8, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
1a001608:	2203      	movs	r2, #3
1a00160a:	f888 2007 	strb.w	r2, [r8, #7]
1a00160e:	e7d3      	b.n	1a0015b8 <create_chain+0x8e>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a001610:	f8d8 201c 	ldr.w	r2, [r8, #28]
1a001614:	b122      	cbz	r2, 1a001620 <create_chain+0xf6>
1a001616:	3201      	adds	r2, #1
1a001618:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a00161c:	462c      	mov	r4, r5
1a00161e:	e026      	b.n	1a00166e <create_chain+0x144>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a001620:	2202      	movs	r2, #2
1a001622:	e7f9      	b.n	1a001618 <create_chain+0xee>
			ncl = scl + 1;						/* Test if next cluster is free */
1a001624:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
1a001626:	69fb      	ldr	r3, [r7, #28]
1a001628:	42a3      	cmp	r3, r4
1a00162a:	d800      	bhi.n	1a00162e <create_chain+0x104>
1a00162c:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
1a00162e:	4621      	mov	r1, r4
1a001630:	4640      	mov	r0, r8
1a001632:	f7ff fe67 	bl	1a001304 <get_fat>
1a001636:	4605      	mov	r5, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a001638:	2801      	cmp	r0, #1
1a00163a:	d050      	beq.n	1a0016de <create_chain+0x1b4>
1a00163c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001640:	d04d      	beq.n	1a0016de <create_chain+0x1b4>
			if (cs != 0) {						/* Not free? */
1a001642:	b138      	cbz	r0, 1a001654 <create_chain+0x12a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
1a001644:	697b      	ldr	r3, [r7, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a001646:	2b01      	cmp	r3, #1
1a001648:	d996      	bls.n	1a001578 <create_chain+0x4e>
1a00164a:	69fa      	ldr	r2, [r7, #28]
1a00164c:	429a      	cmp	r2, r3
1a00164e:	d993      	bls.n	1a001578 <create_chain+0x4e>
1a001650:	461e      	mov	r6, r3
1a001652:	e791      	b.n	1a001578 <create_chain+0x4e>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
1a001654:	2c00      	cmp	r4, #0
1a001656:	d08f      	beq.n	1a001578 <create_chain+0x4e>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
1a001658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00165c:	4621      	mov	r1, r4
1a00165e:	4638      	mov	r0, r7
1a001660:	f7ff fda9 	bl	1a0011b6 <put_fat>
		if (res == FR_OK && clst != 0) {
1a001664:	4603      	mov	r3, r0
1a001666:	b910      	cbnz	r0, 1a00166e <create_chain+0x144>
1a001668:	f1b9 0f00 	cmp.w	r9, #0
1a00166c:	d124      	bne.n	1a0016b8 <create_chain+0x18e>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1a00166e:	bb73      	cbnz	r3, 1a0016ce <create_chain+0x1a4>
		fs->last_clst = ncl;
1a001670:	617c      	str	r4, [r7, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
1a001672:	69ba      	ldr	r2, [r7, #24]
1a001674:	69fb      	ldr	r3, [r7, #28]
1a001676:	3b02      	subs	r3, #2
1a001678:	429a      	cmp	r2, r3
1a00167a:	d801      	bhi.n	1a001680 <create_chain+0x156>
1a00167c:	3a01      	subs	r2, #1
1a00167e:	61ba      	str	r2, [r7, #24]
		fs->fsi_flag |= 1;
1a001680:	793b      	ldrb	r3, [r7, #4]
1a001682:	f043 0301 	orr.w	r3, r3, #1
1a001686:	713b      	strb	r3, [r7, #4]
1a001688:	4625      	mov	r5, r4
1a00168a:	e028      	b.n	1a0016de <create_chain+0x1b4>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
1a00168c:	4621      	mov	r1, r4
1a00168e:	4640      	mov	r0, r8
1a001690:	f7ff fe38 	bl	1a001304 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
1a001694:	4605      	mov	r5, r0
1a001696:	2800      	cmp	r0, #0
1a001698:	d0de      	beq.n	1a001658 <create_chain+0x12e>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a00169a:	2801      	cmp	r0, #1
1a00169c:	d01f      	beq.n	1a0016de <create_chain+0x1b4>
1a00169e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0016a2:	d01c      	beq.n	1a0016de <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a0016a4:	42b4      	cmp	r4, r6
1a0016a6:	d024      	beq.n	1a0016f2 <create_chain+0x1c8>
				ncl++;							/* Next cluster */
1a0016a8:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1a0016aa:	69fb      	ldr	r3, [r7, #28]
1a0016ac:	42a3      	cmp	r3, r4
1a0016ae:	d8ed      	bhi.n	1a00168c <create_chain+0x162>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a0016b0:	2e01      	cmp	r6, #1
1a0016b2:	d91c      	bls.n	1a0016ee <create_chain+0x1c4>
					ncl = 2;
1a0016b4:	2402      	movs	r4, #2
1a0016b6:	e7e9      	b.n	1a00168c <create_chain+0x162>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
1a0016b8:	4622      	mov	r2, r4
1a0016ba:	4649      	mov	r1, r9
1a0016bc:	4638      	mov	r0, r7
1a0016be:	f7ff fd7a 	bl	1a0011b6 <put_fat>
1a0016c2:	4603      	mov	r3, r0
1a0016c4:	e7d3      	b.n	1a00166e <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a0016c6:	462c      	mov	r4, r5
1a0016c8:	e7d1      	b.n	1a00166e <create_chain+0x144>
1a0016ca:	462c      	mov	r4, r5
1a0016cc:	e7cf      	b.n	1a00166e <create_chain+0x144>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
1a0016ce:	2b01      	cmp	r3, #1
1a0016d0:	d001      	beq.n	1a0016d6 <create_chain+0x1ac>
1a0016d2:	2501      	movs	r5, #1
1a0016d4:	e003      	b.n	1a0016de <create_chain+0x1b4>
1a0016d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a0016da:	e000      	b.n	1a0016de <create_chain+0x1b4>
		if (cs < 2) return 1;				/* Test for insanity */
1a0016dc:	2501      	movs	r5, #1
}
1a0016de:	4628      	mov	r0, r5
1a0016e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (res == FR_INT_ERR) return 1;
1a0016e4:	2501      	movs	r5, #1
1a0016e6:	e7fa      	b.n	1a0016de <create_chain+0x1b4>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a0016e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a0016ec:	e7f7      	b.n	1a0016de <create_chain+0x1b4>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a0016ee:	2500      	movs	r5, #0
1a0016f0:	e7f5      	b.n	1a0016de <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a0016f2:	2500      	movs	r5, #0
1a0016f4:	e7f3      	b.n	1a0016de <create_chain+0x1b4>

1a0016f6 <dir_clear>:
{
1a0016f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0016f8:	4605      	mov	r5, r0
1a0016fa:	460c      	mov	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1a0016fc:	f7ff f9fe 	bl	1a000afc <sync_window>
1a001700:	b108      	cbz	r0, 1a001706 <dir_clear+0x10>
1a001702:	2001      	movs	r0, #1
}
1a001704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
1a001706:	4621      	mov	r1, r4
1a001708:	4628      	mov	r0, r5
1a00170a:	f7ff f879 	bl	1a000800 <clst2sect>
1a00170e:	4607      	mov	r7, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
1a001710:	6368      	str	r0, [r5, #52]	; 0x34
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
1a001712:	f105 0638 	add.w	r6, r5, #56	; 0x38
1a001716:	f44f 7200 	mov.w	r2, #512	; 0x200
1a00171a:	2100      	movs	r1, #0
1a00171c:	4630      	mov	r0, r6
1a00171e:	f7fe ff84 	bl	1a00062a <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
1a001722:	2400      	movs	r4, #0
1a001724:	e000      	b.n	1a001728 <dir_clear+0x32>
1a001726:	3401      	adds	r4, #1
1a001728:	896b      	ldrh	r3, [r5, #10]
1a00172a:	42a3      	cmp	r3, r4
1a00172c:	d907      	bls.n	1a00173e <dir_clear+0x48>
1a00172e:	2301      	movs	r3, #1
1a001730:	19e2      	adds	r2, r4, r7
1a001732:	4631      	mov	r1, r6
1a001734:	7868      	ldrb	r0, [r5, #1]
1a001736:	f001 f903 	bl	1a002940 <disk_write>
1a00173a:	2800      	cmp	r0, #0
1a00173c:	d0f3      	beq.n	1a001726 <dir_clear+0x30>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1a00173e:	8968      	ldrh	r0, [r5, #10]
1a001740:	1b00      	subs	r0, r0, r4
1a001742:	bf18      	it	ne
1a001744:	2001      	movne	r0, #1
1a001746:	e7dd      	b.n	1a001704 <dir_clear+0xe>

1a001748 <dir_next>:
{
1a001748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
1a00174c:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
1a00174e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001750:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a001752:	2b00      	cmp	r3, #0
1a001754:	d056      	beq.n	1a001804 <dir_next+0xbc>
1a001756:	3520      	adds	r5, #32
1a001758:	7832      	ldrb	r2, [r6, #0]
1a00175a:	2a04      	cmp	r2, #4
1a00175c:	d018      	beq.n	1a001790 <dir_next+0x48>
1a00175e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
1a001762:	42aa      	cmp	r2, r5
1a001764:	d950      	bls.n	1a001808 <dir_next+0xc0>
1a001766:	4688      	mov	r8, r1
1a001768:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1a00176a:	f3c5 0708 	ubfx	r7, r5, #0, #9
1a00176e:	b93f      	cbnz	r7, 1a001780 <dir_next+0x38>
		dp->sect++;				/* Next sector */
1a001770:	3301      	adds	r3, #1
1a001772:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
1a001774:	6b41      	ldr	r1, [r0, #52]	; 0x34
1a001776:	b991      	cbnz	r1, 1a00179e <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1a001778:	8933      	ldrh	r3, [r6, #8]
1a00177a:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a00177e:	d90a      	bls.n	1a001796 <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
1a001780:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1a001782:	f106 0338 	add.w	r3, r6, #56	; 0x38
1a001786:	443b      	add	r3, r7
1a001788:	63e3      	str	r3, [r4, #60]	; 0x3c
	return FR_OK;
1a00178a:	2000      	movs	r0, #0
}
1a00178c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001794:	e7e5      	b.n	1a001762 <dir_next+0x1a>
				dp->sect = 0; return FR_NO_FILE;
1a001796:	2300      	movs	r3, #0
1a001798:	6383      	str	r3, [r0, #56]	; 0x38
1a00179a:	2004      	movs	r0, #4
1a00179c:	e7f6      	b.n	1a00178c <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
1a00179e:	8973      	ldrh	r3, [r6, #10]
1a0017a0:	3b01      	subs	r3, #1
1a0017a2:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
1a0017a6:	d1eb      	bne.n	1a001780 <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
1a0017a8:	f7ff fdac 	bl	1a001304 <get_fat>
1a0017ac:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a0017ae:	2801      	cmp	r0, #1
1a0017b0:	d92c      	bls.n	1a00180c <dir_next+0xc4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a0017b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0017b6:	d02b      	beq.n	1a001810 <dir_next+0xc8>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
1a0017b8:	69f3      	ldr	r3, [r6, #28]
1a0017ba:	4283      	cmp	r3, r0
1a0017bc:	d816      	bhi.n	1a0017ec <dir_next+0xa4>
					if (!stretch) {								/* If no stretch, report EOT */
1a0017be:	f1b8 0f00 	cmp.w	r8, #0
1a0017c2:	d01b      	beq.n	1a0017fc <dir_next+0xb4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1a0017c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0017c6:	4620      	mov	r0, r4
1a0017c8:	f7ff feaf 	bl	1a00152a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a0017cc:	4681      	mov	r9, r0
1a0017ce:	b308      	cbz	r0, 1a001814 <dir_next+0xcc>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a0017d0:	2801      	cmp	r0, #1
1a0017d2:	d021      	beq.n	1a001818 <dir_next+0xd0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a0017d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0017d8:	d020      	beq.n	1a00181c <dir_next+0xd4>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a0017da:	4601      	mov	r1, r0
1a0017dc:	4630      	mov	r0, r6
1a0017de:	f7ff ff8a 	bl	1a0016f6 <dir_clear>
1a0017e2:	b9e8      	cbnz	r0, 1a001820 <dir_next+0xd8>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
1a0017e4:	79e3      	ldrb	r3, [r4, #7]
1a0017e6:	f043 0304 	orr.w	r3, r3, #4
1a0017ea:	71e3      	strb	r3, [r4, #7]
				dp->clust = clst;		/* Initialize data for new cluster */
1a0017ec:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
1a0017f0:	4649      	mov	r1, r9
1a0017f2:	4630      	mov	r0, r6
1a0017f4:	f7ff f804 	bl	1a000800 <clst2sect>
1a0017f8:	63a0      	str	r0, [r4, #56]	; 0x38
1a0017fa:	e7c1      	b.n	1a001780 <dir_next+0x38>
						dp->sect = 0; return FR_NO_FILE;
1a0017fc:	2300      	movs	r3, #0
1a0017fe:	63a3      	str	r3, [r4, #56]	; 0x38
1a001800:	2004      	movs	r0, #4
1a001802:	e7c3      	b.n	1a00178c <dir_next+0x44>
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001804:	2004      	movs	r0, #4
1a001806:	e7c1      	b.n	1a00178c <dir_next+0x44>
1a001808:	2004      	movs	r0, #4
1a00180a:	e7bf      	b.n	1a00178c <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a00180c:	2002      	movs	r0, #2
1a00180e:	e7bd      	b.n	1a00178c <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001810:	2001      	movs	r0, #1
1a001812:	e7bb      	b.n	1a00178c <dir_next+0x44>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a001814:	2007      	movs	r0, #7
1a001816:	e7b9      	b.n	1a00178c <dir_next+0x44>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a001818:	2002      	movs	r0, #2
1a00181a:	e7b7      	b.n	1a00178c <dir_next+0x44>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a00181c:	2001      	movs	r0, #1
1a00181e:	e7b5      	b.n	1a00178c <dir_next+0x44>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a001820:	2001      	movs	r0, #1
1a001822:	e7b3      	b.n	1a00178c <dir_next+0x44>

1a001824 <load_xdir>:
{
1a001824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001828:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
1a00182a:	6800      	ldr	r0, [r0, #0]
1a00182c:	6906      	ldr	r6, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
1a00182e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001830:	f7ff f98c 	bl	1a000b4c <move_window>
	if (res != FR_OK) return res;
1a001834:	4605      	mov	r5, r0
1a001836:	b920      	cbnz	r0, 1a001842 <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;	/* Invalid order */
1a001838:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a00183a:	780b      	ldrb	r3, [r1, #0]
1a00183c:	2b85      	cmp	r3, #133	; 0x85
1a00183e:	d003      	beq.n	1a001848 <load_xdir+0x24>
1a001840:	2502      	movs	r5, #2
}
1a001842:	4628      	mov	r0, r5
1a001844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
1a001848:	2220      	movs	r2, #32
1a00184a:	4630      	mov	r0, r6
1a00184c:	f7fe fee4 	bl	1a000618 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
1a001850:	7877      	ldrb	r7, [r6, #1]
1a001852:	3701      	adds	r7, #1
1a001854:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a001856:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
1a00185a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00185e:	d855      	bhi.n	1a00190c <load_xdir+0xe8>
	res = dir_next(dp, 0);
1a001860:	2100      	movs	r1, #0
1a001862:	4620      	mov	r0, r4
1a001864:	f7ff ff70 	bl	1a001748 <dir_next>
1a001868:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a00186a:	2804      	cmp	r0, #4
1a00186c:	d050      	beq.n	1a001910 <load_xdir+0xec>
	if (res != FR_OK) return res;
1a00186e:	2800      	cmp	r0, #0
1a001870:	d1e7      	bne.n	1a001842 <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
1a001872:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001874:	6820      	ldr	r0, [r4, #0]
1a001876:	f7ff f969 	bl	1a000b4c <move_window>
	if (res != FR_OK) return res;
1a00187a:	4605      	mov	r5, r0
1a00187c:	2800      	cmp	r0, #0
1a00187e:	d1e0      	bne.n	1a001842 <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;	/* Invalid order */
1a001880:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001882:	780b      	ldrb	r3, [r1, #0]
1a001884:	2bc0      	cmp	r3, #192	; 0xc0
1a001886:	d001      	beq.n	1a00188c <load_xdir+0x68>
1a001888:	2502      	movs	r5, #2
1a00188a:	e7da      	b.n	1a001842 <load_xdir+0x1e>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
1a00188c:	2220      	movs	r2, #32
1a00188e:	18b0      	adds	r0, r6, r2
1a001890:	f7fe fec2 	bl	1a000618 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a001894:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
1a001898:	332c      	adds	r3, #44	; 0x2c
1a00189a:	4a21      	ldr	r2, [pc, #132]	; (1a001920 <load_xdir+0xfc>)
1a00189c:	fba2 2303 	umull	r2, r3, r2, r3
1a0018a0:	08db      	lsrs	r3, r3, #3
1a0018a2:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
1a0018a6:	d335      	bcc.n	1a001914 <load_xdir+0xf0>
	i = 2 * SZDIRE;	/* C1 offset to load */
1a0018a8:	f04f 0840 	mov.w	r8, #64	; 0x40
1a0018ac:	e003      	b.n	1a0018b6 <load_xdir+0x92>
	} while ((i += SZDIRE) < sz_ent);
1a0018ae:	f108 0820 	add.w	r8, r8, #32
1a0018b2:	4547      	cmp	r7, r8
1a0018b4:	d91c      	bls.n	1a0018f0 <load_xdir+0xcc>
		res = dir_next(dp, 0);
1a0018b6:	2100      	movs	r1, #0
1a0018b8:	4620      	mov	r0, r4
1a0018ba:	f7ff ff45 	bl	1a001748 <dir_next>
1a0018be:	4605      	mov	r5, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a0018c0:	2804      	cmp	r0, #4
1a0018c2:	d029      	beq.n	1a001918 <load_xdir+0xf4>
		if (res != FR_OK) return res;
1a0018c4:	2800      	cmp	r0, #0
1a0018c6:	d1bc      	bne.n	1a001842 <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
1a0018c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a0018ca:	6820      	ldr	r0, [r4, #0]
1a0018cc:	f7ff f93e 	bl	1a000b4c <move_window>
		if (res != FR_OK) return res;
1a0018d0:	4605      	mov	r5, r0
1a0018d2:	2800      	cmp	r0, #0
1a0018d4:	d1b5      	bne.n	1a001842 <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a0018d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a0018d8:	780b      	ldrb	r3, [r1, #0]
1a0018da:	2bc1      	cmp	r3, #193	; 0xc1
1a0018dc:	d11e      	bne.n	1a00191c <load_xdir+0xf8>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
1a0018de:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a0018e2:	d2e4      	bcs.n	1a0018ae <load_xdir+0x8a>
1a0018e4:	2220      	movs	r2, #32
1a0018e6:	eb06 0008 	add.w	r0, r6, r8
1a0018ea:	f7fe fe95 	bl	1a000618 <mem_cpy>
1a0018ee:	e7de      	b.n	1a0018ae <load_xdir+0x8a>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
1a0018f0:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a0018f4:	d8a5      	bhi.n	1a001842 <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
1a0018f6:	4630      	mov	r0, r6
1a0018f8:	f7fe fff4 	bl	1a0008e4 <xdir_sum>
1a0018fc:	4604      	mov	r4, r0
1a0018fe:	1cb0      	adds	r0, r6, #2
1a001900:	f7fe fe18 	bl	1a000534 <ld_word>
1a001904:	4284      	cmp	r4, r0
1a001906:	d09c      	beq.n	1a001842 <load_xdir+0x1e>
1a001908:	2502      	movs	r5, #2
1a00190a:	e79a      	b.n	1a001842 <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a00190c:	2502      	movs	r5, #2
1a00190e:	e798      	b.n	1a001842 <load_xdir+0x1e>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001910:	2502      	movs	r5, #2
1a001912:	e796      	b.n	1a001842 <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a001914:	2502      	movs	r5, #2
1a001916:	e794      	b.n	1a001842 <load_xdir+0x1e>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001918:	2502      	movs	r5, #2
1a00191a:	e792      	b.n	1a001842 <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a00191c:	2502      	movs	r5, #2
1a00191e:	e790      	b.n	1a001842 <load_xdir+0x1e>
1a001920:	88888889 	.word	0x88888889

1a001924 <dir_read>:
{
1a001924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001928:	4604      	mov	r4, r0
1a00192a:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
1a00192c:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
1a00192e:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a001932:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
1a001934:	2504      	movs	r5, #4
	while (dp->sect) {
1a001936:	e008      	b.n	1a00194a <dir_read+0x26>
				if (c == 0x85) {		/* Start of the file entry block? */
1a001938:	2b85      	cmp	r3, #133	; 0x85
1a00193a:	d028      	beq.n	1a00198e <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
1a00193c:	2100      	movs	r1, #0
1a00193e:	4620      	mov	r0, r4
1a001940:	f7ff ff02 	bl	1a001748 <dir_next>
		if (res != FR_OK) break;
1a001944:	4605      	mov	r5, r0
1a001946:	2800      	cmp	r0, #0
1a001948:	d15b      	bne.n	1a001a02 <dir_read+0xde>
	while (dp->sect) {
1a00194a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a00194c:	2900      	cmp	r1, #0
1a00194e:	d058      	beq.n	1a001a02 <dir_read+0xde>
		res = move_window(fs, dp->sect);
1a001950:	4630      	mov	r0, r6
1a001952:	f7ff f8fb 	bl	1a000b4c <move_window>
		if (res != FR_OK) break;
1a001956:	4605      	mov	r5, r0
1a001958:	2800      	cmp	r0, #0
1a00195a:	d152      	bne.n	1a001a02 <dir_read+0xde>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
1a00195c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a00195e:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
1a001960:	2b00      	cmp	r3, #0
1a001962:	d04d      	beq.n	1a001a00 <dir_read+0xdc>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a001964:	7832      	ldrb	r2, [r6, #0]
1a001966:	2a04      	cmp	r2, #4
1a001968:	d0e6      	beq.n	1a001938 <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
1a00196a:	7aca      	ldrb	r2, [r1, #11]
1a00196c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
1a001970:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
1a001972:	2be5      	cmp	r3, #229	; 0xe5
1a001974:	d03e      	beq.n	1a0019f4 <dir_read+0xd0>
1a001976:	2b2e      	cmp	r3, #46	; 0x2e
1a001978:	d03e      	beq.n	1a0019f8 <dir_read+0xd4>
1a00197a:	f022 0020 	bic.w	r0, r2, #32
1a00197e:	2808      	cmp	r0, #8
1a001980:	bf14      	ite	ne
1a001982:	2000      	movne	r0, #0
1a001984:	2001      	moveq	r0, #1
1a001986:	4540      	cmp	r0, r8
1a001988:	d00e      	beq.n	1a0019a8 <dir_read+0x84>
				ord = 0xFF;
1a00198a:	27ff      	movs	r7, #255	; 0xff
1a00198c:	e7d6      	b.n	1a00193c <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
1a00198e:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001990:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
1a001992:	4620      	mov	r0, r4
1a001994:	f7ff ff46 	bl	1a001824 <load_xdir>
					if (res == FR_OK) {
1a001998:	4605      	mov	r5, r0
1a00199a:	bb90      	cbnz	r0, 1a001a02 <dir_read+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
1a00199c:	6933      	ldr	r3, [r6, #16]
1a00199e:	791b      	ldrb	r3, [r3, #4]
1a0019a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a0019a4:	71a3      	strb	r3, [r4, #6]
1a0019a6:	e02c      	b.n	1a001a02 <dir_read+0xde>
				if (a == AM_LFN) {			/* An LFN entry is found */
1a0019a8:	2a0f      	cmp	r2, #15
1a0019aa:	d119      	bne.n	1a0019e0 <dir_read+0xbc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
1a0019ac:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0019b0:	d006      	beq.n	1a0019c0 <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
1a0019b2:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
1a0019b6:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
1a0019ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a0019bc:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
1a0019be:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a0019c0:	42bb      	cmp	r3, r7
1a0019c2:	d001      	beq.n	1a0019c8 <dir_read+0xa4>
1a0019c4:	27ff      	movs	r7, #255	; 0xff
1a0019c6:	e7b9      	b.n	1a00193c <dir_read+0x18>
1a0019c8:	7b4b      	ldrb	r3, [r1, #13]
1a0019ca:	454b      	cmp	r3, r9
1a0019cc:	d001      	beq.n	1a0019d2 <dir_read+0xae>
1a0019ce:	27ff      	movs	r7, #255	; 0xff
1a0019d0:	e7b4      	b.n	1a00193c <dir_read+0x18>
1a0019d2:	68f0      	ldr	r0, [r6, #12]
1a0019d4:	f7fe ff34 	bl	1a000840 <pick_lfn>
1a0019d8:	b180      	cbz	r0, 1a0019fc <dir_read+0xd8>
1a0019da:	3f01      	subs	r7, #1
1a0019dc:	b2ff      	uxtb	r7, r7
1a0019de:	e7ad      	b.n	1a00193c <dir_read+0x18>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
1a0019e0:	b927      	cbnz	r7, 1a0019ec <dir_read+0xc8>
1a0019e2:	4608      	mov	r0, r1
1a0019e4:	f7fe ff70 	bl	1a0008c8 <sum_sfn>
1a0019e8:	4548      	cmp	r0, r9
1a0019ea:	d00a      	beq.n	1a001a02 <dir_read+0xde>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
1a0019ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0019f0:	64e3      	str	r3, [r4, #76]	; 0x4c
1a0019f2:	e006      	b.n	1a001a02 <dir_read+0xde>
				ord = 0xFF;
1a0019f4:	27ff      	movs	r7, #255	; 0xff
1a0019f6:	e7a1      	b.n	1a00193c <dir_read+0x18>
1a0019f8:	27ff      	movs	r7, #255	; 0xff
1a0019fa:	e79f      	b.n	1a00193c <dir_read+0x18>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a0019fc:	27ff      	movs	r7, #255	; 0xff
1a0019fe:	e79d      	b.n	1a00193c <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
1a001a00:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
1a001a02:	b10d      	cbz	r5, 1a001a08 <dir_read+0xe4>
1a001a04:	2300      	movs	r3, #0
1a001a06:	63a3      	str	r3, [r4, #56]	; 0x38
}
1a001a08:	4628      	mov	r0, r5
1a001a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001a0e:	Address 0x000000001a001a0e is out of bounds.


1a001a10 <create_name>:
{
1a001a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001a14:	b085      	sub	sp, #20
1a001a16:	4680      	mov	r8, r0
1a001a18:	460f      	mov	r7, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1a001a1a:	680b      	ldr	r3, [r1, #0]
1a001a1c:	9303      	str	r3, [sp, #12]
1a001a1e:	6803      	ldr	r3, [r0, #0]
1a001a20:	68dd      	ldr	r5, [r3, #12]
1a001a22:	2400      	movs	r4, #0
1a001a24:	e00e      	b.n	1a001a44 <create_name+0x34>
		wc = (WCHAR)uc;
1a001a26:	b286      	uxth	r6, r0
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
1a001a28:	2e1f      	cmp	r6, #31
1a001a2a:	d924      	bls.n	1a001a76 <create_name+0x66>
1a001a2c:	2e2f      	cmp	r6, #47	; 0x2f
1a001a2e:	d022      	beq.n	1a001a76 <create_name+0x66>
1a001a30:	2e5c      	cmp	r6, #92	; 0x5c
1a001a32:	d020      	beq.n	1a001a76 <create_name+0x66>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a001a34:	2e7f      	cmp	r6, #127	; 0x7f
1a001a36:	d914      	bls.n	1a001a62 <create_name+0x52>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a001a38:	2cfe      	cmp	r4, #254	; 0xfe
1a001a3a:	f200 8101 	bhi.w	1a001c40 <create_name+0x230>
		lfn[di++] = wc;					/* Store the Unicode character */
1a001a3e:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
1a001a42:	3401      	adds	r4, #1
		uc = tchar2uni(&p);			/* Get a character */
1a001a44:	a803      	add	r0, sp, #12
1a001a46:	f7fe fe11 	bl	1a00066c <tchar2uni>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a001a4a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001a4e:	f000 80f5 	beq.w	1a001c3c <create_name+0x22c>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
1a001a52:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a001a56:	d3e6      	bcc.n	1a001a26 <create_name+0x16>
1a001a58:	0c03      	lsrs	r3, r0, #16
1a001a5a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
1a001a5e:	3401      	adds	r4, #1
1a001a60:	e7e1      	b.n	1a001a26 <create_name+0x16>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a001a62:	4631      	mov	r1, r6
1a001a64:	4878      	ldr	r0, [pc, #480]	; (1a001c48 <create_name+0x238>)
1a001a66:	f7fe fdf4 	bl	1a000652 <chk_chr>
1a001a6a:	2800      	cmp	r0, #0
1a001a6c:	d0e4      	beq.n	1a001a38 <create_name+0x28>
1a001a6e:	2006      	movs	r0, #6
1a001a70:	e08f      	b.n	1a001b92 <create_name+0x182>
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
1a001a72:	3301      	adds	r3, #1
1a001a74:	9303      	str	r3, [sp, #12]
1a001a76:	9b03      	ldr	r3, [sp, #12]
1a001a78:	781a      	ldrb	r2, [r3, #0]
1a001a7a:	2a2f      	cmp	r2, #47	; 0x2f
1a001a7c:	d0f9      	beq.n	1a001a72 <create_name+0x62>
1a001a7e:	2a5c      	cmp	r2, #92	; 0x5c
1a001a80:	d0f7      	beq.n	1a001a72 <create_name+0x62>
	*path = p;							/* Return pointer to the next segment */
1a001a82:	603b      	str	r3, [r7, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
1a001a84:	2e1f      	cmp	r6, #31
1a001a86:	d801      	bhi.n	1a001a8c <create_name+0x7c>
1a001a88:	2704      	movs	r7, #4
1a001a8a:	e002      	b.n	1a001a92 <create_name+0x82>
1a001a8c:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a001a8e:	e000      	b.n	1a001a92 <create_name+0x82>
		di--;
1a001a90:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a001a92:	b144      	cbz	r4, 1a001aa6 <create_name+0x96>
		wc = lfn[di - 1];
1a001a94:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a001a98:	3b01      	subs	r3, #1
1a001a9a:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (wc != ' ' && wc != '.') break;
1a001a9e:	2b20      	cmp	r3, #32
1a001aa0:	d0f6      	beq.n	1a001a90 <create_name+0x80>
1a001aa2:	2b2e      	cmp	r3, #46	; 0x2e
1a001aa4:	d0f4      	beq.n	1a001a90 <create_name+0x80>
	lfn[di] = 0;							/* LFN is created into the working buffer */
1a001aa6:	2300      	movs	r3, #0
1a001aa8:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a001aac:	2c00      	cmp	r4, #0
1a001aae:	f000 80c9 	beq.w	1a001c44 <create_name+0x234>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
1a001ab2:	461e      	mov	r6, r3
1a001ab4:	e000      	b.n	1a001ab8 <create_name+0xa8>
1a001ab6:	3601      	adds	r6, #1
1a001ab8:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
1a001abc:	2b20      	cmp	r3, #32
1a001abe:	d0fa      	beq.n	1a001ab6 <create_name+0xa6>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
1a001ac0:	b90e      	cbnz	r6, 1a001ac6 <create_name+0xb6>
1a001ac2:	2b2e      	cmp	r3, #46	; 0x2e
1a001ac4:	d101      	bne.n	1a001aca <create_name+0xba>
1a001ac6:	f047 0703 	orr.w	r7, r7, #3
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
1a001aca:	b144      	cbz	r4, 1a001ade <create_name+0xce>
1a001acc:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a001ad0:	3b01      	subs	r3, #1
1a001ad2:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
1a001ad6:	2b2e      	cmp	r3, #46	; 0x2e
1a001ad8:	d001      	beq.n	1a001ade <create_name+0xce>
1a001ada:	3c01      	subs	r4, #1
1a001adc:	e7f5      	b.n	1a001aca <create_name+0xba>
	mem_set(dp->fn, ' ', 11);
1a001ade:	220b      	movs	r2, #11
1a001ae0:	2120      	movs	r1, #32
1a001ae2:	f108 0040 	add.w	r0, r8, #64	; 0x40
1a001ae6:	f7fe fda0 	bl	1a00062a <mem_set>
	i = b = 0; ni = 8;
1a001aea:	f04f 0b08 	mov.w	fp, #8
1a001aee:	2300      	movs	r3, #0
1a001af0:	9301      	str	r3, [sp, #4]
1a001af2:	469a      	mov	sl, r3
		wc = lfn[si++];					/* Get an LFN character */
1a001af4:	f106 0901 	add.w	r9, r6, #1
1a001af8:	f835 6016 	ldrh.w	r6, [r5, r6, lsl #1]
		if (wc == 0) break;				/* Break on end of the LFN */
1a001afc:	b346      	cbz	r6, 1a001b50 <create_name+0x140>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a001afe:	2e20      	cmp	r6, #32
1a001b00:	d019      	beq.n	1a001b36 <create_name+0x126>
1a001b02:	2e2e      	cmp	r6, #46	; 0x2e
1a001b04:	d015      	beq.n	1a001b32 <create_name+0x122>
		if (i >= ni || si == di) {		/* End of field? */
1a001b06:	9b01      	ldr	r3, [sp, #4]
1a001b08:	455b      	cmp	r3, fp
1a001b0a:	d218      	bcs.n	1a001b3e <create_name+0x12e>
1a001b0c:	454c      	cmp	r4, r9
1a001b0e:	d016      	beq.n	1a001b3e <create_name+0x12e>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
1a001b10:	2e7f      	cmp	r6, #127	; 0x7f
1a001b12:	d84e      	bhi.n	1a001bb2 <create_name+0x1a2>
		if (wc >= 0x100) {				/* Is this a DBC? */
1a001b14:	2eff      	cmp	r6, #255	; 0xff
1a001b16:	d962      	bls.n	1a001bde <create_name+0x1ce>
			if (i >= ni - 1) {			/* Field overflow? */
1a001b18:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
1a001b1c:	9a01      	ldr	r2, [sp, #4]
1a001b1e:	4293      	cmp	r3, r2
1a001b20:	d957      	bls.n	1a001bd2 <create_name+0x1c2>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
1a001b22:	9901      	ldr	r1, [sp, #4]
1a001b24:	1c4b      	adds	r3, r1, #1
1a001b26:	f3c6 2207 	ubfx	r2, r6, #8, #8
1a001b2a:	4441      	add	r1, r8
1a001b2c:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
1a001b30:	e05a      	b.n	1a001be8 <create_name+0x1d8>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a001b32:	454c      	cmp	r4, r9
1a001b34:	d0e7      	beq.n	1a001b06 <create_name+0xf6>
			cf |= NS_LOSS | NS_LFN;
1a001b36:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a001b3a:	464e      	mov	r6, r9
			continue;
1a001b3c:	e7da      	b.n	1a001af4 <create_name+0xe4>
			if (ni == 11) {				/* Name extension overflow? */
1a001b3e:	f1bb 0f0b 	cmp.w	fp, #11
1a001b42:	d029      	beq.n	1a001b98 <create_name+0x188>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
1a001b44:	454c      	cmp	r4, r9
1a001b46:	d001      	beq.n	1a001b4c <create_name+0x13c>
1a001b48:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;						/* No name extension? */
1a001b4c:	454c      	cmp	r4, r9
1a001b4e:	d226      	bcs.n	1a001b9e <create_name+0x18e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a001b50:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
1a001b54:	2be5      	cmp	r3, #229	; 0xe5
1a001b56:	d068      	beq.n	1a001c2a <create_name+0x21a>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a001b58:	f1bb 0f08 	cmp.w	fp, #8
1a001b5c:	d069      	beq.n	1a001c32 <create_name+0x222>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
1a001b5e:	f00a 030c 	and.w	r3, sl, #12
1a001b62:	2b0c      	cmp	r3, #12
1a001b64:	d003      	beq.n	1a001b6e <create_name+0x15e>
1a001b66:	f00a 0303 	and.w	r3, sl, #3
1a001b6a:	2b03      	cmp	r3, #3
1a001b6c:	d101      	bne.n	1a001b72 <create_name+0x162>
1a001b6e:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
1a001b72:	f017 0f02 	tst.w	r7, #2
1a001b76:	d109      	bne.n	1a001b8c <create_name+0x17c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
1a001b78:	f01a 0f01 	tst.w	sl, #1
1a001b7c:	d001      	beq.n	1a001b82 <create_name+0x172>
1a001b7e:	f047 0710 	orr.w	r7, r7, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
1a001b82:	f01a 0f04 	tst.w	sl, #4
1a001b86:	d001      	beq.n	1a001b8c <create_name+0x17c>
1a001b88:	f047 0708 	orr.w	r7, r7, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
1a001b8c:	f888 704b 	strb.w	r7, [r8, #75]	; 0x4b
	return FR_OK;
1a001b90:	2000      	movs	r0, #0
}
1a001b92:	b005      	add	sp, #20
1a001b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN;
1a001b98:	f047 0703 	orr.w	r7, r7, #3
				break;
1a001b9c:	e7d8      	b.n	1a001b50 <create_name+0x140>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
1a001b9e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a001ba2:	fa5f fa8a 	uxtb.w	sl, sl
1a001ba6:	4626      	mov	r6, r4
1a001ba8:	f04f 0b0b 	mov.w	fp, #11
1a001bac:	2308      	movs	r3, #8
1a001bae:	9301      	str	r3, [sp, #4]
			continue;
1a001bb0:	e7a0      	b.n	1a001af4 <create_name+0xe4>
			cf |= NS_LFN;	/* LFN entry needs to be created */
1a001bb2:	f047 0702 	orr.w	r7, r7, #2
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
1a001bb6:	f240 3152 	movw	r1, #850	; 0x352
1a001bba:	4630      	mov	r0, r6
1a001bbc:	f000 fb3e 	bl	1a00223c <ff_uni2oem>
1a001bc0:	4606      	mov	r6, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
1a001bc2:	f010 0f80 	tst.w	r0, #128	; 0x80
1a001bc6:	d0a5      	beq.n	1a001b14 <create_name+0x104>
1a001bc8:	f000 067f 	and.w	r6, r0, #127	; 0x7f
1a001bcc:	4b1f      	ldr	r3, [pc, #124]	; (1a001c4c <create_name+0x23c>)
1a001bce:	5d9e      	ldrb	r6, [r3, r6]
1a001bd0:	e7a0      	b.n	1a001b14 <create_name+0x104>
				cf |= NS_LOSS | NS_LFN;
1a001bd2:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a001bd6:	464e      	mov	r6, r9
				i = ni; continue;		/* Next field */
1a001bd8:	f8cd b004 	str.w	fp, [sp, #4]
1a001bdc:	e78a      	b.n	1a001af4 <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a001bde:	b956      	cbnz	r6, 1a001bf6 <create_name+0x1e6>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1a001be0:	f047 0703 	orr.w	r7, r7, #3
1a001be4:	9b01      	ldr	r3, [sp, #4]
1a001be6:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)wc;
1a001be8:	1c5a      	adds	r2, r3, #1
1a001bea:	9201      	str	r2, [sp, #4]
1a001bec:	4443      	add	r3, r8
1a001bee:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
1a001bf2:	464e      	mov	r6, r9
1a001bf4:	e77e      	b.n	1a001af4 <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a001bf6:	4631      	mov	r1, r6
1a001bf8:	4815      	ldr	r0, [pc, #84]	; (1a001c50 <create_name+0x240>)
1a001bfa:	f7fe fd2a 	bl	1a000652 <chk_chr>
1a001bfe:	2800      	cmp	r0, #0
1a001c00:	d1ee      	bne.n	1a001be0 <create_name+0x1d0>
				if (IsUpper(wc)) {		/* ASCII upper case? */
1a001c02:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
1a001c06:	b29b      	uxth	r3, r3
1a001c08:	2b19      	cmp	r3, #25
1a001c0a:	d801      	bhi.n	1a001c10 <create_name+0x200>
					b |= 2;
1a001c0c:	f04a 0a02 	orr.w	sl, sl, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
1a001c10:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
1a001c14:	b29b      	uxth	r3, r3
1a001c16:	2b19      	cmp	r3, #25
1a001c18:	d805      	bhi.n	1a001c26 <create_name+0x216>
					b |= 1; wc -= 0x20;
1a001c1a:	f04a 0a01 	orr.w	sl, sl, #1
1a001c1e:	3e20      	subs	r6, #32
1a001c20:	b2b6      	uxth	r6, r6
1a001c22:	9b01      	ldr	r3, [sp, #4]
1a001c24:	e7e0      	b.n	1a001be8 <create_name+0x1d8>
1a001c26:	9b01      	ldr	r3, [sp, #4]
1a001c28:	e7de      	b.n	1a001be8 <create_name+0x1d8>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a001c2a:	2305      	movs	r3, #5
1a001c2c:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
1a001c30:	e792      	b.n	1a001b58 <create_name+0x148>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a001c32:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a001c36:	fa5f fa8a 	uxtb.w	sl, sl
1a001c3a:	e790      	b.n	1a001b5e <create_name+0x14e>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a001c3c:	2006      	movs	r0, #6
1a001c3e:	e7a8      	b.n	1a001b92 <create_name+0x182>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a001c40:	2006      	movs	r0, #6
1a001c42:	e7a6      	b.n	1a001b92 <create_name+0x182>
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a001c44:	2006      	movs	r0, #6
1a001c46:	e7a4      	b.n	1a001b92 <create_name+0x182>
1a001c48:	1a004d50 	.word	0x1a004d50
1a001c4c:	1a004ca0 	.word	0x1a004ca0
1a001c50:	1a004d5c 	.word	0x1a004d5c

1a001c54 <xname_sum>:
{
1a001c54:	b538      	push	{r3, r4, r5, lr}
	WORD sum = 0;
1a001c56:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
1a001c58:	e011      	b.n	1a001c7e <xname_sum+0x2a>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
1a001c5a:	f000 fb25 	bl	1a0022a8 <ff_wtoupper>
1a001c5e:	b280      	uxth	r0, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
1a001c60:	0863      	lsrs	r3, r4, #1
1a001c62:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
1a001c66:	b2c3      	uxtb	r3, r0
1a001c68:	fa13 f484 	uxtah	r4, r3, r4
1a001c6c:	b2a3      	uxth	r3, r4
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1a001c6e:	085c      	lsrs	r4, r3, #1
1a001c70:	eb04 34c3 	add.w	r4, r4, r3, lsl #15
1a001c74:	0a00      	lsrs	r0, r0, #8
1a001c76:	fa10 f484 	uxtah	r4, r0, r4
1a001c7a:	b2a4      	uxth	r4, r4
	while ((chr = *name++) != 0) {
1a001c7c:	4628      	mov	r0, r5
1a001c7e:	1c85      	adds	r5, r0, #2
1a001c80:	8800      	ldrh	r0, [r0, #0]
1a001c82:	2800      	cmp	r0, #0
1a001c84:	d1e9      	bne.n	1a001c5a <xname_sum+0x6>
}
1a001c86:	4620      	mov	r0, r4
1a001c88:	bd38      	pop	{r3, r4, r5, pc}
1a001c8a:	Address 0x000000001a001c8a is out of bounds.


1a001c8c <cmp_lfn>:
{
1a001c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001c90:	4681      	mov	r9, r0
1a001c92:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a001c94:	f101 001a 	add.w	r0, r1, #26
1a001c98:	f7fe fc4c 	bl	1a000534 <ld_word>
1a001c9c:	bbb8      	cbnz	r0, 1a001d0e <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1a001c9e:	783d      	ldrb	r5, [r7, #0]
1a001ca0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
1a001ca4:	3d01      	subs	r5, #1
1a001ca6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a001caa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a001cae:	f04f 0801 	mov.w	r8, #1
1a001cb2:	2400      	movs	r4, #0
1a001cb4:	e004      	b.n	1a001cc0 <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a001cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a001cba:	4298      	cmp	r0, r3
1a001cbc:	d12e      	bne.n	1a001d1c <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a001cbe:	3401      	adds	r4, #1
1a001cc0:	2c0c      	cmp	r4, #12
1a001cc2:	d818      	bhi.n	1a001cf6 <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a001cc4:	4b19      	ldr	r3, [pc, #100]	; (1a001d2c <cmp_lfn+0xa0>)
1a001cc6:	5d18      	ldrb	r0, [r3, r4]
1a001cc8:	4438      	add	r0, r7
1a001cca:	f7fe fc33 	bl	1a000534 <ld_word>
1a001cce:	4606      	mov	r6, r0
		if (wc != 0) {
1a001cd0:	f1b8 0f00 	cmp.w	r8, #0
1a001cd4:	d0ef      	beq.n	1a001cb6 <cmp_lfn+0x2a>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a001cd6:	2dfe      	cmp	r5, #254	; 0xfe
1a001cd8:	d81c      	bhi.n	1a001d14 <cmp_lfn+0x88>
1a001cda:	f000 fae5 	bl	1a0022a8 <ff_wtoupper>
1a001cde:	4680      	mov	r8, r0
1a001ce0:	f105 0a01 	add.w	sl, r5, #1
1a001ce4:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
1a001ce8:	f000 fade 	bl	1a0022a8 <ff_wtoupper>
1a001cec:	4580      	cmp	r8, r0
1a001cee:	d113      	bne.n	1a001d18 <cmp_lfn+0x8c>
			wc = uc;
1a001cf0:	46b0      	mov	r8, r6
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a001cf2:	4655      	mov	r5, sl
1a001cf4:	e7e3      	b.n	1a001cbe <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a001cf6:	783b      	ldrb	r3, [r7, #0]
1a001cf8:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001cfc:	d010      	beq.n	1a001d20 <cmp_lfn+0x94>
1a001cfe:	f1b8 0f00 	cmp.w	r8, #0
1a001d02:	d00f      	beq.n	1a001d24 <cmp_lfn+0x98>
1a001d04:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
1a001d08:	b973      	cbnz	r3, 1a001d28 <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
1a001d0a:	2001      	movs	r0, #1
1a001d0c:	e000      	b.n	1a001d10 <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a001d0e:	2000      	movs	r0, #0
}
1a001d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
1a001d14:	2000      	movs	r0, #0
1a001d16:	e7fb      	b.n	1a001d10 <cmp_lfn+0x84>
1a001d18:	2000      	movs	r0, #0
1a001d1a:	e7f9      	b.n	1a001d10 <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a001d1c:	2000      	movs	r0, #0
1a001d1e:	e7f7      	b.n	1a001d10 <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
1a001d20:	2001      	movs	r0, #1
1a001d22:	e7f5      	b.n	1a001d10 <cmp_lfn+0x84>
1a001d24:	2001      	movs	r0, #1
1a001d26:	e7f3      	b.n	1a001d10 <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a001d28:	2000      	movs	r0, #0
1a001d2a:	e7f1      	b.n	1a001d10 <cmp_lfn+0x84>
1a001d2c:	1a004d20 	.word	0x1a004d20

1a001d30 <dir_find>:
{
1a001d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001d34:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
1a001d36:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
1a001d38:	2100      	movs	r1, #0
1a001d3a:	f7ff fb9c 	bl	1a001476 <dir_sdi>
	if (res != FR_OK) return res;
1a001d3e:	4680      	mov	r8, r0
1a001d40:	2800      	cmp	r0, #0
1a001d42:	f040 80a0 	bne.w	1a001e86 <dir_find+0x156>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a001d46:	783b      	ldrb	r3, [r7, #0]
1a001d48:	2b04      	cmp	r3, #4
1a001d4a:	d006      	beq.n	1a001d5a <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a001d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001d50:	64e3      	str	r3, [r4, #76]	; 0x4c
1a001d52:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a001d56:	464e      	mov	r6, r9
1a001d58:	e042      	b.n	1a001de0 <dir_find+0xb0>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
1a001d5a:	68f8      	ldr	r0, [r7, #12]
1a001d5c:	f7ff ff7a 	bl	1a001c54 <xname_sum>
1a001d60:	4683      	mov	fp, r0
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a001d62:	e01e      	b.n	1a001da2 <dir_find+0x72>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
1a001d64:	6938      	ldr	r0, [r7, #16]
1a001d66:	4430      	add	r0, r6
1a001d68:	f7fe fbe4 	bl	1a000534 <ld_word>
1a001d6c:	f000 fa9c 	bl	1a0022a8 <ff_wtoupper>
1a001d70:	4682      	mov	sl, r0
1a001d72:	68fb      	ldr	r3, [r7, #12]
1a001d74:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
1a001d78:	f000 fa96 	bl	1a0022a8 <ff_wtoupper>
1a001d7c:	4582      	cmp	sl, r0
1a001d7e:	d10a      	bne.n	1a001d96 <dir_find+0x66>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a001d80:	3d01      	subs	r5, #1
1a001d82:	b2ed      	uxtb	r5, r5
1a001d84:	3602      	adds	r6, #2
1a001d86:	f109 0901 	add.w	r9, r9, #1
1a001d8a:	b125      	cbz	r5, 1a001d96 <dir_find+0x66>
				if ((di % SZDIRE) == 0) di += 2;
1a001d8c:	f016 0f1f 	tst.w	r6, #31
1a001d90:	d1e8      	bne.n	1a001d64 <dir_find+0x34>
1a001d92:	3602      	adds	r6, #2
1a001d94:	e7e6      	b.n	1a001d64 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
1a001d96:	b925      	cbnz	r5, 1a001da2 <dir_find+0x72>
1a001d98:	68fb      	ldr	r3, [r7, #12]
1a001d9a:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
1a001d9e:	2b00      	cmp	r3, #0
1a001da0:	d071      	beq.n	1a001e86 <dir_find+0x156>
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a001da2:	2100      	movs	r1, #0
1a001da4:	4620      	mov	r0, r4
1a001da6:	f7ff fdbd 	bl	1a001924 <dir_read>
1a001daa:	4680      	mov	r8, r0
1a001dac:	2800      	cmp	r0, #0
1a001dae:	d16a      	bne.n	1a001e86 <dir_find+0x156>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
1a001db0:	693d      	ldr	r5, [r7, #16]
1a001db2:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a001db6:	f7fe fbbd 	bl	1a000534 <ld_word>
1a001dba:	4558      	cmp	r0, fp
1a001dbc:	d1f1      	bne.n	1a001da2 <dir_find+0x72>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a001dbe:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
1a001dc2:	f04f 0900 	mov.w	r9, #0
1a001dc6:	2640      	movs	r6, #64	; 0x40
1a001dc8:	e7df      	b.n	1a001d8a <dir_find+0x5a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a001dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001dce:	64e3      	str	r3, [r4, #76]	; 0x4c
1a001dd0:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
1a001dd2:	2100      	movs	r1, #0
1a001dd4:	4620      	mov	r0, r4
1a001dd6:	f7ff fcb7 	bl	1a001748 <dir_next>
	} while (res == FR_OK);
1a001dda:	4680      	mov	r8, r0
1a001ddc:	2800      	cmp	r0, #0
1a001dde:	d152      	bne.n	1a001e86 <dir_find+0x156>
		res = move_window(fs, dp->sect);
1a001de0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001de2:	4638      	mov	r0, r7
1a001de4:	f7fe feb2 	bl	1a000b4c <move_window>
		if (res != FR_OK) break;
1a001de8:	4680      	mov	r8, r0
1a001dea:	2800      	cmp	r0, #0
1a001dec:	d14b      	bne.n	1a001e86 <dir_find+0x156>
		c = dp->dir[DIR_Name];
1a001dee:	6be5      	ldr	r5, [r4, #60]	; 0x3c
1a001df0:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a001df2:	2b00      	cmp	r3, #0
1a001df4:	d045      	beq.n	1a001e82 <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
1a001df6:	7ae9      	ldrb	r1, [r5, #11]
1a001df8:	f001 023f 	and.w	r2, r1, #63	; 0x3f
1a001dfc:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1a001dfe:	2be5      	cmp	r3, #229	; 0xe5
1a001e00:	d0e3      	beq.n	1a001dca <dir_find+0x9a>
1a001e02:	f011 0f08 	tst.w	r1, #8
1a001e06:	d001      	beq.n	1a001e0c <dir_find+0xdc>
1a001e08:	2a0f      	cmp	r2, #15
1a001e0a:	d1de      	bne.n	1a001dca <dir_find+0x9a>
			if (a == AM_LFN) {			/* An LFN entry is found */
1a001e0c:	2a0f      	cmp	r2, #15
1a001e0e:	d016      	beq.n	1a001e3e <dir_find+0x10e>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
1a001e10:	b926      	cbnz	r6, 1a001e1c <dir_find+0xec>
1a001e12:	4628      	mov	r0, r5
1a001e14:	f7fe fd58 	bl	1a0008c8 <sum_sfn>
1a001e18:	4548      	cmp	r0, r9
1a001e1a:	d034      	beq.n	1a001e86 <dir_find+0x156>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
1a001e1c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
1a001e20:	f013 0f01 	tst.w	r3, #1
1a001e24:	d106      	bne.n	1a001e34 <dir_find+0x104>
1a001e26:	220b      	movs	r2, #11
1a001e28:	f104 0140 	add.w	r1, r4, #64	; 0x40
1a001e2c:	4628      	mov	r0, r5
1a001e2e:	f7fe fc01 	bl	1a000634 <mem_cmp>
1a001e32:	b340      	cbz	r0, 1a001e86 <dir_find+0x156>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a001e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001e38:	64e3      	str	r3, [r4, #76]	; 0x4c
1a001e3a:	26ff      	movs	r6, #255	; 0xff
1a001e3c:	e7c9      	b.n	1a001dd2 <dir_find+0xa2>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
1a001e3e:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
1a001e42:	f012 0f40 	tst.w	r2, #64	; 0x40
1a001e46:	d1c4      	bne.n	1a001dd2 <dir_find+0xa2>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
1a001e48:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001e4c:	d006      	beq.n	1a001e5c <dir_find+0x12c>
						sum = dp->dir[LDIR_Chksum];
1a001e4e:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a001e52:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
1a001e56:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a001e58:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a001e5a:	461e      	mov	r6, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a001e5c:	42b3      	cmp	r3, r6
1a001e5e:	d001      	beq.n	1a001e64 <dir_find+0x134>
1a001e60:	26ff      	movs	r6, #255	; 0xff
1a001e62:	e7b6      	b.n	1a001dd2 <dir_find+0xa2>
1a001e64:	7b6b      	ldrb	r3, [r5, #13]
1a001e66:	454b      	cmp	r3, r9
1a001e68:	d001      	beq.n	1a001e6e <dir_find+0x13e>
1a001e6a:	26ff      	movs	r6, #255	; 0xff
1a001e6c:	e7b1      	b.n	1a001dd2 <dir_find+0xa2>
1a001e6e:	4629      	mov	r1, r5
1a001e70:	68f8      	ldr	r0, [r7, #12]
1a001e72:	f7ff ff0b 	bl	1a001c8c <cmp_lfn>
1a001e76:	b110      	cbz	r0, 1a001e7e <dir_find+0x14e>
1a001e78:	3e01      	subs	r6, #1
1a001e7a:	b2f6      	uxtb	r6, r6
1a001e7c:	e7a9      	b.n	1a001dd2 <dir_find+0xa2>
1a001e7e:	26ff      	movs	r6, #255	; 0xff
1a001e80:	e7a7      	b.n	1a001dd2 <dir_find+0xa2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a001e82:	f04f 0804 	mov.w	r8, #4
}
1a001e86:	4640      	mov	r0, r8
1a001e88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a001e8c <follow_path>:
{
1a001e8c:	b530      	push	{r4, r5, lr}
1a001e8e:	b083      	sub	sp, #12
1a001e90:	4604      	mov	r4, r0
1a001e92:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
1a001e94:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
1a001e96:	e001      	b.n	1a001e9c <follow_path+0x10>
1a001e98:	3301      	adds	r3, #1
1a001e9a:	9301      	str	r3, [sp, #4]
1a001e9c:	9b01      	ldr	r3, [sp, #4]
1a001e9e:	781a      	ldrb	r2, [r3, #0]
1a001ea0:	2a2f      	cmp	r2, #47	; 0x2f
1a001ea2:	d0f9      	beq.n	1a001e98 <follow_path+0xc>
1a001ea4:	2a5c      	cmp	r2, #92	; 0x5c
1a001ea6:	d0f7      	beq.n	1a001e98 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from root directory */
1a001ea8:	2200      	movs	r2, #0
1a001eaa:	60a2      	str	r2, [r4, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
1a001eac:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
1a001eae:	781b      	ldrb	r3, [r3, #0]
1a001eb0:	2b1f      	cmp	r3, #31
1a001eb2:	d81f      	bhi.n	1a001ef4 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
1a001eb4:	2380      	movs	r3, #128	; 0x80
1a001eb6:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
1a001eba:	4611      	mov	r1, r2
1a001ebc:	4620      	mov	r0, r4
1a001ebe:	f7ff fada 	bl	1a001476 <dir_sdi>
1a001ec2:	4603      	mov	r3, r0
}
1a001ec4:	4618      	mov	r0, r3
1a001ec6:	b003      	add	sp, #12
1a001ec8:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
1a001eca:	2804      	cmp	r0, #4
1a001ecc:	d1fa      	bne.n	1a001ec4 <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
1a001ece:	f012 0f04 	tst.w	r2, #4
1a001ed2:	d1f7      	bne.n	1a001ec4 <follow_path+0x38>
1a001ed4:	2305      	movs	r3, #5
1a001ed6:	e7f5      	b.n	1a001ec4 <follow_path+0x38>
				dp->obj.c_scl = dp->obj.sclust;
1a001ed8:	68a3      	ldr	r3, [r4, #8]
1a001eda:	6223      	str	r3, [r4, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
1a001edc:	6923      	ldr	r3, [r4, #16]
1a001ede:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001ee2:	79e2      	ldrb	r2, [r4, #7]
1a001ee4:	4313      	orrs	r3, r2
1a001ee6:	6263      	str	r3, [r4, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
1a001ee8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
1a001eea:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
1a001eec:	4621      	mov	r1, r4
1a001eee:	4628      	mov	r0, r5
1a001ef0:	f7fe fd71 	bl	1a0009d6 <init_alloc_info>
			res = create_name(dp, &path);	/* Get a segment name of the path */
1a001ef4:	a901      	add	r1, sp, #4
1a001ef6:	4620      	mov	r0, r4
1a001ef8:	f7ff fd8a 	bl	1a001a10 <create_name>
			if (res != FR_OK) break;
1a001efc:	4603      	mov	r3, r0
1a001efe:	2800      	cmp	r0, #0
1a001f00:	d1e0      	bne.n	1a001ec4 <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
1a001f02:	4620      	mov	r0, r4
1a001f04:	f7ff ff14 	bl	1a001d30 <dir_find>
			ns = dp->fn[NSFLAG];
1a001f08:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
1a001f0c:	4603      	mov	r3, r0
1a001f0e:	2800      	cmp	r0, #0
1a001f10:	d1db      	bne.n	1a001eca <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
1a001f12:	f012 0f04 	tst.w	r2, #4
1a001f16:	d1d5      	bne.n	1a001ec4 <follow_path+0x38>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
1a001f18:	79a3      	ldrb	r3, [r4, #6]
1a001f1a:	f013 0f10 	tst.w	r3, #16
1a001f1e:	d00d      	beq.n	1a001f3c <follow_path+0xb0>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
1a001f20:	782b      	ldrb	r3, [r5, #0]
1a001f22:	2b04      	cmp	r3, #4
1a001f24:	d0d8      	beq.n	1a001ed8 <follow_path+0x4c>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
1a001f26:	f105 0138 	add.w	r1, r5, #56	; 0x38
1a001f2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
1a001f30:	4419      	add	r1, r3
1a001f32:	4628      	mov	r0, r5
1a001f34:	f7fe fc70 	bl	1a000818 <ld_clust>
1a001f38:	60a0      	str	r0, [r4, #8]
1a001f3a:	e7db      	b.n	1a001ef4 <follow_path+0x68>
				res = FR_NO_PATH; break;
1a001f3c:	2305      	movs	r3, #5
1a001f3e:	e7c1      	b.n	1a001ec4 <follow_path+0x38>

1a001f40 <get_fileinfo>:
{
1a001f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
1a001f44:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;			/* Invaidate file info */
1a001f48:	2300      	movs	r3, #0
1a001f4a:	768b      	strb	r3, [r1, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
1a001f4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a001f4e:	2b00      	cmp	r3, #0
1a001f50:	f000 80ad 	beq.w	1a0020ae <get_fileinfo+0x16e>
1a001f54:	460f      	mov	r7, r1
1a001f56:	4681      	mov	r9, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a001f58:	f898 3000 	ldrb.w	r3, [r8]
1a001f5c:	2b04      	cmp	r3, #4
1a001f5e:	d007      	beq.n	1a001f70 <get_fileinfo+0x30>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
1a001f60:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a001f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001f66:	d02c      	beq.n	1a001fc2 <get_fileinfo+0x82>
			si = di = hs = 0;
1a001f68:	2500      	movs	r5, #0
1a001f6a:	462c      	mov	r4, r5
1a001f6c:	462e      	mov	r6, r5
1a001f6e:	e012      	b.n	1a001f96 <get_fileinfo+0x56>
		get_xfileinfo(fs->dirbuf, fno);
1a001f70:	f8d8 0010 	ldr.w	r0, [r8, #16]
1a001f74:	f7fe fcce 	bl	1a000914 <get_xfileinfo>
		return;
1a001f78:	e099      	b.n	1a0020ae <get_fileinfo+0x16e>
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
1a001f7a:	f104 0118 	add.w	r1, r4, #24
1a001f7e:	4439      	add	r1, r7
1a001f80:	f1c4 02ff 	rsb	r2, r4, #255	; 0xff
1a001f84:	3102      	adds	r1, #2
1a001f86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
1a001f8a:	f7fe fbcf 	bl	1a00072c <put_utf>
1a001f8e:	b283      	uxth	r3, r0
				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
1a001f90:	b18b      	cbz	r3, 1a001fb6 <get_fileinfo+0x76>
				di += wc;
1a001f92:	4404      	add	r4, r0
				hs = 0;
1a001f94:	2500      	movs	r5, #0
			while (fs->lfnbuf[si] != 0) {
1a001f96:	f8d8 300c 	ldr.w	r3, [r8, #12]
1a001f9a:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
1a001f9e:	b158      	cbz	r0, 1a001fb8 <get_fileinfo+0x78>
				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
1a001fa0:	3601      	adds	r6, #1
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
1a001fa2:	2d00      	cmp	r5, #0
1a001fa4:	d1e9      	bne.n	1a001f7a <get_fileinfo+0x3a>
1a001fa6:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
1a001faa:	b29b      	uxth	r3, r3
1a001fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1a001fb0:	d2e3      	bcs.n	1a001f7a <get_fileinfo+0x3a>
					hs = wc; continue;		/* Get low surrogate */
1a001fb2:	4605      	mov	r5, r0
1a001fb4:	e7ef      	b.n	1a001f96 <get_fileinfo+0x56>
				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
1a001fb6:	2400      	movs	r4, #0
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
1a001fb8:	b105      	cbz	r5, 1a001fbc <get_fileinfo+0x7c>
1a001fba:	2400      	movs	r4, #0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
1a001fbc:	443c      	add	r4, r7
1a001fbe:	2300      	movs	r3, #0
1a001fc0:	76a3      	strb	r3, [r4, #26]
		wc = dp->dir[si++];			/* Get a char */
1a001fc2:	2500      	movs	r5, #0
1a001fc4:	462e      	mov	r6, r5
1a001fc6:	e01c      	b.n	1a002002 <get_fileinfo+0xc2>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
1a001fc8:	24e5      	movs	r4, #229	; 0xe5
1a001fca:	e025      	b.n	1a002018 <get_fileinfo+0xd8>
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
1a001fcc:	2d0b      	cmp	r5, #11
1a001fce:	d826      	bhi.n	1a00201e <get_fileinfo+0xde>
1a001fd0:	197b      	adds	r3, r7, r5
1a001fd2:	222e      	movs	r2, #46	; 0x2e
1a001fd4:	735a      	strb	r2, [r3, #13]
1a001fd6:	3501      	adds	r5, #1
1a001fd8:	e021      	b.n	1a00201e <get_fileinfo+0xde>
		wc = ff_oem2uni(wc, CODEPAGE);		/* ANSI/OEM -> Unicode */
1a001fda:	f240 3152 	movw	r1, #850	; 0x352
1a001fde:	4620      	mov	r0, r4
1a001fe0:	f000 f94c 	bl	1a00227c <ff_oem2uni>
		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
1a001fe4:	2800      	cmp	r0, #0
1a001fe6:	d036      	beq.n	1a002056 <get_fileinfo+0x116>
		wc = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in Unicode */
1a001fe8:	f105 0108 	add.w	r1, r5, #8
1a001fec:	4439      	add	r1, r7
1a001fee:	f1c5 020c 	rsb	r2, r5, #12
1a001ff2:	3105      	adds	r1, #5
1a001ff4:	f7fe fb9a 	bl	1a00072c <put_utf>
1a001ff8:	b283      	uxth	r3, r0
		if (wc == 0) { di = 0; break; }		/* Buffer overflow? */
1a001ffa:	2b00      	cmp	r3, #0
1a001ffc:	d059      	beq.n	1a0020b2 <get_fileinfo+0x172>
		di += wc;
1a001ffe:	4405      	add	r5, r0
1a002000:	4646      	mov	r6, r8
	while (si < 11) {		/* Get SFN from SFN entry */
1a002002:	2e0a      	cmp	r6, #10
1a002004:	d828      	bhi.n	1a002058 <get_fileinfo+0x118>
		wc = dp->dir[si++];			/* Get a char */
1a002006:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
1a00200a:	f106 0801 	add.w	r8, r6, #1
1a00200e:	5d9c      	ldrb	r4, [r3, r6]
		if (wc == ' ') continue;	/* Skip padding spaces */
1a002010:	2c20      	cmp	r4, #32
1a002012:	d01e      	beq.n	1a002052 <get_fileinfo+0x112>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
1a002014:	2c05      	cmp	r4, #5
1a002016:	d0d7      	beq.n	1a001fc8 <get_fileinfo+0x88>
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
1a002018:	f1b8 0f09 	cmp.w	r8, #9
1a00201c:	d0d6      	beq.n	1a001fcc <get_fileinfo+0x8c>
		if (dbc_1st((BYTE)wc) && si != 8 && si != 11 && dbc_2nd(dp->dir[si])) {	/* Make a DBC if needed */
1a00201e:	b2e0      	uxtb	r0, r4
1a002020:	f7fe fb1f 	bl	1a000662 <dbc_1st>
1a002024:	2800      	cmp	r0, #0
1a002026:	d0d8      	beq.n	1a001fda <get_fileinfo+0x9a>
1a002028:	f1b8 0f08 	cmp.w	r8, #8
1a00202c:	d0d5      	beq.n	1a001fda <get_fileinfo+0x9a>
1a00202e:	f1b8 0f0b 	cmp.w	r8, #11
1a002032:	d0d2      	beq.n	1a001fda <get_fileinfo+0x9a>
1a002034:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
1a002038:	f813 a008 	ldrb.w	sl, [r3, r8]
1a00203c:	4650      	mov	r0, sl
1a00203e:	f7fe fb12 	bl	1a000666 <dbc_2nd>
1a002042:	2800      	cmp	r0, #0
1a002044:	d0c9      	beq.n	1a001fda <get_fileinfo+0x9a>
			wc = wc << 8 | dp->dir[si++];
1a002046:	f106 0802 	add.w	r8, r6, #2
1a00204a:	ea4a 2404 	orr.w	r4, sl, r4, lsl #8
1a00204e:	b2a4      	uxth	r4, r4
1a002050:	e7c3      	b.n	1a001fda <get_fileinfo+0x9a>
		wc = dp->dir[si++];			/* Get a char */
1a002052:	4646      	mov	r6, r8
1a002054:	e7d5      	b.n	1a002002 <get_fileinfo+0xc2>
		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
1a002056:	2500      	movs	r5, #0
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
1a002058:	197b      	adds	r3, r7, r5
1a00205a:	2200      	movs	r2, #0
1a00205c:	735a      	strb	r2, [r3, #13]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
1a00205e:	7ebb      	ldrb	r3, [r7, #26]
1a002060:	b96b      	cbnz	r3, 1a00207e <get_fileinfo+0x13e>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
1a002062:	2d00      	cmp	r5, #0
1a002064:	d141      	bne.n	1a0020ea <get_fileinfo+0x1aa>
			fno->fname[di++] = '?';
1a002066:	1c6a      	adds	r2, r5, #1
1a002068:	443d      	add	r5, r7
1a00206a:	233f      	movs	r3, #63	; 0x3f
1a00206c:	76ab      	strb	r3, [r5, #26]
		fno->fname[di] = 0;	/* Terminate the LFN */
1a00206e:	443a      	add	r2, r7
1a002070:	2300      	movs	r3, #0
1a002072:	7693      	strb	r3, [r2, #26]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
1a002074:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
1a002078:	7b1b      	ldrb	r3, [r3, #12]
1a00207a:	b903      	cbnz	r3, 1a00207e <get_fileinfo+0x13e>
1a00207c:	737b      	strb	r3, [r7, #13]
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
1a00207e:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
1a002082:	7adb      	ldrb	r3, [r3, #11]
1a002084:	733b      	strb	r3, [r7, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
1a002086:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
1a00208a:	301c      	adds	r0, #28
1a00208c:	f7fe fa57 	bl	1a00053e <ld_dword>
1a002090:	6038      	str	r0, [r7, #0]
1a002092:	2300      	movs	r3, #0
1a002094:	607b      	str	r3, [r7, #4]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
1a002096:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
1a00209a:	3016      	adds	r0, #22
1a00209c:	f7fe fa4a 	bl	1a000534 <ld_word>
1a0020a0:	8178      	strh	r0, [r7, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
1a0020a2:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
1a0020a6:	3018      	adds	r0, #24
1a0020a8:	f7fe fa44 	bl	1a000534 <ld_word>
1a0020ac:	8138      	strh	r0, [r7, #8]
}
1a0020ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (wc == 0) { di = 0; break; }		/* Buffer overflow? */
1a0020b2:	2500      	movs	r5, #0
1a0020b4:	e7d0      	b.n	1a002058 <get_fileinfo+0x118>
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & ((si >= 9) ? NS_EXT : NS_BODY))) wc += 0x20;
1a0020b6:	2008      	movs	r0, #8
1a0020b8:	e012      	b.n	1a0020e0 <get_fileinfo+0x1a0>
				fno->fname[di] = (TCHAR)wc;
1a0020ba:	18b9      	adds	r1, r7, r2
1a0020bc:	768b      	strb	r3, [r1, #26]
			for (si = di = 0; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
1a0020be:	3201      	adds	r2, #1
1a0020c0:	18bb      	adds	r3, r7, r2
1a0020c2:	7b5b      	ldrb	r3, [r3, #13]
1a0020c4:	2b00      	cmp	r3, #0
1a0020c6:	d0d2      	beq.n	1a00206e <get_fileinfo+0x12e>
				wc = (WCHAR)fno->altname[si];
1a0020c8:	b29b      	uxth	r3, r3
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & ((si >= 9) ? NS_EXT : NS_BODY))) wc += 0x20;
1a0020ca:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
1a0020ce:	b289      	uxth	r1, r1
1a0020d0:	2919      	cmp	r1, #25
1a0020d2:	d8f2      	bhi.n	1a0020ba <get_fileinfo+0x17a>
1a0020d4:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
1a0020d8:	7b09      	ldrb	r1, [r1, #12]
1a0020da:	2a08      	cmp	r2, #8
1a0020dc:	d9eb      	bls.n	1a0020b6 <get_fileinfo+0x176>
1a0020de:	2010      	movs	r0, #16
1a0020e0:	4201      	tst	r1, r0
1a0020e2:	d0ea      	beq.n	1a0020ba <get_fileinfo+0x17a>
1a0020e4:	3320      	adds	r3, #32
1a0020e6:	b29b      	uxth	r3, r3
1a0020e8:	e7e7      	b.n	1a0020ba <get_fileinfo+0x17a>
			for (si = di = 0; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
1a0020ea:	2200      	movs	r2, #0
1a0020ec:	e7e8      	b.n	1a0020c0 <get_fileinfo+0x180>
1a0020ee:	Address 0x000000001a0020ee is out of bounds.


1a0020f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
1a0020f0:	b510      	push	{r4, lr}
1a0020f2:	b084      	sub	sp, #16
1a0020f4:	9001      	str	r0, [sp, #4]
1a0020f6:	9100      	str	r1, [sp, #0]
1a0020f8:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
1a0020fa:	a804      	add	r0, sp, #16
1a0020fc:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
1a002100:	f7fe fc80 	bl	1a000a04 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a002104:	2800      	cmp	r0, #0
1a002106:	db17      	blt.n	1a002138 <f_mount+0x48>
	cfs = FatFs[vol];					/* Pointer to fs object */
1a002108:	4b0c      	ldr	r3, [pc, #48]	; (1a00213c <f_mount+0x4c>)
1a00210a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
1a00210e:	b10b      	cbz	r3, 1a002114 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
1a002110:	2200      	movs	r2, #0
1a002112:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
1a002114:	9b01      	ldr	r3, [sp, #4]
1a002116:	b10b      	cbz	r3, 1a00211c <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
1a002118:	2200      	movs	r2, #0
1a00211a:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
1a00211c:	4b07      	ldr	r3, [pc, #28]	; (1a00213c <f_mount+0x4c>)
1a00211e:	9a01      	ldr	r2, [sp, #4]
1a002120:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
1a002124:	b914      	cbnz	r4, 1a00212c <f_mount+0x3c>
1a002126:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
1a002128:	b004      	add	sp, #16
1a00212a:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
1a00212c:	2200      	movs	r2, #0
1a00212e:	a901      	add	r1, sp, #4
1a002130:	4668      	mov	r0, sp
1a002132:	f7fe fd67 	bl	1a000c04 <find_volume>
	LEAVE_FF(fs, res);
1a002136:	e7f7      	b.n	1a002128 <f_mount+0x38>
	if (vol < 0) return FR_INVALID_DRIVE;
1a002138:	200b      	movs	r0, #11
1a00213a:	e7f5      	b.n	1a002128 <f_mount+0x38>
1a00213c:	10000484 	.word	0x10000484

1a002140 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
1a002140:	b510      	push	{r4, lr}
1a002142:	b084      	sub	sp, #16
1a002144:	9101      	str	r1, [sp, #4]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
1a002146:	2800      	cmp	r0, #0
1a002148:	d041      	beq.n	1a0021ce <f_opendir+0x8e>
1a00214a:	4604      	mov	r4, r0

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
1a00214c:	2200      	movs	r2, #0
1a00214e:	a903      	add	r1, sp, #12
1a002150:	a801      	add	r0, sp, #4
1a002152:	f7fe fd57 	bl	1a000c04 <find_volume>
	if (res == FR_OK) {
1a002156:	4603      	mov	r3, r0
1a002158:	b128      	cbz	r0, 1a002166 <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
1a00215a:	b10b      	cbz	r3, 1a002160 <f_opendir+0x20>
1a00215c:	2200      	movs	r2, #0
1a00215e:	6022      	str	r2, [r4, #0]

	LEAVE_FF(fs, res);
}
1a002160:	4618      	mov	r0, r3
1a002162:	b004      	add	sp, #16
1a002164:	bd10      	pop	{r4, pc}
		dp->obj.fs = fs;
1a002166:	9b03      	ldr	r3, [sp, #12]
1a002168:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
1a00216a:	9901      	ldr	r1, [sp, #4]
1a00216c:	4620      	mov	r0, r4
1a00216e:	f7ff fe8d 	bl	1a001e8c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
1a002172:	4603      	mov	r3, r0
1a002174:	b9b8      	cbnz	r0, 1a0021a6 <f_opendir+0x66>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
1a002176:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
1a00217a:	2b00      	cmp	r3, #0
1a00217c:	db0b      	blt.n	1a002196 <f_opendir+0x56>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
1a00217e:	79a3      	ldrb	r3, [r4, #6]
1a002180:	f013 0f10 	tst.w	r3, #16
1a002184:	d021      	beq.n	1a0021ca <f_opendir+0x8a>
					if (fs->fs_type == FS_EXFAT) {
1a002186:	9803      	ldr	r0, [sp, #12]
1a002188:	7803      	ldrb	r3, [r0, #0]
1a00218a:	2b04      	cmp	r3, #4
1a00218c:	d00f      	beq.n	1a0021ae <f_opendir+0x6e>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
1a00218e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a002190:	f7fe fb42 	bl	1a000818 <ld_clust>
1a002194:	60a0      	str	r0, [r4, #8]
				dp->obj.id = fs->id;
1a002196:	9b03      	ldr	r3, [sp, #12]
1a002198:	88db      	ldrh	r3, [r3, #6]
1a00219a:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
1a00219c:	2100      	movs	r1, #0
1a00219e:	4620      	mov	r0, r4
1a0021a0:	f7ff f969 	bl	1a001476 <dir_sdi>
1a0021a4:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
1a0021a6:	2b04      	cmp	r3, #4
1a0021a8:	d1d7      	bne.n	1a00215a <f_opendir+0x1a>
1a0021aa:	2305      	movs	r3, #5
1a0021ac:	e7d6      	b.n	1a00215c <f_opendir+0x1c>
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
1a0021ae:	68a3      	ldr	r3, [r4, #8]
1a0021b0:	6223      	str	r3, [r4, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
1a0021b2:	6923      	ldr	r3, [r4, #16]
1a0021b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0021b8:	79e2      	ldrb	r2, [r4, #7]
1a0021ba:	4313      	orrs	r3, r2
1a0021bc:	6263      	str	r3, [r4, #36]	; 0x24
						dp->obj.c_ofs = dp->blk_ofs;
1a0021be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
1a0021c0:	62a3      	str	r3, [r4, #40]	; 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
1a0021c2:	4621      	mov	r1, r4
1a0021c4:	f7fe fc07 	bl	1a0009d6 <init_alloc_info>
1a0021c8:	e7e5      	b.n	1a002196 <f_opendir+0x56>
					res = FR_NO_PATH;
1a0021ca:	2305      	movs	r3, #5
1a0021cc:	e7eb      	b.n	1a0021a6 <f_opendir+0x66>
	if (!dp) return FR_INVALID_OBJECT;
1a0021ce:	2309      	movs	r3, #9
1a0021d0:	e7c6      	b.n	1a002160 <f_opendir+0x20>

1a0021d2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
1a0021d2:	b510      	push	{r4, lr}
1a0021d4:	b082      	sub	sp, #8
1a0021d6:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
1a0021d8:	a901      	add	r1, sp, #4
1a0021da:	f7fe fc6b 	bl	1a000ab4 <validate>
	if (res == FR_OK) {
1a0021de:	4603      	mov	r3, r0
1a0021e0:	b908      	cbnz	r0, 1a0021e6 <f_closedir+0x14>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
1a0021e2:	2200      	movs	r2, #0
1a0021e4:	6022      	str	r2, [r4, #0]
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
1a0021e6:	4618      	mov	r0, r3
1a0021e8:	b002      	add	sp, #8
1a0021ea:	bd10      	pop	{r4, pc}

1a0021ec <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
1a0021ec:	b570      	push	{r4, r5, r6, lr}
1a0021ee:	b082      	sub	sp, #8
1a0021f0:	4605      	mov	r5, r0
1a0021f2:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
1a0021f4:	a901      	add	r1, sp, #4
1a0021f6:	f7fe fc5d 	bl	1a000ab4 <validate>
	if (res == FR_OK) {
1a0021fa:	4604      	mov	r4, r0
1a0021fc:	b990      	cbnz	r0, 1a002224 <f_readdir+0x38>
		if (!fno) {
1a0021fe:	b1a6      	cbz	r6, 1a00222a <f_readdir+0x3e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read_file(dp);		/* Read an item */
1a002200:	2100      	movs	r1, #0
1a002202:	4628      	mov	r0, r5
1a002204:	f7ff fb8e 	bl	1a001924 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
1a002208:	2804      	cmp	r0, #4
1a00220a:	d000      	beq.n	1a00220e <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
1a00220c:	b998      	cbnz	r0, 1a002236 <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
1a00220e:	4631      	mov	r1, r6
1a002210:	4628      	mov	r0, r5
1a002212:	f7ff fe95 	bl	1a001f40 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
1a002216:	2100      	movs	r1, #0
1a002218:	4628      	mov	r0, r5
1a00221a:	f7ff fa95 	bl	1a001748 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
1a00221e:	2804      	cmp	r0, #4
1a002220:	d000      	beq.n	1a002224 <f_readdir+0x38>
				res = dir_next(dp, 0);		/* Increment index for next */
1a002222:	4604      	mov	r4, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
1a002224:	4620      	mov	r0, r4
1a002226:	b002      	add	sp, #8
1a002228:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
1a00222a:	2100      	movs	r1, #0
1a00222c:	4628      	mov	r0, r5
1a00222e:	f7ff f922 	bl	1a001476 <dir_sdi>
1a002232:	4604      	mov	r4, r0
1a002234:	e7f6      	b.n	1a002224 <f_readdir+0x38>
			res = dir_read_file(dp);		/* Read an item */
1a002236:	4604      	mov	r4, r0
1a002238:	e7f4      	b.n	1a002224 <f_readdir+0x38>
1a00223a:	Address 0x000000001a00223a is out of bounds.


1a00223c <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
1a00223c:	287f      	cmp	r0, #127	; 0x7f
1a00223e:	d908      	bls.n	1a002252 <ff_uni2oem+0x16>
		c = (WCHAR)uni;

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
1a002240:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a002244:	d215      	bcs.n	1a002272 <ff_uni2oem+0x36>
1a002246:	f240 3352 	movw	r3, #850	; 0x352
1a00224a:	4299      	cmp	r1, r3
1a00224c:	d003      	beq.n	1a002256 <ff_uni2oem+0x1a>
	WCHAR c = 0;
1a00224e:	2000      	movs	r0, #0
1a002250:	4770      	bx	lr
		c = (WCHAR)uni;
1a002252:	b280      	uxth	r0, r0
1a002254:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1a002256:	2300      	movs	r3, #0
1a002258:	2b7f      	cmp	r3, #127	; 0x7f
1a00225a:	d807      	bhi.n	1a00226c <ff_uni2oem+0x30>
1a00225c:	4a06      	ldr	r2, [pc, #24]	; (1a002278 <ff_uni2oem+0x3c>)
1a00225e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
1a002262:	4282      	cmp	r2, r0
1a002264:	d002      	beq.n	1a00226c <ff_uni2oem+0x30>
1a002266:	3301      	adds	r3, #1
1a002268:	b29b      	uxth	r3, r3
1a00226a:	e7f5      	b.n	1a002258 <ff_uni2oem+0x1c>
			c = (c + 0x80) & 0xFF;
1a00226c:	3380      	adds	r3, #128	; 0x80
1a00226e:	b2d8      	uxtb	r0, r3
1a002270:	4770      	bx	lr
	WCHAR c = 0;
1a002272:	2000      	movs	r0, #0
		}
	}

	return c;
}
1a002274:	4770      	bx	lr
1a002276:	bf00      	nop
1a002278:	1a00501c 	.word	0x1a00501c

1a00227c <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
1a00227c:	287f      	cmp	r0, #127	; 0x7f
1a00227e:	d90f      	bls.n	1a0022a0 <ff_oem2uni+0x24>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
1a002280:	f240 3352 	movw	r3, #850	; 0x352
1a002284:	4299      	cmp	r1, r3
1a002286:	d001      	beq.n	1a00228c <ff_oem2uni+0x10>
	WCHAR c = 0;
1a002288:	2000      	movs	r0, #0
1a00228a:	4770      	bx	lr
			if (oem < 0x100) c = p[oem - 0x80];
1a00228c:	28ff      	cmp	r0, #255	; 0xff
1a00228e:	d806      	bhi.n	1a00229e <ff_oem2uni+0x22>
1a002290:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
1a002294:	3880      	subs	r0, #128	; 0x80
1a002296:	4b03      	ldr	r3, [pc, #12]	; (1a0022a4 <ff_oem2uni+0x28>)
1a002298:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00229c:	4770      	bx	lr
	WCHAR c = 0;
1a00229e:	2000      	movs	r0, #0
		}
	}

	return c;
}
1a0022a0:	4770      	bx	lr
1a0022a2:	bf00      	nop
1a0022a4:	1a00501c 	.word	0x1a00501c

1a0022a8 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
1a0022a8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a0022ac:	d245      	bcs.n	1a00233a <ff_wtoupper+0x92>
{
1a0022ae:	b4f0      	push	{r4, r5, r6, r7}
		uc = (WORD)uni;
1a0022b0:	b287      	uxth	r7, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
1a0022b2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
1a0022b6:	d201      	bcs.n	1a0022bc <ff_wtoupper+0x14>
1a0022b8:	4b20      	ldr	r3, [pc, #128]	; (1a00233c <ff_wtoupper+0x94>)
1a0022ba:	e002      	b.n	1a0022c2 <ff_wtoupper+0x1a>
1a0022bc:	4b20      	ldr	r3, [pc, #128]	; (1a002340 <ff_wtoupper+0x98>)
1a0022be:	e000      	b.n	1a0022c2 <ff_wtoupper+0x1a>
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a0022c0:	4633      	mov	r3, r6
			bc = *p++;								/* Get the block base */
1a0022c2:	881a      	ldrh	r2, [r3, #0]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
1a0022c4:	b1d2      	cbz	r2, 1a0022fc <ff_wtoupper+0x54>
1a0022c6:	4297      	cmp	r7, r2
1a0022c8:	d318      	bcc.n	1a0022fc <ff_wtoupper+0x54>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a0022ca:	1d1e      	adds	r6, r3, #4
1a0022cc:	885b      	ldrh	r3, [r3, #2]
1a0022ce:	0a19      	lsrs	r1, r3, #8
1a0022d0:	b2db      	uxtb	r3, r3
			if (uc < bc + nc) {	/* In the block? */
1a0022d2:	b284      	uxth	r4, r0
1a0022d4:	189d      	adds	r5, r3, r2
1a0022d6:	42ac      	cmp	r4, r5
1a0022d8:	db04      	blt.n	1a0022e4 <ff_wtoupper+0x3c>
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
1a0022da:	2900      	cmp	r1, #0
1a0022dc:	d1f0      	bne.n	1a0022c0 <ff_wtoupper+0x18>
1a0022de:	eb06 0343 	add.w	r3, r6, r3, lsl #1
1a0022e2:	e7ee      	b.n	1a0022c2 <ff_wtoupper+0x1a>
				switch (cmd) {
1a0022e4:	2908      	cmp	r1, #8
1a0022e6:	d809      	bhi.n	1a0022fc <ff_wtoupper+0x54>
1a0022e8:	e8df f001 	tbb	[pc, r1]
1a0022ec:	14110b05 	.word	0x14110b05
1a0022f0:	201d1a17 	.word	0x201d1a17
1a0022f4:	23          	.byte	0x23
1a0022f5:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
1a0022f6:	1aa4      	subs	r4, r4, r2
1a0022f8:	f836 7014 	ldrh.w	r7, [r6, r4, lsl #1]
		}
		uni = uc;
1a0022fc:	4638      	mov	r0, r7
	}

	return uni;
}
1a0022fe:	bcf0      	pop	{r4, r5, r6, r7}
1a002300:	4770      	bx	lr
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
1a002302:	1aba      	subs	r2, r7, r2
1a002304:	f002 0301 	and.w	r3, r2, #1
1a002308:	1aff      	subs	r7, r7, r3
1a00230a:	b2bf      	uxth	r7, r7
1a00230c:	e7f6      	b.n	1a0022fc <ff_wtoupper+0x54>
				case 2: uc -= 16; break;			/* Shift -16 */
1a00230e:	3f10      	subs	r7, #16
1a002310:	b2bf      	uxth	r7, r7
1a002312:	e7f3      	b.n	1a0022fc <ff_wtoupper+0x54>
				case 3:	uc -= 32; break;			/* Shift -32 */
1a002314:	3f20      	subs	r7, #32
1a002316:	b2bf      	uxth	r7, r7
1a002318:	e7f0      	b.n	1a0022fc <ff_wtoupper+0x54>
				case 4:	uc -= 48; break;			/* Shift -48 */
1a00231a:	3f30      	subs	r7, #48	; 0x30
1a00231c:	b2bf      	uxth	r7, r7
1a00231e:	e7ed      	b.n	1a0022fc <ff_wtoupper+0x54>
				case 5:	uc -= 26; break;			/* Shift -26 */
1a002320:	3f1a      	subs	r7, #26
1a002322:	b2bf      	uxth	r7, r7
1a002324:	e7ea      	b.n	1a0022fc <ff_wtoupper+0x54>
				case 6:	uc += 8; break;				/* Shift +8 */
1a002326:	3708      	adds	r7, #8
1a002328:	b2bf      	uxth	r7, r7
1a00232a:	e7e7      	b.n	1a0022fc <ff_wtoupper+0x54>
				case 7: uc -= 80; break;			/* Shift -80 */
1a00232c:	3f50      	subs	r7, #80	; 0x50
1a00232e:	b2bf      	uxth	r7, r7
1a002330:	e7e4      	b.n	1a0022fc <ff_wtoupper+0x54>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
1a002332:	f5a7 57e3 	sub.w	r7, r7, #7264	; 0x1c60
1a002336:	b2bf      	uxth	r7, r7
1a002338:	e7e0      	b.n	1a0022fc <ff_wtoupper+0x54>
}
1a00233a:	4770      	bx	lr
1a00233c:	1a004d6c 	.word	0x1a004d6c
1a002340:	1a004f60 	.word	0x1a004f60

1a002344 <newCardStatus>:
static FSSDC_StatusUpdateCallback_Func  g_statusUpdateCallback = NULL;
static enum FSSDC_CardStatus            g_cardStatus = FSSDC_CardStatus_Removed;


static void newCardStatus (enum FSSDC_CardStatus cardStatus)
{
1a002344:	b508      	push	{r3, lr}
    g_cardStatus = cardStatus;
1a002346:	4b03      	ldr	r3, [pc, #12]	; (1a002354 <newCardStatus+0x10>)
1a002348:	7018      	strb	r0, [r3, #0]
    if (g_statusUpdateCallback)
1a00234a:	4b03      	ldr	r3, [pc, #12]	; (1a002358 <newCardStatus+0x14>)
1a00234c:	681b      	ldr	r3, [r3, #0]
1a00234e:	b103      	cbz	r3, 1a002352 <newCardStatus+0xe>
    {
        g_statusUpdateCallback (g_cardStatus);
1a002350:	4798      	blx	r3
    }
}
1a002352:	bd08      	pop	{r3, pc}
1a002354:	10000000 	.word	0x10000000
1a002358:	10000694 	.word	0x10000694

1a00235c <SSPSend>:
   Module Private Functions

---------------------------------------------------------------------------*/

static void SSPSend(uint8_t *buf, uint32_t Length)
{
1a00235c:	b500      	push	{lr}
1a00235e:	b087      	sub	sp, #28
    Chip_SSP_DATA_SETUP_T xferConfig;

	xferConfig.tx_data = buf;
1a002360:	9001      	str	r0, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a002362:	2300      	movs	r3, #0
1a002364:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = NULL;
1a002366:	9303      	str	r3, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a002368:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a00236a:	9105      	str	r1, [sp, #20]

	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a00236c:	a901      	add	r1, sp, #4
1a00236e:	4803      	ldr	r0, [pc, #12]	; (1a00237c <SSPSend+0x20>)
1a002370:	f001 f82f 	bl	1a0033d2 <Chip_SSP_RWFrames_Blocking>
}
1a002374:	b007      	add	sp, #28
1a002376:	f85d fb04 	ldr.w	pc, [sp], #4
1a00237a:	bf00      	nop
1a00237c:	400c5000 	.word	0x400c5000

1a002380 <xmit_spi>:
/*-----------------------------------------------------------------------*/
/* Transmit a byte to MMC via SPI  (Platform dependent)                  */
/*-----------------------------------------------------------------------*/
//#define xmit_spi(dat) (SSPSend((uint8_t*)&(dat), 1))
static void xmit_spi(BYTE dat)
{
1a002380:	b500      	push	{lr}
1a002382:	b083      	sub	sp, #12
1a002384:	ab02      	add	r3, sp, #8
1a002386:	f803 0d01 	strb.w	r0, [r3, #-1]!
    SSPSend((uint8_t*) &dat, 1);
1a00238a:	2101      	movs	r1, #1
1a00238c:	4618      	mov	r0, r3
1a00238e:	f7ff ffe5 	bl	1a00235c <SSPSend>
}
1a002392:	b003      	add	sp, #12
1a002394:	f85d fb04 	ldr.w	pc, [sp], #4

1a002398 <SSPReceive>:
{
1a002398:	b500      	push	{lr}
1a00239a:	b087      	sub	sp, #28
	xferConfig.tx_data = NULL;
1a00239c:	2300      	movs	r3, #0
1a00239e:	9301      	str	r3, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a0023a0:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = buf;
1a0023a2:	9003      	str	r0, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a0023a4:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a0023a6:	9105      	str	r1, [sp, #20]
	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a0023a8:	a901      	add	r1, sp, #4
1a0023aa:	4803      	ldr	r0, [pc, #12]	; (1a0023b8 <SSPReceive+0x20>)
1a0023ac:	f001 f811 	bl	1a0033d2 <Chip_SSP_RWFrames_Blocking>
}
1a0023b0:	b007      	add	sp, #28
1a0023b2:	f85d fb04 	ldr.w	pc, [sp], #4
1a0023b6:	bf00      	nop
1a0023b8:	400c5000 	.word	0x400c5000

1a0023bc <rcvr_spi>:
/*-----------------------------------------------------------------------*/
/* Receive a byte from MMC via SPI  (Platform dependent)                 */
/*-----------------------------------------------------------------------*/
static
BYTE rcvr_spi (void)
{
1a0023bc:	b500      	push	{lr}
1a0023be:	b083      	sub	sp, #12
    BYTE data = 0;
1a0023c0:	a802      	add	r0, sp, #8
1a0023c2:	2300      	movs	r3, #0
1a0023c4:	f800 3d01 	strb.w	r3, [r0, #-1]!

    SSPReceive(&data, 1);
1a0023c8:	2101      	movs	r1, #1
1a0023ca:	f7ff ffe5 	bl	1a002398 <SSPReceive>

    return data;
}
1a0023ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a0023d2:	b003      	add	sp, #12
1a0023d4:	f85d fb04 	ldr.w	pc, [sp], #4

1a0023d8 <wait_ready>:
/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/
static
BYTE wait_ready (void)
{
1a0023d8:	b508      	push	{r3, lr}
	BYTE res;

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
1a0023da:	4b07      	ldr	r3, [pc, #28]	; (1a0023f8 <wait_ready+0x20>)
1a0023dc:	2232      	movs	r2, #50	; 0x32
1a0023de:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
1a0023e0:	f7ff ffec 	bl	1a0023bc <rcvr_spi>
	do
		res = rcvr_spi();
1a0023e4:	f7ff ffea 	bl	1a0023bc <rcvr_spi>
	while ((res != 0xFF) && Timer2);
1a0023e8:	28ff      	cmp	r0, #255	; 0xff
1a0023ea:	d003      	beq.n	1a0023f4 <wait_ready+0x1c>
1a0023ec:	4b02      	ldr	r3, [pc, #8]	; (1a0023f8 <wait_ready+0x20>)
1a0023ee:	781b      	ldrb	r3, [r3, #0]
1a0023f0:	2b00      	cmp	r3, #0
1a0023f2:	d1f7      	bne.n	1a0023e4 <wait_ready+0xc>

	return res;
}
1a0023f4:	bd08      	pop	{r3, pc}
1a0023f6:	bf00      	nop
1a0023f8:	10000692 	.word	0x10000692

1a0023fc <deselect>:
/*-----------------------------------------------------------------------*/
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/
static
void deselect (void)
{
1a0023fc:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->SET[port] = (1 << pin);
1a0023fe:	4a04      	ldr	r2, [pc, #16]	; (1a002410 <deselect+0x14>)
1a002400:	f242 230c 	movw	r3, #8716	; 0x220c
1a002404:	2101      	movs	r1, #1
1a002406:	50d1      	str	r1, [r2, r3]
	CS_HIGH();
	rcvr_spi();
1a002408:	f7ff ffd8 	bl	1a0023bc <rcvr_spi>
}
1a00240c:	bd08      	pop	{r3, pc}
1a00240e:	bf00      	nop
1a002410:	400f4000 	.word	0x400f4000

1a002414 <select_>:
/*-----------------------------------------------------------------------*/
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/
static
BOOL select_ (void)	/* TRUE:Successful, FALSE:Timeout */
{
1a002414:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a002416:	4a07      	ldr	r2, [pc, #28]	; (1a002434 <select_+0x20>)
1a002418:	f242 238c 	movw	r3, #8844	; 0x228c
1a00241c:	2101      	movs	r1, #1
1a00241e:	50d1      	str	r1, [r2, r3]
	CS_LOW();
	if (wait_ready() != 0xFF) {
1a002420:	f7ff ffda 	bl	1a0023d8 <wait_ready>
1a002424:	28ff      	cmp	r0, #255	; 0xff
1a002426:	d003      	beq.n	1a002430 <select_+0x1c>
		deselect();
1a002428:	f7ff ffe8 	bl	1a0023fc <deselect>
		return FALSE;
1a00242c:	2000      	movs	r0, #0
	}
	return TRUE;
}
1a00242e:	bd08      	pop	{r3, pc}
	return TRUE;
1a002430:	2001      	movs	r0, #1
1a002432:	e7fc      	b.n	1a00242e <select_+0x1a>
1a002434:	400f4000 	.word	0x400f4000

1a002438 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
1a002438:	b538      	push	{r3, r4, r5, lr}
1a00243a:	4604      	mov	r4, r0
1a00243c:	460d      	mov	r5, r1
	BYTE n, res;


    if (cmd & 0x80)                     /* ACMD<n> is the command sequense of CMD55-CMD<n> */
1a00243e:	f010 0f80 	tst.w	r0, #128	; 0x80
1a002442:	d129      	bne.n	1a002498 <send_cmd+0x60>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
1a002444:	f7ff ffda 	bl	1a0023fc <deselect>
	if (!select_()) 
1a002448:	f7ff ffe4 	bl	1a002414 <select_>
1a00244c:	b3a0      	cbz	r0, 1a0024b8 <send_cmd+0x80>
    {
        return 0xFF;
    }

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
1a00244e:	4620      	mov	r0, r4
1a002450:	f7ff ff96 	bl	1a002380 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
1a002454:	0e28      	lsrs	r0, r5, #24
1a002456:	f7ff ff93 	bl	1a002380 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
1a00245a:	f3c5 4007 	ubfx	r0, r5, #16, #8
1a00245e:	f7ff ff8f 	bl	1a002380 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
1a002462:	f3c5 2007 	ubfx	r0, r5, #8, #8
1a002466:	f7ff ff8b 	bl	1a002380 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
1a00246a:	b2e8      	uxtb	r0, r5
1a00246c:	f7ff ff88 	bl	1a002380 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
    
	if (cmd == CMD0_) 
1a002470:	2c40      	cmp	r4, #64	; 0x40
1a002472:	d01a      	beq.n	1a0024aa <send_cmd+0x72>
	n = 0x01;							/* Dummy CRC + Stop */
1a002474:	2001      	movs	r0, #1
    {
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
    }
    
	if (cmd == CMD8)
1a002476:	2c48      	cmp	r4, #72	; 0x48
1a002478:	d019      	beq.n	1a0024ae <send_cmd+0x76>
    {
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
    }
    
	xmit_spi(n);
1a00247a:	f7ff ff81 	bl	1a002380 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) 
1a00247e:	2c4c      	cmp	r4, #76	; 0x4c
1a002480:	d017      	beq.n	1a0024b2 <send_cmd+0x7a>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a002482:	240a      	movs	r4, #10
    }
    
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
    {
		res = rcvr_spi();
1a002484:	f7ff ff9a 	bl	1a0023bc <rcvr_spi>
    }
	while ((res & 0x80) && --n);
1a002488:	f010 0f80 	tst.w	r0, #128	; 0x80
1a00248c:	d015      	beq.n	1a0024ba <send_cmd+0x82>
1a00248e:	1e63      	subs	r3, r4, #1
1a002490:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a002494:	d1f6      	bne.n	1a002484 <send_cmd+0x4c>
1a002496:	e010      	b.n	1a0024ba <send_cmd+0x82>
		cmd &= 0x7F;
1a002498:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		res = send_cmd(CMD55, 0);
1a00249c:	2100      	movs	r1, #0
1a00249e:	2077      	movs	r0, #119	; 0x77
1a0024a0:	f7ff ffca 	bl	1a002438 <send_cmd>
		if (res > 1) return res;
1a0024a4:	2801      	cmp	r0, #1
1a0024a6:	d808      	bhi.n	1a0024ba <send_cmd+0x82>
1a0024a8:	e7cc      	b.n	1a002444 <send_cmd+0xc>
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
1a0024aa:	2095      	movs	r0, #149	; 0x95
1a0024ac:	e7e3      	b.n	1a002476 <send_cmd+0x3e>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a0024ae:	2087      	movs	r0, #135	; 0x87
1a0024b0:	e7e3      	b.n	1a00247a <send_cmd+0x42>
        rcvr_spi();                     /* Skip a stuff byte when stop reading */
1a0024b2:	f7ff ff83 	bl	1a0023bc <rcvr_spi>
1a0024b6:	e7e4      	b.n	1a002482 <send_cmd+0x4a>
        return 0xFF;
1a0024b8:	20ff      	movs	r0, #255	; 0xff

	return res;			/* Return with the response value */
}
1a0024ba:	bd38      	pop	{r3, r4, r5, pc}

1a0024bc <xmit_datablock>:
{
1a0024bc:	b570      	push	{r4, r5, r6, lr}
1a0024be:	4606      	mov	r6, r0
1a0024c0:	460c      	mov	r4, r1
	if (wait_ready() != 0xFF) 
1a0024c2:	f7ff ff89 	bl	1a0023d8 <wait_ready>
1a0024c6:	28ff      	cmp	r0, #255	; 0xff
1a0024c8:	d001      	beq.n	1a0024ce <xmit_datablock+0x12>
        return FALSE;
1a0024ca:	2000      	movs	r0, #0
}
1a0024cc:	bd70      	pop	{r4, r5, r6, pc}
	xmit_spi(token);					/* Xmit data token */
1a0024ce:	4620      	mov	r0, r4
1a0024d0:	f7ff ff56 	bl	1a002380 <xmit_spi>
	if (token != 0xFD)                  /* Is data token */
1a0024d4:	2cfd      	cmp	r4, #253	; 0xfd
1a0024d6:	d01b      	beq.n	1a002510 <xmit_datablock+0x54>
		wc = 0;
1a0024d8:	2400      	movs	r4, #0
			xmit_spi(*buff++);
1a0024da:	4635      	mov	r5, r6
1a0024dc:	f815 0b02 	ldrb.w	r0, [r5], #2
1a0024e0:	f7ff ff4e 	bl	1a002380 <xmit_spi>
			xmit_spi(*buff++);
1a0024e4:	7870      	ldrb	r0, [r6, #1]
1a0024e6:	f7ff ff4b 	bl	1a002380 <xmit_spi>
        while (--wc);
1a0024ea:	1e63      	subs	r3, r4, #1
			xmit_spi(*buff++);
1a0024ec:	462e      	mov	r6, r5
        while (--wc);
1a0024ee:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a0024f2:	d1f2      	bne.n	1a0024da <xmit_datablock+0x1e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
1a0024f4:	20ff      	movs	r0, #255	; 0xff
1a0024f6:	f7ff ff43 	bl	1a002380 <xmit_spi>
		xmit_spi(0xFF);
1a0024fa:	20ff      	movs	r0, #255	; 0xff
1a0024fc:	f7ff ff40 	bl	1a002380 <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
1a002500:	f7ff ff5c 	bl	1a0023bc <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
1a002504:	f000 001f 	and.w	r0, r0, #31
1a002508:	2805      	cmp	r0, #5
1a00250a:	d003      	beq.n	1a002514 <xmit_datablock+0x58>
			return FALSE;
1a00250c:	2000      	movs	r0, #0
1a00250e:	e7dd      	b.n	1a0024cc <xmit_datablock+0x10>
	return TRUE;
1a002510:	2001      	movs	r0, #1
1a002512:	e7db      	b.n	1a0024cc <xmit_datablock+0x10>
1a002514:	2001      	movs	r0, #1
1a002516:	e7d9      	b.n	1a0024cc <xmit_datablock+0x10>

1a002518 <rcvr_datablock>:
{
1a002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00251a:	4604      	mov	r4, r0
1a00251c:	460e      	mov	r6, r1
	Timer1 = 20;
1a00251e:	4b15      	ldr	r3, [pc, #84]	; (1a002574 <rcvr_datablock+0x5c>)
1a002520:	2214      	movs	r2, #20
1a002522:	701a      	strb	r2, [r3, #0]
		token = rcvr_spi();
1a002524:	f7ff ff4a 	bl	1a0023bc <rcvr_spi>
    while ((token == 0xFF) && Timer1);
1a002528:	28ff      	cmp	r0, #255	; 0xff
1a00252a:	d103      	bne.n	1a002534 <rcvr_datablock+0x1c>
1a00252c:	4b11      	ldr	r3, [pc, #68]	; (1a002574 <rcvr_datablock+0x5c>)
1a00252e:	781b      	ldrb	r3, [r3, #0]
1a002530:	2b00      	cmp	r3, #0
1a002532:	d1f7      	bne.n	1a002524 <rcvr_datablock+0xc>
	if (token != 0xFE) 
1a002534:	28fe      	cmp	r0, #254	; 0xfe
1a002536:	d001      	beq.n	1a00253c <rcvr_datablock+0x24>
        return FALSE;               /* If not valid data token, retutn with error */
1a002538:	2000      	movs	r0, #0
}
1a00253a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rcvr_spi_m(buff++);
1a00253c:	1c65      	adds	r5, r4, #1
1a00253e:	2101      	movs	r1, #1
1a002540:	4620      	mov	r0, r4
1a002542:	f7ff ff29 	bl	1a002398 <SSPReceive>
		rcvr_spi_m(buff++);
1a002546:	1ca7      	adds	r7, r4, #2
1a002548:	2101      	movs	r1, #1
1a00254a:	4628      	mov	r0, r5
1a00254c:	f7ff ff24 	bl	1a002398 <SSPReceive>
		rcvr_spi_m(buff++);
1a002550:	1ce5      	adds	r5, r4, #3
1a002552:	2101      	movs	r1, #1
1a002554:	4638      	mov	r0, r7
1a002556:	f7ff ff1f 	bl	1a002398 <SSPReceive>
		rcvr_spi_m(buff++);
1a00255a:	2101      	movs	r1, #1
1a00255c:	4628      	mov	r0, r5
1a00255e:	3404      	adds	r4, #4
1a002560:	f7ff ff1a 	bl	1a002398 <SSPReceive>
    while (btr -= 4);
1a002564:	3e04      	subs	r6, #4
1a002566:	d1e9      	bne.n	1a00253c <rcvr_datablock+0x24>
	rcvr_spi();						/* Discard CRC */
1a002568:	f7ff ff28 	bl	1a0023bc <rcvr_spi>
	rcvr_spi();
1a00256c:	f7ff ff26 	bl	1a0023bc <rcvr_spi>
	return TRUE;					/* Return with success */
1a002570:	2001      	movs	r0, #1
1a002572:	e7e2      	b.n	1a00253a <rcvr_datablock+0x22>
1a002574:	10000691 	.word	0x10000691

1a002578 <FSSDC_FatFs_DiskStatus>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskStatus ()
{
	return g_diskStats;
1a002578:	4b01      	ldr	r3, [pc, #4]	; (1a002580 <FSSDC_FatFs_DiskStatus+0x8>)
1a00257a:	7818      	ldrb	r0, [r3, #0]
}
1a00257c:	4770      	bx	lr
1a00257e:	bf00      	nop
1a002580:	10000001 	.word	0x10000001

1a002584 <FSSDC_FatFs_DiskInitialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskInitialize ()
{
1a002584:	b570      	push	{r4, r5, r6, lr}
1a002586:	b082      	sub	sp, #8
	BYTE n, cmd, ty, ocr[4];

    if (g_diskStats & STA_NODISK)
1a002588:	4b5f      	ldr	r3, [pc, #380]	; (1a002708 <FSSDC_FatFs_DiskInitialize+0x184>)
1a00258a:	781b      	ldrb	r3, [r3, #0]
1a00258c:	f013 0f02 	tst.w	r3, #2
1a002590:	d109      	bne.n	1a0025a6 <FSSDC_FatFs_DiskInitialize+0x22>
    {
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
        return g_diskStats;                 /* No card in the socket */
    }
    
    if (!(g_diskStats & STA_NOINIT))        /* Already initialized */
1a002592:	4b5d      	ldr	r3, [pc, #372]	; (1a002708 <FSSDC_FatFs_DiskInitialize+0x184>)
1a002594:	781b      	ldrb	r3, [r3, #0]
1a002596:	f013 0f01 	tst.w	r3, #1
1a00259a:	d10b      	bne.n	1a0025b4 <FSSDC_FatFs_DiskInitialize+0x30>
    {
        return g_diskStats;
1a00259c:	4b5a      	ldr	r3, [pc, #360]	; (1a002708 <FSSDC_FatFs_DiskInitialize+0x184>)
1a00259e:	7818      	ldrb	r0, [r3, #0]
1a0025a0:	b2c0      	uxtb	r0, r0
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
        newCardStatus (FSSDC_CardStatus_Error); 
	}

	return g_diskStats;
}
1a0025a2:	b002      	add	sp, #8
1a0025a4:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
1a0025a6:	4859      	ldr	r0, [pc, #356]	; (1a00270c <FSSDC_FatFs_DiskInitialize+0x188>)
1a0025a8:	f000 fa04 	bl	1a0029b4 <Board_UARTPutSTR>
        return g_diskStats;                 /* No card in the socket */
1a0025ac:	4b56      	ldr	r3, [pc, #344]	; (1a002708 <FSSDC_FatFs_DiskInitialize+0x184>)
1a0025ae:	7818      	ldrb	r0, [r3, #0]
1a0025b0:	b2c0      	uxtb	r0, r0
1a0025b2:	e7f6      	b.n	1a0025a2 <FSSDC_FatFs_DiskInitialize+0x1e>
    Board_UARTPutSTR ("FSSDC: [Init] Initialization begins.\r\n");
1a0025b4:	4856      	ldr	r0, [pc, #344]	; (1a002710 <FSSDC_FatFs_DiskInitialize+0x18c>)
1a0025b6:	f000 f9fd 	bl	1a0029b4 <Board_UARTPutSTR>
	FCLK_SLOW();
1a0025ba:	4b56      	ldr	r3, [pc, #344]	; (1a002714 <FSSDC_FatFs_DiskInitialize+0x190>)
1a0025bc:	6819      	ldr	r1, [r3, #0]
1a0025be:	4856      	ldr	r0, [pc, #344]	; (1a002718 <FSSDC_FatFs_DiskInitialize+0x194>)
1a0025c0:	f000 ff5c 	bl	1a00347c <Chip_SSP_SetBitRate>
	for (n = 10; n; n--) 
1a0025c4:	240a      	movs	r4, #10
1a0025c6:	e003      	b.n	1a0025d0 <FSSDC_FatFs_DiskInitialize+0x4c>
        rcvr_spi();	/* 80 dummy clocks */
1a0025c8:	f7ff fef8 	bl	1a0023bc <rcvr_spi>
	for (n = 10; n; n--) 
1a0025cc:	3c01      	subs	r4, #1
1a0025ce:	b2e4      	uxtb	r4, r4
1a0025d0:	2c00      	cmp	r4, #0
1a0025d2:	d1f9      	bne.n	1a0025c8 <FSSDC_FatFs_DiskInitialize+0x44>
    Board_UARTPutSTR ("FSSDC: [Init] New card status: Native Mode.\r\n");
1a0025d4:	4851      	ldr	r0, [pc, #324]	; (1a00271c <FSSDC_FatFs_DiskInitialize+0x198>)
1a0025d6:	f000 f9ed 	bl	1a0029b4 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_NativeMode);    
1a0025da:	2003      	movs	r0, #3
1a0025dc:	f7ff feb2 	bl	1a002344 <newCardStatus>
	if (send_cmd(CMD0_, 0) == 1)                                /* Enter Idle state */
1a0025e0:	2100      	movs	r1, #0
1a0025e2:	2040      	movs	r0, #64	; 0x40
1a0025e4:	f7ff ff28 	bl	1a002438 <send_cmd>
1a0025e8:	4605      	mov	r5, r0
1a0025ea:	2801      	cmp	r0, #1
1a0025ec:	d019      	beq.n	1a002622 <FSSDC_FatFs_DiskInitialize+0x9e>
	CardType = ty;
1a0025ee:	4b4c      	ldr	r3, [pc, #304]	; (1a002720 <FSSDC_FatFs_DiskInitialize+0x19c>)
1a0025f0:	701c      	strb	r4, [r3, #0]
	deselect();
1a0025f2:	f7ff ff03 	bl	1a0023fc <deselect>
    if (ty)                                             /* Initialization succeded */
1a0025f6:	2c00      	cmp	r4, #0
1a0025f8:	d07f      	beq.n	1a0026fa <FSSDC_FatFs_DiskInitialize+0x176>
		g_diskStats &= ~STA_NOINIT;                     /* Clear STA_NOINIT */
1a0025fa:	4a43      	ldr	r2, [pc, #268]	; (1a002708 <FSSDC_FatFs_DiskInitialize+0x184>)
1a0025fc:	7813      	ldrb	r3, [r2, #0]
1a0025fe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
1a002602:	7013      	strb	r3, [r2, #0]
		FCLK_FAST();
1a002604:	4b47      	ldr	r3, [pc, #284]	; (1a002724 <FSSDC_FatFs_DiskInitialize+0x1a0>)
1a002606:	6819      	ldr	r1, [r3, #0]
1a002608:	4843      	ldr	r0, [pc, #268]	; (1a002718 <FSSDC_FatFs_DiskInitialize+0x194>)
1a00260a:	f000 ff37 	bl	1a00347c <Chip_SSP_SetBitRate>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Ready (Fast Clock).\r\n");        
1a00260e:	4846      	ldr	r0, [pc, #280]	; (1a002728 <FSSDC_FatFs_DiskInitialize+0x1a4>)
1a002610:	f000 f9d0 	bl	1a0029b4 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Ready);        
1a002614:	2005      	movs	r0, #5
1a002616:	f7ff fe95 	bl	1a002344 <newCardStatus>
	return g_diskStats;
1a00261a:	4b3b      	ldr	r3, [pc, #236]	; (1a002708 <FSSDC_FatFs_DiskInitialize+0x184>)
1a00261c:	7818      	ldrb	r0, [r3, #0]
1a00261e:	b2c0      	uxtb	r0, r0
1a002620:	e7bf      	b.n	1a0025a2 <FSSDC_FatFs_DiskInitialize+0x1e>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Initializing.\r\n");        
1a002622:	4842      	ldr	r0, [pc, #264]	; (1a00272c <FSSDC_FatFs_DiskInitialize+0x1a8>)
1a002624:	f000 f9c6 	bl	1a0029b4 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Initializing);
1a002628:	2004      	movs	r0, #4
1a00262a:	f7ff fe8b 	bl	1a002344 <newCardStatus>
		Timer1 = 100;                                           /* Initialization timeout of 1000 msec */
1a00262e:	4b40      	ldr	r3, [pc, #256]	; (1a002730 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a002630:	2264      	movs	r2, #100	; 0x64
1a002632:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1)                         /* SDHC */
1a002634:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
1a002638:	2048      	movs	r0, #72	; 0x48
1a00263a:	f7ff fefd 	bl	1a002438 <send_cmd>
1a00263e:	2801      	cmp	r0, #1
1a002640:	d139      	bne.n	1a0026b6 <FSSDC_FatFs_DiskInitialize+0x132>
			for (n = 0; n < 4; n++) 
1a002642:	4625      	mov	r5, r4
1a002644:	e007      	b.n	1a002656 <FSSDC_FatFs_DiskInitialize+0xd2>
                ocr[n] = rcvr_spi();                            /* Get trailing return value of R7 resp */
1a002646:	f7ff feb9 	bl	1a0023bc <rcvr_spi>
1a00264a:	ab02      	add	r3, sp, #8
1a00264c:	442b      	add	r3, r5
1a00264e:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++) 
1a002652:	3501      	adds	r5, #1
1a002654:	b2ed      	uxtb	r5, r5
1a002656:	2d03      	cmp	r5, #3
1a002658:	d9f5      	bls.n	1a002646 <FSSDC_FatFs_DiskInitialize+0xc2>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)               /* The card can work at vdd range of 2.7-3.6V */ 
1a00265a:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a00265e:	2b01      	cmp	r3, #1
1a002660:	d1c5      	bne.n	1a0025ee <FSSDC_FatFs_DiskInitialize+0x6a>
1a002662:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a002666:	2baa      	cmp	r3, #170	; 0xaa
1a002668:	d1c1      	bne.n	1a0025ee <FSSDC_FatFs_DiskInitialize+0x6a>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
1a00266a:	4b31      	ldr	r3, [pc, #196]	; (1a002730 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a00266c:	781b      	ldrb	r3, [r3, #0]
1a00266e:	b133      	cbz	r3, 1a00267e <FSSDC_FatFs_DiskInitialize+0xfa>
1a002670:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a002674:	20e9      	movs	r0, #233	; 0xe9
1a002676:	f7ff fedf 	bl	1a002438 <send_cmd>
1a00267a:	2800      	cmp	r0, #0
1a00267c:	d1f5      	bne.n	1a00266a <FSSDC_FatFs_DiskInitialize+0xe6>
                if (Timer1 && send_cmd(CMD58, 0) == 0) 
1a00267e:	4b2c      	ldr	r3, [pc, #176]	; (1a002730 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a002680:	781b      	ldrb	r3, [r3, #0]
1a002682:	2b00      	cmp	r3, #0
1a002684:	d0b3      	beq.n	1a0025ee <FSSDC_FatFs_DiskInitialize+0x6a>
1a002686:	2100      	movs	r1, #0
1a002688:	207a      	movs	r0, #122	; 0x7a
1a00268a:	f7ff fed5 	bl	1a002438 <send_cmd>
1a00268e:	4605      	mov	r5, r0
1a002690:	b140      	cbz	r0, 1a0026a4 <FSSDC_FatFs_DiskInitialize+0x120>
1a002692:	e7ac      	b.n	1a0025ee <FSSDC_FatFs_DiskInitialize+0x6a>
                        ocr[n] = rcvr_spi();
1a002694:	f7ff fe92 	bl	1a0023bc <rcvr_spi>
1a002698:	ab02      	add	r3, sp, #8
1a00269a:	442b      	add	r3, r5
1a00269c:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)                     /* Check CCS bit in the OCR */
1a0026a0:	3501      	adds	r5, #1
1a0026a2:	b2ed      	uxtb	r5, r5
1a0026a4:	2d03      	cmp	r5, #3
1a0026a6:	d9f5      	bls.n	1a002694 <FSSDC_FatFs_DiskInitialize+0x110>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a0026a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a0026ac:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0026b0:	d021      	beq.n	1a0026f6 <FSSDC_FatFs_DiskInitialize+0x172>
1a0026b2:	240c      	movs	r4, #12
1a0026b4:	e79b      	b.n	1a0025ee <FSSDC_FatFs_DiskInitialize+0x6a>
			if (send_cmd(ACMD41, 0) <= 1)
1a0026b6:	2100      	movs	r1, #0
1a0026b8:	20e9      	movs	r0, #233	; 0xe9
1a0026ba:	f7ff febd 	bl	1a002438 <send_cmd>
1a0026be:	2801      	cmp	r0, #1
1a0026c0:	d916      	bls.n	1a0026f0 <FSSDC_FatFs_DiskInitialize+0x16c>
				ty = CT_MMC; cmd = CMD1;                        /* MMCv3 */
1a0026c2:	2641      	movs	r6, #65	; 0x41
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
1a0026c4:	4b1a      	ldr	r3, [pc, #104]	; (1a002730 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a0026c6:	781b      	ldrb	r3, [r3, #0]
1a0026c8:	b12b      	cbz	r3, 1a0026d6 <FSSDC_FatFs_DiskInitialize+0x152>
1a0026ca:	2100      	movs	r1, #0
1a0026cc:	4630      	mov	r0, r6
1a0026ce:	f7ff feb3 	bl	1a002438 <send_cmd>
1a0026d2:	2800      	cmp	r0, #0
1a0026d4:	d1f6      	bne.n	1a0026c4 <FSSDC_FatFs_DiskInitialize+0x140>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
1a0026d6:	4b16      	ldr	r3, [pc, #88]	; (1a002730 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a0026d8:	781b      	ldrb	r3, [r3, #0]
1a0026da:	2b00      	cmp	r3, #0
1a0026dc:	d087      	beq.n	1a0025ee <FSSDC_FatFs_DiskInitialize+0x6a>
1a0026de:	f44f 7100 	mov.w	r1, #512	; 0x200
1a0026e2:	2050      	movs	r0, #80	; 0x50
1a0026e4:	f7ff fea8 	bl	1a002438 <send_cmd>
1a0026e8:	2800      	cmp	r0, #0
1a0026ea:	d180      	bne.n	1a0025ee <FSSDC_FatFs_DiskInitialize+0x6a>
1a0026ec:	462c      	mov	r4, r5
1a0026ee:	e77e      	b.n	1a0025ee <FSSDC_FatFs_DiskInitialize+0x6a>
				ty = CT_SD1; cmd = ACMD41;                      /* SDv1 */
1a0026f0:	2502      	movs	r5, #2
1a0026f2:	26e9      	movs	r6, #233	; 0xe9
1a0026f4:	e7e6      	b.n	1a0026c4 <FSSDC_FatFs_DiskInitialize+0x140>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a0026f6:	2404      	movs	r4, #4
1a0026f8:	e779      	b.n	1a0025ee <FSSDC_FatFs_DiskInitialize+0x6a>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
1a0026fa:	480e      	ldr	r0, [pc, #56]	; (1a002734 <FSSDC_FatFs_DiskInitialize+0x1b0>)
1a0026fc:	f000 f95a 	bl	1a0029b4 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Error); 
1a002700:	2000      	movs	r0, #0
1a002702:	f7ff fe1f 	bl	1a002344 <newCardStatus>
1a002706:	e788      	b.n	1a00261a <FSSDC_FatFs_DiskInitialize+0x96>
1a002708:	10000001 	.word	0x10000001
1a00270c:	1a00511c 	.word	0x1a00511c
1a002710:	1a005140 	.word	0x1a005140
1a002714:	10000008 	.word	0x10000008
1a002718:	400c5000 	.word	0x400c5000
1a00271c:	1a005168 	.word	0x1a005168
1a002720:	10000690 	.word	0x10000690
1a002724:	10000004 	.word	0x10000004
1a002728:	1a0051c8 	.word	0x1a0051c8
1a00272c:	1a005198 	.word	0x1a005198
1a002730:	10000691 	.word	0x10000691
1a002734:	1a005200 	.word	0x1a005200

1a002738 <FSSDC_FatFs_DiskRead>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/
DRESULT FSSDC_FatFs_DiskRead (BYTE *buff, DWORD sector, UINT count)
{   
1a002738:	b538      	push	{r3, r4, r5, lr}
	if (g_diskStats & STA_NOINIT)
1a00273a:	4b1d      	ldr	r3, [pc, #116]	; (1a0027b0 <FSSDC_FatFs_DiskRead+0x78>)
1a00273c:	781b      	ldrb	r3, [r3, #0]
1a00273e:	f013 0f01 	tst.w	r3, #1
1a002742:	d121      	bne.n	1a002788 <FSSDC_FatFs_DiskRead+0x50>
1a002744:	4605      	mov	r5, r0
1a002746:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
        return RES_NOTRDY;
    }

	if (!(CardType & CT_BLOCK)) 
1a002748:	4b1a      	ldr	r3, [pc, #104]	; (1a0027b4 <FSSDC_FatFs_DiskRead+0x7c>)
1a00274a:	781b      	ldrb	r3, [r3, #0]
1a00274c:	f013 0f08 	tst.w	r3, #8
1a002750:	d100      	bne.n	1a002754 <FSSDC_FatFs_DiskRead+0x1c>
    {
        sector *= 512;                      /* Convert to byte address if needed */
1a002752:	0249      	lsls	r1, r1, #9
    }

	if (count == 1) 
1a002754:	2c01      	cmp	r4, #1
1a002756:	d01c      	beq.n	1a002792 <FSSDC_FatFs_DiskRead+0x5a>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else 
    {                                       /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) 
1a002758:	2052      	movs	r0, #82	; 0x52
1a00275a:	f7ff fe6d 	bl	1a002438 <send_cmd>
1a00275e:	b968      	cbnz	r0, 1a00277c <FSSDC_FatFs_DiskRead+0x44>
        {                                   /* READ_MULTIPLE_BLOCK */
			do 
            {
				if (!rcvr_datablock(buff, 512)) 
1a002760:	f44f 7100 	mov.w	r1, #512	; 0x200
1a002764:	4628      	mov	r0, r5
1a002766:	f7ff fed7 	bl	1a002518 <rcvr_datablock>
1a00276a:	b118      	cbz	r0, 1a002774 <FSSDC_FatFs_DiskRead+0x3c>
                {
                    break;
                }
				buff += 512;
1a00276c:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a002770:	3c01      	subs	r4, #1
1a002772:	d1f5      	bne.n	1a002760 <FSSDC_FatFs_DiskRead+0x28>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
1a002774:	2100      	movs	r1, #0
1a002776:	204c      	movs	r0, #76	; 0x4c
1a002778:	f7ff fe5e 	bl	1a002438 <send_cmd>
		}
	}
	deselect();
1a00277c:	f7ff fe3e 	bl	1a0023fc <deselect>

	return count ? RES_ERROR : RES_OK;
1a002780:	1c20      	adds	r0, r4, #0
1a002782:	bf18      	it	ne
1a002784:	2001      	movne	r0, #1
}
1a002786:	bd38      	pop	{r3, r4, r5, pc}
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
1a002788:	480b      	ldr	r0, [pc, #44]	; (1a0027b8 <FSSDC_FatFs_DiskRead+0x80>)
1a00278a:	f000 f913 	bl	1a0029b4 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a00278e:	2003      	movs	r0, #3
1a002790:	e7f9      	b.n	1a002786 <FSSDC_FatFs_DiskRead+0x4e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
1a002792:	2051      	movs	r0, #81	; 0x51
1a002794:	f7ff fe50 	bl	1a002438 <send_cmd>
1a002798:	2800      	cmp	r0, #0
1a00279a:	d1ef      	bne.n	1a00277c <FSSDC_FatFs_DiskRead+0x44>
			&& rcvr_datablock(buff, 512))
1a00279c:	f44f 7100 	mov.w	r1, #512	; 0x200
1a0027a0:	4628      	mov	r0, r5
1a0027a2:	f7ff feb9 	bl	1a002518 <rcvr_datablock>
1a0027a6:	2800      	cmp	r0, #0
1a0027a8:	d0e8      	beq.n	1a00277c <FSSDC_FatFs_DiskRead+0x44>
			count = 0;
1a0027aa:	2400      	movs	r4, #0
1a0027ac:	e7e6      	b.n	1a00277c <FSSDC_FatFs_DiskRead+0x44>
1a0027ae:	bf00      	nop
1a0027b0:	10000001 	.word	0x10000001
1a0027b4:	10000690 	.word	0x10000690
1a0027b8:	1a00523c 	.word	0x1a00523c

1a0027bc <FSSDC_FatFs_DiskWrite>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
DRESULT FSSDC_FatFs_DiskWrite (const BYTE *buff, DWORD sector, UINT count)
{
1a0027bc:	b570      	push	{r4, r5, r6, lr}
	if (g_diskStats & STA_NOINIT)
1a0027be:	4b28      	ldr	r3, [pc, #160]	; (1a002860 <FSSDC_FatFs_DiskWrite+0xa4>)
1a0027c0:	781b      	ldrb	r3, [r3, #0]
1a0027c2:	f013 0f01 	tst.w	r3, #1
1a0027c6:	d12b      	bne.n	1a002820 <FSSDC_FatFs_DiskWrite+0x64>
1a0027c8:	4605      	mov	r5, r0
1a0027ca:	460e      	mov	r6, r1
1a0027cc:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
        return RES_NOTRDY;
    }
    
	if (g_diskStats & STA_PROTECT)
1a0027ce:	4b24      	ldr	r3, [pc, #144]	; (1a002860 <FSSDC_FatFs_DiskWrite+0xa4>)
1a0027d0:	781b      	ldrb	r3, [r3, #0]
1a0027d2:	f013 0f04 	tst.w	r3, #4
1a0027d6:	d128      	bne.n	1a00282a <FSSDC_FatFs_DiskWrite+0x6e>
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
        return RES_WRPRT;
    }

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a0027d8:	4b22      	ldr	r3, [pc, #136]	; (1a002864 <FSSDC_FatFs_DiskWrite+0xa8>)
1a0027da:	781b      	ldrb	r3, [r3, #0]
1a0027dc:	f013 0f08 	tst.w	r3, #8
1a0027e0:	d100      	bne.n	1a0027e4 <FSSDC_FatFs_DiskWrite+0x28>
1a0027e2:	024e      	lsls	r6, r1, #9

	if (count == 1) 
1a0027e4:	2c01      	cmp	r4, #1
1a0027e6:	d025      	beq.n	1a002834 <FSSDC_FatFs_DiskWrite+0x78>
			count = 0;
        }
	}
	else 
    {                                           /* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a0027e8:	f013 0f06 	tst.w	r3, #6
1a0027ec:	d130      	bne.n	1a002850 <FSSDC_FatFs_DiskWrite+0x94>
		if (send_cmd(CMD25, sector) == 0) 
1a0027ee:	4631      	mov	r1, r6
1a0027f0:	2059      	movs	r0, #89	; 0x59
1a0027f2:	f7ff fe21 	bl	1a002438 <send_cmd>
1a0027f6:	b968      	cbnz	r0, 1a002814 <FSSDC_FatFs_DiskWrite+0x58>
        {                                       /* WRITE_MULTIPLE_BLOCK */
			do 
            {
				if (!xmit_datablock(buff, 0xFC))
1a0027f8:	21fc      	movs	r1, #252	; 0xfc
1a0027fa:	4628      	mov	r0, r5
1a0027fc:	f7ff fe5e 	bl	1a0024bc <xmit_datablock>
1a002800:	b118      	cbz	r0, 1a00280a <FSSDC_FatFs_DiskWrite+0x4e>
                {
                    break;
                }
				buff += 512;
1a002802:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a002806:	3c01      	subs	r4, #1
1a002808:	d1f6      	bne.n	1a0027f8 <FSSDC_FatFs_DiskWrite+0x3c>
			if (!xmit_datablock(0, 0xFD))       /* STOP_TRAN token */
1a00280a:	21fd      	movs	r1, #253	; 0xfd
1a00280c:	2000      	movs	r0, #0
1a00280e:	f7ff fe55 	bl	1a0024bc <xmit_datablock>
1a002812:	b310      	cbz	r0, 1a00285a <FSSDC_FatFs_DiskWrite+0x9e>
            {
				count = 1;
            }
		}
	}
	deselect();
1a002814:	f7ff fdf2 	bl	1a0023fc <deselect>

	return count ? RES_ERROR : RES_OK;
1a002818:	1c20      	adds	r0, r4, #0
1a00281a:	bf18      	it	ne
1a00281c:	2001      	movne	r0, #1
}
1a00281e:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
1a002820:	4811      	ldr	r0, [pc, #68]	; (1a002868 <FSSDC_FatFs_DiskWrite+0xac>)
1a002822:	f000 f8c7 	bl	1a0029b4 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a002826:	2003      	movs	r0, #3
1a002828:	e7f9      	b.n	1a00281e <FSSDC_FatFs_DiskWrite+0x62>
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
1a00282a:	4810      	ldr	r0, [pc, #64]	; (1a00286c <FSSDC_FatFs_DiskWrite+0xb0>)
1a00282c:	f000 f8c2 	bl	1a0029b4 <Board_UARTPutSTR>
        return RES_WRPRT;
1a002830:	2002      	movs	r0, #2
1a002832:	e7f4      	b.n	1a00281e <FSSDC_FatFs_DiskWrite+0x62>
		if ((send_cmd(CMD24, sector) == 0)      /* WRITE_BLOCK */
1a002834:	4631      	mov	r1, r6
1a002836:	2058      	movs	r0, #88	; 0x58
1a002838:	f7ff fdfe 	bl	1a002438 <send_cmd>
1a00283c:	2800      	cmp	r0, #0
1a00283e:	d1e9      	bne.n	1a002814 <FSSDC_FatFs_DiskWrite+0x58>
                    && xmit_datablock(buff, 0xFE))
1a002840:	21fe      	movs	r1, #254	; 0xfe
1a002842:	4628      	mov	r0, r5
1a002844:	f7ff fe3a 	bl	1a0024bc <xmit_datablock>
1a002848:	2800      	cmp	r0, #0
1a00284a:	d0e3      	beq.n	1a002814 <FSSDC_FatFs_DiskWrite+0x58>
			count = 0;
1a00284c:	2400      	movs	r4, #0
1a00284e:	e7e1      	b.n	1a002814 <FSSDC_FatFs_DiskWrite+0x58>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a002850:	4621      	mov	r1, r4
1a002852:	20d7      	movs	r0, #215	; 0xd7
1a002854:	f7ff fdf0 	bl	1a002438 <send_cmd>
1a002858:	e7c9      	b.n	1a0027ee <FSSDC_FatFs_DiskWrite+0x32>
				count = 1;
1a00285a:	2401      	movs	r4, #1
1a00285c:	e7da      	b.n	1a002814 <FSSDC_FatFs_DiskWrite+0x58>
1a00285e:	bf00      	nop
1a002860:	10000001 	.word	0x10000001
1a002864:	10000690 	.word	0x10000690
1a002868:	1a005264 	.word	0x1a005264
1a00286c:	1a00528c 	.word	0x1a00528c

1a002870 <FSSDC_InitSPI>:
    WARNING: for card connectors without presence detection
    >>>> Only call this function when the card is inserted!
--------------------------------------------------------------------------------
*/
void FSSDC_InitSPI ()
{
1a002870:	b510      	push	{r4, lr}
        seems to work at mode 0 at the SPI mode. Thus the SPI mode 0 (CPHA=0, CPOL=0)
        is the proper setting to control MMC/SDC
        
        http://elm-chan.org/docs/mmc/mmc_e.html#spimode
    */
    Chip_SSP_Init       (LPC_SSP1);
1a002872:	4c13      	ldr	r4, [pc, #76]	; (1a0028c0 <FSSDC_InitSPI+0x50>)
1a002874:	4620      	mov	r0, r4
1a002876:	f000 fe21 	bl	1a0034bc <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00287a:	6863      	ldr	r3, [r4, #4]
1a00287c:	f023 0304 	bic.w	r3, r3, #4
1a002880:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002882:	6823      	ldr	r3, [r4, #0]
1a002884:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002888:	f043 0307 	orr.w	r3, r3, #7
1a00288c:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode   (LPC_SSP1, SSP_MODE_MASTER);
    Chip_SSP_SetFormat  (LPC_SSP1, SSP_BITS_8, SSP_FRAMEFORMAT_SPI,
                         SSP_CLOCK_CPHA0_CPOL0);
    FCLK_SLOW           ();
1a00288e:	4b0d      	ldr	r3, [pc, #52]	; (1a0028c4 <FSSDC_InitSPI+0x54>)
1a002890:	6819      	ldr	r1, [r3, #0]
1a002892:	4620      	mov	r0, r4
1a002894:	f000 fdf2 	bl	1a00347c <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002898:	6863      	ldr	r3, [r4, #4]
1a00289a:	f043 0302 	orr.w	r3, r3, #2
1a00289e:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable     (LPC_SSP1);
    
    // PLEASE NOTE: muxing and direction of CS signal on FSSDC_CS_{PIN/PORT}
    //              must be configured beforehand!
    deselect ();    
1a0028a0:	f7ff fdac 	bl	1a0023fc <deselect>
    
#ifndef FSSDC_SUPPORTS_HOT_INSERTION
    g_diskStats &= ~STA_NODISK;
1a0028a4:	4a08      	ldr	r2, [pc, #32]	; (1a0028c8 <FSSDC_InitSPI+0x58>)
1a0028a6:	7813      	ldrb	r3, [r2, #0]
1a0028a8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
1a0028ac:	7013      	strb	r3, [r2, #0]
    Board_UARTPutSTR ("FSSDC: [InitSPI] New card status: Inserted.\r\n");
1a0028ae:	4807      	ldr	r0, [pc, #28]	; (1a0028cc <FSSDC_InitSPI+0x5c>)
1a0028b0:	f000 f880 	bl	1a0029b4 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_Inserted);
1a0028b4:	2002      	movs	r0, #2
1a0028b6:	f7ff fd45 	bl	1a002344 <newCardStatus>
    FSSDC_FatFs_DiskInitialize ();
1a0028ba:	f7ff fe63 	bl	1a002584 <FSSDC_FatFs_DiskInitialize>
#endif
}
1a0028be:	bd10      	pop	{r4, pc}
1a0028c0:	400c5000 	.word	0x400c5000
1a0028c4:	10000008 	.word	0x10000008
1a0028c8:	10000001 	.word	0x10000001
1a0028cc:	1a0052b8 	.word	0x1a0052b8

1a0028d0 <FSSDC_Update>:
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */
void FSSDC_Update ()
{   
    if (Timer1)             /* 100Hz decrement timer */
1a0028d0:	4b08      	ldr	r3, [pc, #32]	; (1a0028f4 <FSSDC_Update+0x24>)
1a0028d2:	781b      	ldrb	r3, [r3, #0]
1a0028d4:	b123      	cbz	r3, 1a0028e0 <FSSDC_Update+0x10>
    {
        -- Timer1;
1a0028d6:	4a07      	ldr	r2, [pc, #28]	; (1a0028f4 <FSSDC_Update+0x24>)
1a0028d8:	7813      	ldrb	r3, [r2, #0]
1a0028da:	3b01      	subs	r3, #1
1a0028dc:	b2db      	uxtb	r3, r3
1a0028de:	7013      	strb	r3, [r2, #0]
    }
    
    if (Timer2)
1a0028e0:	4b05      	ldr	r3, [pc, #20]	; (1a0028f8 <FSSDC_Update+0x28>)
1a0028e2:	781b      	ldrb	r3, [r3, #0]
1a0028e4:	b123      	cbz	r3, 1a0028f0 <FSSDC_Update+0x20>
    {
        -- Timer2;
1a0028e6:	4a04      	ldr	r2, [pc, #16]	; (1a0028f8 <FSSDC_Update+0x28>)
1a0028e8:	7813      	ldrb	r3, [r2, #0]
1a0028ea:	3b01      	subs	r3, #1
1a0028ec:	b2db      	uxtb	r3, r3
1a0028ee:	7013      	strb	r3, [r2, #0]
			s &= ~STA_NODISK;

		g_diskStats = s;
	}
    #endif
}
1a0028f0:	4770      	bx	lr
1a0028f2:	bf00      	nop
1a0028f4:	10000691 	.word	0x10000691
1a0028f8:	10000692 	.word	0x10000692

1a0028fc <disk_timerproc>:
};
#endif

// Must be called once every 10 ms ideally from PendSV, not SysTickHandler!
void disk_timerproc (void)
{
1a0028fc:	b508      	push	{r3, lr}
    FSSDC_Update ();
1a0028fe:	f7ff ffe7 	bl	1a0028d0 <FSSDC_Update>
    #ifdef LPCUSBLIB_HOST_MASS_STORAGE
    FSUSB_Update ();
    #endif
}
1a002902:	bd08      	pop	{r3, pc}

1a002904 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{    
    switch (pdrv)
1a002904:	b108      	cbz	r0, 1a00290a <disk_status+0x6>
            #else
            break;
            #endif
    }

    return STA_NOINIT;
1a002906:	2001      	movs	r0, #1
}
1a002908:	4770      	bx	lr
{    
1a00290a:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskStatus ();
1a00290c:	f7ff fe34 	bl	1a002578 <FSSDC_FatFs_DiskStatus>
}
1a002910:	bd08      	pop	{r3, pc}

1a002912 <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
1a002912:	b108      	cbz	r0, 1a002918 <disk_initialize+0x6>
            #else
            break;
            #endif
    }
    
    return STA_NOINIT;
1a002914:	2001      	movs	r0, #1
}
1a002916:	4770      	bx	lr
{
1a002918:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskInitialize ();
1a00291a:	f7ff fe33 	bl	1a002584 <FSSDC_FatFs_DiskInitialize>
}
1a00291e:	bd08      	pop	{r3, pc}

1a002920 <disk_read>:
	BYTE *buff,         /* Data buffer to store read data */
	DWORD sector,       /* Start sector in LBA */
	UINT count          /* Number of sectors to read */
)
{
	if (!buff || !count) 
1a002920:	b141      	cbz	r1, 1a002934 <disk_read+0x14>
{
1a002922:	b510      	push	{r4, lr}
	if (!buff || !count) 
1a002924:	b143      	cbz	r3, 1a002938 <disk_read+0x18>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a002926:	b948      	cbnz	r0, 1a00293c <disk_read+0x1c>
1a002928:	4608      	mov	r0, r1
1a00292a:	4611      	mov	r1, r2
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskRead (buff, sector, count);
1a00292c:	461a      	mov	r2, r3
1a00292e:	f7ff ff03 	bl	1a002738 <FSSDC_FatFs_DiskRead>
            break;
            #endif
    }
    
    return RES_PARERR;
}
1a002932:	bd10      	pop	{r4, pc}
		return RES_PARERR;
1a002934:	2004      	movs	r0, #4
}
1a002936:	4770      	bx	lr
		return RES_PARERR;
1a002938:	2004      	movs	r0, #4
1a00293a:	e7fa      	b.n	1a002932 <disk_read+0x12>
    return RES_PARERR;
1a00293c:	2004      	movs	r0, #4
1a00293e:	e7f8      	b.n	1a002932 <disk_read+0x12>

1a002940 <disk_write>:
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
	if (!buff || !count)
1a002940:	b141      	cbz	r1, 1a002954 <disk_write+0x14>
{
1a002942:	b510      	push	{r4, lr}
	if (!buff || !count)
1a002944:	b143      	cbz	r3, 1a002958 <disk_write+0x18>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a002946:	b948      	cbnz	r0, 1a00295c <disk_write+0x1c>
1a002948:	4608      	mov	r0, r1
1a00294a:	4611      	mov	r1, r2
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskWrite (buff, sector, count);
1a00294c:	461a      	mov	r2, r3
1a00294e:	f7ff ff35 	bl	1a0027bc <FSSDC_FatFs_DiskWrite>
            break;
            #endif
    }
    
	return RES_PARERR;
}
1a002952:	bd10      	pop	{r4, pc}
		return RES_PARERR;
1a002954:	2004      	movs	r0, #4
}
1a002956:	4770      	bx	lr
		return RES_PARERR;
1a002958:	2004      	movs	r0, #4
1a00295a:	e7fa      	b.n	1a002952 <disk_write+0x12>
	return RES_PARERR;
1a00295c:	2004      	movs	r0, #4
1a00295e:	e7f8      	b.n	1a002952 <disk_write+0x12>

1a002960 <Board_Debug_Init>:
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
}


void Board_Debug_Init(void)
{
1a002960:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002962:	4c07      	ldr	r4, [pc, #28]	; (1a002980 <Board_Debug_Init+0x20>)
1a002964:	4620      	mov	r0, r4
1a002966:	f000 f8ab 	bl	1a002ac0 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00296a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00296e:	4620      	mov	r0, r4
1a002970:	f000 f8d0 	bl	1a002b14 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002974:	2303      	movs	r3, #3
1a002976:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002978:	2301      	movs	r3, #1
1a00297a:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a00297c:	bd10      	pop	{r4, pc}
1a00297e:	bf00      	nop
1a002980:	400c1000 	.word	0x400c1000

1a002984 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002984:	4b03      	ldr	r3, [pc, #12]	; (1a002994 <Board_UARTPutChar+0x10>)
1a002986:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002988:	f013 0f20 	tst.w	r3, #32
1a00298c:	d0fa      	beq.n	1a002984 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a00298e:	4b01      	ldr	r3, [pc, #4]	; (1a002994 <Board_UARTPutChar+0x10>)
1a002990:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002992:	4770      	bx	lr
1a002994:	400c1000 	.word	0x400c1000

1a002998 <Board_UARTGetChar>:
	return pUART->LSR;
1a002998:	4b05      	ldr	r3, [pc, #20]	; (1a0029b0 <Board_UARTGetChar+0x18>)
1a00299a:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a00299c:	f013 0f01 	tst.w	r3, #1
1a0029a0:	d003      	beq.n	1a0029aa <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0029a2:	4b03      	ldr	r3, [pc, #12]	; (1a0029b0 <Board_UARTGetChar+0x18>)
1a0029a4:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0029a6:	b2c0      	uxtb	r0, r0
1a0029a8:	4770      	bx	lr
    }
    return EOF;
1a0029aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0029ae:	4770      	bx	lr
1a0029b0:	400c1000 	.word	0x400c1000

1a0029b4 <Board_UARTPutSTR>:


void Board_UARTPutSTR(const char *str)
{
1a0029b4:	b510      	push	{r4, lr}
1a0029b6:	4604      	mov	r4, r0
    while (*str != '\0') {
1a0029b8:	e002      	b.n	1a0029c0 <Board_UARTPutSTR+0xc>
        Board_UARTPutChar(*str++);
1a0029ba:	3401      	adds	r4, #1
1a0029bc:	f7ff ffe2 	bl	1a002984 <Board_UARTPutChar>
    while (*str != '\0') {
1a0029c0:	7820      	ldrb	r0, [r4, #0]
1a0029c2:	2800      	cmp	r0, #0
1a0029c4:	d1f9      	bne.n	1a0029ba <Board_UARTPutSTR+0x6>
    }
}
1a0029c6:	bd10      	pop	{r4, pc}

1a0029c8 <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a0029c8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0029ca:	b2c0      	uxtb	r0, r0
1a0029cc:	f7ff ffda 	bl	1a002984 <Board_UARTPutChar>
}
1a0029d0:	bd08      	pop	{r3, pc}

1a0029d2 <__stdio_getchar>:

int __stdio_getchar() {
1a0029d2:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0029d4:	f7ff ffe0 	bl	1a002998 <Board_UARTGetChar>
}
1a0029d8:	bd08      	pop	{r3, pc}

1a0029da <__stdio_init>:

void __stdio_init() {
1a0029da:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0029dc:	f7ff ffc0 	bl	1a002960 <Board_Debug_Init>
1a0029e0:	bd08      	pop	{r3, pc}
1a0029e2:	Address 0x000000001a0029e2 is out of bounds.


1a0029e4 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0029e4:	2300      	movs	r3, #0
1a0029e6:	2b1c      	cmp	r3, #28
1a0029e8:	d812      	bhi.n	1a002a10 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0029ea:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0029ec:	4a09      	ldr	r2, [pc, #36]	; (1a002a14 <Board_SetupMuxing+0x30>)
1a0029ee:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0029f2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0029f6:	784a      	ldrb	r2, [r1, #1]
1a0029f8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0029fa:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0029fe:	4906      	ldr	r1, [pc, #24]	; (1a002a18 <Board_SetupMuxing+0x34>)
1a002a00:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002a04:	3301      	adds	r3, #1
1a002a06:	2b1c      	cmp	r3, #28
1a002a08:	d9f0      	bls.n	1a0029ec <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002a0e:	4770      	bx	lr
1a002a10:	4770      	bx	lr
1a002a12:	bf00      	nop
1a002a14:	1a0052f4 	.word	0x1a0052f4
1a002a18:	40086000 	.word	0x40086000

1a002a1c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002a1c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002a1e:	4a17      	ldr	r2, [pc, #92]	; (1a002a7c <Board_SetupClocking+0x60>)
1a002a20:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002a28:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002a2c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002a30:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002a38:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002a3c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002a40:	2201      	movs	r2, #1
1a002a42:	490f      	ldr	r1, [pc, #60]	; (1a002a80 <Board_SetupClocking+0x64>)
1a002a44:	2006      	movs	r0, #6
1a002a46:	f000 fba1 	bl	1a00318c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002a4a:	2400      	movs	r4, #0
1a002a4c:	b14c      	cbz	r4, 1a002a62 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002a4e:	4b0b      	ldr	r3, [pc, #44]	; (1a002a7c <Board_SetupClocking+0x60>)
1a002a50:	685a      	ldr	r2, [r3, #4]
1a002a52:	f022 020c 	bic.w	r2, r2, #12
1a002a56:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002a58:	685a      	ldr	r2, [r3, #4]
1a002a5a:	f042 0203 	orr.w	r2, r2, #3
1a002a5e:	605a      	str	r2, [r3, #4]
}
1a002a60:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002a62:	4808      	ldr	r0, [pc, #32]	; (1a002a84 <Board_SetupClocking+0x68>)
1a002a64:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002a68:	2301      	movs	r3, #1
1a002a6a:	788a      	ldrb	r2, [r1, #2]
1a002a6c:	7849      	ldrb	r1, [r1, #1]
1a002a6e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002a72:	f000 fae7 	bl	1a003044 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002a76:	3401      	adds	r4, #1
1a002a78:	e7e8      	b.n	1a002a4c <Board_SetupClocking+0x30>
1a002a7a:	bf00      	nop
1a002a7c:	40043000 	.word	0x40043000
1a002a80:	0c28cb00 	.word	0x0c28cb00
1a002a84:	1a0052f0 	.word	0x1a0052f0

1a002a88 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002a88:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002a8a:	f7ff ffab 	bl	1a0029e4 <Board_SetupMuxing>
    Board_SetupClocking();
1a002a8e:	f7ff ffc5 	bl	1a002a1c <Board_SetupClocking>
}
1a002a92:	bd08      	pop	{r3, pc}

1a002a94 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002a94:	4b09      	ldr	r3, [pc, #36]	; (1a002abc <Chip_UART_GetIndex+0x28>)
1a002a96:	4298      	cmp	r0, r3
1a002a98:	d009      	beq.n	1a002aae <Chip_UART_GetIndex+0x1a>
1a002a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002a9e:	4298      	cmp	r0, r3
1a002aa0:	d007      	beq.n	1a002ab2 <Chip_UART_GetIndex+0x1e>
1a002aa2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002aa6:	4298      	cmp	r0, r3
1a002aa8:	d005      	beq.n	1a002ab6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002aaa:	2000      	movs	r0, #0
1a002aac:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002aae:	2002      	movs	r0, #2
1a002ab0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002ab2:	2003      	movs	r0, #3
1a002ab4:	4770      	bx	lr
			return 1;
1a002ab6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002ab8:	4770      	bx	lr
1a002aba:	bf00      	nop
1a002abc:	400c1000 	.word	0x400c1000

1a002ac0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002ac0:	b530      	push	{r4, r5, lr}
1a002ac2:	b083      	sub	sp, #12
1a002ac4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002ac6:	f7ff ffe5 	bl	1a002a94 <Chip_UART_GetIndex>
1a002aca:	2301      	movs	r3, #1
1a002acc:	461a      	mov	r2, r3
1a002ace:	4619      	mov	r1, r3
1a002ad0:	4d0e      	ldr	r5, [pc, #56]	; (1a002b0c <Chip_UART_Init+0x4c>)
1a002ad2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002ad6:	f000 fafb 	bl	1a0030d0 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002ada:	2307      	movs	r3, #7
1a002adc:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002ade:	2300      	movs	r3, #0
1a002ae0:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002ae2:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002ae4:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002ae6:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002ae8:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002aea:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002aec:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002aee:	4b08      	ldr	r3, [pc, #32]	; (1a002b10 <Chip_UART_Init+0x50>)
1a002af0:	429c      	cmp	r4, r3
1a002af2:	d006      	beq.n	1a002b02 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002af4:	2303      	movs	r3, #3
1a002af6:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002af8:	2310      	movs	r3, #16
1a002afa:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002afc:	9b01      	ldr	r3, [sp, #4]
}
1a002afe:	b003      	add	sp, #12
1a002b00:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002b02:	2300      	movs	r3, #0
1a002b04:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002b06:	69a3      	ldr	r3, [r4, #24]
1a002b08:	9301      	str	r3, [sp, #4]
1a002b0a:	e7f3      	b.n	1a002af4 <Chip_UART_Init+0x34>
1a002b0c:	1a005370 	.word	0x1a005370
1a002b10:	40082000 	.word	0x40082000

1a002b14 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002b18:	b083      	sub	sp, #12
1a002b1a:	4683      	mov	fp, r0
1a002b1c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002b1e:	f7ff ffb9 	bl	1a002a94 <Chip_UART_GetIndex>
1a002b22:	4b35      	ldr	r3, [pc, #212]	; (1a002bf8 <Chip_UART_SetBaudFDR+0xe4>)
1a002b24:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002b28:	f000 fb0a 	bl	1a003140 <Chip_Clock_GetRate>
1a002b2c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002b2e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002b32:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002b34:	2300      	movs	r3, #0
1a002b36:	9301      	str	r3, [sp, #4]
1a002b38:	46a2      	mov	sl, r4
1a002b3a:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002b3c:	e02a      	b.n	1a002b94 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002b3e:	4242      	negs	r2, r0
				div ++;
1a002b40:	1c4b      	adds	r3, r1, #1
1a002b42:	e017      	b.n	1a002b74 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002b44:	b30a      	cbz	r2, 1a002b8a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002b46:	4617      	mov	r7, r2
			sd = d;
1a002b48:	9501      	str	r5, [sp, #4]
			sm = m;
1a002b4a:	46a2      	mov	sl, r4
			sdiv = div;
1a002b4c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a002b4e:	3501      	adds	r5, #1
1a002b50:	42ac      	cmp	r4, r5
1a002b52:	d91e      	bls.n	1a002b92 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002b54:	0933      	lsrs	r3, r6, #4
1a002b56:	0730      	lsls	r0, r6, #28
1a002b58:	fba4 0100 	umull	r0, r1, r4, r0
1a002b5c:	fb04 1103 	mla	r1, r4, r3, r1
1a002b60:	1962      	adds	r2, r4, r5
1a002b62:	fb08 f202 	mul.w	r2, r8, r2
1a002b66:	2300      	movs	r3, #0
1a002b68:	f000 fe54 	bl	1a003814 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002b6c:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002b6e:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002b70:	2800      	cmp	r0, #0
1a002b72:	dbe4      	blt.n	1a002b3e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002b74:	4297      	cmp	r7, r2
1a002b76:	d3ea      	bcc.n	1a002b4e <Chip_UART_SetBaudFDR+0x3a>
1a002b78:	2b00      	cmp	r3, #0
1a002b7a:	d0e8      	beq.n	1a002b4e <Chip_UART_SetBaudFDR+0x3a>
1a002b7c:	0c19      	lsrs	r1, r3, #16
1a002b7e:	d1e6      	bne.n	1a002b4e <Chip_UART_SetBaudFDR+0x3a>
1a002b80:	2b02      	cmp	r3, #2
1a002b82:	d8df      	bhi.n	1a002b44 <Chip_UART_SetBaudFDR+0x30>
1a002b84:	2d00      	cmp	r5, #0
1a002b86:	d0dd      	beq.n	1a002b44 <Chip_UART_SetBaudFDR+0x30>
1a002b88:	e7e1      	b.n	1a002b4e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002b8a:	4617      	mov	r7, r2
			sd = d;
1a002b8c:	9501      	str	r5, [sp, #4]
			sm = m;
1a002b8e:	46a2      	mov	sl, r4
			sdiv = div;
1a002b90:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002b92:	3401      	adds	r4, #1
1a002b94:	b11f      	cbz	r7, 1a002b9e <Chip_UART_SetBaudFDR+0x8a>
1a002b96:	2c0f      	cmp	r4, #15
1a002b98:	d801      	bhi.n	1a002b9e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002b9a:	2500      	movs	r5, #0
1a002b9c:	e7d8      	b.n	1a002b50 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002b9e:	f1b9 0f00 	cmp.w	r9, #0
1a002ba2:	d024      	beq.n	1a002bee <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002ba4:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002bac:	f8cb 300c 	str.w	r3, [fp, #12]
1a002bb0:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002bb4:	f8cb 3000 	str.w	r3, [fp]
1a002bb8:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002bbc:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002bc0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002bc8:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002bcc:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002bd0:	b2db      	uxtb	r3, r3
1a002bd2:	9901      	ldr	r1, [sp, #4]
1a002bd4:	f001 020f 	and.w	r2, r1, #15
1a002bd8:	4313      	orrs	r3, r2
1a002bda:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002bde:	0933      	lsrs	r3, r6, #4
1a002be0:	fb0a f303 	mul.w	r3, sl, r3
1a002be4:	448a      	add	sl, r1
1a002be6:	fb09 f90a 	mul.w	r9, r9, sl
1a002bea:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002bee:	4648      	mov	r0, r9
1a002bf0:	b003      	add	sp, #12
1a002bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002bf6:	bf00      	nop
1a002bf8:	1a005368 	.word	0x1a005368

1a002bfc <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002bfc:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002bfe:	680b      	ldr	r3, [r1, #0]
1a002c00:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002c04:	d002      	beq.n	1a002c0c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002c0a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002c0c:	4607      	mov	r7, r0
1a002c0e:	2501      	movs	r5, #1
1a002c10:	e03b      	b.n	1a002c8a <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002c12:	694b      	ldr	r3, [r1, #20]
1a002c14:	fb03 f302 	mul.w	r3, r3, r2
1a002c18:	fbb3 f3f5 	udiv	r3, r3, r5
1a002c1c:	e014      	b.n	1a002c48 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002c1e:	461c      	mov	r4, r3
1a002c20:	e020      	b.n	1a002c64 <pll_calc_divs+0x68>
		return -val;
1a002c22:	f1cc 0c00 	rsb	ip, ip, #0
1a002c26:	e020      	b.n	1a002c6a <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002c28:	3201      	adds	r2, #1
1a002c2a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002c2e:	dc26      	bgt.n	1a002c7e <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002c30:	680c      	ldr	r4, [r1, #0]
1a002c32:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002c36:	d0ec      	beq.n	1a002c12 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002c38:	1c73      	adds	r3, r6, #1
1a002c3a:	fa02 fc03 	lsl.w	ip, r2, r3
1a002c3e:	694b      	ldr	r3, [r1, #20]
1a002c40:	fb03 f30c 	mul.w	r3, r3, ip
1a002c44:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002c48:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a002c98 <pll_calc_divs+0x9c>
1a002c4c:	4563      	cmp	r3, ip
1a002c4e:	d9eb      	bls.n	1a002c28 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002c50:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a002c9c <pll_calc_divs+0xa0>
1a002c54:	4563      	cmp	r3, ip
1a002c56:	d812      	bhi.n	1a002c7e <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002c58:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002c5c:	d1df      	bne.n	1a002c1e <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a002c5e:	1c74      	adds	r4, r6, #1
1a002c60:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a002c64:	ebb0 0c04 	subs.w	ip, r0, r4
1a002c68:	d4db      	bmi.n	1a002c22 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a002c6a:	4567      	cmp	r7, ip
1a002c6c:	d9dc      	bls.n	1a002c28 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002c6e:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002c70:	1c77      	adds	r7, r6, #1
1a002c72:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002c74:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002c76:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002c78:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002c7a:	4667      	mov	r7, ip
1a002c7c:	e7d4      	b.n	1a002c28 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a002c7e:	3601      	adds	r6, #1
1a002c80:	2e03      	cmp	r6, #3
1a002c82:	dc01      	bgt.n	1a002c88 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a002c84:	2201      	movs	r2, #1
1a002c86:	e7d0      	b.n	1a002c2a <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a002c88:	3501      	adds	r5, #1
1a002c8a:	2d04      	cmp	r5, #4
1a002c8c:	dc01      	bgt.n	1a002c92 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a002c8e:	2600      	movs	r6, #0
1a002c90:	e7f6      	b.n	1a002c80 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a002c92:	bcf0      	pop	{r4, r5, r6, r7}
1a002c94:	4770      	bx	lr
1a002c96:	bf00      	nop
1a002c98:	094c5eff 	.word	0x094c5eff
1a002c9c:	1312d000 	.word	0x1312d000

1a002ca0 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002ca2:	b099      	sub	sp, #100	; 0x64
1a002ca4:	4605      	mov	r5, r0
1a002ca6:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002ca8:	225c      	movs	r2, #92	; 0x5c
1a002caa:	2100      	movs	r1, #0
1a002cac:	a801      	add	r0, sp, #4
1a002cae:	f000 ff60 	bl	1a003b72 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002cb2:	2380      	movs	r3, #128	; 0x80
1a002cb4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002cb6:	6963      	ldr	r3, [r4, #20]
1a002cb8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002cba:	7923      	ldrb	r3, [r4, #4]
1a002cbc:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002cc0:	4669      	mov	r1, sp
1a002cc2:	4628      	mov	r0, r5
1a002cc4:	f7ff ff9a 	bl	1a002bfc <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002cc8:	9b06      	ldr	r3, [sp, #24]
1a002cca:	42ab      	cmp	r3, r5
1a002ccc:	d027      	beq.n	1a002d1e <pll_get_frac+0x7e>
	if (val < 0)
1a002cce:	1aeb      	subs	r3, r5, r3
1a002cd0:	d42e      	bmi.n	1a002d30 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002cd2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002cda:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002cdc:	6963      	ldr	r3, [r4, #20]
1a002cde:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002ce0:	7923      	ldrb	r3, [r4, #4]
1a002ce2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002ce6:	a910      	add	r1, sp, #64	; 0x40
1a002ce8:	4628      	mov	r0, r5
1a002cea:	f7ff ff87 	bl	1a002bfc <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002cee:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002cf0:	42ab      	cmp	r3, r5
1a002cf2:	d01f      	beq.n	1a002d34 <pll_get_frac+0x94>
	if (val < 0)
1a002cf4:	1aeb      	subs	r3, r5, r3
1a002cf6:	d425      	bmi.n	1a002d44 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002cf8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002cfa:	4b2b      	ldr	r3, [pc, #172]	; (1a002da8 <pll_get_frac+0x108>)
1a002cfc:	429d      	cmp	r5, r3
1a002cfe:	d923      	bls.n	1a002d48 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002d02:	1aed      	subs	r5, r5, r3
1a002d04:	d433      	bmi.n	1a002d6e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002d06:	42ae      	cmp	r6, r5
1a002d08:	dc3b      	bgt.n	1a002d82 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002d0a:	42be      	cmp	r6, r7
1a002d0c:	dc31      	bgt.n	1a002d72 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002d0e:	466d      	mov	r5, sp
1a002d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002d14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002d1c:	e006      	b.n	1a002d2c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002d1e:	466d      	mov	r5, sp
1a002d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002d24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002d28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002d2c:	b019      	add	sp, #100	; 0x64
1a002d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002d30:	425b      	negs	r3, r3
1a002d32:	e7ce      	b.n	1a002cd2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002d34:	ad10      	add	r5, sp, #64	; 0x40
1a002d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002d3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002d3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002d42:	e7f3      	b.n	1a002d2c <pll_get_frac+0x8c>
		return -val;
1a002d44:	425b      	negs	r3, r3
1a002d46:	e7d7      	b.n	1a002cf8 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002d48:	2340      	movs	r3, #64	; 0x40
1a002d4a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002d4c:	6963      	ldr	r3, [r4, #20]
1a002d4e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002d50:	a908      	add	r1, sp, #32
1a002d52:	4628      	mov	r0, r5
1a002d54:	f7ff ff52 	bl	1a002bfc <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002d58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002d5a:	42ab      	cmp	r3, r5
1a002d5c:	d1d0      	bne.n	1a002d00 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002d5e:	ad08      	add	r5, sp, #32
1a002d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002d64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002d6c:	e7de      	b.n	1a002d2c <pll_get_frac+0x8c>
		return -val;
1a002d6e:	426d      	negs	r5, r5
1a002d70:	e7c9      	b.n	1a002d06 <pll_get_frac+0x66>
			*ppll = pll[2];
1a002d72:	ad10      	add	r5, sp, #64	; 0x40
1a002d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002d78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002d7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002d80:	e7d4      	b.n	1a002d2c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002d82:	42af      	cmp	r7, r5
1a002d84:	db07      	blt.n	1a002d96 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002d86:	ad08      	add	r5, sp, #32
1a002d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002d8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002d90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002d94:	e7ca      	b.n	1a002d2c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002d96:	ad10      	add	r5, sp, #64	; 0x40
1a002d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002d9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002da4:	e7c2      	b.n	1a002d2c <pll_get_frac+0x8c>
1a002da6:	bf00      	nop
1a002da8:	068e7780 	.word	0x068e7780

1a002dac <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002dac:	b430      	push	{r4, r5}
1a002dae:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002db0:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002db2:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002db4:	e000      	b.n	1a002db8 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002db6:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002db8:	281c      	cmp	r0, #28
1a002dba:	d118      	bne.n	1a002dee <Chip_Clock_FindBaseClock+0x42>
1a002dbc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002dc0:	0051      	lsls	r1, r2, #1
1a002dc2:	4a0c      	ldr	r2, [pc, #48]	; (1a002df4 <Chip_Clock_FindBaseClock+0x48>)
1a002dc4:	440a      	add	r2, r1
1a002dc6:	7914      	ldrb	r4, [r2, #4]
1a002dc8:	4284      	cmp	r4, r0
1a002dca:	d010      	beq.n	1a002dee <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002dcc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002dd0:	004a      	lsls	r2, r1, #1
1a002dd2:	4908      	ldr	r1, [pc, #32]	; (1a002df4 <Chip_Clock_FindBaseClock+0x48>)
1a002dd4:	5a8a      	ldrh	r2, [r1, r2]
1a002dd6:	42aa      	cmp	r2, r5
1a002dd8:	d8ed      	bhi.n	1a002db6 <Chip_Clock_FindBaseClock+0xa>
1a002dda:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002dde:	0051      	lsls	r1, r2, #1
1a002de0:	4a04      	ldr	r2, [pc, #16]	; (1a002df4 <Chip_Clock_FindBaseClock+0x48>)
1a002de2:	440a      	add	r2, r1
1a002de4:	8852      	ldrh	r2, [r2, #2]
1a002de6:	42aa      	cmp	r2, r5
1a002de8:	d3e5      	bcc.n	1a002db6 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002dea:	4620      	mov	r0, r4
1a002dec:	e7e4      	b.n	1a002db8 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002dee:	bc30      	pop	{r4, r5}
1a002df0:	4770      	bx	lr
1a002df2:	bf00      	nop
1a002df4:	1a005384 	.word	0x1a005384

1a002df8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002df8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002dfe:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002e00:	4a0d      	ldr	r2, [pc, #52]	; (1a002e38 <Chip_Clock_EnableCrystal+0x40>)
1a002e02:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002e04:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002e08:	6992      	ldr	r2, [r2, #24]
1a002e0a:	428a      	cmp	r2, r1
1a002e0c:	d001      	beq.n	1a002e12 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002e0e:	4a0a      	ldr	r2, [pc, #40]	; (1a002e38 <Chip_Clock_EnableCrystal+0x40>)
1a002e10:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002e12:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002e16:	4a09      	ldr	r2, [pc, #36]	; (1a002e3c <Chip_Clock_EnableCrystal+0x44>)
1a002e18:	6811      	ldr	r1, [r2, #0]
1a002e1a:	4a09      	ldr	r2, [pc, #36]	; (1a002e40 <Chip_Clock_EnableCrystal+0x48>)
1a002e1c:	4291      	cmp	r1, r2
1a002e1e:	d901      	bls.n	1a002e24 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002e20:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002e24:	4a04      	ldr	r2, [pc, #16]	; (1a002e38 <Chip_Clock_EnableCrystal+0x40>)
1a002e26:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002e28:	9b01      	ldr	r3, [sp, #4]
1a002e2a:	1e5a      	subs	r2, r3, #1
1a002e2c:	9201      	str	r2, [sp, #4]
1a002e2e:	2b00      	cmp	r3, #0
1a002e30:	d1fa      	bne.n	1a002e28 <Chip_Clock_EnableCrystal+0x30>
}
1a002e32:	b002      	add	sp, #8
1a002e34:	4770      	bx	lr
1a002e36:	bf00      	nop
1a002e38:	40050000 	.word	0x40050000
1a002e3c:	1a0052ec 	.word	0x1a0052ec
1a002e40:	01312cff 	.word	0x01312cff

1a002e44 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002e44:	3012      	adds	r0, #18
1a002e46:	4b05      	ldr	r3, [pc, #20]	; (1a002e5c <Chip_Clock_GetDividerSource+0x18>)
1a002e48:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002e4c:	f010 0f01 	tst.w	r0, #1
1a002e50:	d102      	bne.n	1a002e58 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002e52:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002e56:	4770      	bx	lr
		return CLKINPUT_PD;
1a002e58:	2011      	movs	r0, #17
}
1a002e5a:	4770      	bx	lr
1a002e5c:	40050000 	.word	0x40050000

1a002e60 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002e60:	f100 0212 	add.w	r2, r0, #18
1a002e64:	4b03      	ldr	r3, [pc, #12]	; (1a002e74 <Chip_Clock_GetDividerDivisor+0x14>)
1a002e66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002e6a:	4b03      	ldr	r3, [pc, #12]	; (1a002e78 <Chip_Clock_GetDividerDivisor+0x18>)
1a002e6c:	5c18      	ldrb	r0, [r3, r0]
}
1a002e6e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002e72:	4770      	bx	lr
1a002e74:	40050000 	.word	0x40050000
1a002e78:	1a00537c 	.word	0x1a00537c

1a002e7c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002e7c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002e7e:	2810      	cmp	r0, #16
1a002e80:	d80a      	bhi.n	1a002e98 <Chip_Clock_GetClockInputHz+0x1c>
1a002e82:	e8df f000 	tbb	[pc, r0]
1a002e86:	0b42      	.short	0x0b42
1a002e88:	091f160d 	.word	0x091f160d
1a002e8c:	2b282522 	.word	0x2b282522
1a002e90:	322e0909 	.word	0x322e0909
1a002e94:	3a36      	.short	0x3a36
1a002e96:	3e          	.byte	0x3e
1a002e97:	00          	.byte	0x00
	uint32_t rate = 0;
1a002e98:	2000      	movs	r0, #0
1a002e9a:	e038      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002e9c:	481e      	ldr	r0, [pc, #120]	; (1a002f18 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002e9e:	e036      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002ea0:	4b1e      	ldr	r3, [pc, #120]	; (1a002f1c <Chip_Clock_GetClockInputHz+0xa0>)
1a002ea2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002ea6:	f003 0307 	and.w	r3, r3, #7
1a002eaa:	2b04      	cmp	r3, #4
1a002eac:	d130      	bne.n	1a002f10 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a002eae:	2000      	movs	r0, #0
1a002eb0:	e02d      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002eb2:	4b1a      	ldr	r3, [pc, #104]	; (1a002f1c <Chip_Clock_GetClockInputHz+0xa0>)
1a002eb4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002eb8:	f003 0307 	and.w	r3, r3, #7
1a002ebc:	2b04      	cmp	r3, #4
1a002ebe:	d029      	beq.n	1a002f14 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002ec0:	4817      	ldr	r0, [pc, #92]	; (1a002f20 <Chip_Clock_GetClockInputHz+0xa4>)
1a002ec2:	e024      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002ec4:	4b17      	ldr	r3, [pc, #92]	; (1a002f24 <Chip_Clock_GetClockInputHz+0xa8>)
1a002ec6:	6818      	ldr	r0, [r3, #0]
		break;
1a002ec8:	e021      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002eca:	4b17      	ldr	r3, [pc, #92]	; (1a002f28 <Chip_Clock_GetClockInputHz+0xac>)
1a002ecc:	6818      	ldr	r0, [r3, #0]
		break;
1a002ece:	e01e      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002ed0:	4b16      	ldr	r3, [pc, #88]	; (1a002f2c <Chip_Clock_GetClockInputHz+0xb0>)
1a002ed2:	6818      	ldr	r0, [r3, #0]
		break;
1a002ed4:	e01b      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002ed6:	4b15      	ldr	r3, [pc, #84]	; (1a002f2c <Chip_Clock_GetClockInputHz+0xb0>)
1a002ed8:	6858      	ldr	r0, [r3, #4]
		break;
1a002eda:	e018      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002edc:	f000 f86a 	bl	1a002fb4 <Chip_Clock_GetMainPLLHz>
		break;
1a002ee0:	e015      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002ee2:	2100      	movs	r1, #0
1a002ee4:	f000 f89c 	bl	1a003020 <Chip_Clock_GetDivRate>
		break;
1a002ee8:	e011      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002eea:	2101      	movs	r1, #1
1a002eec:	f000 f898 	bl	1a003020 <Chip_Clock_GetDivRate>
		break;
1a002ef0:	e00d      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002ef2:	2102      	movs	r1, #2
1a002ef4:	f000 f894 	bl	1a003020 <Chip_Clock_GetDivRate>
		break;
1a002ef8:	e009      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002efa:	2103      	movs	r1, #3
1a002efc:	f000 f890 	bl	1a003020 <Chip_Clock_GetDivRate>
		break;
1a002f00:	e005      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002f02:	2104      	movs	r1, #4
1a002f04:	f000 f88c 	bl	1a003020 <Chip_Clock_GetDivRate>
		break;
1a002f08:	e001      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a002f0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002f0e:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a002f10:	4803      	ldr	r0, [pc, #12]	; (1a002f20 <Chip_Clock_GetClockInputHz+0xa4>)
1a002f12:	e7fc      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a002f14:	4806      	ldr	r0, [pc, #24]	; (1a002f30 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002f16:	e7fa      	b.n	1a002f0e <Chip_Clock_GetClockInputHz+0x92>
1a002f18:	00b71b00 	.word	0x00b71b00
1a002f1c:	40043000 	.word	0x40043000
1a002f20:	017d7840 	.word	0x017d7840
1a002f24:	1a0052e8 	.word	0x1a0052e8
1a002f28:	1a0052ec 	.word	0x1a0052ec
1a002f2c:	10000698 	.word	0x10000698
1a002f30:	02faf080 	.word	0x02faf080

1a002f34 <Chip_Clock_CalcMainPLLValue>:
{
1a002f34:	b538      	push	{r3, r4, r5, lr}
1a002f36:	4605      	mov	r5, r0
1a002f38:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002f3a:	7908      	ldrb	r0, [r1, #4]
1a002f3c:	f7ff ff9e 	bl	1a002e7c <Chip_Clock_GetClockInputHz>
1a002f40:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002f42:	4b19      	ldr	r3, [pc, #100]	; (1a002fa8 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002f44:	442b      	add	r3, r5
1a002f46:	4a19      	ldr	r2, [pc, #100]	; (1a002fac <Chip_Clock_CalcMainPLLValue+0x78>)
1a002f48:	4293      	cmp	r3, r2
1a002f4a:	d821      	bhi.n	1a002f90 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002f4c:	b318      	cbz	r0, 1a002f96 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002f4e:	2380      	movs	r3, #128	; 0x80
1a002f50:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002f52:	2300      	movs	r3, #0
1a002f54:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002f56:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002f58:	fbb5 f3f0 	udiv	r3, r5, r0
1a002f5c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002f5e:	4a14      	ldr	r2, [pc, #80]	; (1a002fb0 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002f60:	4295      	cmp	r5, r2
1a002f62:	d903      	bls.n	1a002f6c <Chip_Clock_CalcMainPLLValue+0x38>
1a002f64:	fb03 f000 	mul.w	r0, r3, r0
1a002f68:	42a8      	cmp	r0, r5
1a002f6a:	d007      	beq.n	1a002f7c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002f6c:	4621      	mov	r1, r4
1a002f6e:	4628      	mov	r0, r5
1a002f70:	f7ff fe96 	bl	1a002ca0 <pll_get_frac>
		if (!ppll->nsel) {
1a002f74:	68a3      	ldr	r3, [r4, #8]
1a002f76:	b18b      	cbz	r3, 1a002f9c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002f78:	3b01      	subs	r3, #1
1a002f7a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002f7c:	6923      	ldr	r3, [r4, #16]
1a002f7e:	b183      	cbz	r3, 1a002fa2 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002f80:	68e2      	ldr	r2, [r4, #12]
1a002f82:	b10a      	cbz	r2, 1a002f88 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002f84:	3a01      	subs	r2, #1
1a002f86:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002f88:	3b01      	subs	r3, #1
1a002f8a:	6123      	str	r3, [r4, #16]
	return 0;
1a002f8c:	2000      	movs	r0, #0
}
1a002f8e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002f94:	e7fb      	b.n	1a002f8e <Chip_Clock_CalcMainPLLValue+0x5a>
1a002f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002f9a:	e7f8      	b.n	1a002f8e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002fa0:	e7f5      	b.n	1a002f8e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002fa6:	e7f2      	b.n	1a002f8e <Chip_Clock_CalcMainPLLValue+0x5a>
1a002fa8:	ff6b3a10 	.word	0xff6b3a10
1a002fac:	0b940510 	.word	0x0b940510
1a002fb0:	094c5eff 	.word	0x094c5eff

1a002fb4 <Chip_Clock_GetMainPLLHz>:
{
1a002fb4:	b530      	push	{r4, r5, lr}
1a002fb6:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002fb8:	4d17      	ldr	r5, [pc, #92]	; (1a003018 <Chip_Clock_GetMainPLLHz+0x64>)
1a002fba:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002fbc:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002fc0:	f7ff ff5c 	bl	1a002e7c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002fc4:	4b15      	ldr	r3, [pc, #84]	; (1a00301c <Chip_Clock_GetMainPLLHz+0x68>)
1a002fc6:	681b      	ldr	r3, [r3, #0]
1a002fc8:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002fca:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002fcc:	f013 0f01 	tst.w	r3, #1
1a002fd0:	d01f      	beq.n	1a003012 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a002fd2:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002fd6:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002fda:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002fde:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002fe2:	3301      	adds	r3, #1
	n = nsel + 1;
1a002fe4:	3201      	adds	r2, #1
	p = ptab[psel];
1a002fe6:	f10d 0c08 	add.w	ip, sp, #8
1a002fea:	4461      	add	r1, ip
1a002fec:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002ff0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002ff4:	d108      	bne.n	1a003008 <Chip_Clock_GetMainPLLHz+0x54>
1a002ff6:	b93d      	cbnz	r5, 1a003008 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002ff8:	0049      	lsls	r1, r1, #1
1a002ffa:	fbb3 f3f1 	udiv	r3, r3, r1
1a002ffe:	fbb0 f0f2 	udiv	r0, r0, r2
1a003002:	fb00 f003 	mul.w	r0, r0, r3
1a003006:	e005      	b.n	1a003014 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a003008:	fbb0 f0f2 	udiv	r0, r0, r2
1a00300c:	fb03 f000 	mul.w	r0, r3, r0
1a003010:	e000      	b.n	1a003014 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a003012:	2000      	movs	r0, #0
}
1a003014:	b003      	add	sp, #12
1a003016:	bd30      	pop	{r4, r5, pc}
1a003018:	40050000 	.word	0x40050000
1a00301c:	1a005378 	.word	0x1a005378

1a003020 <Chip_Clock_GetDivRate>:
{
1a003020:	b538      	push	{r3, r4, r5, lr}
1a003022:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a003024:	4608      	mov	r0, r1
1a003026:	f7ff ff0d 	bl	1a002e44 <Chip_Clock_GetDividerSource>
1a00302a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a00302c:	4620      	mov	r0, r4
1a00302e:	f7ff ff17 	bl	1a002e60 <Chip_Clock_GetDividerDivisor>
1a003032:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a003034:	4628      	mov	r0, r5
1a003036:	f7ff ff21 	bl	1a002e7c <Chip_Clock_GetClockInputHz>
1a00303a:	3401      	adds	r4, #1
}
1a00303c:	fbb0 f0f4 	udiv	r0, r0, r4
1a003040:	bd38      	pop	{r3, r4, r5, pc}
1a003042:	Address 0x000000001a003042 is out of bounds.


1a003044 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003044:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a003046:	f100 0416 	add.w	r4, r0, #22
1a00304a:	00a4      	lsls	r4, r4, #2
1a00304c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003050:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a003054:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a003056:	281b      	cmp	r0, #27
1a003058:	d813      	bhi.n	1a003082 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00305a:	2911      	cmp	r1, #17
1a00305c:	d01a      	beq.n	1a003094 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00305e:	4d0e      	ldr	r5, [pc, #56]	; (1a003098 <Chip_Clock_SetBaseClock+0x54>)
1a003060:	4025      	ands	r5, r4

			if (autoblocken) {
1a003062:	b10a      	cbz	r2, 1a003068 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a003064:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003068:	b10b      	cbz	r3, 1a00306e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00306a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00306e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003072:	3016      	adds	r0, #22
1a003074:	0080      	lsls	r0, r0, #2
1a003076:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00307a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00307e:	6045      	str	r5, [r0, #4]
1a003080:	e008      	b.n	1a003094 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003082:	f044 0401 	orr.w	r4, r4, #1
1a003086:	3016      	adds	r0, #22
1a003088:	0080      	lsls	r0, r0, #2
1a00308a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00308e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003092:	6044      	str	r4, [r0, #4]
	}
}
1a003094:	bc30      	pop	{r4, r5}
1a003096:	4770      	bx	lr
1a003098:	e0fff7fe 	.word	0xe0fff7fe

1a00309c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00309c:	281b      	cmp	r0, #27
1a00309e:	d80c      	bhi.n	1a0030ba <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0030a0:	3016      	adds	r0, #22
1a0030a2:	0080      	lsls	r0, r0, #2
1a0030a4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0030a8:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0030ac:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0030ae:	f010 0f01 	tst.w	r0, #1
1a0030b2:	d104      	bne.n	1a0030be <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0030b4:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0030b8:	4770      	bx	lr
		return CLKINPUT_PD;
1a0030ba:	2011      	movs	r0, #17
1a0030bc:	4770      	bx	lr
		return CLKINPUT_PD;
1a0030be:	2011      	movs	r0, #17
}
1a0030c0:	4770      	bx	lr

1a0030c2 <Chip_Clock_GetBaseClocktHz>:
{
1a0030c2:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0030c4:	f7ff ffea 	bl	1a00309c <Chip_Clock_GetBaseClock>
1a0030c8:	f7ff fed8 	bl	1a002e7c <Chip_Clock_GetClockInputHz>
}
1a0030cc:	bd08      	pop	{r3, pc}
1a0030ce:	Address 0x000000001a0030ce is out of bounds.


1a0030d0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0030d0:	b969      	cbnz	r1, 1a0030ee <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a0030d2:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0030d4:	b10a      	cbz	r2, 1a0030da <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0030d6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0030da:	2b02      	cmp	r3, #2
1a0030dc:	d009      	beq.n	1a0030f2 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0030de:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0030e2:	d209      	bcs.n	1a0030f8 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0030e4:	3020      	adds	r0, #32
1a0030e6:	4b07      	ldr	r3, [pc, #28]	; (1a003104 <Chip_Clock_EnableOpts+0x34>)
1a0030e8:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0030ec:	4770      	bx	lr
		reg |= (1 << 1);
1a0030ee:	2103      	movs	r1, #3
1a0030f0:	e7f0      	b.n	1a0030d4 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0030f2:	f041 0120 	orr.w	r1, r1, #32
1a0030f6:	e7f2      	b.n	1a0030de <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0030f8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0030fc:	4b02      	ldr	r3, [pc, #8]	; (1a003108 <Chip_Clock_EnableOpts+0x38>)
1a0030fe:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003102:	4770      	bx	lr
1a003104:	40051000 	.word	0x40051000
1a003108:	40052000 	.word	0x40052000

1a00310c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a00310c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003110:	d208      	bcs.n	1a003124 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003112:	4a09      	ldr	r2, [pc, #36]	; (1a003138 <Chip_Clock_Enable+0x2c>)
1a003114:	3020      	adds	r0, #32
1a003116:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00311a:	f043 0301 	orr.w	r3, r3, #1
1a00311e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003122:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003124:	4a05      	ldr	r2, [pc, #20]	; (1a00313c <Chip_Clock_Enable+0x30>)
1a003126:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00312a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00312e:	f043 0301 	orr.w	r3, r3, #1
1a003132:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003136:	4770      	bx	lr
1a003138:	40051000 	.word	0x40051000
1a00313c:	40052000 	.word	0x40052000

1a003140 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003140:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003142:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003146:	d309      	bcc.n	1a00315c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003148:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a00314c:	4a0d      	ldr	r2, [pc, #52]	; (1a003184 <Chip_Clock_GetRate+0x44>)
1a00314e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003152:	f014 0f01 	tst.w	r4, #1
1a003156:	d107      	bne.n	1a003168 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003158:	2000      	movs	r0, #0
	}

	return rate;
}
1a00315a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00315c:	f100 0320 	add.w	r3, r0, #32
1a003160:	4a09      	ldr	r2, [pc, #36]	; (1a003188 <Chip_Clock_GetRate+0x48>)
1a003162:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003166:	e7f4      	b.n	1a003152 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003168:	f7ff fe20 	bl	1a002dac <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00316c:	f7ff ffa9 	bl	1a0030c2 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003170:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003174:	d103      	bne.n	1a00317e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a003176:	2301      	movs	r3, #1
		rate = rate / div;
1a003178:	fbb0 f0f3 	udiv	r0, r0, r3
1a00317c:	e7ed      	b.n	1a00315a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00317e:	2302      	movs	r3, #2
1a003180:	e7fa      	b.n	1a003178 <Chip_Clock_GetRate+0x38>
1a003182:	bf00      	nop
1a003184:	40052000 	.word	0x40052000
1a003188:	40051000 	.word	0x40051000

1a00318c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00318c:	b570      	push	{r4, r5, r6, lr}
1a00318e:	b08a      	sub	sp, #40	; 0x28
1a003190:	4605      	mov	r5, r0
1a003192:	460e      	mov	r6, r1
1a003194:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003196:	f242 7310 	movw	r3, #10000	; 0x2710
1a00319a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a00319c:	2806      	cmp	r0, #6
1a00319e:	d018      	beq.n	1a0031d2 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0031a0:	2300      	movs	r3, #0
1a0031a2:	2201      	movs	r2, #1
1a0031a4:	4629      	mov	r1, r5
1a0031a6:	2004      	movs	r0, #4
1a0031a8:	f7ff ff4c 	bl	1a003044 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0031ac:	4a49      	ldr	r2, [pc, #292]	; (1a0032d4 <Chip_SetupCoreClock+0x148>)
1a0031ae:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0031b0:	f043 0301 	orr.w	r3, r3, #1
1a0031b4:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0031b6:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0031ba:	a901      	add	r1, sp, #4
1a0031bc:	4630      	mov	r0, r6
1a0031be:	f7ff feb9 	bl	1a002f34 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0031c2:	4b45      	ldr	r3, [pc, #276]	; (1a0032d8 <Chip_SetupCoreClock+0x14c>)
1a0031c4:	429e      	cmp	r6, r3
1a0031c6:	d916      	bls.n	1a0031f6 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0031c8:	9b01      	ldr	r3, [sp, #4]
1a0031ca:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0031ce:	d003      	beq.n	1a0031d8 <Chip_SetupCoreClock+0x4c>
1a0031d0:	e7fe      	b.n	1a0031d0 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0031d2:	f7ff fe11 	bl	1a002df8 <Chip_Clock_EnableCrystal>
1a0031d6:	e7e3      	b.n	1a0031a0 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0031d8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0031dc:	d005      	beq.n	1a0031ea <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0031de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0031e2:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0031e4:	2500      	movs	r5, #0
			direct = 1;
1a0031e6:	2601      	movs	r6, #1
1a0031e8:	e007      	b.n	1a0031fa <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0031ea:	9b04      	ldr	r3, [sp, #16]
1a0031ec:	3301      	adds	r3, #1
1a0031ee:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0031f0:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0031f2:	2600      	movs	r6, #0
1a0031f4:	e001      	b.n	1a0031fa <Chip_SetupCoreClock+0x6e>
1a0031f6:	2500      	movs	r5, #0
1a0031f8:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0031fa:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0031fe:	9b01      	ldr	r3, [sp, #4]
1a003200:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003204:	9a05      	ldr	r2, [sp, #20]
1a003206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00320a:	9a03      	ldr	r2, [sp, #12]
1a00320c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003210:	9a04      	ldr	r2, [sp, #16]
1a003212:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003216:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00321a:	4a2e      	ldr	r2, [pc, #184]	; (1a0032d4 <Chip_SetupCoreClock+0x148>)
1a00321c:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00321e:	4b2d      	ldr	r3, [pc, #180]	; (1a0032d4 <Chip_SetupCoreClock+0x148>)
1a003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003222:	f013 0f01 	tst.w	r3, #1
1a003226:	d0fa      	beq.n	1a00321e <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003228:	2300      	movs	r3, #0
1a00322a:	2201      	movs	r2, #1
1a00322c:	2109      	movs	r1, #9
1a00322e:	2004      	movs	r0, #4
1a003230:	f7ff ff08 	bl	1a003044 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003234:	b1fe      	cbz	r6, 1a003276 <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003236:	f242 7310 	movw	r3, #10000	; 0x2710
1a00323a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00323c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00323e:	1e5a      	subs	r2, r3, #1
1a003240:	9209      	str	r2, [sp, #36]	; 0x24
1a003242:	2b00      	cmp	r3, #0
1a003244:	d1fa      	bne.n	1a00323c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003246:	9b01      	ldr	r3, [sp, #4]
1a003248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00324c:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00324e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003252:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003256:	9a05      	ldr	r2, [sp, #20]
1a003258:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00325c:	9a03      	ldr	r2, [sp, #12]
1a00325e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003262:	9a04      	ldr	r2, [sp, #16]
1a003264:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003268:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00326c:	4a19      	ldr	r2, [pc, #100]	; (1a0032d4 <Chip_SetupCoreClock+0x148>)
1a00326e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003270:	b36c      	cbz	r4, 1a0032ce <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003272:	2400      	movs	r4, #0
1a003274:	e029      	b.n	1a0032ca <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a003276:	2d00      	cmp	r5, #0
1a003278:	d0fa      	beq.n	1a003270 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00327a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00327e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003280:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003282:	1e5a      	subs	r2, r3, #1
1a003284:	9209      	str	r2, [sp, #36]	; 0x24
1a003286:	2b00      	cmp	r3, #0
1a003288:	d1fa      	bne.n	1a003280 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a00328a:	9b04      	ldr	r3, [sp, #16]
1a00328c:	1e5a      	subs	r2, r3, #1
1a00328e:	9204      	str	r2, [sp, #16]
1a003290:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003294:	9b01      	ldr	r3, [sp, #4]
1a003296:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00329a:	9905      	ldr	r1, [sp, #20]
1a00329c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0032a0:	9903      	ldr	r1, [sp, #12]
1a0032a2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0032a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0032aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0032ae:	4a09      	ldr	r2, [pc, #36]	; (1a0032d4 <Chip_SetupCoreClock+0x148>)
1a0032b0:	6453      	str	r3, [r2, #68]	; 0x44
1a0032b2:	e7dd      	b.n	1a003270 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0032b4:	4809      	ldr	r0, [pc, #36]	; (1a0032dc <Chip_SetupCoreClock+0x150>)
1a0032b6:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0032ba:	78cb      	ldrb	r3, [r1, #3]
1a0032bc:	788a      	ldrb	r2, [r1, #2]
1a0032be:	7849      	ldrb	r1, [r1, #1]
1a0032c0:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0032c4:	f7ff febe 	bl	1a003044 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0032c8:	3401      	adds	r4, #1
1a0032ca:	2c11      	cmp	r4, #17
1a0032cc:	d9f2      	bls.n	1a0032b4 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0032ce:	b00a      	add	sp, #40	; 0x28
1a0032d0:	bd70      	pop	{r4, r5, r6, pc}
1a0032d2:	bf00      	nop
1a0032d4:	40050000 	.word	0x40050000
1a0032d8:	068e7780 	.word	0x068e7780
1a0032dc:	1a0053f0 	.word	0x1a0053f0

1a0032e0 <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a0032e0:	680b      	ldr	r3, [r1, #0]
1a0032e2:	b133      	cbz	r3, 1a0032f2 <SSP_Write2BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a0032e4:	684a      	ldr	r2, [r1, #4]
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a0032e6:	5a9b      	ldrh	r3, [r3, r2]
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a0032e8:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a0032ea:	684b      	ldr	r3, [r1, #4]
1a0032ec:	3302      	adds	r3, #2
1a0032ee:	604b      	str	r3, [r1, #4]
}
1a0032f0:	4770      	bx	lr
1a0032f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a0032f6:	6083      	str	r3, [r0, #8]
1a0032f8:	e7f7      	b.n	1a0032ea <SSP_Write2BFifo+0xa>

1a0032fa <SSP_Write1BFifo>:

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a0032fa:	680b      	ldr	r3, [r1, #0]
1a0032fc:	b133      	cbz	r3, 1a00330c <SSP_Write1BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a0032fe:	684a      	ldr	r2, [r1, #4]
1a003300:	5c9b      	ldrb	r3, [r3, r2]
1a003302:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a003304:	684b      	ldr	r3, [r1, #4]
1a003306:	3301      	adds	r3, #1
1a003308:	604b      	str	r3, [r1, #4]
}
1a00330a:	4770      	bx	lr
1a00330c:	23ff      	movs	r3, #255	; 0xff
1a00330e:	6083      	str	r3, [r0, #8]
1a003310:	e7f8      	b.n	1a003304 <SSP_Write1BFifo+0xa>

1a003312 <SSP_Read2BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a003312:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a003314:	f013 0f04 	tst.w	r3, #4
1a003318:	d01b      	beq.n	1a003352 <SSP_Read2BFifo+0x40>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a00331a:	68ca      	ldr	r2, [r1, #12]
1a00331c:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00331e:	429a      	cmp	r2, r3
1a003320:	d216      	bcs.n	1a003350 <SSP_Read2BFifo+0x3e>
{
1a003322:	b410      	push	{r4}
1a003324:	e00a      	b.n	1a00333c <SSP_Read2BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
1a003326:	68cb      	ldr	r3, [r1, #12]
1a003328:	3302      	adds	r3, #2
1a00332a:	60cb      	str	r3, [r1, #12]
1a00332c:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00332e:	f013 0f04 	tst.w	r3, #4
1a003332:	d00a      	beq.n	1a00334a <SSP_Read2BFifo+0x38>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a003334:	68ca      	ldr	r2, [r1, #12]
1a003336:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a003338:	429a      	cmp	r2, r3
1a00333a:	d206      	bcs.n	1a00334a <SSP_Read2BFifo+0x38>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a00333c:	6883      	ldr	r3, [r0, #8]
1a00333e:	b29b      	uxth	r3, r3
		if (xf_setup->rx_data) {
1a003340:	688c      	ldr	r4, [r1, #8]
1a003342:	2c00      	cmp	r4, #0
1a003344:	d0ef      	beq.n	1a003326 <SSP_Read2BFifo+0x14>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a003346:	52a3      	strh	r3, [r4, r2]
1a003348:	e7ed      	b.n	1a003326 <SSP_Read2BFifo+0x14>
	}
}
1a00334a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00334e:	4770      	bx	lr
1a003350:	4770      	bx	lr
1a003352:	4770      	bx	lr

1a003354 <SSP_Read1BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a003354:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a003356:	f013 0f04 	tst.w	r3, #4
1a00335a:	d01a      	beq.n	1a003392 <SSP_Read1BFifo+0x3e>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a00335c:	68cb      	ldr	r3, [r1, #12]
1a00335e:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a003360:	4293      	cmp	r3, r2
1a003362:	d215      	bcs.n	1a003390 <SSP_Read1BFifo+0x3c>
{
1a003364:	b410      	push	{r4}
1a003366:	e00a      	b.n	1a00337e <SSP_Read1BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
1a003368:	68cb      	ldr	r3, [r1, #12]
1a00336a:	3301      	adds	r3, #1
1a00336c:	60cb      	str	r3, [r1, #12]
1a00336e:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a003370:	f013 0f04 	tst.w	r3, #4
1a003374:	d009      	beq.n	1a00338a <SSP_Read1BFifo+0x36>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a003376:	68cb      	ldr	r3, [r1, #12]
1a003378:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00337a:	4293      	cmp	r3, r2
1a00337c:	d205      	bcs.n	1a00338a <SSP_Read1BFifo+0x36>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a00337e:	6884      	ldr	r4, [r0, #8]
		if (xf_setup->rx_data) {
1a003380:	688a      	ldr	r2, [r1, #8]
1a003382:	2a00      	cmp	r2, #0
1a003384:	d0f0      	beq.n	1a003368 <SSP_Read1BFifo+0x14>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a003386:	54d4      	strb	r4, [r2, r3]
1a003388:	e7ee      	b.n	1a003368 <SSP_Read1BFifo+0x14>
	}
}
1a00338a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00338e:	4770      	bx	lr
1a003390:	4770      	bx	lr
1a003392:	4770      	bx	lr

1a003394 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003394:	4b03      	ldr	r3, [pc, #12]	; (1a0033a4 <Chip_SSP_GetClockIndex+0x10>)
1a003396:	4298      	cmp	r0, r3
1a003398:	d001      	beq.n	1a00339e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00339a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a00339c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00339e:	20a5      	movs	r0, #165	; 0xa5
1a0033a0:	4770      	bx	lr
1a0033a2:	bf00      	nop
1a0033a4:	400c5000 	.word	0x400c5000

1a0033a8 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0033a8:	4b04      	ldr	r3, [pc, #16]	; (1a0033bc <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0033aa:	4298      	cmp	r0, r3
1a0033ac:	d002      	beq.n	1a0033b4 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0033ae:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0033b2:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0033b4:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0033b8:	4770      	bx	lr
1a0033ba:	bf00      	nop
1a0033bc:	400c5000 	.word	0x400c5000

1a0033c0 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0033c0:	6803      	ldr	r3, [r0, #0]
1a0033c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0033c6:	0209      	lsls	r1, r1, #8
1a0033c8:	b289      	uxth	r1, r1
1a0033ca:	4319      	orrs	r1, r3
1a0033cc:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0033ce:	6102      	str	r2, [r0, #16]
}
1a0033d0:	4770      	bx	lr

1a0033d2 <Chip_SSP_RWFrames_Blocking>:

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a0033d2:	b538      	push	{r3, r4, r5, lr}
1a0033d4:	4604      	mov	r4, r0
1a0033d6:	460d      	mov	r5, r1
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a0033d8:	e000      	b.n	1a0033dc <Chip_SSP_RWFrames_Blocking+0xa>
1a0033da:	68a3      	ldr	r3, [r4, #8]
	return (pSSP->SR & Stat) ? SET : RESET;
1a0033dc:	68e3      	ldr	r3, [r4, #12]
1a0033de:	f013 0f04 	tst.w	r3, #4
1a0033e2:	d1fa      	bne.n	1a0033da <Chip_SSP_RWFrames_Blocking+0x8>
	pSSP->ICR = IntClear;
1a0033e4:	2303      	movs	r3, #3
1a0033e6:	6223      	str	r3, [r4, #32]
	return SSP_CR0_DSS(pSSP->CR0);
1a0033e8:	6823      	ldr	r3, [r4, #0]
1a0033ea:	f003 030f 	and.w	r3, r3, #15
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a0033ee:	2b07      	cmp	r3, #7
1a0033f0:	d808      	bhi.n	1a003404 <Chip_SSP_RWFrames_Blocking+0x32>
1a0033f2:	e022      	b.n	1a00343a <Chip_SSP_RWFrames_Blocking+0x68>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a0033f4:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a0033f6:	f013 0f01 	tst.w	r3, #1
1a0033fa:	d139      	bne.n	1a003470 <Chip_SSP_RWFrames_Blocking+0x9e>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a0033fc:	4629      	mov	r1, r5
1a0033fe:	4620      	mov	r0, r4
1a003400:	f7ff ff87 	bl	1a003312 <SSP_Read2BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a003404:	68ea      	ldr	r2, [r5, #12]
1a003406:	692b      	ldr	r3, [r5, #16]
1a003408:	429a      	cmp	r2, r3
1a00340a:	d302      	bcc.n	1a003412 <Chip_SSP_RWFrames_Blocking+0x40>
1a00340c:	686a      	ldr	r2, [r5, #4]
1a00340e:	4293      	cmp	r3, r2
1a003410:	d926      	bls.n	1a003460 <Chip_SSP_RWFrames_Blocking+0x8e>
	return (pSSP->SR & Stat) ? SET : RESET;
1a003412:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a003414:	f012 0f02 	tst.w	r2, #2
1a003418:	d0ec      	beq.n	1a0033f4 <Chip_SSP_RWFrames_Blocking+0x22>
1a00341a:	686a      	ldr	r2, [r5, #4]
1a00341c:	429a      	cmp	r2, r3
1a00341e:	d2e9      	bcs.n	1a0033f4 <Chip_SSP_RWFrames_Blocking+0x22>
				SSP_Write2BFifo(pSSP, xf_setup);
1a003420:	4629      	mov	r1, r5
1a003422:	4620      	mov	r0, r4
1a003424:	f7ff ff5c 	bl	1a0032e0 <SSP_Write2BFifo>
1a003428:	e7e4      	b.n	1a0033f4 <Chip_SSP_RWFrames_Blocking+0x22>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a00342a:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a00342c:	f013 0f01 	tst.w	r3, #1
1a003430:	d120      	bne.n	1a003474 <Chip_SSP_RWFrames_Blocking+0xa2>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a003432:	4629      	mov	r1, r5
1a003434:	4620      	mov	r0, r4
1a003436:	f7ff ff8d 	bl	1a003354 <SSP_Read1BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a00343a:	68ea      	ldr	r2, [r5, #12]
1a00343c:	692b      	ldr	r3, [r5, #16]
1a00343e:	429a      	cmp	r2, r3
1a003440:	d302      	bcc.n	1a003448 <Chip_SSP_RWFrames_Blocking+0x76>
1a003442:	686a      	ldr	r2, [r5, #4]
1a003444:	4293      	cmp	r3, r2
1a003446:	d90b      	bls.n	1a003460 <Chip_SSP_RWFrames_Blocking+0x8e>
	return (pSSP->SR & Stat) ? SET : RESET;
1a003448:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a00344a:	f012 0f02 	tst.w	r2, #2
1a00344e:	d0ec      	beq.n	1a00342a <Chip_SSP_RWFrames_Blocking+0x58>
1a003450:	686a      	ldr	r2, [r5, #4]
1a003452:	429a      	cmp	r2, r3
1a003454:	d2e9      	bcs.n	1a00342a <Chip_SSP_RWFrames_Blocking+0x58>
				SSP_Write1BFifo(pSSP, xf_setup);
1a003456:	4629      	mov	r1, r5
1a003458:	4620      	mov	r0, r4
1a00345a:	f7ff ff4e 	bl	1a0032fa <SSP_Write1BFifo>
1a00345e:	e7e4      	b.n	1a00342a <Chip_SSP_RWFrames_Blocking+0x58>
		}
	}
	if (xf_setup->tx_data) {
1a003460:	682b      	ldr	r3, [r5, #0]
1a003462:	b10b      	cbz	r3, 1a003468 <Chip_SSP_RWFrames_Blocking+0x96>
		return xf_setup->tx_cnt;
1a003464:	6868      	ldr	r0, [r5, #4]
1a003466:	e004      	b.n	1a003472 <Chip_SSP_RWFrames_Blocking+0xa0>
	}
	else if (xf_setup->rx_data) {
1a003468:	68ab      	ldr	r3, [r5, #8]
1a00346a:	b12b      	cbz	r3, 1a003478 <Chip_SSP_RWFrames_Blocking+0xa6>
		return xf_setup->rx_cnt;
1a00346c:	68e8      	ldr	r0, [r5, #12]
1a00346e:	e000      	b.n	1a003472 <Chip_SSP_RWFrames_Blocking+0xa0>
				return ERROR;
1a003470:	2000      	movs	r0, #0
	}

	return 0;
}
1a003472:	bd38      	pop	{r3, r4, r5, pc}
				return ERROR;
1a003474:	2000      	movs	r0, #0
1a003476:	e7fc      	b.n	1a003472 <Chip_SSP_RWFrames_Blocking+0xa0>
	return 0;
1a003478:	2000      	movs	r0, #0
1a00347a:	e7fa      	b.n	1a003472 <Chip_SSP_RWFrames_Blocking+0xa0>

1a00347c <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00347c:	b570      	push	{r4, r5, r6, lr}
1a00347e:	4606      	mov	r6, r0
1a003480:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003482:	f7ff ff91 	bl	1a0033a8 <Chip_SSP_GetPeriphClockIndex>
1a003486:	f7ff fe5b 	bl	1a003140 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00348a:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00348c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003490:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003492:	e000      	b.n	1a003496 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003494:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003496:	42ab      	cmp	r3, r5
1a003498:	d90b      	bls.n	1a0034b2 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00349a:	1c4c      	adds	r4, r1, #1
1a00349c:	fb02 f304 	mul.w	r3, r2, r4
1a0034a0:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0034a4:	429d      	cmp	r5, r3
1a0034a6:	d2f6      	bcs.n	1a003496 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0034a8:	2cff      	cmp	r4, #255	; 0xff
1a0034aa:	d9f3      	bls.n	1a003494 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0034ac:	3202      	adds	r2, #2
				cr0_div = 0;
1a0034ae:	2100      	movs	r1, #0
1a0034b0:	e7f1      	b.n	1a003496 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0034b2:	4630      	mov	r0, r6
1a0034b4:	f7ff ff84 	bl	1a0033c0 <Chip_SSP_SetClockRate>
}
1a0034b8:	bd70      	pop	{r4, r5, r6, pc}
1a0034ba:	Address 0x000000001a0034ba is out of bounds.


1a0034bc <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0034bc:	b510      	push	{r4, lr}
1a0034be:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0034c0:	f7ff ff68 	bl	1a003394 <Chip_SSP_GetClockIndex>
1a0034c4:	f7ff fe22 	bl	1a00310c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0034c8:	4620      	mov	r0, r4
1a0034ca:	f7ff ff6d 	bl	1a0033a8 <Chip_SSP_GetPeriphClockIndex>
1a0034ce:	f7ff fe1d 	bl	1a00310c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0034d2:	6863      	ldr	r3, [r4, #4]
1a0034d4:	f023 0304 	bic.w	r3, r3, #4
1a0034d8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0034da:	6823      	ldr	r3, [r4, #0]
1a0034dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0034e0:	f043 0307 	orr.w	r3, r3, #7
1a0034e4:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0034e6:	4902      	ldr	r1, [pc, #8]	; (1a0034f0 <Chip_SSP_Init+0x34>)
1a0034e8:	4620      	mov	r0, r4
1a0034ea:	f7ff ffc7 	bl	1a00347c <Chip_SSP_SetBitRate>
}
1a0034ee:	bd10      	pop	{r4, pc}
1a0034f0:	000186a0 	.word	0x000186a0

1a0034f4 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0034f4:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0034f6:	4a0a      	ldr	r2, [pc, #40]	; (1a003520 <SystemInit+0x2c>)
1a0034f8:	4b0a      	ldr	r3, [pc, #40]	; (1a003524 <SystemInit+0x30>)
1a0034fa:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0034fc:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003500:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003502:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003506:	2b20      	cmp	r3, #32
1a003508:	d002      	beq.n	1a003510 <SystemInit+0x1c>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00350a:	f7ff fabd 	bl	1a002a88 <Board_SystemInit>
}
1a00350e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003510:	4a04      	ldr	r2, [pc, #16]	; (1a003524 <SystemInit+0x30>)
1a003512:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003516:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00351a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00351e:	e7f4      	b.n	1a00350a <SystemInit+0x16>
1a003520:	1a000000 	.word	0x1a000000
1a003524:	e000ed00 	.word	0xe000ed00

1a003528 <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a003528:	b108      	cbz	r0, 1a00352e <spiInit+0x6>
      // Initialize SSP Peripheral
      Chip_SSP_Init( LPC_SSP1 );
      Chip_SSP_Enable( LPC_SSP1 );

   } else {
      retVal = FALSE;
1a00352a:	2000      	movs	r0, #0
   }

   return retVal;
}
1a00352c:	4770      	bx	lr
{
1a00352e:	b510      	push	{r4, lr}
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003530:	4b0e      	ldr	r3, [pc, #56]	; (1a00356c <spiInit+0x44>)
1a003532:	2200      	movs	r2, #0
1a003534:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
1a003538:	21c5      	movs	r1, #197	; 0xc5
1a00353a:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
1a00353e:	2105      	movs	r1, #5
1a003540:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
1a003544:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	pGPIO->DIR[port] |= 1UL << pin;
1a003548:	4909      	ldr	r1, [pc, #36]	; (1a003570 <spiInit+0x48>)
1a00354a:	f242 020c 	movw	r2, #8204	; 0x200c
1a00354e:	588b      	ldr	r3, [r1, r2]
1a003550:	f043 0301 	orr.w	r3, r3, #1
1a003554:	508b      	str	r3, [r1, r2]
      Chip_SSP_Init( LPC_SSP1 );
1a003556:	4c07      	ldr	r4, [pc, #28]	; (1a003574 <spiInit+0x4c>)
1a003558:	4620      	mov	r0, r4
1a00355a:	f7ff ffaf 	bl	1a0034bc <Chip_SSP_Init>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00355e:	6863      	ldr	r3, [r4, #4]
1a003560:	f043 0302 	orr.w	r3, r3, #2
1a003564:	6063      	str	r3, [r4, #4]
   bool_t retVal = TRUE;
1a003566:	2001      	movs	r0, #1
}
1a003568:	bd10      	pop	{r4, pc}
1a00356a:	bf00      	nop
1a00356c:	40086000 	.word	0x40086000
1a003570:	400f4000 	.word	0x400f4000
1a003574:	400c5000 	.word	0x400c5000

1a003578 <tickCallbackSet>:

// Tick interrupt callback
bool_t tickCallbackSet( callBackFuncPtr_t tickCallback, void* tickCallbackParams )
{
   bool_t retVal = TRUE;
   if( tickCallback != NULL ) {
1a003578:	b130      	cbz	r0, 1a003588 <tickCallbackSet+0x10>
      tickHookFunction = tickCallback;
1a00357a:	4a05      	ldr	r2, [pc, #20]	; (1a003590 <tickCallbackSet+0x18>)
1a00357c:	6010      	str	r0, [r2, #0]
   bool_t retVal = TRUE;
1a00357e:	2001      	movs	r0, #1
   } else {
      retVal = FALSE;
   }
   if( tickCallbackParams != NULL ) {
1a003580:	b121      	cbz	r1, 1a00358c <tickCallbackSet+0x14>
      callBackFuncParams = tickCallbackParams;
1a003582:	4b04      	ldr	r3, [pc, #16]	; (1a003594 <tickCallbackSet+0x1c>)
1a003584:	6019      	str	r1, [r3, #0]
1a003586:	4770      	bx	lr
      retVal = FALSE;
1a003588:	2000      	movs	r0, #0
1a00358a:	e7f9      	b.n	1a003580 <tickCallbackSet+0x8>
   } else {
      retVal &= FALSE;
1a00358c:	2000      	movs	r0, #0
   }
   return retVal;
}
1a00358e:	4770      	bx	lr
1a003590:	100006b0 	.word	0x100006b0
1a003594:	100006a0 	.word	0x100006a0

1a003598 <tickPowerSet>:

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a003598:	b918      	cbnz	r0, 1a0035a2 <tickPowerSet+0xa>
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a00359a:	4b04      	ldr	r3, [pc, #16]	; (1a0035ac <tickPowerSet+0x14>)
1a00359c:	2200      	movs	r2, #0
1a00359e:	601a      	str	r2, [r3, #0]
   }
}
1a0035a0:	4770      	bx	lr
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0035a2:	4b02      	ldr	r3, [pc, #8]	; (1a0035ac <tickPowerSet+0x14>)
1a0035a4:	2207      	movs	r2, #7
1a0035a6:	601a      	str	r2, [r3, #0]
1a0035a8:	4770      	bx	lr
1a0035aa:	bf00      	nop
1a0035ac:	e000e010 	.word	0xe000e010

1a0035b0 <tickInit>:
{
1a0035b0:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a0035b2:	ea50 0301 	orrs.w	r3, r0, r1
1a0035b6:	d02a      	beq.n	1a00360e <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0035b8:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a0035bc:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a0035c0:	2b00      	cmp	r3, #0
1a0035c2:	bf08      	it	eq
1a0035c4:	2a32      	cmpeq	r2, #50	; 0x32
1a0035c6:	d227      	bcs.n	1a003618 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0035c8:	4b14      	ldr	r3, [pc, #80]	; (1a00361c <tickInit+0x6c>)
1a0035ca:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0035ce:	4b14      	ldr	r3, [pc, #80]	; (1a003620 <tickInit+0x70>)
1a0035d0:	681b      	ldr	r3, [r3, #0]
1a0035d2:	fba3 4500 	umull	r4, r5, r3, r0
1a0035d6:	fb03 5501 	mla	r5, r3, r1, r5
1a0035da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0035de:	2300      	movs	r3, #0
1a0035e0:	4620      	mov	r0, r4
1a0035e2:	4629      	mov	r1, r5
1a0035e4:	f000 f916 	bl	1a003814 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0035e8:	3801      	subs	r0, #1
1a0035ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0035ee:	d209      	bcs.n	1a003604 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0035f0:	4b0c      	ldr	r3, [pc, #48]	; (1a003624 <tickInit+0x74>)
1a0035f2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0035f4:	4a0c      	ldr	r2, [pc, #48]	; (1a003628 <tickInit+0x78>)
1a0035f6:	21e0      	movs	r1, #224	; 0xe0
1a0035f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0035fc:	2200      	movs	r2, #0
1a0035fe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a003600:	2207      	movs	r2, #7
1a003602:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a003604:	2001      	movs	r0, #1
1a003606:	f7ff ffc7 	bl	1a003598 <tickPowerSet>
      bool_t ret_val = 1;
1a00360a:	2001      	movs	r0, #1
}
1a00360c:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00360e:	2000      	movs	r0, #0
1a003610:	f7ff ffc2 	bl	1a003598 <tickPowerSet>
         ret_val = 0;
1a003614:	2000      	movs	r0, #0
1a003616:	e7f9      	b.n	1a00360c <tickInit+0x5c>
            ret_val = 0;
1a003618:	2000      	movs	r0, #0
1a00361a:	e7f7      	b.n	1a00360c <tickInit+0x5c>
1a00361c:	10000a00 	.word	0x10000a00
1a003620:	100009fc 	.word	0x100009fc
1a003624:	e000e010 	.word	0xe000e010
1a003628:	e000ed00 	.word	0xe000ed00

1a00362c <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00362c:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a003630:	4908      	ldr	r1, [pc, #32]	; (1a003654 <SysTick_Handler+0x28>)
1a003632:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003636:	f112 0b01 	adds.w	fp, r2, #1
1a00363a:	f143 0c00 	adc.w	ip, r3, #0
1a00363e:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a003642:	4b05      	ldr	r3, [pc, #20]	; (1a003658 <SysTick_Handler+0x2c>)
1a003644:	681b      	ldr	r3, [r3, #0]
1a003646:	b113      	cbz	r3, 1a00364e <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a003648:	4a04      	ldr	r2, [pc, #16]	; (1a00365c <SysTick_Handler+0x30>)
1a00364a:	6810      	ldr	r0, [r2, #0]
1a00364c:	4798      	blx	r3
   }
}
1a00364e:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a003652:	bf00      	nop
1a003654:	100006a8 	.word	0x100006a8
1a003658:	100006b0 	.word	0x100006b0
1a00365c:	100006a0 	.word	0x100006a0

1a003660 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a003660:	e7fe      	b.n	1a003660 <errorOcurred>

1a003662 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a003662:	4770      	bx	lr

1a003664 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a003664:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003666:	2400      	movs	r4, #0
1a003668:	e001      	b.n	1a00366e <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00366a:	3401      	adds	r4, #1
1a00366c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00366e:	2c03      	cmp	r4, #3
1a003670:	d812      	bhi.n	1a003698 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a003672:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003674:	4b09      	ldr	r3, [pc, #36]	; (1a00369c <TIMER0_IRQHandler+0x38>)
1a003676:	681a      	ldr	r2, [r3, #0]
1a003678:	f004 010f 	and.w	r1, r4, #15
1a00367c:	2301      	movs	r3, #1
1a00367e:	408b      	lsls	r3, r1
1a003680:	421a      	tst	r2, r3
1a003682:	d0f2      	beq.n	1a00366a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003684:	4b06      	ldr	r3, [pc, #24]	; (1a0036a0 <TIMER0_IRQHandler+0x3c>)
1a003686:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00368a:	2000      	movs	r0, #0
1a00368c:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00368e:	2301      	movs	r3, #1
1a003690:	40ab      	lsls	r3, r5
1a003692:	4a02      	ldr	r2, [pc, #8]	; (1a00369c <TIMER0_IRQHandler+0x38>)
1a003694:	6013      	str	r3, [r2, #0]
1a003696:	e7e8      	b.n	1a00366a <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a003698:	bd38      	pop	{r3, r4, r5, pc}
1a00369a:	bf00      	nop
1a00369c:	40084000 	.word	0x40084000
1a0036a0:	10000010 	.word	0x10000010

1a0036a4 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0036a4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0036a6:	2400      	movs	r4, #0
1a0036a8:	e001      	b.n	1a0036ae <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0036aa:	3401      	adds	r4, #1
1a0036ac:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0036ae:	2c03      	cmp	r4, #3
1a0036b0:	d813      	bhi.n	1a0036da <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0036b2:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0036b4:	4b09      	ldr	r3, [pc, #36]	; (1a0036dc <TIMER1_IRQHandler+0x38>)
1a0036b6:	681a      	ldr	r2, [r3, #0]
1a0036b8:	f004 010f 	and.w	r1, r4, #15
1a0036bc:	2301      	movs	r3, #1
1a0036be:	408b      	lsls	r3, r1
1a0036c0:	421a      	tst	r2, r3
1a0036c2:	d0f2      	beq.n	1a0036aa <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0036c4:	1d23      	adds	r3, r4, #4
1a0036c6:	4a06      	ldr	r2, [pc, #24]	; (1a0036e0 <TIMER1_IRQHandler+0x3c>)
1a0036c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0036cc:	2000      	movs	r0, #0
1a0036ce:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0036d0:	2301      	movs	r3, #1
1a0036d2:	40ab      	lsls	r3, r5
1a0036d4:	4a01      	ldr	r2, [pc, #4]	; (1a0036dc <TIMER1_IRQHandler+0x38>)
1a0036d6:	6013      	str	r3, [r2, #0]
1a0036d8:	e7e7      	b.n	1a0036aa <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0036da:	bd38      	pop	{r3, r4, r5, pc}
1a0036dc:	40085000 	.word	0x40085000
1a0036e0:	10000010 	.word	0x10000010

1a0036e4 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0036e4:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0036e6:	2400      	movs	r4, #0
1a0036e8:	e001      	b.n	1a0036ee <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0036ea:	3401      	adds	r4, #1
1a0036ec:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0036ee:	2c03      	cmp	r4, #3
1a0036f0:	d814      	bhi.n	1a00371c <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0036f2:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0036f4:	4b0a      	ldr	r3, [pc, #40]	; (1a003720 <TIMER2_IRQHandler+0x3c>)
1a0036f6:	681a      	ldr	r2, [r3, #0]
1a0036f8:	f004 010f 	and.w	r1, r4, #15
1a0036fc:	2301      	movs	r3, #1
1a0036fe:	408b      	lsls	r3, r1
1a003700:	421a      	tst	r2, r3
1a003702:	d0f2      	beq.n	1a0036ea <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003704:	f104 0308 	add.w	r3, r4, #8
1a003708:	4a06      	ldr	r2, [pc, #24]	; (1a003724 <TIMER2_IRQHandler+0x40>)
1a00370a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00370e:	2000      	movs	r0, #0
1a003710:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003712:	2301      	movs	r3, #1
1a003714:	40ab      	lsls	r3, r5
1a003716:	4a02      	ldr	r2, [pc, #8]	; (1a003720 <TIMER2_IRQHandler+0x3c>)
1a003718:	6013      	str	r3, [r2, #0]
1a00371a:	e7e6      	b.n	1a0036ea <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a00371c:	bd38      	pop	{r3, r4, r5, pc}
1a00371e:	bf00      	nop
1a003720:	400c3000 	.word	0x400c3000
1a003724:	10000010 	.word	0x10000010

1a003728 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a003728:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00372a:	2400      	movs	r4, #0
1a00372c:	e001      	b.n	1a003732 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00372e:	3401      	adds	r4, #1
1a003730:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003732:	2c03      	cmp	r4, #3
1a003734:	d814      	bhi.n	1a003760 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a003736:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003738:	4b0a      	ldr	r3, [pc, #40]	; (1a003764 <TIMER3_IRQHandler+0x3c>)
1a00373a:	681a      	ldr	r2, [r3, #0]
1a00373c:	f004 010f 	and.w	r1, r4, #15
1a003740:	2301      	movs	r3, #1
1a003742:	408b      	lsls	r3, r1
1a003744:	421a      	tst	r2, r3
1a003746:	d0f2      	beq.n	1a00372e <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003748:	f104 030c 	add.w	r3, r4, #12
1a00374c:	4a06      	ldr	r2, [pc, #24]	; (1a003768 <TIMER3_IRQHandler+0x40>)
1a00374e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003752:	2000      	movs	r0, #0
1a003754:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003756:	2301      	movs	r3, #1
1a003758:	40ab      	lsls	r3, r5
1a00375a:	4a02      	ldr	r2, [pc, #8]	; (1a003764 <TIMER3_IRQHandler+0x3c>)
1a00375c:	6013      	str	r3, [r2, #0]
1a00375e:	e7e6      	b.n	1a00372e <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a003760:	bd38      	pop	{r3, r4, r5, pc}
1a003762:	bf00      	nop
1a003764:	400c4000 	.word	0x400c4000
1a003768:	10000010 	.word	0x10000010

1a00376c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a00376c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00376e:	4b04      	ldr	r3, [pc, #16]	; (1a003780 <USB0_IRQHandler+0x14>)
1a003770:	681b      	ldr	r3, [r3, #0]
1a003772:	681b      	ldr	r3, [r3, #0]
1a003774:	68db      	ldr	r3, [r3, #12]
1a003776:	4a03      	ldr	r2, [pc, #12]	; (1a003784 <USB0_IRQHandler+0x18>)
1a003778:	6810      	ldr	r0, [r2, #0]
1a00377a:	4798      	blx	r3
}
1a00377c:	bd08      	pop	{r3, pc}
1a00377e:	bf00      	nop
1a003780:	10000a08 	.word	0x10000a08
1a003784:	100006b4 	.word	0x100006b4

1a003788 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a003788:	2301      	movs	r3, #1
1a00378a:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00378e:	4b01      	ldr	r3, [pc, #4]	; (1a003794 <clearInterrupt+0xc>)
1a003790:	6258      	str	r0, [r3, #36]	; 0x24
}
1a003792:	4770      	bx	lr
1a003794:	40087000 	.word	0x40087000

1a003798 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00379a:	4b12      	ldr	r3, [pc, #72]	; (1a0037e4 <serveInterrupt+0x4c>)
1a00379c:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a00379e:	4b12      	ldr	r3, [pc, #72]	; (1a0037e8 <serveInterrupt+0x50>)
1a0037a0:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a0037a2:	2301      	movs	r3, #1
1a0037a4:	4083      	lsls	r3, r0
1a0037a6:	420b      	tst	r3, r1
1a0037a8:	d111      	bne.n	1a0037ce <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a0037aa:	4910      	ldr	r1, [pc, #64]	; (1a0037ec <serveInterrupt+0x54>)
1a0037ac:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0037ae:	4d10      	ldr	r5, [pc, #64]	; (1a0037f0 <serveInterrupt+0x58>)
1a0037b0:	0051      	lsls	r1, r2, #1
1a0037b2:	188f      	adds	r7, r1, r2
1a0037b4:	00fc      	lsls	r4, r7, #3
1a0037b6:	4627      	mov	r7, r4
1a0037b8:	442c      	add	r4, r5
1a0037ba:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0037bc:	6864      	ldr	r4, [r4, #4]
1a0037be:	1b36      	subs	r6, r6, r4
1a0037c0:	443d      	add	r5, r7
1a0037c2:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0037c4:	4a08      	ldr	r2, [pc, #32]	; (1a0037e8 <serveInterrupt+0x50>)
1a0037c6:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0037c8:	f7ff ffde 	bl	1a003788 <clearInterrupt>
}
1a0037cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0037ce:	4907      	ldr	r1, [pc, #28]	; (1a0037ec <serveInterrupt+0x54>)
1a0037d0:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0037d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0037d6:	00d1      	lsls	r1, r2, #3
1a0037d8:	4a05      	ldr	r2, [pc, #20]	; (1a0037f0 <serveInterrupt+0x58>)
1a0037da:	440a      	add	r2, r1
1a0037dc:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a0037de:	4a02      	ldr	r2, [pc, #8]	; (1a0037e8 <serveInterrupt+0x50>)
1a0037e0:	61d3      	str	r3, [r2, #28]
1a0037e2:	e7f1      	b.n	1a0037c8 <serveInterrupt+0x30>
1a0037e4:	1a005438 	.word	0x1a005438
1a0037e8:	40087000 	.word	0x40087000
1a0037ec:	40084000 	.word	0x40084000
1a0037f0:	10000050 	.word	0x10000050

1a0037f4 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0037f4:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0037f6:	2000      	movs	r0, #0
1a0037f8:	f7ff ffce 	bl	1a003798 <serveInterrupt>
}
1a0037fc:	bd08      	pop	{r3, pc}

1a0037fe <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0037fe:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a003800:	2001      	movs	r0, #1
1a003802:	f7ff ffc9 	bl	1a003798 <serveInterrupt>
}
1a003806:	bd08      	pop	{r3, pc}

1a003808 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a003808:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a00380a:	2002      	movs	r0, #2
1a00380c:	f7ff ffc4 	bl	1a003798 <serveInterrupt>
}
1a003810:	bd08      	pop	{r3, pc}
1a003812:	Address 0x000000001a003812 is out of bounds.


1a003814 <__aeabi_uldivmod>:
1a003814:	b953      	cbnz	r3, 1a00382c <__aeabi_uldivmod+0x18>
1a003816:	b94a      	cbnz	r2, 1a00382c <__aeabi_uldivmod+0x18>
1a003818:	2900      	cmp	r1, #0
1a00381a:	bf08      	it	eq
1a00381c:	2800      	cmpeq	r0, #0
1a00381e:	bf1c      	itt	ne
1a003820:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003824:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003828:	f000 b972 	b.w	1a003b10 <__aeabi_idiv0>
1a00382c:	f1ad 0c08 	sub.w	ip, sp, #8
1a003830:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003834:	f000 f806 	bl	1a003844 <__udivmoddi4>
1a003838:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00383c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003840:	b004      	add	sp, #16
1a003842:	4770      	bx	lr

1a003844 <__udivmoddi4>:
1a003844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003848:	9e08      	ldr	r6, [sp, #32]
1a00384a:	4604      	mov	r4, r0
1a00384c:	4688      	mov	r8, r1
1a00384e:	2b00      	cmp	r3, #0
1a003850:	d14b      	bne.n	1a0038ea <__udivmoddi4+0xa6>
1a003852:	428a      	cmp	r2, r1
1a003854:	4615      	mov	r5, r2
1a003856:	d967      	bls.n	1a003928 <__udivmoddi4+0xe4>
1a003858:	fab2 f282 	clz	r2, r2
1a00385c:	b14a      	cbz	r2, 1a003872 <__udivmoddi4+0x2e>
1a00385e:	f1c2 0720 	rsb	r7, r2, #32
1a003862:	fa01 f302 	lsl.w	r3, r1, r2
1a003866:	fa20 f707 	lsr.w	r7, r0, r7
1a00386a:	4095      	lsls	r5, r2
1a00386c:	ea47 0803 	orr.w	r8, r7, r3
1a003870:	4094      	lsls	r4, r2
1a003872:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003876:	0c23      	lsrs	r3, r4, #16
1a003878:	fbb8 f7fe 	udiv	r7, r8, lr
1a00387c:	fa1f fc85 	uxth.w	ip, r5
1a003880:	fb0e 8817 	mls	r8, lr, r7, r8
1a003884:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003888:	fb07 f10c 	mul.w	r1, r7, ip
1a00388c:	4299      	cmp	r1, r3
1a00388e:	d909      	bls.n	1a0038a4 <__udivmoddi4+0x60>
1a003890:	18eb      	adds	r3, r5, r3
1a003892:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003896:	f080 811b 	bcs.w	1a003ad0 <__udivmoddi4+0x28c>
1a00389a:	4299      	cmp	r1, r3
1a00389c:	f240 8118 	bls.w	1a003ad0 <__udivmoddi4+0x28c>
1a0038a0:	3f02      	subs	r7, #2
1a0038a2:	442b      	add	r3, r5
1a0038a4:	1a5b      	subs	r3, r3, r1
1a0038a6:	b2a4      	uxth	r4, r4
1a0038a8:	fbb3 f0fe 	udiv	r0, r3, lr
1a0038ac:	fb0e 3310 	mls	r3, lr, r0, r3
1a0038b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0038b4:	fb00 fc0c 	mul.w	ip, r0, ip
1a0038b8:	45a4      	cmp	ip, r4
1a0038ba:	d909      	bls.n	1a0038d0 <__udivmoddi4+0x8c>
1a0038bc:	192c      	adds	r4, r5, r4
1a0038be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0038c2:	f080 8107 	bcs.w	1a003ad4 <__udivmoddi4+0x290>
1a0038c6:	45a4      	cmp	ip, r4
1a0038c8:	f240 8104 	bls.w	1a003ad4 <__udivmoddi4+0x290>
1a0038cc:	3802      	subs	r0, #2
1a0038ce:	442c      	add	r4, r5
1a0038d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0038d4:	eba4 040c 	sub.w	r4, r4, ip
1a0038d8:	2700      	movs	r7, #0
1a0038da:	b11e      	cbz	r6, 1a0038e4 <__udivmoddi4+0xa0>
1a0038dc:	40d4      	lsrs	r4, r2
1a0038de:	2300      	movs	r3, #0
1a0038e0:	e9c6 4300 	strd	r4, r3, [r6]
1a0038e4:	4639      	mov	r1, r7
1a0038e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0038ea:	428b      	cmp	r3, r1
1a0038ec:	d909      	bls.n	1a003902 <__udivmoddi4+0xbe>
1a0038ee:	2e00      	cmp	r6, #0
1a0038f0:	f000 80eb 	beq.w	1a003aca <__udivmoddi4+0x286>
1a0038f4:	2700      	movs	r7, #0
1a0038f6:	e9c6 0100 	strd	r0, r1, [r6]
1a0038fa:	4638      	mov	r0, r7
1a0038fc:	4639      	mov	r1, r7
1a0038fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003902:	fab3 f783 	clz	r7, r3
1a003906:	2f00      	cmp	r7, #0
1a003908:	d147      	bne.n	1a00399a <__udivmoddi4+0x156>
1a00390a:	428b      	cmp	r3, r1
1a00390c:	d302      	bcc.n	1a003914 <__udivmoddi4+0xd0>
1a00390e:	4282      	cmp	r2, r0
1a003910:	f200 80fa 	bhi.w	1a003b08 <__udivmoddi4+0x2c4>
1a003914:	1a84      	subs	r4, r0, r2
1a003916:	eb61 0303 	sbc.w	r3, r1, r3
1a00391a:	2001      	movs	r0, #1
1a00391c:	4698      	mov	r8, r3
1a00391e:	2e00      	cmp	r6, #0
1a003920:	d0e0      	beq.n	1a0038e4 <__udivmoddi4+0xa0>
1a003922:	e9c6 4800 	strd	r4, r8, [r6]
1a003926:	e7dd      	b.n	1a0038e4 <__udivmoddi4+0xa0>
1a003928:	b902      	cbnz	r2, 1a00392c <__udivmoddi4+0xe8>
1a00392a:	deff      	udf	#255	; 0xff
1a00392c:	fab2 f282 	clz	r2, r2
1a003930:	2a00      	cmp	r2, #0
1a003932:	f040 808f 	bne.w	1a003a54 <__udivmoddi4+0x210>
1a003936:	1b49      	subs	r1, r1, r5
1a003938:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00393c:	fa1f f885 	uxth.w	r8, r5
1a003940:	2701      	movs	r7, #1
1a003942:	fbb1 fcfe 	udiv	ip, r1, lr
1a003946:	0c23      	lsrs	r3, r4, #16
1a003948:	fb0e 111c 	mls	r1, lr, ip, r1
1a00394c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003950:	fb08 f10c 	mul.w	r1, r8, ip
1a003954:	4299      	cmp	r1, r3
1a003956:	d907      	bls.n	1a003968 <__udivmoddi4+0x124>
1a003958:	18eb      	adds	r3, r5, r3
1a00395a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00395e:	d202      	bcs.n	1a003966 <__udivmoddi4+0x122>
1a003960:	4299      	cmp	r1, r3
1a003962:	f200 80cd 	bhi.w	1a003b00 <__udivmoddi4+0x2bc>
1a003966:	4684      	mov	ip, r0
1a003968:	1a59      	subs	r1, r3, r1
1a00396a:	b2a3      	uxth	r3, r4
1a00396c:	fbb1 f0fe 	udiv	r0, r1, lr
1a003970:	fb0e 1410 	mls	r4, lr, r0, r1
1a003974:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003978:	fb08 f800 	mul.w	r8, r8, r0
1a00397c:	45a0      	cmp	r8, r4
1a00397e:	d907      	bls.n	1a003990 <__udivmoddi4+0x14c>
1a003980:	192c      	adds	r4, r5, r4
1a003982:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003986:	d202      	bcs.n	1a00398e <__udivmoddi4+0x14a>
1a003988:	45a0      	cmp	r8, r4
1a00398a:	f200 80b6 	bhi.w	1a003afa <__udivmoddi4+0x2b6>
1a00398e:	4618      	mov	r0, r3
1a003990:	eba4 0408 	sub.w	r4, r4, r8
1a003994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003998:	e79f      	b.n	1a0038da <__udivmoddi4+0x96>
1a00399a:	f1c7 0c20 	rsb	ip, r7, #32
1a00399e:	40bb      	lsls	r3, r7
1a0039a0:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0039a4:	ea4e 0e03 	orr.w	lr, lr, r3
1a0039a8:	fa01 f407 	lsl.w	r4, r1, r7
1a0039ac:	fa20 f50c 	lsr.w	r5, r0, ip
1a0039b0:	fa21 f30c 	lsr.w	r3, r1, ip
1a0039b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0039b8:	4325      	orrs	r5, r4
1a0039ba:	fbb3 f9f8 	udiv	r9, r3, r8
1a0039be:	0c2c      	lsrs	r4, r5, #16
1a0039c0:	fb08 3319 	mls	r3, r8, r9, r3
1a0039c4:	fa1f fa8e 	uxth.w	sl, lr
1a0039c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0039cc:	fb09 f40a 	mul.w	r4, r9, sl
1a0039d0:	429c      	cmp	r4, r3
1a0039d2:	fa02 f207 	lsl.w	r2, r2, r7
1a0039d6:	fa00 f107 	lsl.w	r1, r0, r7
1a0039da:	d90b      	bls.n	1a0039f4 <__udivmoddi4+0x1b0>
1a0039dc:	eb1e 0303 	adds.w	r3, lr, r3
1a0039e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0039e4:	f080 8087 	bcs.w	1a003af6 <__udivmoddi4+0x2b2>
1a0039e8:	429c      	cmp	r4, r3
1a0039ea:	f240 8084 	bls.w	1a003af6 <__udivmoddi4+0x2b2>
1a0039ee:	f1a9 0902 	sub.w	r9, r9, #2
1a0039f2:	4473      	add	r3, lr
1a0039f4:	1b1b      	subs	r3, r3, r4
1a0039f6:	b2ad      	uxth	r5, r5
1a0039f8:	fbb3 f0f8 	udiv	r0, r3, r8
1a0039fc:	fb08 3310 	mls	r3, r8, r0, r3
1a003a00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a003a04:	fb00 fa0a 	mul.w	sl, r0, sl
1a003a08:	45a2      	cmp	sl, r4
1a003a0a:	d908      	bls.n	1a003a1e <__udivmoddi4+0x1da>
1a003a0c:	eb1e 0404 	adds.w	r4, lr, r4
1a003a10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003a14:	d26b      	bcs.n	1a003aee <__udivmoddi4+0x2aa>
1a003a16:	45a2      	cmp	sl, r4
1a003a18:	d969      	bls.n	1a003aee <__udivmoddi4+0x2aa>
1a003a1a:	3802      	subs	r0, #2
1a003a1c:	4474      	add	r4, lr
1a003a1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003a22:	fba0 8902 	umull	r8, r9, r0, r2
1a003a26:	eba4 040a 	sub.w	r4, r4, sl
1a003a2a:	454c      	cmp	r4, r9
1a003a2c:	46c2      	mov	sl, r8
1a003a2e:	464b      	mov	r3, r9
1a003a30:	d354      	bcc.n	1a003adc <__udivmoddi4+0x298>
1a003a32:	d051      	beq.n	1a003ad8 <__udivmoddi4+0x294>
1a003a34:	2e00      	cmp	r6, #0
1a003a36:	d069      	beq.n	1a003b0c <__udivmoddi4+0x2c8>
1a003a38:	ebb1 050a 	subs.w	r5, r1, sl
1a003a3c:	eb64 0403 	sbc.w	r4, r4, r3
1a003a40:	fa04 fc0c 	lsl.w	ip, r4, ip
1a003a44:	40fd      	lsrs	r5, r7
1a003a46:	40fc      	lsrs	r4, r7
1a003a48:	ea4c 0505 	orr.w	r5, ip, r5
1a003a4c:	e9c6 5400 	strd	r5, r4, [r6]
1a003a50:	2700      	movs	r7, #0
1a003a52:	e747      	b.n	1a0038e4 <__udivmoddi4+0xa0>
1a003a54:	f1c2 0320 	rsb	r3, r2, #32
1a003a58:	fa20 f703 	lsr.w	r7, r0, r3
1a003a5c:	4095      	lsls	r5, r2
1a003a5e:	fa01 f002 	lsl.w	r0, r1, r2
1a003a62:	fa21 f303 	lsr.w	r3, r1, r3
1a003a66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003a6a:	4338      	orrs	r0, r7
1a003a6c:	0c01      	lsrs	r1, r0, #16
1a003a6e:	fbb3 f7fe 	udiv	r7, r3, lr
1a003a72:	fa1f f885 	uxth.w	r8, r5
1a003a76:	fb0e 3317 	mls	r3, lr, r7, r3
1a003a7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003a7e:	fb07 f308 	mul.w	r3, r7, r8
1a003a82:	428b      	cmp	r3, r1
1a003a84:	fa04 f402 	lsl.w	r4, r4, r2
1a003a88:	d907      	bls.n	1a003a9a <__udivmoddi4+0x256>
1a003a8a:	1869      	adds	r1, r5, r1
1a003a8c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003a90:	d22f      	bcs.n	1a003af2 <__udivmoddi4+0x2ae>
1a003a92:	428b      	cmp	r3, r1
1a003a94:	d92d      	bls.n	1a003af2 <__udivmoddi4+0x2ae>
1a003a96:	3f02      	subs	r7, #2
1a003a98:	4429      	add	r1, r5
1a003a9a:	1acb      	subs	r3, r1, r3
1a003a9c:	b281      	uxth	r1, r0
1a003a9e:	fbb3 f0fe 	udiv	r0, r3, lr
1a003aa2:	fb0e 3310 	mls	r3, lr, r0, r3
1a003aa6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003aaa:	fb00 f308 	mul.w	r3, r0, r8
1a003aae:	428b      	cmp	r3, r1
1a003ab0:	d907      	bls.n	1a003ac2 <__udivmoddi4+0x27e>
1a003ab2:	1869      	adds	r1, r5, r1
1a003ab4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003ab8:	d217      	bcs.n	1a003aea <__udivmoddi4+0x2a6>
1a003aba:	428b      	cmp	r3, r1
1a003abc:	d915      	bls.n	1a003aea <__udivmoddi4+0x2a6>
1a003abe:	3802      	subs	r0, #2
1a003ac0:	4429      	add	r1, r5
1a003ac2:	1ac9      	subs	r1, r1, r3
1a003ac4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003ac8:	e73b      	b.n	1a003942 <__udivmoddi4+0xfe>
1a003aca:	4637      	mov	r7, r6
1a003acc:	4630      	mov	r0, r6
1a003ace:	e709      	b.n	1a0038e4 <__udivmoddi4+0xa0>
1a003ad0:	4607      	mov	r7, r0
1a003ad2:	e6e7      	b.n	1a0038a4 <__udivmoddi4+0x60>
1a003ad4:	4618      	mov	r0, r3
1a003ad6:	e6fb      	b.n	1a0038d0 <__udivmoddi4+0x8c>
1a003ad8:	4541      	cmp	r1, r8
1a003ada:	d2ab      	bcs.n	1a003a34 <__udivmoddi4+0x1f0>
1a003adc:	ebb8 0a02 	subs.w	sl, r8, r2
1a003ae0:	eb69 020e 	sbc.w	r2, r9, lr
1a003ae4:	3801      	subs	r0, #1
1a003ae6:	4613      	mov	r3, r2
1a003ae8:	e7a4      	b.n	1a003a34 <__udivmoddi4+0x1f0>
1a003aea:	4660      	mov	r0, ip
1a003aec:	e7e9      	b.n	1a003ac2 <__udivmoddi4+0x27e>
1a003aee:	4618      	mov	r0, r3
1a003af0:	e795      	b.n	1a003a1e <__udivmoddi4+0x1da>
1a003af2:	4667      	mov	r7, ip
1a003af4:	e7d1      	b.n	1a003a9a <__udivmoddi4+0x256>
1a003af6:	4681      	mov	r9, r0
1a003af8:	e77c      	b.n	1a0039f4 <__udivmoddi4+0x1b0>
1a003afa:	3802      	subs	r0, #2
1a003afc:	442c      	add	r4, r5
1a003afe:	e747      	b.n	1a003990 <__udivmoddi4+0x14c>
1a003b00:	f1ac 0c02 	sub.w	ip, ip, #2
1a003b04:	442b      	add	r3, r5
1a003b06:	e72f      	b.n	1a003968 <__udivmoddi4+0x124>
1a003b08:	4638      	mov	r0, r7
1a003b0a:	e708      	b.n	1a00391e <__udivmoddi4+0xda>
1a003b0c:	4637      	mov	r7, r6
1a003b0e:	e6e9      	b.n	1a0038e4 <__udivmoddi4+0xa0>

1a003b10 <__aeabi_idiv0>:
1a003b10:	4770      	bx	lr
1a003b12:	bf00      	nop

1a003b14 <__libc_init_array>:
1a003b14:	b570      	push	{r4, r5, r6, lr}
1a003b16:	4e0d      	ldr	r6, [pc, #52]	; (1a003b4c <__libc_init_array+0x38>)
1a003b18:	4c0d      	ldr	r4, [pc, #52]	; (1a003b50 <__libc_init_array+0x3c>)
1a003b1a:	1ba4      	subs	r4, r4, r6
1a003b1c:	10a4      	asrs	r4, r4, #2
1a003b1e:	2500      	movs	r5, #0
1a003b20:	42a5      	cmp	r5, r4
1a003b22:	d109      	bne.n	1a003b38 <__libc_init_array+0x24>
1a003b24:	4e0b      	ldr	r6, [pc, #44]	; (1a003b54 <__libc_init_array+0x40>)
1a003b26:	4c0c      	ldr	r4, [pc, #48]	; (1a003b58 <__libc_init_array+0x44>)
1a003b28:	f7fc fca0 	bl	1a00046c <_init>
1a003b2c:	1ba4      	subs	r4, r4, r6
1a003b2e:	10a4      	asrs	r4, r4, #2
1a003b30:	2500      	movs	r5, #0
1a003b32:	42a5      	cmp	r5, r4
1a003b34:	d105      	bne.n	1a003b42 <__libc_init_array+0x2e>
1a003b36:	bd70      	pop	{r4, r5, r6, pc}
1a003b38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003b3c:	4798      	blx	r3
1a003b3e:	3501      	adds	r5, #1
1a003b40:	e7ee      	b.n	1a003b20 <__libc_init_array+0xc>
1a003b42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003b46:	4798      	blx	r3
1a003b48:	3501      	adds	r5, #1
1a003b4a:	e7f2      	b.n	1a003b32 <__libc_init_array+0x1e>
1a003b4c:	1a0054d4 	.word	0x1a0054d4
1a003b50:	1a0054d4 	.word	0x1a0054d4
1a003b54:	1a0054d4 	.word	0x1a0054d4
1a003b58:	1a0054d8 	.word	0x1a0054d8

1a003b5c <memcpy>:
1a003b5c:	b510      	push	{r4, lr}
1a003b5e:	1e43      	subs	r3, r0, #1
1a003b60:	440a      	add	r2, r1
1a003b62:	4291      	cmp	r1, r2
1a003b64:	d100      	bne.n	1a003b68 <memcpy+0xc>
1a003b66:	bd10      	pop	{r4, pc}
1a003b68:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003b70:	e7f7      	b.n	1a003b62 <memcpy+0x6>

1a003b72 <memset>:
1a003b72:	4402      	add	r2, r0
1a003b74:	4603      	mov	r3, r0
1a003b76:	4293      	cmp	r3, r2
1a003b78:	d100      	bne.n	1a003b7c <memset+0xa>
1a003b7a:	4770      	bx	lr
1a003b7c:	f803 1b01 	strb.w	r1, [r3], #1
1a003b80:	e7f9      	b.n	1a003b76 <memset+0x4>
1a003b82:	Address 0x000000001a003b82 is out of bounds.


1a003b84 <iprintf>:
1a003b84:	b40f      	push	{r0, r1, r2, r3}
1a003b86:	4b0a      	ldr	r3, [pc, #40]	; (1a003bb0 <iprintf+0x2c>)
1a003b88:	b513      	push	{r0, r1, r4, lr}
1a003b8a:	681c      	ldr	r4, [r3, #0]
1a003b8c:	b124      	cbz	r4, 1a003b98 <iprintf+0x14>
1a003b8e:	69a3      	ldr	r3, [r4, #24]
1a003b90:	b913      	cbnz	r3, 1a003b98 <iprintf+0x14>
1a003b92:	4620      	mov	r0, r4
1a003b94:	f000 f9e6 	bl	1a003f64 <__sinit>
1a003b98:	ab05      	add	r3, sp, #20
1a003b9a:	9a04      	ldr	r2, [sp, #16]
1a003b9c:	68a1      	ldr	r1, [r4, #8]
1a003b9e:	9301      	str	r3, [sp, #4]
1a003ba0:	4620      	mov	r0, r4
1a003ba2:	f000 fcf1 	bl	1a004588 <_vfiprintf_r>
1a003ba6:	b002      	add	sp, #8
1a003ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003bac:	b004      	add	sp, #16
1a003bae:	4770      	bx	lr
1a003bb0:	10000098 	.word	0x10000098

1a003bb4 <siprintf>:
1a003bb4:	b40e      	push	{r1, r2, r3}
1a003bb6:	b500      	push	{lr}
1a003bb8:	b09c      	sub	sp, #112	; 0x70
1a003bba:	ab1d      	add	r3, sp, #116	; 0x74
1a003bbc:	9002      	str	r0, [sp, #8]
1a003bbe:	9006      	str	r0, [sp, #24]
1a003bc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1a003bc4:	4809      	ldr	r0, [pc, #36]	; (1a003bec <siprintf+0x38>)
1a003bc6:	9107      	str	r1, [sp, #28]
1a003bc8:	9104      	str	r1, [sp, #16]
1a003bca:	4909      	ldr	r1, [pc, #36]	; (1a003bf0 <siprintf+0x3c>)
1a003bcc:	f853 2b04 	ldr.w	r2, [r3], #4
1a003bd0:	9105      	str	r1, [sp, #20]
1a003bd2:	6800      	ldr	r0, [r0, #0]
1a003bd4:	9301      	str	r3, [sp, #4]
1a003bd6:	a902      	add	r1, sp, #8
1a003bd8:	f000 fbb4 	bl	1a004344 <_svfiprintf_r>
1a003bdc:	9b02      	ldr	r3, [sp, #8]
1a003bde:	2200      	movs	r2, #0
1a003be0:	701a      	strb	r2, [r3, #0]
1a003be2:	b01c      	add	sp, #112	; 0x70
1a003be4:	f85d eb04 	ldr.w	lr, [sp], #4
1a003be8:	b003      	add	sp, #12
1a003bea:	4770      	bx	lr
1a003bec:	10000098 	.word	0x10000098
1a003bf0:	ffff0208 	.word	0xffff0208

1a003bf4 <strlen>:
1a003bf4:	4603      	mov	r3, r0
1a003bf6:	f813 2b01 	ldrb.w	r2, [r3], #1
1a003bfa:	2a00      	cmp	r2, #0
1a003bfc:	d1fb      	bne.n	1a003bf6 <strlen+0x2>
1a003bfe:	1a18      	subs	r0, r3, r0
1a003c00:	3801      	subs	r0, #1
1a003c02:	4770      	bx	lr

1a003c04 <__swbuf_r>:
1a003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003c06:	460e      	mov	r6, r1
1a003c08:	4614      	mov	r4, r2
1a003c0a:	4605      	mov	r5, r0
1a003c0c:	b118      	cbz	r0, 1a003c16 <__swbuf_r+0x12>
1a003c0e:	6983      	ldr	r3, [r0, #24]
1a003c10:	b90b      	cbnz	r3, 1a003c16 <__swbuf_r+0x12>
1a003c12:	f000 f9a7 	bl	1a003f64 <__sinit>
1a003c16:	4b21      	ldr	r3, [pc, #132]	; (1a003c9c <__swbuf_r+0x98>)
1a003c18:	429c      	cmp	r4, r3
1a003c1a:	d12a      	bne.n	1a003c72 <__swbuf_r+0x6e>
1a003c1c:	686c      	ldr	r4, [r5, #4]
1a003c1e:	69a3      	ldr	r3, [r4, #24]
1a003c20:	60a3      	str	r3, [r4, #8]
1a003c22:	89a3      	ldrh	r3, [r4, #12]
1a003c24:	071a      	lsls	r2, r3, #28
1a003c26:	d52e      	bpl.n	1a003c86 <__swbuf_r+0x82>
1a003c28:	6923      	ldr	r3, [r4, #16]
1a003c2a:	b363      	cbz	r3, 1a003c86 <__swbuf_r+0x82>
1a003c2c:	6923      	ldr	r3, [r4, #16]
1a003c2e:	6820      	ldr	r0, [r4, #0]
1a003c30:	1ac0      	subs	r0, r0, r3
1a003c32:	6963      	ldr	r3, [r4, #20]
1a003c34:	b2f6      	uxtb	r6, r6
1a003c36:	4283      	cmp	r3, r0
1a003c38:	4637      	mov	r7, r6
1a003c3a:	dc04      	bgt.n	1a003c46 <__swbuf_r+0x42>
1a003c3c:	4621      	mov	r1, r4
1a003c3e:	4628      	mov	r0, r5
1a003c40:	f000 f926 	bl	1a003e90 <_fflush_r>
1a003c44:	bb28      	cbnz	r0, 1a003c92 <__swbuf_r+0x8e>
1a003c46:	68a3      	ldr	r3, [r4, #8]
1a003c48:	3b01      	subs	r3, #1
1a003c4a:	60a3      	str	r3, [r4, #8]
1a003c4c:	6823      	ldr	r3, [r4, #0]
1a003c4e:	1c5a      	adds	r2, r3, #1
1a003c50:	6022      	str	r2, [r4, #0]
1a003c52:	701e      	strb	r6, [r3, #0]
1a003c54:	6963      	ldr	r3, [r4, #20]
1a003c56:	3001      	adds	r0, #1
1a003c58:	4283      	cmp	r3, r0
1a003c5a:	d004      	beq.n	1a003c66 <__swbuf_r+0x62>
1a003c5c:	89a3      	ldrh	r3, [r4, #12]
1a003c5e:	07db      	lsls	r3, r3, #31
1a003c60:	d519      	bpl.n	1a003c96 <__swbuf_r+0x92>
1a003c62:	2e0a      	cmp	r6, #10
1a003c64:	d117      	bne.n	1a003c96 <__swbuf_r+0x92>
1a003c66:	4621      	mov	r1, r4
1a003c68:	4628      	mov	r0, r5
1a003c6a:	f000 f911 	bl	1a003e90 <_fflush_r>
1a003c6e:	b190      	cbz	r0, 1a003c96 <__swbuf_r+0x92>
1a003c70:	e00f      	b.n	1a003c92 <__swbuf_r+0x8e>
1a003c72:	4b0b      	ldr	r3, [pc, #44]	; (1a003ca0 <__swbuf_r+0x9c>)
1a003c74:	429c      	cmp	r4, r3
1a003c76:	d101      	bne.n	1a003c7c <__swbuf_r+0x78>
1a003c78:	68ac      	ldr	r4, [r5, #8]
1a003c7a:	e7d0      	b.n	1a003c1e <__swbuf_r+0x1a>
1a003c7c:	4b09      	ldr	r3, [pc, #36]	; (1a003ca4 <__swbuf_r+0xa0>)
1a003c7e:	429c      	cmp	r4, r3
1a003c80:	bf08      	it	eq
1a003c82:	68ec      	ldreq	r4, [r5, #12]
1a003c84:	e7cb      	b.n	1a003c1e <__swbuf_r+0x1a>
1a003c86:	4621      	mov	r1, r4
1a003c88:	4628      	mov	r0, r5
1a003c8a:	f000 f80d 	bl	1a003ca8 <__swsetup_r>
1a003c8e:	2800      	cmp	r0, #0
1a003c90:	d0cc      	beq.n	1a003c2c <__swbuf_r+0x28>
1a003c92:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a003c96:	4638      	mov	r0, r7
1a003c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003c9a:	bf00      	nop
1a003c9c:	1a00545c 	.word	0x1a00545c
1a003ca0:	1a00547c 	.word	0x1a00547c
1a003ca4:	1a00543c 	.word	0x1a00543c

1a003ca8 <__swsetup_r>:
1a003ca8:	4b32      	ldr	r3, [pc, #200]	; (1a003d74 <__swsetup_r+0xcc>)
1a003caa:	b570      	push	{r4, r5, r6, lr}
1a003cac:	681d      	ldr	r5, [r3, #0]
1a003cae:	4606      	mov	r6, r0
1a003cb0:	460c      	mov	r4, r1
1a003cb2:	b125      	cbz	r5, 1a003cbe <__swsetup_r+0x16>
1a003cb4:	69ab      	ldr	r3, [r5, #24]
1a003cb6:	b913      	cbnz	r3, 1a003cbe <__swsetup_r+0x16>
1a003cb8:	4628      	mov	r0, r5
1a003cba:	f000 f953 	bl	1a003f64 <__sinit>
1a003cbe:	4b2e      	ldr	r3, [pc, #184]	; (1a003d78 <__swsetup_r+0xd0>)
1a003cc0:	429c      	cmp	r4, r3
1a003cc2:	d10f      	bne.n	1a003ce4 <__swsetup_r+0x3c>
1a003cc4:	686c      	ldr	r4, [r5, #4]
1a003cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003cca:	b29a      	uxth	r2, r3
1a003ccc:	0715      	lsls	r5, r2, #28
1a003cce:	d42c      	bmi.n	1a003d2a <__swsetup_r+0x82>
1a003cd0:	06d0      	lsls	r0, r2, #27
1a003cd2:	d411      	bmi.n	1a003cf8 <__swsetup_r+0x50>
1a003cd4:	2209      	movs	r2, #9
1a003cd6:	6032      	str	r2, [r6, #0]
1a003cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003cdc:	81a3      	strh	r3, [r4, #12]
1a003cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003ce2:	e03e      	b.n	1a003d62 <__swsetup_r+0xba>
1a003ce4:	4b25      	ldr	r3, [pc, #148]	; (1a003d7c <__swsetup_r+0xd4>)
1a003ce6:	429c      	cmp	r4, r3
1a003ce8:	d101      	bne.n	1a003cee <__swsetup_r+0x46>
1a003cea:	68ac      	ldr	r4, [r5, #8]
1a003cec:	e7eb      	b.n	1a003cc6 <__swsetup_r+0x1e>
1a003cee:	4b24      	ldr	r3, [pc, #144]	; (1a003d80 <__swsetup_r+0xd8>)
1a003cf0:	429c      	cmp	r4, r3
1a003cf2:	bf08      	it	eq
1a003cf4:	68ec      	ldreq	r4, [r5, #12]
1a003cf6:	e7e6      	b.n	1a003cc6 <__swsetup_r+0x1e>
1a003cf8:	0751      	lsls	r1, r2, #29
1a003cfa:	d512      	bpl.n	1a003d22 <__swsetup_r+0x7a>
1a003cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003cfe:	b141      	cbz	r1, 1a003d12 <__swsetup_r+0x6a>
1a003d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003d04:	4299      	cmp	r1, r3
1a003d06:	d002      	beq.n	1a003d0e <__swsetup_r+0x66>
1a003d08:	4630      	mov	r0, r6
1a003d0a:	f000 fa19 	bl	1a004140 <_free_r>
1a003d0e:	2300      	movs	r3, #0
1a003d10:	6363      	str	r3, [r4, #52]	; 0x34
1a003d12:	89a3      	ldrh	r3, [r4, #12]
1a003d14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a003d18:	81a3      	strh	r3, [r4, #12]
1a003d1a:	2300      	movs	r3, #0
1a003d1c:	6063      	str	r3, [r4, #4]
1a003d1e:	6923      	ldr	r3, [r4, #16]
1a003d20:	6023      	str	r3, [r4, #0]
1a003d22:	89a3      	ldrh	r3, [r4, #12]
1a003d24:	f043 0308 	orr.w	r3, r3, #8
1a003d28:	81a3      	strh	r3, [r4, #12]
1a003d2a:	6923      	ldr	r3, [r4, #16]
1a003d2c:	b94b      	cbnz	r3, 1a003d42 <__swsetup_r+0x9a>
1a003d2e:	89a3      	ldrh	r3, [r4, #12]
1a003d30:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a003d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a003d38:	d003      	beq.n	1a003d42 <__swsetup_r+0x9a>
1a003d3a:	4621      	mov	r1, r4
1a003d3c:	4630      	mov	r0, r6
1a003d3e:	f000 f9bf 	bl	1a0040c0 <__smakebuf_r>
1a003d42:	89a2      	ldrh	r2, [r4, #12]
1a003d44:	f012 0301 	ands.w	r3, r2, #1
1a003d48:	d00c      	beq.n	1a003d64 <__swsetup_r+0xbc>
1a003d4a:	2300      	movs	r3, #0
1a003d4c:	60a3      	str	r3, [r4, #8]
1a003d4e:	6963      	ldr	r3, [r4, #20]
1a003d50:	425b      	negs	r3, r3
1a003d52:	61a3      	str	r3, [r4, #24]
1a003d54:	6923      	ldr	r3, [r4, #16]
1a003d56:	b953      	cbnz	r3, 1a003d6e <__swsetup_r+0xc6>
1a003d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003d5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a003d60:	d1ba      	bne.n	1a003cd8 <__swsetup_r+0x30>
1a003d62:	bd70      	pop	{r4, r5, r6, pc}
1a003d64:	0792      	lsls	r2, r2, #30
1a003d66:	bf58      	it	pl
1a003d68:	6963      	ldrpl	r3, [r4, #20]
1a003d6a:	60a3      	str	r3, [r4, #8]
1a003d6c:	e7f2      	b.n	1a003d54 <__swsetup_r+0xac>
1a003d6e:	2000      	movs	r0, #0
1a003d70:	e7f7      	b.n	1a003d62 <__swsetup_r+0xba>
1a003d72:	bf00      	nop
1a003d74:	10000098 	.word	0x10000098
1a003d78:	1a00545c 	.word	0x1a00545c
1a003d7c:	1a00547c 	.word	0x1a00547c
1a003d80:	1a00543c 	.word	0x1a00543c

1a003d84 <__sflush_r>:
1a003d84:	898a      	ldrh	r2, [r1, #12]
1a003d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003d8a:	4605      	mov	r5, r0
1a003d8c:	0710      	lsls	r0, r2, #28
1a003d8e:	460c      	mov	r4, r1
1a003d90:	d458      	bmi.n	1a003e44 <__sflush_r+0xc0>
1a003d92:	684b      	ldr	r3, [r1, #4]
1a003d94:	2b00      	cmp	r3, #0
1a003d96:	dc05      	bgt.n	1a003da4 <__sflush_r+0x20>
1a003d98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a003d9a:	2b00      	cmp	r3, #0
1a003d9c:	dc02      	bgt.n	1a003da4 <__sflush_r+0x20>
1a003d9e:	2000      	movs	r0, #0
1a003da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003da6:	2e00      	cmp	r6, #0
1a003da8:	d0f9      	beq.n	1a003d9e <__sflush_r+0x1a>
1a003daa:	2300      	movs	r3, #0
1a003dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003db0:	682f      	ldr	r7, [r5, #0]
1a003db2:	6a21      	ldr	r1, [r4, #32]
1a003db4:	602b      	str	r3, [r5, #0]
1a003db6:	d032      	beq.n	1a003e1e <__sflush_r+0x9a>
1a003db8:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a003dba:	89a3      	ldrh	r3, [r4, #12]
1a003dbc:	075a      	lsls	r2, r3, #29
1a003dbe:	d505      	bpl.n	1a003dcc <__sflush_r+0x48>
1a003dc0:	6863      	ldr	r3, [r4, #4]
1a003dc2:	1ac0      	subs	r0, r0, r3
1a003dc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003dc6:	b10b      	cbz	r3, 1a003dcc <__sflush_r+0x48>
1a003dc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003dca:	1ac0      	subs	r0, r0, r3
1a003dcc:	2300      	movs	r3, #0
1a003dce:	4602      	mov	r2, r0
1a003dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003dd2:	6a21      	ldr	r1, [r4, #32]
1a003dd4:	4628      	mov	r0, r5
1a003dd6:	47b0      	blx	r6
1a003dd8:	1c43      	adds	r3, r0, #1
1a003dda:	89a3      	ldrh	r3, [r4, #12]
1a003ddc:	d106      	bne.n	1a003dec <__sflush_r+0x68>
1a003dde:	6829      	ldr	r1, [r5, #0]
1a003de0:	291d      	cmp	r1, #29
1a003de2:	d848      	bhi.n	1a003e76 <__sflush_r+0xf2>
1a003de4:	4a29      	ldr	r2, [pc, #164]	; (1a003e8c <__sflush_r+0x108>)
1a003de6:	40ca      	lsrs	r2, r1
1a003de8:	07d6      	lsls	r6, r2, #31
1a003dea:	d544      	bpl.n	1a003e76 <__sflush_r+0xf2>
1a003dec:	2200      	movs	r2, #0
1a003dee:	6062      	str	r2, [r4, #4]
1a003df0:	04d9      	lsls	r1, r3, #19
1a003df2:	6922      	ldr	r2, [r4, #16]
1a003df4:	6022      	str	r2, [r4, #0]
1a003df6:	d504      	bpl.n	1a003e02 <__sflush_r+0x7e>
1a003df8:	1c42      	adds	r2, r0, #1
1a003dfa:	d101      	bne.n	1a003e00 <__sflush_r+0x7c>
1a003dfc:	682b      	ldr	r3, [r5, #0]
1a003dfe:	b903      	cbnz	r3, 1a003e02 <__sflush_r+0x7e>
1a003e00:	6560      	str	r0, [r4, #84]	; 0x54
1a003e02:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003e04:	602f      	str	r7, [r5, #0]
1a003e06:	2900      	cmp	r1, #0
1a003e08:	d0c9      	beq.n	1a003d9e <__sflush_r+0x1a>
1a003e0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003e0e:	4299      	cmp	r1, r3
1a003e10:	d002      	beq.n	1a003e18 <__sflush_r+0x94>
1a003e12:	4628      	mov	r0, r5
1a003e14:	f000 f994 	bl	1a004140 <_free_r>
1a003e18:	2000      	movs	r0, #0
1a003e1a:	6360      	str	r0, [r4, #52]	; 0x34
1a003e1c:	e7c0      	b.n	1a003da0 <__sflush_r+0x1c>
1a003e1e:	2301      	movs	r3, #1
1a003e20:	4628      	mov	r0, r5
1a003e22:	47b0      	blx	r6
1a003e24:	1c41      	adds	r1, r0, #1
1a003e26:	d1c8      	bne.n	1a003dba <__sflush_r+0x36>
1a003e28:	682b      	ldr	r3, [r5, #0]
1a003e2a:	2b00      	cmp	r3, #0
1a003e2c:	d0c5      	beq.n	1a003dba <__sflush_r+0x36>
1a003e2e:	2b1d      	cmp	r3, #29
1a003e30:	d001      	beq.n	1a003e36 <__sflush_r+0xb2>
1a003e32:	2b16      	cmp	r3, #22
1a003e34:	d101      	bne.n	1a003e3a <__sflush_r+0xb6>
1a003e36:	602f      	str	r7, [r5, #0]
1a003e38:	e7b1      	b.n	1a003d9e <__sflush_r+0x1a>
1a003e3a:	89a3      	ldrh	r3, [r4, #12]
1a003e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003e40:	81a3      	strh	r3, [r4, #12]
1a003e42:	e7ad      	b.n	1a003da0 <__sflush_r+0x1c>
1a003e44:	690f      	ldr	r7, [r1, #16]
1a003e46:	2f00      	cmp	r7, #0
1a003e48:	d0a9      	beq.n	1a003d9e <__sflush_r+0x1a>
1a003e4a:	0793      	lsls	r3, r2, #30
1a003e4c:	680e      	ldr	r6, [r1, #0]
1a003e4e:	bf08      	it	eq
1a003e50:	694b      	ldreq	r3, [r1, #20]
1a003e52:	600f      	str	r7, [r1, #0]
1a003e54:	bf18      	it	ne
1a003e56:	2300      	movne	r3, #0
1a003e58:	eba6 0807 	sub.w	r8, r6, r7
1a003e5c:	608b      	str	r3, [r1, #8]
1a003e5e:	f1b8 0f00 	cmp.w	r8, #0
1a003e62:	dd9c      	ble.n	1a003d9e <__sflush_r+0x1a>
1a003e64:	4643      	mov	r3, r8
1a003e66:	463a      	mov	r2, r7
1a003e68:	6a21      	ldr	r1, [r4, #32]
1a003e6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a003e6c:	4628      	mov	r0, r5
1a003e6e:	47b0      	blx	r6
1a003e70:	2800      	cmp	r0, #0
1a003e72:	dc06      	bgt.n	1a003e82 <__sflush_r+0xfe>
1a003e74:	89a3      	ldrh	r3, [r4, #12]
1a003e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003e7a:	81a3      	strh	r3, [r4, #12]
1a003e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003e80:	e78e      	b.n	1a003da0 <__sflush_r+0x1c>
1a003e82:	4407      	add	r7, r0
1a003e84:	eba8 0800 	sub.w	r8, r8, r0
1a003e88:	e7e9      	b.n	1a003e5e <__sflush_r+0xda>
1a003e8a:	bf00      	nop
1a003e8c:	20400001 	.word	0x20400001

1a003e90 <_fflush_r>:
1a003e90:	b538      	push	{r3, r4, r5, lr}
1a003e92:	690b      	ldr	r3, [r1, #16]
1a003e94:	4605      	mov	r5, r0
1a003e96:	460c      	mov	r4, r1
1a003e98:	b1db      	cbz	r3, 1a003ed2 <_fflush_r+0x42>
1a003e9a:	b118      	cbz	r0, 1a003ea4 <_fflush_r+0x14>
1a003e9c:	6983      	ldr	r3, [r0, #24]
1a003e9e:	b90b      	cbnz	r3, 1a003ea4 <_fflush_r+0x14>
1a003ea0:	f000 f860 	bl	1a003f64 <__sinit>
1a003ea4:	4b0c      	ldr	r3, [pc, #48]	; (1a003ed8 <_fflush_r+0x48>)
1a003ea6:	429c      	cmp	r4, r3
1a003ea8:	d109      	bne.n	1a003ebe <_fflush_r+0x2e>
1a003eaa:	686c      	ldr	r4, [r5, #4]
1a003eac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003eb0:	b17b      	cbz	r3, 1a003ed2 <_fflush_r+0x42>
1a003eb2:	4621      	mov	r1, r4
1a003eb4:	4628      	mov	r0, r5
1a003eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003eba:	f7ff bf63 	b.w	1a003d84 <__sflush_r>
1a003ebe:	4b07      	ldr	r3, [pc, #28]	; (1a003edc <_fflush_r+0x4c>)
1a003ec0:	429c      	cmp	r4, r3
1a003ec2:	d101      	bne.n	1a003ec8 <_fflush_r+0x38>
1a003ec4:	68ac      	ldr	r4, [r5, #8]
1a003ec6:	e7f1      	b.n	1a003eac <_fflush_r+0x1c>
1a003ec8:	4b05      	ldr	r3, [pc, #20]	; (1a003ee0 <_fflush_r+0x50>)
1a003eca:	429c      	cmp	r4, r3
1a003ecc:	bf08      	it	eq
1a003ece:	68ec      	ldreq	r4, [r5, #12]
1a003ed0:	e7ec      	b.n	1a003eac <_fflush_r+0x1c>
1a003ed2:	2000      	movs	r0, #0
1a003ed4:	bd38      	pop	{r3, r4, r5, pc}
1a003ed6:	bf00      	nop
1a003ed8:	1a00545c 	.word	0x1a00545c
1a003edc:	1a00547c 	.word	0x1a00547c
1a003ee0:	1a00543c 	.word	0x1a00543c

1a003ee4 <std>:
1a003ee4:	2300      	movs	r3, #0
1a003ee6:	b510      	push	{r4, lr}
1a003ee8:	4604      	mov	r4, r0
1a003eea:	e9c0 3300 	strd	r3, r3, [r0]
1a003eee:	6083      	str	r3, [r0, #8]
1a003ef0:	8181      	strh	r1, [r0, #12]
1a003ef2:	6643      	str	r3, [r0, #100]	; 0x64
1a003ef4:	81c2      	strh	r2, [r0, #14]
1a003ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a003efa:	6183      	str	r3, [r0, #24]
1a003efc:	4619      	mov	r1, r3
1a003efe:	2208      	movs	r2, #8
1a003f00:	305c      	adds	r0, #92	; 0x5c
1a003f02:	f7ff fe36 	bl	1a003b72 <memset>
1a003f06:	4b05      	ldr	r3, [pc, #20]	; (1a003f1c <std+0x38>)
1a003f08:	6263      	str	r3, [r4, #36]	; 0x24
1a003f0a:	4b05      	ldr	r3, [pc, #20]	; (1a003f20 <std+0x3c>)
1a003f0c:	62a3      	str	r3, [r4, #40]	; 0x28
1a003f0e:	4b05      	ldr	r3, [pc, #20]	; (1a003f24 <std+0x40>)
1a003f10:	62e3      	str	r3, [r4, #44]	; 0x2c
1a003f12:	4b05      	ldr	r3, [pc, #20]	; (1a003f28 <std+0x44>)
1a003f14:	6224      	str	r4, [r4, #32]
1a003f16:	6323      	str	r3, [r4, #48]	; 0x30
1a003f18:	bd10      	pop	{r4, pc}
1a003f1a:	bf00      	nop
1a003f1c:	1a004ac5 	.word	0x1a004ac5
1a003f20:	1a004ae7 	.word	0x1a004ae7
1a003f24:	1a004b1f 	.word	0x1a004b1f
1a003f28:	1a004b43 	.word	0x1a004b43

1a003f2c <_cleanup_r>:
1a003f2c:	4901      	ldr	r1, [pc, #4]	; (1a003f34 <_cleanup_r+0x8>)
1a003f2e:	f000 b885 	b.w	1a00403c <_fwalk_reent>
1a003f32:	bf00      	nop
1a003f34:	1a003e91 	.word	0x1a003e91

1a003f38 <__sfmoreglue>:
1a003f38:	b570      	push	{r4, r5, r6, lr}
1a003f3a:	1e4a      	subs	r2, r1, #1
1a003f3c:	2568      	movs	r5, #104	; 0x68
1a003f3e:	4355      	muls	r5, r2
1a003f40:	460e      	mov	r6, r1
1a003f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a003f46:	f000 f949 	bl	1a0041dc <_malloc_r>
1a003f4a:	4604      	mov	r4, r0
1a003f4c:	b140      	cbz	r0, 1a003f60 <__sfmoreglue+0x28>
1a003f4e:	2100      	movs	r1, #0
1a003f50:	e9c0 1600 	strd	r1, r6, [r0]
1a003f54:	300c      	adds	r0, #12
1a003f56:	60a0      	str	r0, [r4, #8]
1a003f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a003f5c:	f7ff fe09 	bl	1a003b72 <memset>
1a003f60:	4620      	mov	r0, r4
1a003f62:	bd70      	pop	{r4, r5, r6, pc}

1a003f64 <__sinit>:
1a003f64:	6983      	ldr	r3, [r0, #24]
1a003f66:	b510      	push	{r4, lr}
1a003f68:	4604      	mov	r4, r0
1a003f6a:	bb33      	cbnz	r3, 1a003fba <__sinit+0x56>
1a003f6c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a003f70:	6503      	str	r3, [r0, #80]	; 0x50
1a003f72:	4b12      	ldr	r3, [pc, #72]	; (1a003fbc <__sinit+0x58>)
1a003f74:	4a12      	ldr	r2, [pc, #72]	; (1a003fc0 <__sinit+0x5c>)
1a003f76:	681b      	ldr	r3, [r3, #0]
1a003f78:	6282      	str	r2, [r0, #40]	; 0x28
1a003f7a:	4298      	cmp	r0, r3
1a003f7c:	bf04      	itt	eq
1a003f7e:	2301      	moveq	r3, #1
1a003f80:	6183      	streq	r3, [r0, #24]
1a003f82:	f000 f81f 	bl	1a003fc4 <__sfp>
1a003f86:	6060      	str	r0, [r4, #4]
1a003f88:	4620      	mov	r0, r4
1a003f8a:	f000 f81b 	bl	1a003fc4 <__sfp>
1a003f8e:	60a0      	str	r0, [r4, #8]
1a003f90:	4620      	mov	r0, r4
1a003f92:	f000 f817 	bl	1a003fc4 <__sfp>
1a003f96:	2200      	movs	r2, #0
1a003f98:	60e0      	str	r0, [r4, #12]
1a003f9a:	2104      	movs	r1, #4
1a003f9c:	6860      	ldr	r0, [r4, #4]
1a003f9e:	f7ff ffa1 	bl	1a003ee4 <std>
1a003fa2:	2201      	movs	r2, #1
1a003fa4:	2109      	movs	r1, #9
1a003fa6:	68a0      	ldr	r0, [r4, #8]
1a003fa8:	f7ff ff9c 	bl	1a003ee4 <std>
1a003fac:	2202      	movs	r2, #2
1a003fae:	2112      	movs	r1, #18
1a003fb0:	68e0      	ldr	r0, [r4, #12]
1a003fb2:	f7ff ff97 	bl	1a003ee4 <std>
1a003fb6:	2301      	movs	r3, #1
1a003fb8:	61a3      	str	r3, [r4, #24]
1a003fba:	bd10      	pop	{r4, pc}
1a003fbc:	1a00549c 	.word	0x1a00549c
1a003fc0:	1a003f2d 	.word	0x1a003f2d

1a003fc4 <__sfp>:
1a003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003fc6:	4b1b      	ldr	r3, [pc, #108]	; (1a004034 <__sfp+0x70>)
1a003fc8:	681e      	ldr	r6, [r3, #0]
1a003fca:	69b3      	ldr	r3, [r6, #24]
1a003fcc:	4607      	mov	r7, r0
1a003fce:	b913      	cbnz	r3, 1a003fd6 <__sfp+0x12>
1a003fd0:	4630      	mov	r0, r6
1a003fd2:	f7ff ffc7 	bl	1a003f64 <__sinit>
1a003fd6:	3648      	adds	r6, #72	; 0x48
1a003fd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a003fdc:	3b01      	subs	r3, #1
1a003fde:	d503      	bpl.n	1a003fe8 <__sfp+0x24>
1a003fe0:	6833      	ldr	r3, [r6, #0]
1a003fe2:	b133      	cbz	r3, 1a003ff2 <__sfp+0x2e>
1a003fe4:	6836      	ldr	r6, [r6, #0]
1a003fe6:	e7f7      	b.n	1a003fd8 <__sfp+0x14>
1a003fe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a003fec:	b16d      	cbz	r5, 1a00400a <__sfp+0x46>
1a003fee:	3468      	adds	r4, #104	; 0x68
1a003ff0:	e7f4      	b.n	1a003fdc <__sfp+0x18>
1a003ff2:	2104      	movs	r1, #4
1a003ff4:	4638      	mov	r0, r7
1a003ff6:	f7ff ff9f 	bl	1a003f38 <__sfmoreglue>
1a003ffa:	6030      	str	r0, [r6, #0]
1a003ffc:	2800      	cmp	r0, #0
1a003ffe:	d1f1      	bne.n	1a003fe4 <__sfp+0x20>
1a004000:	230c      	movs	r3, #12
1a004002:	603b      	str	r3, [r7, #0]
1a004004:	4604      	mov	r4, r0
1a004006:	4620      	mov	r0, r4
1a004008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00400a:	4b0b      	ldr	r3, [pc, #44]	; (1a004038 <__sfp+0x74>)
1a00400c:	6665      	str	r5, [r4, #100]	; 0x64
1a00400e:	e9c4 5500 	strd	r5, r5, [r4]
1a004012:	60a5      	str	r5, [r4, #8]
1a004014:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a004018:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a00401c:	2208      	movs	r2, #8
1a00401e:	4629      	mov	r1, r5
1a004020:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a004024:	f7ff fda5 	bl	1a003b72 <memset>
1a004028:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a00402c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a004030:	e7e9      	b.n	1a004006 <__sfp+0x42>
1a004032:	bf00      	nop
1a004034:	1a00549c 	.word	0x1a00549c
1a004038:	ffff0001 	.word	0xffff0001

1a00403c <_fwalk_reent>:
1a00403c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004040:	4680      	mov	r8, r0
1a004042:	4689      	mov	r9, r1
1a004044:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a004048:	2600      	movs	r6, #0
1a00404a:	b914      	cbnz	r4, 1a004052 <_fwalk_reent+0x16>
1a00404c:	4630      	mov	r0, r6
1a00404e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004052:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a004056:	3f01      	subs	r7, #1
1a004058:	d501      	bpl.n	1a00405e <_fwalk_reent+0x22>
1a00405a:	6824      	ldr	r4, [r4, #0]
1a00405c:	e7f5      	b.n	1a00404a <_fwalk_reent+0xe>
1a00405e:	89ab      	ldrh	r3, [r5, #12]
1a004060:	2b01      	cmp	r3, #1
1a004062:	d907      	bls.n	1a004074 <_fwalk_reent+0x38>
1a004064:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a004068:	3301      	adds	r3, #1
1a00406a:	d003      	beq.n	1a004074 <_fwalk_reent+0x38>
1a00406c:	4629      	mov	r1, r5
1a00406e:	4640      	mov	r0, r8
1a004070:	47c8      	blx	r9
1a004072:	4306      	orrs	r6, r0
1a004074:	3568      	adds	r5, #104	; 0x68
1a004076:	e7ee      	b.n	1a004056 <_fwalk_reent+0x1a>

1a004078 <__swhatbuf_r>:
1a004078:	b570      	push	{r4, r5, r6, lr}
1a00407a:	460e      	mov	r6, r1
1a00407c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004080:	2900      	cmp	r1, #0
1a004082:	b096      	sub	sp, #88	; 0x58
1a004084:	4614      	mov	r4, r2
1a004086:	461d      	mov	r5, r3
1a004088:	da07      	bge.n	1a00409a <__swhatbuf_r+0x22>
1a00408a:	2300      	movs	r3, #0
1a00408c:	602b      	str	r3, [r5, #0]
1a00408e:	89b3      	ldrh	r3, [r6, #12]
1a004090:	061a      	lsls	r2, r3, #24
1a004092:	d410      	bmi.n	1a0040b6 <__swhatbuf_r+0x3e>
1a004094:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a004098:	e00e      	b.n	1a0040b8 <__swhatbuf_r+0x40>
1a00409a:	466a      	mov	r2, sp
1a00409c:	f7fc f9ec 	bl	1a000478 <_fstat_r>
1a0040a0:	2800      	cmp	r0, #0
1a0040a2:	dbf2      	blt.n	1a00408a <__swhatbuf_r+0x12>
1a0040a4:	9a01      	ldr	r2, [sp, #4]
1a0040a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0040aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0040ae:	425a      	negs	r2, r3
1a0040b0:	415a      	adcs	r2, r3
1a0040b2:	602a      	str	r2, [r5, #0]
1a0040b4:	e7ee      	b.n	1a004094 <__swhatbuf_r+0x1c>
1a0040b6:	2340      	movs	r3, #64	; 0x40
1a0040b8:	2000      	movs	r0, #0
1a0040ba:	6023      	str	r3, [r4, #0]
1a0040bc:	b016      	add	sp, #88	; 0x58
1a0040be:	bd70      	pop	{r4, r5, r6, pc}

1a0040c0 <__smakebuf_r>:
1a0040c0:	898b      	ldrh	r3, [r1, #12]
1a0040c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a0040c4:	079d      	lsls	r5, r3, #30
1a0040c6:	4606      	mov	r6, r0
1a0040c8:	460c      	mov	r4, r1
1a0040ca:	d507      	bpl.n	1a0040dc <__smakebuf_r+0x1c>
1a0040cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a0040d0:	6023      	str	r3, [r4, #0]
1a0040d2:	6123      	str	r3, [r4, #16]
1a0040d4:	2301      	movs	r3, #1
1a0040d6:	6163      	str	r3, [r4, #20]
1a0040d8:	b002      	add	sp, #8
1a0040da:	bd70      	pop	{r4, r5, r6, pc}
1a0040dc:	ab01      	add	r3, sp, #4
1a0040de:	466a      	mov	r2, sp
1a0040e0:	f7ff ffca 	bl	1a004078 <__swhatbuf_r>
1a0040e4:	9900      	ldr	r1, [sp, #0]
1a0040e6:	4605      	mov	r5, r0
1a0040e8:	4630      	mov	r0, r6
1a0040ea:	f000 f877 	bl	1a0041dc <_malloc_r>
1a0040ee:	b948      	cbnz	r0, 1a004104 <__smakebuf_r+0x44>
1a0040f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0040f4:	059a      	lsls	r2, r3, #22
1a0040f6:	d4ef      	bmi.n	1a0040d8 <__smakebuf_r+0x18>
1a0040f8:	f023 0303 	bic.w	r3, r3, #3
1a0040fc:	f043 0302 	orr.w	r3, r3, #2
1a004100:	81a3      	strh	r3, [r4, #12]
1a004102:	e7e3      	b.n	1a0040cc <__smakebuf_r+0xc>
1a004104:	4b0d      	ldr	r3, [pc, #52]	; (1a00413c <__smakebuf_r+0x7c>)
1a004106:	62b3      	str	r3, [r6, #40]	; 0x28
1a004108:	89a3      	ldrh	r3, [r4, #12]
1a00410a:	6020      	str	r0, [r4, #0]
1a00410c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004110:	81a3      	strh	r3, [r4, #12]
1a004112:	9b00      	ldr	r3, [sp, #0]
1a004114:	6163      	str	r3, [r4, #20]
1a004116:	9b01      	ldr	r3, [sp, #4]
1a004118:	6120      	str	r0, [r4, #16]
1a00411a:	b15b      	cbz	r3, 1a004134 <__smakebuf_r+0x74>
1a00411c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004120:	4630      	mov	r0, r6
1a004122:	f7fc f9ae 	bl	1a000482 <_isatty_r>
1a004126:	b128      	cbz	r0, 1a004134 <__smakebuf_r+0x74>
1a004128:	89a3      	ldrh	r3, [r4, #12]
1a00412a:	f023 0303 	bic.w	r3, r3, #3
1a00412e:	f043 0301 	orr.w	r3, r3, #1
1a004132:	81a3      	strh	r3, [r4, #12]
1a004134:	89a3      	ldrh	r3, [r4, #12]
1a004136:	431d      	orrs	r5, r3
1a004138:	81a5      	strh	r5, [r4, #12]
1a00413a:	e7cd      	b.n	1a0040d8 <__smakebuf_r+0x18>
1a00413c:	1a003f2d 	.word	0x1a003f2d

1a004140 <_free_r>:
1a004140:	b538      	push	{r3, r4, r5, lr}
1a004142:	4605      	mov	r5, r0
1a004144:	2900      	cmp	r1, #0
1a004146:	d045      	beq.n	1a0041d4 <_free_r+0x94>
1a004148:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a00414c:	1f0c      	subs	r4, r1, #4
1a00414e:	2b00      	cmp	r3, #0
1a004150:	bfb8      	it	lt
1a004152:	18e4      	addlt	r4, r4, r3
1a004154:	f000 fd65 	bl	1a004c22 <__malloc_lock>
1a004158:	4a1f      	ldr	r2, [pc, #124]	; (1a0041d8 <_free_r+0x98>)
1a00415a:	6813      	ldr	r3, [r2, #0]
1a00415c:	4610      	mov	r0, r2
1a00415e:	b933      	cbnz	r3, 1a00416e <_free_r+0x2e>
1a004160:	6063      	str	r3, [r4, #4]
1a004162:	6014      	str	r4, [r2, #0]
1a004164:	4628      	mov	r0, r5
1a004166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00416a:	f000 bd5b 	b.w	1a004c24 <__malloc_unlock>
1a00416e:	42a3      	cmp	r3, r4
1a004170:	d90c      	bls.n	1a00418c <_free_r+0x4c>
1a004172:	6821      	ldr	r1, [r4, #0]
1a004174:	1862      	adds	r2, r4, r1
1a004176:	4293      	cmp	r3, r2
1a004178:	bf04      	itt	eq
1a00417a:	681a      	ldreq	r2, [r3, #0]
1a00417c:	685b      	ldreq	r3, [r3, #4]
1a00417e:	6063      	str	r3, [r4, #4]
1a004180:	bf04      	itt	eq
1a004182:	1852      	addeq	r2, r2, r1
1a004184:	6022      	streq	r2, [r4, #0]
1a004186:	6004      	str	r4, [r0, #0]
1a004188:	e7ec      	b.n	1a004164 <_free_r+0x24>
1a00418a:	4613      	mov	r3, r2
1a00418c:	685a      	ldr	r2, [r3, #4]
1a00418e:	b10a      	cbz	r2, 1a004194 <_free_r+0x54>
1a004190:	42a2      	cmp	r2, r4
1a004192:	d9fa      	bls.n	1a00418a <_free_r+0x4a>
1a004194:	6819      	ldr	r1, [r3, #0]
1a004196:	1858      	adds	r0, r3, r1
1a004198:	42a0      	cmp	r0, r4
1a00419a:	d10b      	bne.n	1a0041b4 <_free_r+0x74>
1a00419c:	6820      	ldr	r0, [r4, #0]
1a00419e:	4401      	add	r1, r0
1a0041a0:	1858      	adds	r0, r3, r1
1a0041a2:	4282      	cmp	r2, r0
1a0041a4:	6019      	str	r1, [r3, #0]
1a0041a6:	d1dd      	bne.n	1a004164 <_free_r+0x24>
1a0041a8:	6810      	ldr	r0, [r2, #0]
1a0041aa:	6852      	ldr	r2, [r2, #4]
1a0041ac:	605a      	str	r2, [r3, #4]
1a0041ae:	4401      	add	r1, r0
1a0041b0:	6019      	str	r1, [r3, #0]
1a0041b2:	e7d7      	b.n	1a004164 <_free_r+0x24>
1a0041b4:	d902      	bls.n	1a0041bc <_free_r+0x7c>
1a0041b6:	230c      	movs	r3, #12
1a0041b8:	602b      	str	r3, [r5, #0]
1a0041ba:	e7d3      	b.n	1a004164 <_free_r+0x24>
1a0041bc:	6820      	ldr	r0, [r4, #0]
1a0041be:	1821      	adds	r1, r4, r0
1a0041c0:	428a      	cmp	r2, r1
1a0041c2:	bf04      	itt	eq
1a0041c4:	6811      	ldreq	r1, [r2, #0]
1a0041c6:	6852      	ldreq	r2, [r2, #4]
1a0041c8:	6062      	str	r2, [r4, #4]
1a0041ca:	bf04      	itt	eq
1a0041cc:	1809      	addeq	r1, r1, r0
1a0041ce:	6021      	streq	r1, [r4, #0]
1a0041d0:	605c      	str	r4, [r3, #4]
1a0041d2:	e7c7      	b.n	1a004164 <_free_r+0x24>
1a0041d4:	bd38      	pop	{r3, r4, r5, pc}
1a0041d6:	bf00      	nop
1a0041d8:	100006b8 	.word	0x100006b8

1a0041dc <_malloc_r>:
1a0041dc:	b570      	push	{r4, r5, r6, lr}
1a0041de:	1ccd      	adds	r5, r1, #3
1a0041e0:	f025 0503 	bic.w	r5, r5, #3
1a0041e4:	3508      	adds	r5, #8
1a0041e6:	2d0c      	cmp	r5, #12
1a0041e8:	bf38      	it	cc
1a0041ea:	250c      	movcc	r5, #12
1a0041ec:	2d00      	cmp	r5, #0
1a0041ee:	4606      	mov	r6, r0
1a0041f0:	db01      	blt.n	1a0041f6 <_malloc_r+0x1a>
1a0041f2:	42a9      	cmp	r1, r5
1a0041f4:	d903      	bls.n	1a0041fe <_malloc_r+0x22>
1a0041f6:	230c      	movs	r3, #12
1a0041f8:	6033      	str	r3, [r6, #0]
1a0041fa:	2000      	movs	r0, #0
1a0041fc:	bd70      	pop	{r4, r5, r6, pc}
1a0041fe:	f000 fd10 	bl	1a004c22 <__malloc_lock>
1a004202:	4a21      	ldr	r2, [pc, #132]	; (1a004288 <_malloc_r+0xac>)
1a004204:	6814      	ldr	r4, [r2, #0]
1a004206:	4621      	mov	r1, r4
1a004208:	b991      	cbnz	r1, 1a004230 <_malloc_r+0x54>
1a00420a:	4c20      	ldr	r4, [pc, #128]	; (1a00428c <_malloc_r+0xb0>)
1a00420c:	6823      	ldr	r3, [r4, #0]
1a00420e:	b91b      	cbnz	r3, 1a004218 <_malloc_r+0x3c>
1a004210:	4630      	mov	r0, r6
1a004212:	f7fc f96b 	bl	1a0004ec <_sbrk_r>
1a004216:	6020      	str	r0, [r4, #0]
1a004218:	4629      	mov	r1, r5
1a00421a:	4630      	mov	r0, r6
1a00421c:	f7fc f966 	bl	1a0004ec <_sbrk_r>
1a004220:	1c43      	adds	r3, r0, #1
1a004222:	d124      	bne.n	1a00426e <_malloc_r+0x92>
1a004224:	230c      	movs	r3, #12
1a004226:	6033      	str	r3, [r6, #0]
1a004228:	4630      	mov	r0, r6
1a00422a:	f000 fcfb 	bl	1a004c24 <__malloc_unlock>
1a00422e:	e7e4      	b.n	1a0041fa <_malloc_r+0x1e>
1a004230:	680b      	ldr	r3, [r1, #0]
1a004232:	1b5b      	subs	r3, r3, r5
1a004234:	d418      	bmi.n	1a004268 <_malloc_r+0x8c>
1a004236:	2b0b      	cmp	r3, #11
1a004238:	d90f      	bls.n	1a00425a <_malloc_r+0x7e>
1a00423a:	600b      	str	r3, [r1, #0]
1a00423c:	50cd      	str	r5, [r1, r3]
1a00423e:	18cc      	adds	r4, r1, r3
1a004240:	4630      	mov	r0, r6
1a004242:	f000 fcef 	bl	1a004c24 <__malloc_unlock>
1a004246:	f104 000b 	add.w	r0, r4, #11
1a00424a:	1d23      	adds	r3, r4, #4
1a00424c:	f020 0007 	bic.w	r0, r0, #7
1a004250:	1ac3      	subs	r3, r0, r3
1a004252:	d0d3      	beq.n	1a0041fc <_malloc_r+0x20>
1a004254:	425a      	negs	r2, r3
1a004256:	50e2      	str	r2, [r4, r3]
1a004258:	e7d0      	b.n	1a0041fc <_malloc_r+0x20>
1a00425a:	428c      	cmp	r4, r1
1a00425c:	684b      	ldr	r3, [r1, #4]
1a00425e:	bf16      	itet	ne
1a004260:	6063      	strne	r3, [r4, #4]
1a004262:	6013      	streq	r3, [r2, #0]
1a004264:	460c      	movne	r4, r1
1a004266:	e7eb      	b.n	1a004240 <_malloc_r+0x64>
1a004268:	460c      	mov	r4, r1
1a00426a:	6849      	ldr	r1, [r1, #4]
1a00426c:	e7cc      	b.n	1a004208 <_malloc_r+0x2c>
1a00426e:	1cc4      	adds	r4, r0, #3
1a004270:	f024 0403 	bic.w	r4, r4, #3
1a004274:	42a0      	cmp	r0, r4
1a004276:	d005      	beq.n	1a004284 <_malloc_r+0xa8>
1a004278:	1a21      	subs	r1, r4, r0
1a00427a:	4630      	mov	r0, r6
1a00427c:	f7fc f936 	bl	1a0004ec <_sbrk_r>
1a004280:	3001      	adds	r0, #1
1a004282:	d0cf      	beq.n	1a004224 <_malloc_r+0x48>
1a004284:	6025      	str	r5, [r4, #0]
1a004286:	e7db      	b.n	1a004240 <_malloc_r+0x64>
1a004288:	100006b8 	.word	0x100006b8
1a00428c:	100006bc 	.word	0x100006bc

1a004290 <__ssputs_r>:
1a004290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004294:	688e      	ldr	r6, [r1, #8]
1a004296:	429e      	cmp	r6, r3
1a004298:	4682      	mov	sl, r0
1a00429a:	460c      	mov	r4, r1
1a00429c:	4690      	mov	r8, r2
1a00429e:	4699      	mov	r9, r3
1a0042a0:	d837      	bhi.n	1a004312 <__ssputs_r+0x82>
1a0042a2:	898a      	ldrh	r2, [r1, #12]
1a0042a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
1a0042a8:	d031      	beq.n	1a00430e <__ssputs_r+0x7e>
1a0042aa:	6825      	ldr	r5, [r4, #0]
1a0042ac:	6909      	ldr	r1, [r1, #16]
1a0042ae:	1a6f      	subs	r7, r5, r1
1a0042b0:	6965      	ldr	r5, [r4, #20]
1a0042b2:	2302      	movs	r3, #2
1a0042b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1a0042b8:	fb95 f5f3 	sdiv	r5, r5, r3
1a0042bc:	f109 0301 	add.w	r3, r9, #1
1a0042c0:	443b      	add	r3, r7
1a0042c2:	429d      	cmp	r5, r3
1a0042c4:	bf38      	it	cc
1a0042c6:	461d      	movcc	r5, r3
1a0042c8:	0553      	lsls	r3, r2, #21
1a0042ca:	d530      	bpl.n	1a00432e <__ssputs_r+0x9e>
1a0042cc:	4629      	mov	r1, r5
1a0042ce:	f7ff ff85 	bl	1a0041dc <_malloc_r>
1a0042d2:	4606      	mov	r6, r0
1a0042d4:	b950      	cbnz	r0, 1a0042ec <__ssputs_r+0x5c>
1a0042d6:	230c      	movs	r3, #12
1a0042d8:	f8ca 3000 	str.w	r3, [sl]
1a0042dc:	89a3      	ldrh	r3, [r4, #12]
1a0042de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0042e2:	81a3      	strh	r3, [r4, #12]
1a0042e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0042e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0042ec:	463a      	mov	r2, r7
1a0042ee:	6921      	ldr	r1, [r4, #16]
1a0042f0:	f7ff fc34 	bl	1a003b5c <memcpy>
1a0042f4:	89a3      	ldrh	r3, [r4, #12]
1a0042f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1a0042fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0042fe:	81a3      	strh	r3, [r4, #12]
1a004300:	6126      	str	r6, [r4, #16]
1a004302:	6165      	str	r5, [r4, #20]
1a004304:	443e      	add	r6, r7
1a004306:	1bed      	subs	r5, r5, r7
1a004308:	6026      	str	r6, [r4, #0]
1a00430a:	60a5      	str	r5, [r4, #8]
1a00430c:	464e      	mov	r6, r9
1a00430e:	454e      	cmp	r6, r9
1a004310:	d900      	bls.n	1a004314 <__ssputs_r+0x84>
1a004312:	464e      	mov	r6, r9
1a004314:	4632      	mov	r2, r6
1a004316:	4641      	mov	r1, r8
1a004318:	6820      	ldr	r0, [r4, #0]
1a00431a:	f000 fc69 	bl	1a004bf0 <memmove>
1a00431e:	68a3      	ldr	r3, [r4, #8]
1a004320:	1b9b      	subs	r3, r3, r6
1a004322:	60a3      	str	r3, [r4, #8]
1a004324:	6823      	ldr	r3, [r4, #0]
1a004326:	441e      	add	r6, r3
1a004328:	6026      	str	r6, [r4, #0]
1a00432a:	2000      	movs	r0, #0
1a00432c:	e7dc      	b.n	1a0042e8 <__ssputs_r+0x58>
1a00432e:	462a      	mov	r2, r5
1a004330:	f000 fc79 	bl	1a004c26 <_realloc_r>
1a004334:	4606      	mov	r6, r0
1a004336:	2800      	cmp	r0, #0
1a004338:	d1e2      	bne.n	1a004300 <__ssputs_r+0x70>
1a00433a:	6921      	ldr	r1, [r4, #16]
1a00433c:	4650      	mov	r0, sl
1a00433e:	f7ff feff 	bl	1a004140 <_free_r>
1a004342:	e7c8      	b.n	1a0042d6 <__ssputs_r+0x46>

1a004344 <_svfiprintf_r>:
1a004344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004348:	461d      	mov	r5, r3
1a00434a:	898b      	ldrh	r3, [r1, #12]
1a00434c:	061f      	lsls	r7, r3, #24
1a00434e:	b09d      	sub	sp, #116	; 0x74
1a004350:	4680      	mov	r8, r0
1a004352:	460c      	mov	r4, r1
1a004354:	4616      	mov	r6, r2
1a004356:	d50f      	bpl.n	1a004378 <_svfiprintf_r+0x34>
1a004358:	690b      	ldr	r3, [r1, #16]
1a00435a:	b96b      	cbnz	r3, 1a004378 <_svfiprintf_r+0x34>
1a00435c:	2140      	movs	r1, #64	; 0x40
1a00435e:	f7ff ff3d 	bl	1a0041dc <_malloc_r>
1a004362:	6020      	str	r0, [r4, #0]
1a004364:	6120      	str	r0, [r4, #16]
1a004366:	b928      	cbnz	r0, 1a004374 <_svfiprintf_r+0x30>
1a004368:	230c      	movs	r3, #12
1a00436a:	f8c8 3000 	str.w	r3, [r8]
1a00436e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004372:	e0c8      	b.n	1a004506 <_svfiprintf_r+0x1c2>
1a004374:	2340      	movs	r3, #64	; 0x40
1a004376:	6163      	str	r3, [r4, #20]
1a004378:	2300      	movs	r3, #0
1a00437a:	9309      	str	r3, [sp, #36]	; 0x24
1a00437c:	2320      	movs	r3, #32
1a00437e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a004382:	2330      	movs	r3, #48	; 0x30
1a004384:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a004388:	9503      	str	r5, [sp, #12]
1a00438a:	f04f 0b01 	mov.w	fp, #1
1a00438e:	4637      	mov	r7, r6
1a004390:	463d      	mov	r5, r7
1a004392:	f815 3b01 	ldrb.w	r3, [r5], #1
1a004396:	b10b      	cbz	r3, 1a00439c <_svfiprintf_r+0x58>
1a004398:	2b25      	cmp	r3, #37	; 0x25
1a00439a:	d13e      	bne.n	1a00441a <_svfiprintf_r+0xd6>
1a00439c:	ebb7 0a06 	subs.w	sl, r7, r6
1a0043a0:	d00b      	beq.n	1a0043ba <_svfiprintf_r+0x76>
1a0043a2:	4653      	mov	r3, sl
1a0043a4:	4632      	mov	r2, r6
1a0043a6:	4621      	mov	r1, r4
1a0043a8:	4640      	mov	r0, r8
1a0043aa:	f7ff ff71 	bl	1a004290 <__ssputs_r>
1a0043ae:	3001      	adds	r0, #1
1a0043b0:	f000 80a4 	beq.w	1a0044fc <_svfiprintf_r+0x1b8>
1a0043b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0043b6:	4453      	add	r3, sl
1a0043b8:	9309      	str	r3, [sp, #36]	; 0x24
1a0043ba:	783b      	ldrb	r3, [r7, #0]
1a0043bc:	2b00      	cmp	r3, #0
1a0043be:	f000 809d 	beq.w	1a0044fc <_svfiprintf_r+0x1b8>
1a0043c2:	2300      	movs	r3, #0
1a0043c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0043c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a0043cc:	9304      	str	r3, [sp, #16]
1a0043ce:	9307      	str	r3, [sp, #28]
1a0043d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a0043d4:	931a      	str	r3, [sp, #104]	; 0x68
1a0043d6:	462f      	mov	r7, r5
1a0043d8:	2205      	movs	r2, #5
1a0043da:	f817 1b01 	ldrb.w	r1, [r7], #1
1a0043de:	4850      	ldr	r0, [pc, #320]	; (1a004520 <_svfiprintf_r+0x1dc>)
1a0043e0:	f000 fbb6 	bl	1a004b50 <memchr>
1a0043e4:	9b04      	ldr	r3, [sp, #16]
1a0043e6:	b9d0      	cbnz	r0, 1a00441e <_svfiprintf_r+0xda>
1a0043e8:	06d9      	lsls	r1, r3, #27
1a0043ea:	bf44      	itt	mi
1a0043ec:	2220      	movmi	r2, #32
1a0043ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0043f2:	071a      	lsls	r2, r3, #28
1a0043f4:	bf44      	itt	mi
1a0043f6:	222b      	movmi	r2, #43	; 0x2b
1a0043f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0043fc:	782a      	ldrb	r2, [r5, #0]
1a0043fe:	2a2a      	cmp	r2, #42	; 0x2a
1a004400:	d015      	beq.n	1a00442e <_svfiprintf_r+0xea>
1a004402:	9a07      	ldr	r2, [sp, #28]
1a004404:	462f      	mov	r7, r5
1a004406:	2000      	movs	r0, #0
1a004408:	250a      	movs	r5, #10
1a00440a:	4639      	mov	r1, r7
1a00440c:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004410:	3b30      	subs	r3, #48	; 0x30
1a004412:	2b09      	cmp	r3, #9
1a004414:	d94d      	bls.n	1a0044b2 <_svfiprintf_r+0x16e>
1a004416:	b1b8      	cbz	r0, 1a004448 <_svfiprintf_r+0x104>
1a004418:	e00f      	b.n	1a00443a <_svfiprintf_r+0xf6>
1a00441a:	462f      	mov	r7, r5
1a00441c:	e7b8      	b.n	1a004390 <_svfiprintf_r+0x4c>
1a00441e:	4a40      	ldr	r2, [pc, #256]	; (1a004520 <_svfiprintf_r+0x1dc>)
1a004420:	1a80      	subs	r0, r0, r2
1a004422:	fa0b f000 	lsl.w	r0, fp, r0
1a004426:	4318      	orrs	r0, r3
1a004428:	9004      	str	r0, [sp, #16]
1a00442a:	463d      	mov	r5, r7
1a00442c:	e7d3      	b.n	1a0043d6 <_svfiprintf_r+0x92>
1a00442e:	9a03      	ldr	r2, [sp, #12]
1a004430:	1d11      	adds	r1, r2, #4
1a004432:	6812      	ldr	r2, [r2, #0]
1a004434:	9103      	str	r1, [sp, #12]
1a004436:	2a00      	cmp	r2, #0
1a004438:	db01      	blt.n	1a00443e <_svfiprintf_r+0xfa>
1a00443a:	9207      	str	r2, [sp, #28]
1a00443c:	e004      	b.n	1a004448 <_svfiprintf_r+0x104>
1a00443e:	4252      	negs	r2, r2
1a004440:	f043 0302 	orr.w	r3, r3, #2
1a004444:	9207      	str	r2, [sp, #28]
1a004446:	9304      	str	r3, [sp, #16]
1a004448:	783b      	ldrb	r3, [r7, #0]
1a00444a:	2b2e      	cmp	r3, #46	; 0x2e
1a00444c:	d10c      	bne.n	1a004468 <_svfiprintf_r+0x124>
1a00444e:	787b      	ldrb	r3, [r7, #1]
1a004450:	2b2a      	cmp	r3, #42	; 0x2a
1a004452:	d133      	bne.n	1a0044bc <_svfiprintf_r+0x178>
1a004454:	9b03      	ldr	r3, [sp, #12]
1a004456:	1d1a      	adds	r2, r3, #4
1a004458:	681b      	ldr	r3, [r3, #0]
1a00445a:	9203      	str	r2, [sp, #12]
1a00445c:	2b00      	cmp	r3, #0
1a00445e:	bfb8      	it	lt
1a004460:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a004464:	3702      	adds	r7, #2
1a004466:	9305      	str	r3, [sp, #20]
1a004468:	4d2e      	ldr	r5, [pc, #184]	; (1a004524 <_svfiprintf_r+0x1e0>)
1a00446a:	7839      	ldrb	r1, [r7, #0]
1a00446c:	2203      	movs	r2, #3
1a00446e:	4628      	mov	r0, r5
1a004470:	f000 fb6e 	bl	1a004b50 <memchr>
1a004474:	b138      	cbz	r0, 1a004486 <_svfiprintf_r+0x142>
1a004476:	2340      	movs	r3, #64	; 0x40
1a004478:	1b40      	subs	r0, r0, r5
1a00447a:	fa03 f000 	lsl.w	r0, r3, r0
1a00447e:	9b04      	ldr	r3, [sp, #16]
1a004480:	4303      	orrs	r3, r0
1a004482:	3701      	adds	r7, #1
1a004484:	9304      	str	r3, [sp, #16]
1a004486:	7839      	ldrb	r1, [r7, #0]
1a004488:	4827      	ldr	r0, [pc, #156]	; (1a004528 <_svfiprintf_r+0x1e4>)
1a00448a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a00448e:	2206      	movs	r2, #6
1a004490:	1c7e      	adds	r6, r7, #1
1a004492:	f000 fb5d 	bl	1a004b50 <memchr>
1a004496:	2800      	cmp	r0, #0
1a004498:	d038      	beq.n	1a00450c <_svfiprintf_r+0x1c8>
1a00449a:	4b24      	ldr	r3, [pc, #144]	; (1a00452c <_svfiprintf_r+0x1e8>)
1a00449c:	bb13      	cbnz	r3, 1a0044e4 <_svfiprintf_r+0x1a0>
1a00449e:	9b03      	ldr	r3, [sp, #12]
1a0044a0:	3307      	adds	r3, #7
1a0044a2:	f023 0307 	bic.w	r3, r3, #7
1a0044a6:	3308      	adds	r3, #8
1a0044a8:	9303      	str	r3, [sp, #12]
1a0044aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0044ac:	444b      	add	r3, r9
1a0044ae:	9309      	str	r3, [sp, #36]	; 0x24
1a0044b0:	e76d      	b.n	1a00438e <_svfiprintf_r+0x4a>
1a0044b2:	fb05 3202 	mla	r2, r5, r2, r3
1a0044b6:	2001      	movs	r0, #1
1a0044b8:	460f      	mov	r7, r1
1a0044ba:	e7a6      	b.n	1a00440a <_svfiprintf_r+0xc6>
1a0044bc:	2300      	movs	r3, #0
1a0044be:	3701      	adds	r7, #1
1a0044c0:	9305      	str	r3, [sp, #20]
1a0044c2:	4619      	mov	r1, r3
1a0044c4:	250a      	movs	r5, #10
1a0044c6:	4638      	mov	r0, r7
1a0044c8:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0044cc:	3a30      	subs	r2, #48	; 0x30
1a0044ce:	2a09      	cmp	r2, #9
1a0044d0:	d903      	bls.n	1a0044da <_svfiprintf_r+0x196>
1a0044d2:	2b00      	cmp	r3, #0
1a0044d4:	d0c8      	beq.n	1a004468 <_svfiprintf_r+0x124>
1a0044d6:	9105      	str	r1, [sp, #20]
1a0044d8:	e7c6      	b.n	1a004468 <_svfiprintf_r+0x124>
1a0044da:	fb05 2101 	mla	r1, r5, r1, r2
1a0044de:	2301      	movs	r3, #1
1a0044e0:	4607      	mov	r7, r0
1a0044e2:	e7f0      	b.n	1a0044c6 <_svfiprintf_r+0x182>
1a0044e4:	ab03      	add	r3, sp, #12
1a0044e6:	9300      	str	r3, [sp, #0]
1a0044e8:	4622      	mov	r2, r4
1a0044ea:	4b11      	ldr	r3, [pc, #68]	; (1a004530 <_svfiprintf_r+0x1ec>)
1a0044ec:	a904      	add	r1, sp, #16
1a0044ee:	4640      	mov	r0, r8
1a0044f0:	f3af 8000 	nop.w
1a0044f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0044f8:	4681      	mov	r9, r0
1a0044fa:	d1d6      	bne.n	1a0044aa <_svfiprintf_r+0x166>
1a0044fc:	89a3      	ldrh	r3, [r4, #12]
1a0044fe:	065b      	lsls	r3, r3, #25
1a004500:	f53f af35 	bmi.w	1a00436e <_svfiprintf_r+0x2a>
1a004504:	9809      	ldr	r0, [sp, #36]	; 0x24
1a004506:	b01d      	add	sp, #116	; 0x74
1a004508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00450c:	ab03      	add	r3, sp, #12
1a00450e:	9300      	str	r3, [sp, #0]
1a004510:	4622      	mov	r2, r4
1a004512:	4b07      	ldr	r3, [pc, #28]	; (1a004530 <_svfiprintf_r+0x1ec>)
1a004514:	a904      	add	r1, sp, #16
1a004516:	4640      	mov	r0, r8
1a004518:	f000 f9c2 	bl	1a0048a0 <_printf_i>
1a00451c:	e7ea      	b.n	1a0044f4 <_svfiprintf_r+0x1b0>
1a00451e:	bf00      	nop
1a004520:	1a0054a0 	.word	0x1a0054a0
1a004524:	1a0054a6 	.word	0x1a0054a6
1a004528:	1a0054aa 	.word	0x1a0054aa
1a00452c:	00000000 	.word	0x00000000
1a004530:	1a004291 	.word	0x1a004291

1a004534 <__sfputc_r>:
1a004534:	6893      	ldr	r3, [r2, #8]
1a004536:	3b01      	subs	r3, #1
1a004538:	2b00      	cmp	r3, #0
1a00453a:	b410      	push	{r4}
1a00453c:	6093      	str	r3, [r2, #8]
1a00453e:	da08      	bge.n	1a004552 <__sfputc_r+0x1e>
1a004540:	6994      	ldr	r4, [r2, #24]
1a004542:	42a3      	cmp	r3, r4
1a004544:	db01      	blt.n	1a00454a <__sfputc_r+0x16>
1a004546:	290a      	cmp	r1, #10
1a004548:	d103      	bne.n	1a004552 <__sfputc_r+0x1e>
1a00454a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00454e:	f7ff bb59 	b.w	1a003c04 <__swbuf_r>
1a004552:	6813      	ldr	r3, [r2, #0]
1a004554:	1c58      	adds	r0, r3, #1
1a004556:	6010      	str	r0, [r2, #0]
1a004558:	7019      	strb	r1, [r3, #0]
1a00455a:	4608      	mov	r0, r1
1a00455c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004560:	4770      	bx	lr

1a004562 <__sfputs_r>:
1a004562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004564:	4606      	mov	r6, r0
1a004566:	460f      	mov	r7, r1
1a004568:	4614      	mov	r4, r2
1a00456a:	18d5      	adds	r5, r2, r3
1a00456c:	42ac      	cmp	r4, r5
1a00456e:	d101      	bne.n	1a004574 <__sfputs_r+0x12>
1a004570:	2000      	movs	r0, #0
1a004572:	e007      	b.n	1a004584 <__sfputs_r+0x22>
1a004574:	463a      	mov	r2, r7
1a004576:	f814 1b01 	ldrb.w	r1, [r4], #1
1a00457a:	4630      	mov	r0, r6
1a00457c:	f7ff ffda 	bl	1a004534 <__sfputc_r>
1a004580:	1c43      	adds	r3, r0, #1
1a004582:	d1f3      	bne.n	1a00456c <__sfputs_r+0xa>
1a004584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004586:	Address 0x000000001a004586 is out of bounds.


1a004588 <_vfiprintf_r>:
1a004588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00458c:	460c      	mov	r4, r1
1a00458e:	b09d      	sub	sp, #116	; 0x74
1a004590:	4617      	mov	r7, r2
1a004592:	461d      	mov	r5, r3
1a004594:	4606      	mov	r6, r0
1a004596:	b118      	cbz	r0, 1a0045a0 <_vfiprintf_r+0x18>
1a004598:	6983      	ldr	r3, [r0, #24]
1a00459a:	b90b      	cbnz	r3, 1a0045a0 <_vfiprintf_r+0x18>
1a00459c:	f7ff fce2 	bl	1a003f64 <__sinit>
1a0045a0:	4b7c      	ldr	r3, [pc, #496]	; (1a004794 <_vfiprintf_r+0x20c>)
1a0045a2:	429c      	cmp	r4, r3
1a0045a4:	d158      	bne.n	1a004658 <_vfiprintf_r+0xd0>
1a0045a6:	6874      	ldr	r4, [r6, #4]
1a0045a8:	89a3      	ldrh	r3, [r4, #12]
1a0045aa:	0718      	lsls	r0, r3, #28
1a0045ac:	d55e      	bpl.n	1a00466c <_vfiprintf_r+0xe4>
1a0045ae:	6923      	ldr	r3, [r4, #16]
1a0045b0:	2b00      	cmp	r3, #0
1a0045b2:	d05b      	beq.n	1a00466c <_vfiprintf_r+0xe4>
1a0045b4:	2300      	movs	r3, #0
1a0045b6:	9309      	str	r3, [sp, #36]	; 0x24
1a0045b8:	2320      	movs	r3, #32
1a0045ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a0045be:	2330      	movs	r3, #48	; 0x30
1a0045c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a0045c4:	9503      	str	r5, [sp, #12]
1a0045c6:	f04f 0b01 	mov.w	fp, #1
1a0045ca:	46b8      	mov	r8, r7
1a0045cc:	4645      	mov	r5, r8
1a0045ce:	f815 3b01 	ldrb.w	r3, [r5], #1
1a0045d2:	b10b      	cbz	r3, 1a0045d8 <_vfiprintf_r+0x50>
1a0045d4:	2b25      	cmp	r3, #37	; 0x25
1a0045d6:	d154      	bne.n	1a004682 <_vfiprintf_r+0xfa>
1a0045d8:	ebb8 0a07 	subs.w	sl, r8, r7
1a0045dc:	d00b      	beq.n	1a0045f6 <_vfiprintf_r+0x6e>
1a0045de:	4653      	mov	r3, sl
1a0045e0:	463a      	mov	r2, r7
1a0045e2:	4621      	mov	r1, r4
1a0045e4:	4630      	mov	r0, r6
1a0045e6:	f7ff ffbc 	bl	1a004562 <__sfputs_r>
1a0045ea:	3001      	adds	r0, #1
1a0045ec:	f000 80c2 	beq.w	1a004774 <_vfiprintf_r+0x1ec>
1a0045f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0045f2:	4453      	add	r3, sl
1a0045f4:	9309      	str	r3, [sp, #36]	; 0x24
1a0045f6:	f898 3000 	ldrb.w	r3, [r8]
1a0045fa:	2b00      	cmp	r3, #0
1a0045fc:	f000 80ba 	beq.w	1a004774 <_vfiprintf_r+0x1ec>
1a004600:	2300      	movs	r3, #0
1a004602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004606:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a00460a:	9304      	str	r3, [sp, #16]
1a00460c:	9307      	str	r3, [sp, #28]
1a00460e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a004612:	931a      	str	r3, [sp, #104]	; 0x68
1a004614:	46a8      	mov	r8, r5
1a004616:	2205      	movs	r2, #5
1a004618:	f818 1b01 	ldrb.w	r1, [r8], #1
1a00461c:	485e      	ldr	r0, [pc, #376]	; (1a004798 <_vfiprintf_r+0x210>)
1a00461e:	f000 fa97 	bl	1a004b50 <memchr>
1a004622:	9b04      	ldr	r3, [sp, #16]
1a004624:	bb78      	cbnz	r0, 1a004686 <_vfiprintf_r+0xfe>
1a004626:	06d9      	lsls	r1, r3, #27
1a004628:	bf44      	itt	mi
1a00462a:	2220      	movmi	r2, #32
1a00462c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004630:	071a      	lsls	r2, r3, #28
1a004632:	bf44      	itt	mi
1a004634:	222b      	movmi	r2, #43	; 0x2b
1a004636:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00463a:	782a      	ldrb	r2, [r5, #0]
1a00463c:	2a2a      	cmp	r2, #42	; 0x2a
1a00463e:	d02a      	beq.n	1a004696 <_vfiprintf_r+0x10e>
1a004640:	9a07      	ldr	r2, [sp, #28]
1a004642:	46a8      	mov	r8, r5
1a004644:	2000      	movs	r0, #0
1a004646:	250a      	movs	r5, #10
1a004648:	4641      	mov	r1, r8
1a00464a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00464e:	3b30      	subs	r3, #48	; 0x30
1a004650:	2b09      	cmp	r3, #9
1a004652:	d969      	bls.n	1a004728 <_vfiprintf_r+0x1a0>
1a004654:	b360      	cbz	r0, 1a0046b0 <_vfiprintf_r+0x128>
1a004656:	e024      	b.n	1a0046a2 <_vfiprintf_r+0x11a>
1a004658:	4b50      	ldr	r3, [pc, #320]	; (1a00479c <_vfiprintf_r+0x214>)
1a00465a:	429c      	cmp	r4, r3
1a00465c:	d101      	bne.n	1a004662 <_vfiprintf_r+0xda>
1a00465e:	68b4      	ldr	r4, [r6, #8]
1a004660:	e7a2      	b.n	1a0045a8 <_vfiprintf_r+0x20>
1a004662:	4b4f      	ldr	r3, [pc, #316]	; (1a0047a0 <_vfiprintf_r+0x218>)
1a004664:	429c      	cmp	r4, r3
1a004666:	bf08      	it	eq
1a004668:	68f4      	ldreq	r4, [r6, #12]
1a00466a:	e79d      	b.n	1a0045a8 <_vfiprintf_r+0x20>
1a00466c:	4621      	mov	r1, r4
1a00466e:	4630      	mov	r0, r6
1a004670:	f7ff fb1a 	bl	1a003ca8 <__swsetup_r>
1a004674:	2800      	cmp	r0, #0
1a004676:	d09d      	beq.n	1a0045b4 <_vfiprintf_r+0x2c>
1a004678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00467c:	b01d      	add	sp, #116	; 0x74
1a00467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004682:	46a8      	mov	r8, r5
1a004684:	e7a2      	b.n	1a0045cc <_vfiprintf_r+0x44>
1a004686:	4a44      	ldr	r2, [pc, #272]	; (1a004798 <_vfiprintf_r+0x210>)
1a004688:	1a80      	subs	r0, r0, r2
1a00468a:	fa0b f000 	lsl.w	r0, fp, r0
1a00468e:	4318      	orrs	r0, r3
1a004690:	9004      	str	r0, [sp, #16]
1a004692:	4645      	mov	r5, r8
1a004694:	e7be      	b.n	1a004614 <_vfiprintf_r+0x8c>
1a004696:	9a03      	ldr	r2, [sp, #12]
1a004698:	1d11      	adds	r1, r2, #4
1a00469a:	6812      	ldr	r2, [r2, #0]
1a00469c:	9103      	str	r1, [sp, #12]
1a00469e:	2a00      	cmp	r2, #0
1a0046a0:	db01      	blt.n	1a0046a6 <_vfiprintf_r+0x11e>
1a0046a2:	9207      	str	r2, [sp, #28]
1a0046a4:	e004      	b.n	1a0046b0 <_vfiprintf_r+0x128>
1a0046a6:	4252      	negs	r2, r2
1a0046a8:	f043 0302 	orr.w	r3, r3, #2
1a0046ac:	9207      	str	r2, [sp, #28]
1a0046ae:	9304      	str	r3, [sp, #16]
1a0046b0:	f898 3000 	ldrb.w	r3, [r8]
1a0046b4:	2b2e      	cmp	r3, #46	; 0x2e
1a0046b6:	d10e      	bne.n	1a0046d6 <_vfiprintf_r+0x14e>
1a0046b8:	f898 3001 	ldrb.w	r3, [r8, #1]
1a0046bc:	2b2a      	cmp	r3, #42	; 0x2a
1a0046be:	d138      	bne.n	1a004732 <_vfiprintf_r+0x1aa>
1a0046c0:	9b03      	ldr	r3, [sp, #12]
1a0046c2:	1d1a      	adds	r2, r3, #4
1a0046c4:	681b      	ldr	r3, [r3, #0]
1a0046c6:	9203      	str	r2, [sp, #12]
1a0046c8:	2b00      	cmp	r3, #0
1a0046ca:	bfb8      	it	lt
1a0046cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a0046d0:	f108 0802 	add.w	r8, r8, #2
1a0046d4:	9305      	str	r3, [sp, #20]
1a0046d6:	4d33      	ldr	r5, [pc, #204]	; (1a0047a4 <_vfiprintf_r+0x21c>)
1a0046d8:	f898 1000 	ldrb.w	r1, [r8]
1a0046dc:	2203      	movs	r2, #3
1a0046de:	4628      	mov	r0, r5
1a0046e0:	f000 fa36 	bl	1a004b50 <memchr>
1a0046e4:	b140      	cbz	r0, 1a0046f8 <_vfiprintf_r+0x170>
1a0046e6:	2340      	movs	r3, #64	; 0x40
1a0046e8:	1b40      	subs	r0, r0, r5
1a0046ea:	fa03 f000 	lsl.w	r0, r3, r0
1a0046ee:	9b04      	ldr	r3, [sp, #16]
1a0046f0:	4303      	orrs	r3, r0
1a0046f2:	f108 0801 	add.w	r8, r8, #1
1a0046f6:	9304      	str	r3, [sp, #16]
1a0046f8:	f898 1000 	ldrb.w	r1, [r8]
1a0046fc:	482a      	ldr	r0, [pc, #168]	; (1a0047a8 <_vfiprintf_r+0x220>)
1a0046fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a004702:	2206      	movs	r2, #6
1a004704:	f108 0701 	add.w	r7, r8, #1
1a004708:	f000 fa22 	bl	1a004b50 <memchr>
1a00470c:	2800      	cmp	r0, #0
1a00470e:	d037      	beq.n	1a004780 <_vfiprintf_r+0x1f8>
1a004710:	4b26      	ldr	r3, [pc, #152]	; (1a0047ac <_vfiprintf_r+0x224>)
1a004712:	bb1b      	cbnz	r3, 1a00475c <_vfiprintf_r+0x1d4>
1a004714:	9b03      	ldr	r3, [sp, #12]
1a004716:	3307      	adds	r3, #7
1a004718:	f023 0307 	bic.w	r3, r3, #7
1a00471c:	3308      	adds	r3, #8
1a00471e:	9303      	str	r3, [sp, #12]
1a004720:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004722:	444b      	add	r3, r9
1a004724:	9309      	str	r3, [sp, #36]	; 0x24
1a004726:	e750      	b.n	1a0045ca <_vfiprintf_r+0x42>
1a004728:	fb05 3202 	mla	r2, r5, r2, r3
1a00472c:	2001      	movs	r0, #1
1a00472e:	4688      	mov	r8, r1
1a004730:	e78a      	b.n	1a004648 <_vfiprintf_r+0xc0>
1a004732:	2300      	movs	r3, #0
1a004734:	f108 0801 	add.w	r8, r8, #1
1a004738:	9305      	str	r3, [sp, #20]
1a00473a:	4619      	mov	r1, r3
1a00473c:	250a      	movs	r5, #10
1a00473e:	4640      	mov	r0, r8
1a004740:	f810 2b01 	ldrb.w	r2, [r0], #1
1a004744:	3a30      	subs	r2, #48	; 0x30
1a004746:	2a09      	cmp	r2, #9
1a004748:	d903      	bls.n	1a004752 <_vfiprintf_r+0x1ca>
1a00474a:	2b00      	cmp	r3, #0
1a00474c:	d0c3      	beq.n	1a0046d6 <_vfiprintf_r+0x14e>
1a00474e:	9105      	str	r1, [sp, #20]
1a004750:	e7c1      	b.n	1a0046d6 <_vfiprintf_r+0x14e>
1a004752:	fb05 2101 	mla	r1, r5, r1, r2
1a004756:	2301      	movs	r3, #1
1a004758:	4680      	mov	r8, r0
1a00475a:	e7f0      	b.n	1a00473e <_vfiprintf_r+0x1b6>
1a00475c:	ab03      	add	r3, sp, #12
1a00475e:	9300      	str	r3, [sp, #0]
1a004760:	4622      	mov	r2, r4
1a004762:	4b13      	ldr	r3, [pc, #76]	; (1a0047b0 <_vfiprintf_r+0x228>)
1a004764:	a904      	add	r1, sp, #16
1a004766:	4630      	mov	r0, r6
1a004768:	f3af 8000 	nop.w
1a00476c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004770:	4681      	mov	r9, r0
1a004772:	d1d5      	bne.n	1a004720 <_vfiprintf_r+0x198>
1a004774:	89a3      	ldrh	r3, [r4, #12]
1a004776:	065b      	lsls	r3, r3, #25
1a004778:	f53f af7e 	bmi.w	1a004678 <_vfiprintf_r+0xf0>
1a00477c:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00477e:	e77d      	b.n	1a00467c <_vfiprintf_r+0xf4>
1a004780:	ab03      	add	r3, sp, #12
1a004782:	9300      	str	r3, [sp, #0]
1a004784:	4622      	mov	r2, r4
1a004786:	4b0a      	ldr	r3, [pc, #40]	; (1a0047b0 <_vfiprintf_r+0x228>)
1a004788:	a904      	add	r1, sp, #16
1a00478a:	4630      	mov	r0, r6
1a00478c:	f000 f888 	bl	1a0048a0 <_printf_i>
1a004790:	e7ec      	b.n	1a00476c <_vfiprintf_r+0x1e4>
1a004792:	bf00      	nop
1a004794:	1a00545c 	.word	0x1a00545c
1a004798:	1a0054a0 	.word	0x1a0054a0
1a00479c:	1a00547c 	.word	0x1a00547c
1a0047a0:	1a00543c 	.word	0x1a00543c
1a0047a4:	1a0054a6 	.word	0x1a0054a6
1a0047a8:	1a0054aa 	.word	0x1a0054aa
1a0047ac:	00000000 	.word	0x00000000
1a0047b0:	1a004563 	.word	0x1a004563

1a0047b4 <_printf_common>:
1a0047b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0047b8:	4691      	mov	r9, r2
1a0047ba:	461f      	mov	r7, r3
1a0047bc:	688a      	ldr	r2, [r1, #8]
1a0047be:	690b      	ldr	r3, [r1, #16]
1a0047c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0047c4:	4293      	cmp	r3, r2
1a0047c6:	bfb8      	it	lt
1a0047c8:	4613      	movlt	r3, r2
1a0047ca:	f8c9 3000 	str.w	r3, [r9]
1a0047ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a0047d2:	4606      	mov	r6, r0
1a0047d4:	460c      	mov	r4, r1
1a0047d6:	b112      	cbz	r2, 1a0047de <_printf_common+0x2a>
1a0047d8:	3301      	adds	r3, #1
1a0047da:	f8c9 3000 	str.w	r3, [r9]
1a0047de:	6823      	ldr	r3, [r4, #0]
1a0047e0:	0699      	lsls	r1, r3, #26
1a0047e2:	bf42      	ittt	mi
1a0047e4:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0047e8:	3302      	addmi	r3, #2
1a0047ea:	f8c9 3000 	strmi.w	r3, [r9]
1a0047ee:	6825      	ldr	r5, [r4, #0]
1a0047f0:	f015 0506 	ands.w	r5, r5, #6
1a0047f4:	d107      	bne.n	1a004806 <_printf_common+0x52>
1a0047f6:	f104 0a19 	add.w	sl, r4, #25
1a0047fa:	68e3      	ldr	r3, [r4, #12]
1a0047fc:	f8d9 2000 	ldr.w	r2, [r9]
1a004800:	1a9b      	subs	r3, r3, r2
1a004802:	42ab      	cmp	r3, r5
1a004804:	dc28      	bgt.n	1a004858 <_printf_common+0xa4>
1a004806:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a00480a:	6822      	ldr	r2, [r4, #0]
1a00480c:	3300      	adds	r3, #0
1a00480e:	bf18      	it	ne
1a004810:	2301      	movne	r3, #1
1a004812:	0692      	lsls	r2, r2, #26
1a004814:	d42d      	bmi.n	1a004872 <_printf_common+0xbe>
1a004816:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a00481a:	4639      	mov	r1, r7
1a00481c:	4630      	mov	r0, r6
1a00481e:	47c0      	blx	r8
1a004820:	3001      	adds	r0, #1
1a004822:	d020      	beq.n	1a004866 <_printf_common+0xb2>
1a004824:	6823      	ldr	r3, [r4, #0]
1a004826:	68e5      	ldr	r5, [r4, #12]
1a004828:	f8d9 2000 	ldr.w	r2, [r9]
1a00482c:	f003 0306 	and.w	r3, r3, #6
1a004830:	2b04      	cmp	r3, #4
1a004832:	bf08      	it	eq
1a004834:	1aad      	subeq	r5, r5, r2
1a004836:	68a3      	ldr	r3, [r4, #8]
1a004838:	6922      	ldr	r2, [r4, #16]
1a00483a:	bf0c      	ite	eq
1a00483c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a004840:	2500      	movne	r5, #0
1a004842:	4293      	cmp	r3, r2
1a004844:	bfc4      	itt	gt
1a004846:	1a9b      	subgt	r3, r3, r2
1a004848:	18ed      	addgt	r5, r5, r3
1a00484a:	f04f 0900 	mov.w	r9, #0
1a00484e:	341a      	adds	r4, #26
1a004850:	454d      	cmp	r5, r9
1a004852:	d11a      	bne.n	1a00488a <_printf_common+0xd6>
1a004854:	2000      	movs	r0, #0
1a004856:	e008      	b.n	1a00486a <_printf_common+0xb6>
1a004858:	2301      	movs	r3, #1
1a00485a:	4652      	mov	r2, sl
1a00485c:	4639      	mov	r1, r7
1a00485e:	4630      	mov	r0, r6
1a004860:	47c0      	blx	r8
1a004862:	3001      	adds	r0, #1
1a004864:	d103      	bne.n	1a00486e <_printf_common+0xba>
1a004866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00486a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00486e:	3501      	adds	r5, #1
1a004870:	e7c3      	b.n	1a0047fa <_printf_common+0x46>
1a004872:	18e1      	adds	r1, r4, r3
1a004874:	1c5a      	adds	r2, r3, #1
1a004876:	2030      	movs	r0, #48	; 0x30
1a004878:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a00487c:	4422      	add	r2, r4
1a00487e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a004882:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a004886:	3302      	adds	r3, #2
1a004888:	e7c5      	b.n	1a004816 <_printf_common+0x62>
1a00488a:	2301      	movs	r3, #1
1a00488c:	4622      	mov	r2, r4
1a00488e:	4639      	mov	r1, r7
1a004890:	4630      	mov	r0, r6
1a004892:	47c0      	blx	r8
1a004894:	3001      	adds	r0, #1
1a004896:	d0e6      	beq.n	1a004866 <_printf_common+0xb2>
1a004898:	f109 0901 	add.w	r9, r9, #1
1a00489c:	e7d8      	b.n	1a004850 <_printf_common+0x9c>
1a00489e:	Address 0x000000001a00489e is out of bounds.


1a0048a0 <_printf_i>:
1a0048a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0048a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a0048a8:	460c      	mov	r4, r1
1a0048aa:	7e09      	ldrb	r1, [r1, #24]
1a0048ac:	b085      	sub	sp, #20
1a0048ae:	296e      	cmp	r1, #110	; 0x6e
1a0048b0:	4617      	mov	r7, r2
1a0048b2:	4606      	mov	r6, r0
1a0048b4:	4698      	mov	r8, r3
1a0048b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0048b8:	f000 80b3 	beq.w	1a004a22 <_printf_i+0x182>
1a0048bc:	d822      	bhi.n	1a004904 <_printf_i+0x64>
1a0048be:	2963      	cmp	r1, #99	; 0x63
1a0048c0:	d036      	beq.n	1a004930 <_printf_i+0x90>
1a0048c2:	d80a      	bhi.n	1a0048da <_printf_i+0x3a>
1a0048c4:	2900      	cmp	r1, #0
1a0048c6:	f000 80b9 	beq.w	1a004a3c <_printf_i+0x19c>
1a0048ca:	2958      	cmp	r1, #88	; 0x58
1a0048cc:	f000 8083 	beq.w	1a0049d6 <_printf_i+0x136>
1a0048d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0048d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a0048d8:	e032      	b.n	1a004940 <_printf_i+0xa0>
1a0048da:	2964      	cmp	r1, #100	; 0x64
1a0048dc:	d001      	beq.n	1a0048e2 <_printf_i+0x42>
1a0048de:	2969      	cmp	r1, #105	; 0x69
1a0048e0:	d1f6      	bne.n	1a0048d0 <_printf_i+0x30>
1a0048e2:	6820      	ldr	r0, [r4, #0]
1a0048e4:	6813      	ldr	r3, [r2, #0]
1a0048e6:	0605      	lsls	r5, r0, #24
1a0048e8:	f103 0104 	add.w	r1, r3, #4
1a0048ec:	d52a      	bpl.n	1a004944 <_printf_i+0xa4>
1a0048ee:	681b      	ldr	r3, [r3, #0]
1a0048f0:	6011      	str	r1, [r2, #0]
1a0048f2:	2b00      	cmp	r3, #0
1a0048f4:	da03      	bge.n	1a0048fe <_printf_i+0x5e>
1a0048f6:	222d      	movs	r2, #45	; 0x2d
1a0048f8:	425b      	negs	r3, r3
1a0048fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a0048fe:	486f      	ldr	r0, [pc, #444]	; (1a004abc <_printf_i+0x21c>)
1a004900:	220a      	movs	r2, #10
1a004902:	e039      	b.n	1a004978 <_printf_i+0xd8>
1a004904:	2973      	cmp	r1, #115	; 0x73
1a004906:	f000 809d 	beq.w	1a004a44 <_printf_i+0x1a4>
1a00490a:	d808      	bhi.n	1a00491e <_printf_i+0x7e>
1a00490c:	296f      	cmp	r1, #111	; 0x6f
1a00490e:	d020      	beq.n	1a004952 <_printf_i+0xb2>
1a004910:	2970      	cmp	r1, #112	; 0x70
1a004912:	d1dd      	bne.n	1a0048d0 <_printf_i+0x30>
1a004914:	6823      	ldr	r3, [r4, #0]
1a004916:	f043 0320 	orr.w	r3, r3, #32
1a00491a:	6023      	str	r3, [r4, #0]
1a00491c:	e003      	b.n	1a004926 <_printf_i+0x86>
1a00491e:	2975      	cmp	r1, #117	; 0x75
1a004920:	d017      	beq.n	1a004952 <_printf_i+0xb2>
1a004922:	2978      	cmp	r1, #120	; 0x78
1a004924:	d1d4      	bne.n	1a0048d0 <_printf_i+0x30>
1a004926:	2378      	movs	r3, #120	; 0x78
1a004928:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00492c:	4864      	ldr	r0, [pc, #400]	; (1a004ac0 <_printf_i+0x220>)
1a00492e:	e055      	b.n	1a0049dc <_printf_i+0x13c>
1a004930:	6813      	ldr	r3, [r2, #0]
1a004932:	1d19      	adds	r1, r3, #4
1a004934:	681b      	ldr	r3, [r3, #0]
1a004936:	6011      	str	r1, [r2, #0]
1a004938:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00493c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004940:	2301      	movs	r3, #1
1a004942:	e08c      	b.n	1a004a5e <_printf_i+0x1be>
1a004944:	681b      	ldr	r3, [r3, #0]
1a004946:	6011      	str	r1, [r2, #0]
1a004948:	f010 0f40 	tst.w	r0, #64	; 0x40
1a00494c:	bf18      	it	ne
1a00494e:	b21b      	sxthne	r3, r3
1a004950:	e7cf      	b.n	1a0048f2 <_printf_i+0x52>
1a004952:	6813      	ldr	r3, [r2, #0]
1a004954:	6825      	ldr	r5, [r4, #0]
1a004956:	1d18      	adds	r0, r3, #4
1a004958:	6010      	str	r0, [r2, #0]
1a00495a:	0628      	lsls	r0, r5, #24
1a00495c:	d501      	bpl.n	1a004962 <_printf_i+0xc2>
1a00495e:	681b      	ldr	r3, [r3, #0]
1a004960:	e002      	b.n	1a004968 <_printf_i+0xc8>
1a004962:	0668      	lsls	r0, r5, #25
1a004964:	d5fb      	bpl.n	1a00495e <_printf_i+0xbe>
1a004966:	881b      	ldrh	r3, [r3, #0]
1a004968:	4854      	ldr	r0, [pc, #336]	; (1a004abc <_printf_i+0x21c>)
1a00496a:	296f      	cmp	r1, #111	; 0x6f
1a00496c:	bf14      	ite	ne
1a00496e:	220a      	movne	r2, #10
1a004970:	2208      	moveq	r2, #8
1a004972:	2100      	movs	r1, #0
1a004974:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a004978:	6865      	ldr	r5, [r4, #4]
1a00497a:	60a5      	str	r5, [r4, #8]
1a00497c:	2d00      	cmp	r5, #0
1a00497e:	f2c0 8095 	blt.w	1a004aac <_printf_i+0x20c>
1a004982:	6821      	ldr	r1, [r4, #0]
1a004984:	f021 0104 	bic.w	r1, r1, #4
1a004988:	6021      	str	r1, [r4, #0]
1a00498a:	2b00      	cmp	r3, #0
1a00498c:	d13d      	bne.n	1a004a0a <_printf_i+0x16a>
1a00498e:	2d00      	cmp	r5, #0
1a004990:	f040 808e 	bne.w	1a004ab0 <_printf_i+0x210>
1a004994:	4665      	mov	r5, ip
1a004996:	2a08      	cmp	r2, #8
1a004998:	d10b      	bne.n	1a0049b2 <_printf_i+0x112>
1a00499a:	6823      	ldr	r3, [r4, #0]
1a00499c:	07db      	lsls	r3, r3, #31
1a00499e:	d508      	bpl.n	1a0049b2 <_printf_i+0x112>
1a0049a0:	6923      	ldr	r3, [r4, #16]
1a0049a2:	6862      	ldr	r2, [r4, #4]
1a0049a4:	429a      	cmp	r2, r3
1a0049a6:	bfde      	ittt	le
1a0049a8:	2330      	movle	r3, #48	; 0x30
1a0049aa:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0049ae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a0049b2:	ebac 0305 	sub.w	r3, ip, r5
1a0049b6:	6123      	str	r3, [r4, #16]
1a0049b8:	f8cd 8000 	str.w	r8, [sp]
1a0049bc:	463b      	mov	r3, r7
1a0049be:	aa03      	add	r2, sp, #12
1a0049c0:	4621      	mov	r1, r4
1a0049c2:	4630      	mov	r0, r6
1a0049c4:	f7ff fef6 	bl	1a0047b4 <_printf_common>
1a0049c8:	3001      	adds	r0, #1
1a0049ca:	d14d      	bne.n	1a004a68 <_printf_i+0x1c8>
1a0049cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0049d0:	b005      	add	sp, #20
1a0049d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0049d6:	4839      	ldr	r0, [pc, #228]	; (1a004abc <_printf_i+0x21c>)
1a0049d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0049dc:	6813      	ldr	r3, [r2, #0]
1a0049de:	6821      	ldr	r1, [r4, #0]
1a0049e0:	1d1d      	adds	r5, r3, #4
1a0049e2:	681b      	ldr	r3, [r3, #0]
1a0049e4:	6015      	str	r5, [r2, #0]
1a0049e6:	060a      	lsls	r2, r1, #24
1a0049e8:	d50b      	bpl.n	1a004a02 <_printf_i+0x162>
1a0049ea:	07ca      	lsls	r2, r1, #31
1a0049ec:	bf44      	itt	mi
1a0049ee:	f041 0120 	orrmi.w	r1, r1, #32
1a0049f2:	6021      	strmi	r1, [r4, #0]
1a0049f4:	b91b      	cbnz	r3, 1a0049fe <_printf_i+0x15e>
1a0049f6:	6822      	ldr	r2, [r4, #0]
1a0049f8:	f022 0220 	bic.w	r2, r2, #32
1a0049fc:	6022      	str	r2, [r4, #0]
1a0049fe:	2210      	movs	r2, #16
1a004a00:	e7b7      	b.n	1a004972 <_printf_i+0xd2>
1a004a02:	064d      	lsls	r5, r1, #25
1a004a04:	bf48      	it	mi
1a004a06:	b29b      	uxthmi	r3, r3
1a004a08:	e7ef      	b.n	1a0049ea <_printf_i+0x14a>
1a004a0a:	4665      	mov	r5, ip
1a004a0c:	fbb3 f1f2 	udiv	r1, r3, r2
1a004a10:	fb02 3311 	mls	r3, r2, r1, r3
1a004a14:	5cc3      	ldrb	r3, [r0, r3]
1a004a16:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a004a1a:	460b      	mov	r3, r1
1a004a1c:	2900      	cmp	r1, #0
1a004a1e:	d1f5      	bne.n	1a004a0c <_printf_i+0x16c>
1a004a20:	e7b9      	b.n	1a004996 <_printf_i+0xf6>
1a004a22:	6813      	ldr	r3, [r2, #0]
1a004a24:	6825      	ldr	r5, [r4, #0]
1a004a26:	6961      	ldr	r1, [r4, #20]
1a004a28:	1d18      	adds	r0, r3, #4
1a004a2a:	6010      	str	r0, [r2, #0]
1a004a2c:	0628      	lsls	r0, r5, #24
1a004a2e:	681b      	ldr	r3, [r3, #0]
1a004a30:	d501      	bpl.n	1a004a36 <_printf_i+0x196>
1a004a32:	6019      	str	r1, [r3, #0]
1a004a34:	e002      	b.n	1a004a3c <_printf_i+0x19c>
1a004a36:	066a      	lsls	r2, r5, #25
1a004a38:	d5fb      	bpl.n	1a004a32 <_printf_i+0x192>
1a004a3a:	8019      	strh	r1, [r3, #0]
1a004a3c:	2300      	movs	r3, #0
1a004a3e:	6123      	str	r3, [r4, #16]
1a004a40:	4665      	mov	r5, ip
1a004a42:	e7b9      	b.n	1a0049b8 <_printf_i+0x118>
1a004a44:	6813      	ldr	r3, [r2, #0]
1a004a46:	1d19      	adds	r1, r3, #4
1a004a48:	6011      	str	r1, [r2, #0]
1a004a4a:	681d      	ldr	r5, [r3, #0]
1a004a4c:	6862      	ldr	r2, [r4, #4]
1a004a4e:	2100      	movs	r1, #0
1a004a50:	4628      	mov	r0, r5
1a004a52:	f000 f87d 	bl	1a004b50 <memchr>
1a004a56:	b108      	cbz	r0, 1a004a5c <_printf_i+0x1bc>
1a004a58:	1b40      	subs	r0, r0, r5
1a004a5a:	6060      	str	r0, [r4, #4]
1a004a5c:	6863      	ldr	r3, [r4, #4]
1a004a5e:	6123      	str	r3, [r4, #16]
1a004a60:	2300      	movs	r3, #0
1a004a62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004a66:	e7a7      	b.n	1a0049b8 <_printf_i+0x118>
1a004a68:	6923      	ldr	r3, [r4, #16]
1a004a6a:	462a      	mov	r2, r5
1a004a6c:	4639      	mov	r1, r7
1a004a6e:	4630      	mov	r0, r6
1a004a70:	47c0      	blx	r8
1a004a72:	3001      	adds	r0, #1
1a004a74:	d0aa      	beq.n	1a0049cc <_printf_i+0x12c>
1a004a76:	6823      	ldr	r3, [r4, #0]
1a004a78:	079b      	lsls	r3, r3, #30
1a004a7a:	d413      	bmi.n	1a004aa4 <_printf_i+0x204>
1a004a7c:	68e0      	ldr	r0, [r4, #12]
1a004a7e:	9b03      	ldr	r3, [sp, #12]
1a004a80:	4298      	cmp	r0, r3
1a004a82:	bfb8      	it	lt
1a004a84:	4618      	movlt	r0, r3
1a004a86:	e7a3      	b.n	1a0049d0 <_printf_i+0x130>
1a004a88:	2301      	movs	r3, #1
1a004a8a:	464a      	mov	r2, r9
1a004a8c:	4639      	mov	r1, r7
1a004a8e:	4630      	mov	r0, r6
1a004a90:	47c0      	blx	r8
1a004a92:	3001      	adds	r0, #1
1a004a94:	d09a      	beq.n	1a0049cc <_printf_i+0x12c>
1a004a96:	3501      	adds	r5, #1
1a004a98:	68e3      	ldr	r3, [r4, #12]
1a004a9a:	9a03      	ldr	r2, [sp, #12]
1a004a9c:	1a9b      	subs	r3, r3, r2
1a004a9e:	42ab      	cmp	r3, r5
1a004aa0:	dcf2      	bgt.n	1a004a88 <_printf_i+0x1e8>
1a004aa2:	e7eb      	b.n	1a004a7c <_printf_i+0x1dc>
1a004aa4:	2500      	movs	r5, #0
1a004aa6:	f104 0919 	add.w	r9, r4, #25
1a004aaa:	e7f5      	b.n	1a004a98 <_printf_i+0x1f8>
1a004aac:	2b00      	cmp	r3, #0
1a004aae:	d1ac      	bne.n	1a004a0a <_printf_i+0x16a>
1a004ab0:	7803      	ldrb	r3, [r0, #0]
1a004ab2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004ab6:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004aba:	e76c      	b.n	1a004996 <_printf_i+0xf6>
1a004abc:	1a0054b1 	.word	0x1a0054b1
1a004ac0:	1a0054c2 	.word	0x1a0054c2

1a004ac4 <__sread>:
1a004ac4:	b510      	push	{r4, lr}
1a004ac6:	460c      	mov	r4, r1
1a004ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004acc:	f7fb fce7 	bl	1a00049e <_read_r>
1a004ad0:	2800      	cmp	r0, #0
1a004ad2:	bfab      	itete	ge
1a004ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a004ad6:	89a3      	ldrhlt	r3, [r4, #12]
1a004ad8:	181b      	addge	r3, r3, r0
1a004ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a004ade:	bfac      	ite	ge
1a004ae0:	6563      	strge	r3, [r4, #84]	; 0x54
1a004ae2:	81a3      	strhlt	r3, [r4, #12]
1a004ae4:	bd10      	pop	{r4, pc}

1a004ae6 <__swrite>:
1a004ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004aea:	461f      	mov	r7, r3
1a004aec:	898b      	ldrh	r3, [r1, #12]
1a004aee:	05db      	lsls	r3, r3, #23
1a004af0:	4605      	mov	r5, r0
1a004af2:	460c      	mov	r4, r1
1a004af4:	4616      	mov	r6, r2
1a004af6:	d505      	bpl.n	1a004b04 <__swrite+0x1e>
1a004af8:	2302      	movs	r3, #2
1a004afa:	2200      	movs	r2, #0
1a004afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004b00:	f7fb fcc8 	bl	1a000494 <_lseek_r>
1a004b04:	89a3      	ldrh	r3, [r4, #12]
1a004b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004b0e:	81a3      	strh	r3, [r4, #12]
1a004b10:	4632      	mov	r2, r6
1a004b12:	463b      	mov	r3, r7
1a004b14:	4628      	mov	r0, r5
1a004b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004b1a:	f7fb bcf7 	b.w	1a00050c <_write_r>

1a004b1e <__sseek>:
1a004b1e:	b510      	push	{r4, lr}
1a004b20:	460c      	mov	r4, r1
1a004b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004b26:	f7fb fcb5 	bl	1a000494 <_lseek_r>
1a004b2a:	1c43      	adds	r3, r0, #1
1a004b2c:	89a3      	ldrh	r3, [r4, #12]
1a004b2e:	bf15      	itete	ne
1a004b30:	6560      	strne	r0, [r4, #84]	; 0x54
1a004b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a004b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004b3a:	81a3      	strheq	r3, [r4, #12]
1a004b3c:	bf18      	it	ne
1a004b3e:	81a3      	strhne	r3, [r4, #12]
1a004b40:	bd10      	pop	{r4, pc}

1a004b42 <__sclose>:
1a004b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004b46:	f7fb bc92 	b.w	1a00046e <_close_r>
1a004b4a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a004b4e:	Address 0x000000001a004b4e is out of bounds.


1a004b50 <memchr>:
1a004b50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004b54:	2a10      	cmp	r2, #16
1a004b56:	db2b      	blt.n	1a004bb0 <memchr+0x60>
1a004b58:	f010 0f07 	tst.w	r0, #7
1a004b5c:	d008      	beq.n	1a004b70 <memchr+0x20>
1a004b5e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004b62:	3a01      	subs	r2, #1
1a004b64:	428b      	cmp	r3, r1
1a004b66:	d02d      	beq.n	1a004bc4 <memchr+0x74>
1a004b68:	f010 0f07 	tst.w	r0, #7
1a004b6c:	b342      	cbz	r2, 1a004bc0 <memchr+0x70>
1a004b6e:	d1f6      	bne.n	1a004b5e <memchr+0xe>
1a004b70:	b4f0      	push	{r4, r5, r6, r7}
1a004b72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004b76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a004b7a:	f022 0407 	bic.w	r4, r2, #7
1a004b7e:	f07f 0700 	mvns.w	r7, #0
1a004b82:	2300      	movs	r3, #0
1a004b84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004b88:	3c08      	subs	r4, #8
1a004b8a:	ea85 0501 	eor.w	r5, r5, r1
1a004b8e:	ea86 0601 	eor.w	r6, r6, r1
1a004b92:	fa85 f547 	uadd8	r5, r5, r7
1a004b96:	faa3 f587 	sel	r5, r3, r7
1a004b9a:	fa86 f647 	uadd8	r6, r6, r7
1a004b9e:	faa5 f687 	sel	r6, r5, r7
1a004ba2:	b98e      	cbnz	r6, 1a004bc8 <memchr+0x78>
1a004ba4:	d1ee      	bne.n	1a004b84 <memchr+0x34>
1a004ba6:	bcf0      	pop	{r4, r5, r6, r7}
1a004ba8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004bac:	f002 0207 	and.w	r2, r2, #7
1a004bb0:	b132      	cbz	r2, 1a004bc0 <memchr+0x70>
1a004bb2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004bb6:	3a01      	subs	r2, #1
1a004bb8:	ea83 0301 	eor.w	r3, r3, r1
1a004bbc:	b113      	cbz	r3, 1a004bc4 <memchr+0x74>
1a004bbe:	d1f8      	bne.n	1a004bb2 <memchr+0x62>
1a004bc0:	2000      	movs	r0, #0
1a004bc2:	4770      	bx	lr
1a004bc4:	3801      	subs	r0, #1
1a004bc6:	4770      	bx	lr
1a004bc8:	2d00      	cmp	r5, #0
1a004bca:	bf06      	itte	eq
1a004bcc:	4635      	moveq	r5, r6
1a004bce:	3803      	subeq	r0, #3
1a004bd0:	3807      	subne	r0, #7
1a004bd2:	f015 0f01 	tst.w	r5, #1
1a004bd6:	d107      	bne.n	1a004be8 <memchr+0x98>
1a004bd8:	3001      	adds	r0, #1
1a004bda:	f415 7f80 	tst.w	r5, #256	; 0x100
1a004bde:	bf02      	ittt	eq
1a004be0:	3001      	addeq	r0, #1
1a004be2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004be6:	3001      	addeq	r0, #1
1a004be8:	bcf0      	pop	{r4, r5, r6, r7}
1a004bea:	3801      	subs	r0, #1
1a004bec:	4770      	bx	lr
1a004bee:	bf00      	nop

1a004bf0 <memmove>:
1a004bf0:	4288      	cmp	r0, r1
1a004bf2:	b510      	push	{r4, lr}
1a004bf4:	eb01 0302 	add.w	r3, r1, r2
1a004bf8:	d807      	bhi.n	1a004c0a <memmove+0x1a>
1a004bfa:	1e42      	subs	r2, r0, #1
1a004bfc:	4299      	cmp	r1, r3
1a004bfe:	d00a      	beq.n	1a004c16 <memmove+0x26>
1a004c00:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004c04:	f802 4f01 	strb.w	r4, [r2, #1]!
1a004c08:	e7f8      	b.n	1a004bfc <memmove+0xc>
1a004c0a:	4283      	cmp	r3, r0
1a004c0c:	d9f5      	bls.n	1a004bfa <memmove+0xa>
1a004c0e:	1881      	adds	r1, r0, r2
1a004c10:	1ad2      	subs	r2, r2, r3
1a004c12:	42d3      	cmn	r3, r2
1a004c14:	d100      	bne.n	1a004c18 <memmove+0x28>
1a004c16:	bd10      	pop	{r4, pc}
1a004c18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a004c1c:	f801 4d01 	strb.w	r4, [r1, #-1]!
1a004c20:	e7f7      	b.n	1a004c12 <memmove+0x22>

1a004c22 <__malloc_lock>:
1a004c22:	4770      	bx	lr

1a004c24 <__malloc_unlock>:
1a004c24:	4770      	bx	lr

1a004c26 <_realloc_r>:
1a004c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004c28:	4607      	mov	r7, r0
1a004c2a:	4614      	mov	r4, r2
1a004c2c:	460e      	mov	r6, r1
1a004c2e:	b921      	cbnz	r1, 1a004c3a <_realloc_r+0x14>
1a004c30:	4611      	mov	r1, r2
1a004c32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a004c36:	f7ff bad1 	b.w	1a0041dc <_malloc_r>
1a004c3a:	b922      	cbnz	r2, 1a004c46 <_realloc_r+0x20>
1a004c3c:	f7ff fa80 	bl	1a004140 <_free_r>
1a004c40:	4625      	mov	r5, r4
1a004c42:	4628      	mov	r0, r5
1a004c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004c46:	f000 f814 	bl	1a004c72 <_malloc_usable_size_r>
1a004c4a:	42a0      	cmp	r0, r4
1a004c4c:	d20f      	bcs.n	1a004c6e <_realloc_r+0x48>
1a004c4e:	4621      	mov	r1, r4
1a004c50:	4638      	mov	r0, r7
1a004c52:	f7ff fac3 	bl	1a0041dc <_malloc_r>
1a004c56:	4605      	mov	r5, r0
1a004c58:	2800      	cmp	r0, #0
1a004c5a:	d0f2      	beq.n	1a004c42 <_realloc_r+0x1c>
1a004c5c:	4631      	mov	r1, r6
1a004c5e:	4622      	mov	r2, r4
1a004c60:	f7fe ff7c 	bl	1a003b5c <memcpy>
1a004c64:	4631      	mov	r1, r6
1a004c66:	4638      	mov	r0, r7
1a004c68:	f7ff fa6a 	bl	1a004140 <_free_r>
1a004c6c:	e7e9      	b.n	1a004c42 <_realloc_r+0x1c>
1a004c6e:	4635      	mov	r5, r6
1a004c70:	e7e7      	b.n	1a004c42 <_realloc_r+0x1c>

1a004c72 <_malloc_usable_size_r>:
1a004c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004c76:	1f18      	subs	r0, r3, #4
1a004c78:	2b00      	cmp	r3, #0
1a004c7a:	bfbc      	itt	lt
1a004c7c:	580b      	ldrlt	r3, [r1, r0]
1a004c7e:	18c0      	addlt	r0, r0, r3
1a004c80:	4770      	bx	lr
1a004c82:	ffff 4453 	vsri.32	q10, <illegal reg q1.5>, #1
1a004c86:	3a43      	.short	0x3a43
1a004c88:	00000000 	.word	0x00000000
1a004c8c:	ffff002f 	.word	0xffff002f
1a004c90:	0d73252f 	.word	0x0d73252f
1a004c94:	0000000a 	.word	0x0000000a
1a004c98:	252f7325 	.word	0x252f7325
1a004c9c:	000a0d73 	.word	0x000a0d73

1a004ca0 <ExCvt>:
1a004ca0:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
1a004cb0:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
1a004cc0:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
1a004cd0:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
1a004ce0:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
1a004cf0:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
1a004d00:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
1a004d10:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

1a004d20 <LfnOfs>:
1a004d20:	07050301 12100e09 1c181614 ffffff1e     ................

1a004d30 <VolumeStr>:
1a004d30:	1a004d64 1a004d68 459076eb 54414658     dM..hM...v.EXFAT
1a004d40:	00202020 00544146 33544146 ffff0032        .FAT.FAT32...
1a004d50:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
1a004d60:	ff005d5b 00434453 00425355              []..SDC.USB.

1a004d6c <cvt1.5491>:
1a004d6c:	031a0061 031700e0 030700f8 000100ff     a...............
1a004d7c:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
1a004d8c:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
1a004d9c:	01840182 01860184 01870187 018a0189     ................
1a004dac:	018b018b 018e018d 0190018f 01910191     ................
1a004dbc:	01940193 019601f6 01980197 023d0198     ..............=.
1a004dcc:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
1a004ddc:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
1a004dec:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
1a004dfc:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
1a004e0c:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
1a004e1c:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
1a004e2c:	01ca01cb 011001cd 000101dd 01de018e     ................
1a004e3c:	01f30112 01f10003 01f401f4 012801f8     ..............(.
1a004e4c:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
1a004e5c:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
1a004e6c:	01810040 02550186 018a0189 018f0258     @.....U.....X...
1a004e7c:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
1a004e8c:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
1a004e9c:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
1a004eac:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
1a004ebc:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
1a004ecc:	01a90282 02850284 02870286 024401ae     ..............D.
1a004edc:	01b201b1 028d0245 028f028e 02910290     ....E...........
1a004eec:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
1a004efc:	03880386 038a0389 031103b1 000203c2     ................
1a004f0c:	03a303a3 030803c4 000303cc 038e038c     ................
1a004f1c:	03d8038f 03f20118 03f9000a 03f403f3     ................
1a004f2c:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
1a004f3c:	04500320 04600710 048a0122 04c10136      .P...`."...6...
1a004f4c:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
1a004f5c:	ffff0000                                ....

1a004f60 <cvt2.5492>:
1a004f60:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
1a004f70:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
1a004f80:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
1a004f90:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
1a004fa0:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
1a004fb0:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
1a004fc0:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
1a004fd0:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
1a004fe0:	1fec0001 00011ff3 214e1ffc 21320001     ..........N!..2!
1a004ff0:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
1a005000:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
1a005010:	2d000164 ff410826 0000031a              d..-&.A.....

1a00501c <uc850>:
1a00501c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
1a00502c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
1a00503c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
1a00504c:	00d600ff 00f800dc 00d800a3 019200d7     ................
1a00505c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
1a00506c:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
1a00507c:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
1a00508c:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
1a00509c:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
1a0050ac:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
1a0050bc:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
1a0050cc:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
1a0050dc:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
1a0050ec:	00da00de 00d900db 00dd00fd 00b400af     ................
1a0050fc:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
1a00510c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..
1a00511c:	44535346 5b203a43 74696e49 6f4e205d     FSSDC: [Init] No
1a00512c:	72616320 6e692064 636f7320 2e74656b      card in socket.
1a00513c:	00000a0d 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a00514c:	6e49205d 61697469 617a696c 6e6f6974     ] Initialization
1a00515c:	67656220 2e736e69 00000a0d 44535346      begins.....FSSD
1a00516c:	5b203a43 74696e49 654e205d 61632077     C: [Init] New ca
1a00517c:	73206472 75746174 4e203a73 76697461     rd status: Nativ
1a00518c:	6f4d2065 0d2e6564 0000000a 44535346     e Mode......FSSD
1a00519c:	5b203a43 74696e49 654e205d 61632077     C: [Init] New ca
1a0051ac:	73206472 75746174 49203a73 6974696e     rd status: Initi
1a0051bc:	7a696c61 2e676e69 00000a0d 44535346     alizing.....FSSD
1a0051cc:	5b203a43 74696e49 654e205d 61632077     C: [Init] New ca
1a0051dc:	73206472 75746174 52203a73 79646165     rd status: Ready
1a0051ec:	61462820 43207473 6b636f6c 0a0d2e29      (Fast Clock)...
1a0051fc:	00000000 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a00520c:	654e205d 61632077 73206472 75746174     ] New card statu
1a00521c:	45203a73 726f7272 6f4e2820 6e492074     s: Error (Not In
1a00522c:	61697469 657a696c 0d2e2964 ffff000a     itialized)......
1a00523c:	44535346 5b203a43 64616552 6143205d     FSSDC: [Read] Ca
1a00524c:	6e206472 6920746f 6974696e 7a696c61     rd not initializ
1a00525c:	0d2e6465 ffff000a 44535346 5b203a43     ed......FSSDC: [
1a00526c:	74697257 43205d65 20647261 20746f6e     Write] Card not 
1a00527c:	74696e69 696c6169 2e64657a 00000a0d     initialized.....
1a00528c:	44535346 5b203a43 74697257 43205d65     FSSDC: [Write] C
1a00529c:	20647261 77207369 65746972 6f727020     ard is write pro
1a0052ac:	74636574 0d2e6465 ffff000a 44535346     tected......FSSD
1a0052bc:	5b203a43 74696e49 5d495053 77654e20     C: [InitSPI] New
1a0052cc:	72616320 74732064 73757461 6e49203a      card status: In
1a0052dc:	74726573 0d2e6465 ffff000a              serted......

1a0052e8 <ExtRateIn>:
1a0052e8:	00000000                                ....

1a0052ec <OscRateIn>:
1a0052ec:	00b71b00                                ....

1a0052f0 <InitClkStates>:
1a0052f0:	01010f01                                ....

1a0052f4 <pinmuxing>:
1a0052f4:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005304:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005314:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005324:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005334:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a005344:	00d50301 00d50401 00160107 00560207     ..............V.
1a005354:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a005364:	00570206                                ..W.

1a005368 <UART_BClock>:
1a005368:	01a201c2 01620182                       ......b.

1a005370 <UART_PClock>:
1a005370:	00820081 00a200a1 08040201 0f0f0f03     ................
1a005380:	000000ff                                ....

1a005384 <periph_to_base>:
1a005384:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a005394:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0053a4:	000100e0 01000100 01200003 00060120     .......... . ...
1a0053b4:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0053c4:	01820013 00120182 01a201a2 01c20011     ................
1a0053d4:	001001c2 01e201e2 0202000f 000e0202     ................
1a0053e4:	02220222 0223000d 001c0223              "."...#.#...

1a0053f0 <InitClkStates>:
1a0053f0:	00010100 00010909 0001090a 01010701     ................
1a005400:	00010902 00010906 0101090c 0001090d     ................
1a005410:	0001090e 0001090f 00010910 00010911     ................
1a005420:	00010912 00010913 00011114 00011119     ................
1a005430:	0001111a 0001111b                       ........

1a005438 <ultrasonicSensorsIrqMap>:
1a005438:	ff020100                                ....

1a00543c <__sf_fake_stderr>:
	...

1a00545c <__sf_fake_stdin>:
	...

1a00547c <__sf_fake_stdout>:
	...

1a00549c <_global_impure_ptr>:
1a00549c:	1000009c 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a0054ac:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a0054bc:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a0054cc:	64636261 ff006665                       abcdef..
