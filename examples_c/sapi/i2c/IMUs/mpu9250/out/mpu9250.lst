
examples_c/sapi/i2c/IMUs/mpu9250/out/mpu9250.elf:     file format elf32-littlearm
examples_c/sapi/i2c/IMUs/mpu9250/out/mpu9250.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000475

Program Header:
0x70000001 off    0x000186a4 vaddr 0x1a0086a4 paddr 0x1a0086a4 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000c58 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000086ac memsz 0x000086ac flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0086ac align 2**16
         filesz 0x00000a74 memsz 0x00000a74 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000086a0  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000a74  10000000  1a0086ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020a74  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020a74  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020a74  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020a74  2**2
                  CONTENTS
  6 .bss          000001e0  10000a78  10000a78  00000a78  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020a74  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020a74  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020a74  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020a74  2**2
                  CONTENTS
 11 .init_array   00000004  1a0086a0  1a0086a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0086a4  1a0086a4  000186a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020a74  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020a74  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020a74  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020a74  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020a74  2**2
                  CONTENTS
 18 .noinit       00000000  10000c58  10000c58  00020a74  2**2
                  CONTENTS
 19 .debug_info   0001d392  00000000  00000000  00020a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000041fa  00000000  00000000  0003de06  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00006331  00000000  00000000  00042000  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000009e8  00000000  00000000  00048331  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000970  00000000  00000000  00048d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000cca4  00000000  00000000  00049689  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000d39f  00000000  00000000  0005632d  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00026b65  00000000  00000000  000636cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  0008a231  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  0008a2b0  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002898  00000000  00000000  0008a2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000a78 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0086a0 l    d  .init_array	00000000 .init_array
1a0086a4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000c58 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 mpu9250.c
00000000 l    df *ABS*	00000000 system.c
10000a78 l     O .bss	00000004 heap_end.5742
00000000 l    df *ABS*	00000000 board.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a008198 l     O .text	00000004 InitClkStates
1a00819c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0006e0 l     F .text	0000002c Chip_UART_GetIndex
1a008210 l     O .text	00000008 UART_BClock
1a008218 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000848 l     F .text	000000a4 pll_calc_divs
1a0008ec l     F .text	0000010c pll_get_frac
1a0009f8 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000c6c l     F .text	00000022 Chip_Clock_GetDivRate
10000a7c l     O .bss	00000008 audio_usb_pll_freq
1a00822c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a008298 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
10000a84 l     O .bss	00000004 callBackFuncParams
10000a88 l     O .bss	00000008 tickCounter
10000a90 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a0013e0 l     F .text	00000030 i2cHardwareInit
1a001410 l     F .text	0000003c i2cHardwareRead
1a00144c l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0014d6 l     F .text	00000002 errorOcurred
1a0014d8 l     F .text	00000002 doNothing
10000044 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0015e4 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000a94 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_imu_mpu9250.c
1a0018f4 l     F .text	00000080 mpu9250InitializeControlStructure
1a001974 l     F .text	00000034 mpu9250ReadRegisters
1a0019a8 l     F .text	00000020 mpu9250WhoAmI
1a0019c8 l     F .text	0000004c mpu9250WriteRegister
1a001a14 l     F .text	0000005c mpu9250ReadAK8963Registers
1a001a70 l     F .text	00000020 mpu9250WhoAmIAK8963
1a001a90 l     F .text	00000078 mpu9250WriteAK8963Register
1a001b08 l     F .text	00000094 mpu9250SetGyroRange
1a001b9c l     F .text	000000f8 mpu9250SetDlpfBandwidth
1a001c94 l     F .text	000000b4 mpu9250SetSrd
1a002018 l     F .text	0000015c mpu9250CalibrateGyro
10000a98 l     O .bss	00000158 control
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a002458 l     F .text	00000010 clearInterrupt
1a002468 l     F .text	0000005c serveInterrupt
10000084 l     O .data	00000048 ultrasonicSensors
1a008418 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a004a5c l     F .text	00000084 __sbprintf
1a008460 l     O .text	00000010 blanks.8605
1a008470 l     O .text	00000010 zeroes.8606
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a004bac l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a005ca0 l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
1a008580 l     O .text	0000000c p05.7367
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a0075f4 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
100000d0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a0086a4 l       .init_array	00000000 __init_array_end
1a0086a0 l       .bss_RAM5	00000000 __preinit_array_end
1a0086a0 l       .init_array	00000000 __init_array_start
1a0086a0 l       .bss_RAM5	00000000 __preinit_array_start
1a007f54 g     F .text	0000002c .hidden __aeabi_dcmpun
1a000a90 g     F .text	0000001c Chip_Clock_GetDividerSource
1a00050e g     F .text	00000012 _isatty_r
1a000ee8 g     F .text	0000000e Chip_I2CM_Xfer
1a007f18 g     F .text	00000012 .hidden __aeabi_dcmple
1a002e34 g     F .text	0000009c _puts_r
1a00155c g     F .text	00000044 TIMER2_IRQHandler
1a007e54 g     F .text	0000007a .hidden __cmpdf2
1a001488 g     F .text	0000000e i2cInit
1a000520 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a007e54 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002800 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a002e0c g     F .text	00000028 printf
1a000626 g     F .text	00000008 __stdio_init
10000c34 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a0079b4 g     F .text	00000050 _wcrtomb_r
1a007568 g     F .text	00000020 __sseek
1a005cfc g     F .text	00000058 __sinit
1a007904 g     F .text	000000b0 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001090 g     F .text	00000120 handleMasterXferState
1a001fd0 g     F .text	0000000c mpu9250GetAccelX_mss
1a000000 g       *ABS*	00000000 __vectors_start__
1a006b24 g     F .text	0000000c __malloc_unlock
1a0013ac g     F .text	00000034 SysTick_Handler
10000c38 g     O .bss	00000001 __lock___arc4random_mutex
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0005f8 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a006a50 g     F .text	000000c6 memmove
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a006b30 g     F .text	0000004c _Balloc
1a0086ac g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a007e44 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a001496 g     F .text	00000028 i2cRead
1a000504 g     F .text	0000000a _fstat_r
1a002434 g     F .text	0000000c mpu9250GetMagY_uT
53ff741a g       *ABS*	00000000 __valid_user_code_checksum
1a0086ac g       .ARM.exidx	00000000 _etext
1a007ee0 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a002440 g     F .text	0000000c mpu9250GetMagZ_uT
1a0015a0 g     F .text	00000044 TIMER3_IRQHandler
1a000d0e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002c44 g     F .text	00000134 memcpy
1a007ed0 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a005cf0 g     F .text	0000000c _cleanup_r
1a002788 g     F .text	00000022 .hidden __floatsidf
1a00123c g     F .text	00000030 Chip_I2C_MasterStateHandler
1a007e4c g     F .text	00000082 .hidden __ltdf2
1a0028fc g     F .text	00000000 .hidden __aeabi_uldivmod
10000c58 g       .noinit	00000000 _noinit
1a002ed0 g     F .text	00000010 puts
10000c24 g     O .bss	00000004 SystemCoreClock
1a00070c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0084b8 g     O .text	000000c8 __mprec_tens
1a000180  w    F .text	00000002 UsageFault_Handler
1a000d8c g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
10000c20 g     O .bss	00000004 __malloc_top_pad
1a000668 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002768 g     F .text	0000001e .hidden __aeabi_ui2d
1a006344 g     F .text	0000001c _localeconv_r
1a006cb0 g     F .text	00000012 __i2b
1a005ff4 g     F .text	000002fc __sfvwrite_r
1a00120c g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a00292c g     F .text	000002cc .hidden __udivmoddi4
1a0024e4 g     F .text	00000000 .hidden __aeabi_drsub
1a002174 g     F .text	000002b4 mpu9250Init
1a000578 g     F .text	00000020 _sbrk_r
1a008190 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00244c g     F .text	0000000c mpu9250GetTemperature_C
1a00052a g     F .text	0000004e _read_r
1a007f04 g     F .text	00000012 .hidden __aeabi_dcmplt
1a0076e8 g     F .text	000000d0 _fclose_r
1a0024ce g     F .text	0000000a GPIO1_IRQHandler
10000c18 g     O .bss	00000004 __malloc_max_sbrked_mem
1a0027ac g     F .text	00000042 .hidden __extendsfdf2
1a007c74 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001fe8 g     F .text	0000000c mpu9250GetAccelZ_mss
1a0024f0 g     F .text	00000276 .hidden __adddf3
1a0086a4 g       .ARM.exidx	00000000 __exidx_start
10000c3c g     O .bss	00000001 __lock___env_recursive_mutex
1a007a20 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10000c40 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a007144 g     F .text	0000035c _realloc_r
1a002bfc g     F .text	00000048 __libc_init_array
1a007858 g     F .text	00000064 _fputwc_r
1a008490 g     O .text	00000028 __mprec_bigtens
1a002768 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a006f5c g     F .text	00000036 __mcmp
1a0004f8 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a00285c g     F .text	0000009e .hidden __aeabi_d2f
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000c58 g       .bss	00000000 _ebss
1a0014dc g     F .text	00000040 TIMER0_IRQHandler
1a000474 g     F .text	00000084 Reset_Handler
1a001330 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000ef6 g     F .text	00000024 Chip_I2CM_XferBlocking
1a006c10 g     F .text	0000003e __hi0bits
1a0011d4 g     F .text	00000038 Chip_I2C_SetClockRate
1a007f80 g     F .text	0000004e .hidden __fixdfsi
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000a44 g     F .text	0000004c Chip_Clock_EnableCrystal
10000c44 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0024f0 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a007e4c g     F .text	00000082 .hidden __ledf2
1a006e10 g     F .text	000000a0 __pow5mult
1a0027f0 g     F .text	0000006a .hidden __aeabi_ul2d
1a00151c g     F .text	00000040 TIMER1_IRQHandler
1a0011b0 g     F .text	00000024 Chip_I2C_Init
1a00636c g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000c00 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0082e0 g     O .text	00000136 gpioPinsInit
1a007f40 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0024d8 g     F .text	0000000a GPIO2_IRQHandler
1a005d54 g     F .text	0000000c __sfp_lock_acquire
1a0069b0 g     F .text	00000000 memchr
1a005e0c g     F .text	000001e8 _free_r
1a000ce8 g     F .text	00000026 Chip_Clock_GetBaseClock
1a0078bc g     F .text	0000001c __locale_mb_cur_max
1a007f2c g     F .text	00000012 .hidden __aeabi_dcmpge
10000a78 g       .bss	00000000 _bss
1a0024ec g     F .text	0000027a .hidden __aeabi_dsub
10000900 g     O .data	00000004 __malloc_sbrk_base
1a0027f0 g     F .text	0000006a .hidden __floatundidf
1a006eb0 g     F .text	000000ac __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a002000 g     F .text	0000000c mpu9250GetGyroY_rads
1a000f1a g     F .text	00000002 Chip_GPIO_Init
1a008194 g     O .text	00000004 OscRateIn
1a006cc4 g     F .text	0000014a __multiply
10000c58 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a007590 g     F .text	00000064 strncpy
10000bf0 g     O .bss	00000028 __malloc_current_mallinfo
1a007080 g     F .text	000000c2 __d2b
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a0004fa g     F .text	0000000a _close_r
1a002788 g     F .text	00000022 .hidden __aeabi_i2d
1a001618 g     F .text	00000194 gpioInit
1a006364 g     F .text	00000002 __retarget_lock_close_recursive
1a004ae0 g     F .text	000000cc __swsetup_r
1a002bf8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a007c74 g     F .text	000001d0 .hidden __divdf3
100004f8 g     O .data	00000408 __malloc_av_
1a007a20 g     F .text	00000254 .hidden __muldf3
1a007508 g     F .text	00000022 __sread
1a0017ac g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
10000000 g     O .data	00000001 addr
1a006b18 g     F .text	0000000c __malloc_lock
1a0005e4 g     F .text	00000014 Board_UARTPutChar
1a00126c g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a005c44 g     F .text	0000005a _fflush_r
1a007680 g     F .text	00000068 _calloc_r
1a000aac g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a006368 g     F .text	00000002 __retarget_lock_acquire_recursive
1a002d78 g     F .text	00000094 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	00000174 main
10000c1c g     O .bss	00000004 __malloc_max_total_mem
1a006360 g     F .text	00000002 __retarget_lock_init_recursive
1a002428 g     F .text	0000000c mpu9250GetMagX_uT
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
10000040 g     O .data	00000004 DWT_CTRL
1a007588 g     F .text	00000008 __sclose
1a00285c g     F .text	0000009e .hidden __truncdfsf2
1a004cd0 g     F .text	00000e20 _dtoa_r
1a006460 g     F .text	00000548 _malloc_r
1a007a04 g     F .text	0000001a __ascii_wctomb
1a002800 g     F .text	0000005a .hidden __aeabi_l2d
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a000d1c g     F .text	0000003c Chip_Clock_EnableOpts
1a00061e g     F .text	00000008 __stdio_getchar
1a005d6c g     F .text	000000a0 _malloc_trim_r
1a000ac8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001fdc g     F .text	0000000c mpu9250GetAccelY_mss
1a000b80 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0012bc g     F .text	00000034 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0018bc g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a007e54 g     F .text	0000007a .hidden __nedf2
10000c30 g     O .bss	00000004 g_pUsbApi
1a000630 g     F .text	00000038 Board_SetupMuxing
1a000760 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00130c g     F .text	0000000c tickRead
1a000598 g     F .text	00000028 _write_r
10000c28 g     O .bss	00000008 tickRateMS
1a001d48 g     F .text	00000288 mpu9250Read
1a0001ba  w    F .text	00000002 ETH_IRQHandler
100000cc g     O .data	00000004 _impure_ptr
1a005af0 g     F .text	00000154 __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a000dec g     F .text	000000fc Chip_I2CM_XferHandler
1a0078d8 g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
10000c58 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001284 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a006370 g     F .text	0000005c __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0014be g     F .text	00000018 i2cWrite
1a0005c0 g     F .text	00000024 Board_Debug_Init
1a007ef0 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a000614 g     F .text	0000000a __stdio_putchar
10000a74 g       .data	00000000 _edata
1a001070 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a0077b8 g     F .text	0000009e __fputwc
10000c48 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a000f1c g     F .text	00000154 Chip_SetupCoreClock
1a00200c g     F .text	0000000c mpu9250GetGyroZ_rads
1a00752c g     F .text	0000003c __swrite
1a0024c4 g     F .text	0000000a GPIO0_IRQHandler
10000904 g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a0062f0 g     F .text	00000052 _fwalk_reent
1a000dd8 g     F .text	00000014 SystemCoreClockUpdate
1a006f94 g     F .text	000000ec __mdiff
1a007f80 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a005d60 g     F .text	0000000c __sfp_lock_release
1a00859c g     O .text	00000101 _ctype_
1a002bf8  w    F .text	00000002 .hidden __aeabi_idiv0
1a007f54 g     F .text	0000002c .hidden __unorddf2
1a00017e  w    F .text	00000002 BusFault_Handler
10000c4c g     O .bss	00000001 __lock___dd_hash_mutex
1a0063cc g     F .text	00000094 __smakebuf_r
10000c50 g     O .bss	00000001 __lock___tz_mutex
1a002f00 g     F .text	000000dc strlen
1a000d58 g     F .text	00000034 Chip_Clock_Enable
1a007ee0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a007e44 g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a001ff4 g     F .text	0000000c mpu9250GetGyroX_rads
1a00766c g     F .text	00000014 __sprint_r
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0027ac g     F .text	00000042 .hidden __aeabi_f2d
1a0017c8 g     F .text	000000f4 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0024ec g     F .text	0000027a .hidden __subdf3
1a002fe0 g     F .text	00001a7c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a006c50 g     F .text	0000005e __lo0bits
1a001318 g     F .text	00000018 tickPowerSet
1a0074a0 g     F .text	00000068 frexp
10000908 g     O .data	0000016c __global_locale
1a000c90 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0012f0 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10000c54 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0006d4 g     F .text	0000000c Board_SystemInit
1a006b90 g     F .text	00000080 __multadd
1a006b7c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 75 04 00 1a 79 01 00 1a 7b 01 00 1a     ....u...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 1a 74 ff 53     }............t.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	ad 13 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	ad 17 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	dd 14 00 1a 1d 15 00 1a 5d 15 00 1a a1 15 00 1a     ........].......
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	c5 24 00 1a cf 24 00 1a d9 24 00 1a bb 01 00 1a     .$...$...$......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0086ac 	.word	0x1a0086ac
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000a74 	.word	0x00000a74
1a000120:	1a0086ac 	.word	0x1a0086ac
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0086ac 	.word	0x1a0086ac
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0086ac 	.word	0x1a0086ac
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0086ac 	.word	0x1a0086ac
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000a78 	.word	0x10000a78
1a000154:	000001e0 	.word	0x000001e0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __WFI();
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a000300:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000302:	b085      	sub	sp, #20
   /* ------------- INICIALIZACIONES ------------- */

   boardConfig();
1a000304:	f001 fa60 	bl	1a0017c8 <boardInit>

   // Inicializar la IMU
   printf("Inicializando IMU MPU9250...\r\n" );
1a000308:	484b      	ldr	r0, [pc, #300]	; (1a000438 <main+0x138>)
1a00030a:	f002 fde1 	bl	1a002ed0 <puts>
   int8_t status;
   status = mpu9250Init( addr );
1a00030e:	4b4b      	ldr	r3, [pc, #300]	; (1a00043c <main+0x13c>)
1a000310:	7818      	ldrb	r0, [r3, #0]
1a000312:	f001 ff2f 	bl	1a002174 <mpu9250Init>

   if( status < 0 ){
1a000316:	2800      	cmp	r0, #0
1a000318:	da18      	bge.n	1a00034c <main+0x4c>
      printf( "IMU MPU9250 no inicializado, chequee las conexiones:\r\n\r\n" );
1a00031a:	4849      	ldr	r0, [pc, #292]	; (1a000440 <main+0x140>)
1a00031c:	f002 fdd8 	bl	1a002ed0 <puts>
      printf( "MPU9250 ---- EDU-CIAA-NXP\r\n\r\n" );
1a000320:	4848      	ldr	r0, [pc, #288]	; (1a000444 <main+0x144>)
1a000322:	f002 fdd5 	bl	1a002ed0 <puts>
      printf( "    VCC ---- 3.3V\r\n" );
1a000326:	4848      	ldr	r0, [pc, #288]	; (1a000448 <main+0x148>)
1a000328:	f002 fdd2 	bl	1a002ed0 <puts>
      printf( "    GND ---- GND\r\n" );
1a00032c:	4847      	ldr	r0, [pc, #284]	; (1a00044c <main+0x14c>)
1a00032e:	f002 fdcf 	bl	1a002ed0 <puts>
      printf( "    SCL ---- SCL\r\n" );
1a000332:	4847      	ldr	r0, [pc, #284]	; (1a000450 <main+0x150>)
1a000334:	f002 fdcc 	bl	1a002ed0 <puts>
      printf( "    SDA ---- SDA\r\n" );
1a000338:	4846      	ldr	r0, [pc, #280]	; (1a000454 <main+0x154>)
1a00033a:	f002 fdc9 	bl	1a002ed0 <puts>
      printf( "    AD0 ---- GND\r\n\r\n" );
1a00033e:	4846      	ldr	r0, [pc, #280]	; (1a000458 <main+0x158>)
1a000340:	f002 fdc6 	bl	1a002ed0 <puts>
      printf( "Se detiene el programa.\r\n" );
1a000344:	4845      	ldr	r0, [pc, #276]	; (1a00045c <main+0x15c>)
1a000346:	f002 fdc3 	bl	1a002ed0 <puts>
1a00034a:	e7fe      	b.n	1a00034a <main+0x4a>
      while(1);
   }
   printf("IMU MPU9250 inicializado correctamente.\r\n\r\n" );
1a00034c:	4844      	ldr	r0, [pc, #272]	; (1a000460 <main+0x160>)
1a00034e:	f002 fdbf 	bl	1a002ed0 <puts>

   /* ------------- REPETIR POR SIEMPRE ------------- */
   while(TRUE){

      //Leer el sensor y guardar en estructura de control
      mpu9250Read();
1a000352:	f001 fcf9 	bl	1a001d48 <mpu9250Read>

      // Imprimir resultados
      printf( "Giroscopo:      (%f, %f, %f)   [rad/s]\r\n",
              mpu9250GetGyroX_rads(),
1a000356:	f001 fe4d 	bl	1a001ff4 <mpu9250GetGyroX_rads>
1a00035a:	ee10 4a10 	vmov	r4, s0
              mpu9250GetGyroY_rads(),
1a00035e:	f001 fe4f 	bl	1a002000 <mpu9250GetGyroY_rads>
1a000362:	ee10 6a10 	vmov	r6, s0
              mpu9250GetGyroZ_rads()
1a000366:	f001 fe51 	bl	1a00200c <mpu9250GetGyroZ_rads>
1a00036a:	ee10 7a10 	vmov	r7, s0
      printf( "Giroscopo:      (%f, %f, %f)   [rad/s]\r\n",
1a00036e:	4620      	mov	r0, r4
1a000370:	f002 fa1c 	bl	1a0027ac <__aeabi_f2d>
1a000374:	4604      	mov	r4, r0
1a000376:	460d      	mov	r5, r1
1a000378:	4638      	mov	r0, r7
1a00037a:	f002 fa17 	bl	1a0027ac <__aeabi_f2d>
1a00037e:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a000382:	4630      	mov	r0, r6
1a000384:	f002 fa12 	bl	1a0027ac <__aeabi_f2d>
1a000388:	e9cd 0100 	strd	r0, r1, [sp]
1a00038c:	4622      	mov	r2, r4
1a00038e:	462b      	mov	r3, r5
1a000390:	4834      	ldr	r0, [pc, #208]	; (1a000464 <main+0x164>)
1a000392:	f002 fd3b 	bl	1a002e0c <printf>
            );

		printf( "Acelerometro:   (%f, %f, %f)   [m/s2]\r\n",
              mpu9250GetAccelX_mss(),
1a000396:	f001 fe1b 	bl	1a001fd0 <mpu9250GetAccelX_mss>
1a00039a:	ee10 4a10 	vmov	r4, s0
              mpu9250GetAccelY_mss(),
1a00039e:	f001 fe1d 	bl	1a001fdc <mpu9250GetAccelY_mss>
1a0003a2:	ee10 6a10 	vmov	r6, s0
              mpu9250GetAccelZ_mss()
1a0003a6:	f001 fe1f 	bl	1a001fe8 <mpu9250GetAccelZ_mss>
1a0003aa:	ee10 7a10 	vmov	r7, s0
		printf( "Acelerometro:   (%f, %f, %f)   [m/s2]\r\n",
1a0003ae:	4620      	mov	r0, r4
1a0003b0:	f002 f9fc 	bl	1a0027ac <__aeabi_f2d>
1a0003b4:	4604      	mov	r4, r0
1a0003b6:	460d      	mov	r5, r1
1a0003b8:	4638      	mov	r0, r7
1a0003ba:	f002 f9f7 	bl	1a0027ac <__aeabi_f2d>
1a0003be:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a0003c2:	4630      	mov	r0, r6
1a0003c4:	f002 f9f2 	bl	1a0027ac <__aeabi_f2d>
1a0003c8:	e9cd 0100 	strd	r0, r1, [sp]
1a0003cc:	4622      	mov	r2, r4
1a0003ce:	462b      	mov	r3, r5
1a0003d0:	4825      	ldr	r0, [pc, #148]	; (1a000468 <main+0x168>)
1a0003d2:	f002 fd1b 	bl	1a002e0c <printf>
            );

		printf( "Magnetometro:   (%f, %f, %f)   [uT]\r\n",
              mpu9250GetMagX_uT(),
1a0003d6:	f002 f827 	bl	1a002428 <mpu9250GetMagX_uT>
1a0003da:	ee10 4a10 	vmov	r4, s0
              mpu9250GetMagY_uT(),
1a0003de:	f002 f829 	bl	1a002434 <mpu9250GetMagY_uT>
1a0003e2:	ee10 6a10 	vmov	r6, s0
              mpu9250GetMagZ_uT()
1a0003e6:	f002 f82b 	bl	1a002440 <mpu9250GetMagZ_uT>
1a0003ea:	ee10 7a10 	vmov	r7, s0
		printf( "Magnetometro:   (%f, %f, %f)   [uT]\r\n",
1a0003ee:	4620      	mov	r0, r4
1a0003f0:	f002 f9dc 	bl	1a0027ac <__aeabi_f2d>
1a0003f4:	4604      	mov	r4, r0
1a0003f6:	460d      	mov	r5, r1
1a0003f8:	4638      	mov	r0, r7
1a0003fa:	f002 f9d7 	bl	1a0027ac <__aeabi_f2d>
1a0003fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a000402:	4630      	mov	r0, r6
1a000404:	f002 f9d2 	bl	1a0027ac <__aeabi_f2d>
1a000408:	e9cd 0100 	strd	r0, r1, [sp]
1a00040c:	4622      	mov	r2, r4
1a00040e:	462b      	mov	r3, r5
1a000410:	4816      	ldr	r0, [pc, #88]	; (1a00046c <main+0x16c>)
1a000412:	f002 fcfb 	bl	1a002e0c <printf>
            );

		printf( "Temperatura:    %f   [C]\r\n\r\n",
              mpu9250GetTemperature_C()
1a000416:	f002 f819 	bl	1a00244c <mpu9250GetTemperature_C>
		printf( "Temperatura:    %f   [C]\r\n\r\n",
1a00041a:	ee10 0a10 	vmov	r0, s0
1a00041e:	f002 f9c5 	bl	1a0027ac <__aeabi_f2d>
1a000422:	4602      	mov	r2, r0
1a000424:	460b      	mov	r3, r1
1a000426:	4812      	ldr	r0, [pc, #72]	; (1a000470 <main+0x170>)
1a000428:	f002 fcf0 	bl	1a002e0c <printf>
            );

      delay(1000);
1a00042c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000430:	2100      	movs	r1, #0
1a000432:	f001 fa43 	bl	1a0018bc <delay>
1a000436:	e78c      	b.n	1a000352 <main+0x52>
1a000438:	1a007fd0 	.word	0x1a007fd0
1a00043c:	10000000 	.word	0x10000000
1a000440:	1a007ff0 	.word	0x1a007ff0
1a000444:	1a008028 	.word	0x1a008028
1a000448:	1a008048 	.word	0x1a008048
1a00044c:	1a00805c 	.word	0x1a00805c
1a000450:	1a008070 	.word	0x1a008070
1a000454:	1a008084 	.word	0x1a008084
1a000458:	1a008098 	.word	0x1a008098
1a00045c:	1a0080ac 	.word	0x1a0080ac
1a000460:	1a0080c8 	.word	0x1a0080c8
1a000464:	1a0080f4 	.word	0x1a0080f4
1a000468:	1a008120 	.word	0x1a008120
1a00046c:	1a008148 	.word	0x1a008148
1a000470:	1a008170 	.word	0x1a008170

1a000474 <Reset_Handler>:
void Reset_Handler(void) {
1a000474:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1a000476:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000478:	4b18      	ldr	r3, [pc, #96]	; (1a0004dc <Reset_Handler+0x68>)
1a00047a:	4a19      	ldr	r2, [pc, #100]	; (1a0004e0 <Reset_Handler+0x6c>)
1a00047c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00047e:	3304      	adds	r3, #4
1a000480:	4a18      	ldr	r2, [pc, #96]	; (1a0004e4 <Reset_Handler+0x70>)
1a000482:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000484:	2300      	movs	r3, #0
1a000486:	e005      	b.n	1a000494 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000488:	4a17      	ldr	r2, [pc, #92]	; (1a0004e8 <Reset_Handler+0x74>)
1a00048a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00048e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000492:	3301      	adds	r3, #1
1a000494:	2b07      	cmp	r3, #7
1a000496:	d9f7      	bls.n	1a000488 <Reset_Handler+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
1a000498:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00049a:	4b14      	ldr	r3, [pc, #80]	; (1a0004ec <Reset_Handler+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a00049c:	e007      	b.n	1a0004ae <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00049e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0004a2:	689a      	ldr	r2, [r3, #8]
1a0004a4:	6859      	ldr	r1, [r3, #4]
1a0004a6:	6818      	ldr	r0, [r3, #0]
1a0004a8:	f7ff fe6f 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0004ac:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0004ae:	4a10      	ldr	r2, [pc, #64]	; (1a0004f0 <Reset_Handler+0x7c>)
1a0004b0:	4293      	cmp	r3, r2
1a0004b2:	d3f4      	bcc.n	1a00049e <Reset_Handler+0x2a>
1a0004b4:	e006      	b.n	1a0004c4 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0004b6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0004b8:	6859      	ldr	r1, [r3, #4]
1a0004ba:	f854 0b08 	ldr.w	r0, [r4], #8
1a0004be:	f7ff fe73 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0004c2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0004c4:	4a0b      	ldr	r2, [pc, #44]	; (1a0004f4 <Reset_Handler+0x80>)
1a0004c6:	4293      	cmp	r3, r2
1a0004c8:	d3f5      	bcc.n	1a0004b6 <Reset_Handler+0x42>
    SystemInit();
1a0004ca:	f000 fef7 	bl	1a0012bc <SystemInit>
    __libc_init_array();
1a0004ce:	f002 fb95 	bl	1a002bfc <__libc_init_array>
    main();
1a0004d2:	f7ff ff15 	bl	1a000300 <main>
        __WFI();
1a0004d6:	bf30      	wfi
1a0004d8:	e7fd      	b.n	1a0004d6 <Reset_Handler+0x62>
1a0004da:	bf00      	nop
1a0004dc:	40053100 	.word	0x40053100
1a0004e0:	10df1000 	.word	0x10df1000
1a0004e4:	01dff7ff 	.word	0x01dff7ff
1a0004e8:	e000e280 	.word	0xe000e280
1a0004ec:	1a000114 	.word	0x1a000114
1a0004f0:	1a000150 	.word	0x1a000150
1a0004f4:	1a000178 	.word	0x1a000178

1a0004f8 <_init>:
void _init(void) {}
1a0004f8:	4770      	bx	lr

1a0004fa <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0004fa:	2309      	movs	r3, #9
1a0004fc:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0004fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000502:	4770      	bx	lr

1a000504 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000504:	2358      	movs	r3, #88	; 0x58
1a000506:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00050c:	4770      	bx	lr

1a00050e <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a00050e:	2902      	cmp	r1, #2
1a000510:	d801      	bhi.n	1a000516 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000512:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000514:	4770      	bx	lr
       SET_ERR(EBADF);
1a000516:	2309      	movs	r3, #9
1a000518:	6003      	str	r3, [r0, #0]
       return -1;
1a00051a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00051e:	4770      	bx	lr

1a000520 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000520:	2358      	movs	r3, #88	; 0x58
1a000522:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000528:	4770      	bx	lr

1a00052a <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a00052a:	2902      	cmp	r1, #2
1a00052c:	d81f      	bhi.n	1a00056e <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a00052e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000532:	461d      	mov	r5, r3
1a000534:	4617      	mov	r7, r2
1a000536:	4606      	mov	r6, r0
  size_t i = 0;
1a000538:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a00053a:	42ac      	cmp	r4, r5
1a00053c:	d211      	bcs.n	1a000562 <_read_r+0x38>
         int c = __stdio_getchar();
1a00053e:	f000 f86e 	bl	1a00061e <__stdio_getchar>
         if( c != -1 ){
1a000542:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000546:	d0f8      	beq.n	1a00053a <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000548:	f104 0801 	add.w	r8, r4, #1
1a00054c:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a00054e:	280d      	cmp	r0, #13
1a000550:	d003      	beq.n	1a00055a <_read_r+0x30>
1a000552:	280a      	cmp	r0, #10
1a000554:	d001      	beq.n	1a00055a <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000556:	4644      	mov	r4, r8
1a000558:	e7ef      	b.n	1a00053a <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a00055a:	f000 f860 	bl	1a00061e <__stdio_getchar>
               return i;
1a00055e:	4640      	mov	r0, r8
1a000560:	e003      	b.n	1a00056a <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000562:	2313      	movs	r3, #19
1a000564:	6033      	str	r3, [r6, #0]
      return -1;
1a000566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a00056a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a00056e:	2313      	movs	r3, #19
1a000570:	6003      	str	r3, [r0, #0]
      return -1;
1a000572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000576:	4770      	bx	lr

1a000578 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000578:	4b05      	ldr	r3, [pc, #20]	; (1a000590 <_sbrk_r+0x18>)
1a00057a:	681b      	ldr	r3, [r3, #0]
1a00057c:	b123      	cbz	r3, 1a000588 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00057e:	4b04      	ldr	r3, [pc, #16]	; (1a000590 <_sbrk_r+0x18>)
1a000580:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000582:	4401      	add	r1, r0
1a000584:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000586:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000588:	4b01      	ldr	r3, [pc, #4]	; (1a000590 <_sbrk_r+0x18>)
1a00058a:	4a02      	ldr	r2, [pc, #8]	; (1a000594 <_sbrk_r+0x1c>)
1a00058c:	601a      	str	r2, [r3, #0]
1a00058e:	e7f6      	b.n	1a00057e <_sbrk_r+0x6>
1a000590:	10000a78 	.word	0x10000a78
1a000594:	10000c58 	.word	0x10000c58

1a000598 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000598:	2902      	cmp	r1, #2
1a00059a:	d80c      	bhi.n	1a0005b6 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00059c:	b570      	push	{r4, r5, r6, lr}
1a00059e:	461d      	mov	r5, r3
1a0005a0:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0005a2:	2400      	movs	r4, #0
1a0005a4:	e003      	b.n	1a0005ae <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a0005a6:	5d30      	ldrb	r0, [r6, r4]
1a0005a8:	f000 f834 	bl	1a000614 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0005ac:	3401      	adds	r4, #1
1a0005ae:	42ac      	cmp	r4, r5
1a0005b0:	d3f9      	bcc.n	1a0005a6 <_write_r+0xe>
       return n;
1a0005b2:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0005b4:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0005b6:	2313      	movs	r3, #19
1a0005b8:	6003      	str	r3, [r0, #0]
       return -1;
1a0005ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0005be:	4770      	bx	lr

1a0005c0 <Board_Debug_Init>:
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
}


void Board_Debug_Init(void)
{
1a0005c0:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0005c2:	4c07      	ldr	r4, [pc, #28]	; (1a0005e0 <Board_Debug_Init+0x20>)
1a0005c4:	4620      	mov	r0, r4
1a0005c6:	f000 f8a1 	bl	1a00070c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0005ca:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0005ce:	4620      	mov	r0, r4
1a0005d0:	f000 f8c6 	bl	1a000760 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0005d4:	2303      	movs	r3, #3
1a0005d6:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0005d8:	2301      	movs	r3, #1
1a0005da:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a0005dc:	bd10      	pop	{r4, pc}
1a0005de:	bf00      	nop
1a0005e0:	400c1000 	.word	0x400c1000

1a0005e4 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0005e4:	4b03      	ldr	r3, [pc, #12]	; (1a0005f4 <Board_UARTPutChar+0x10>)
1a0005e6:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0005e8:	f013 0f20 	tst.w	r3, #32
1a0005ec:	d0fa      	beq.n	1a0005e4 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0005ee:	4b01      	ldr	r3, [pc, #4]	; (1a0005f4 <Board_UARTPutChar+0x10>)
1a0005f0:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0005f2:	4770      	bx	lr
1a0005f4:	400c1000 	.word	0x400c1000

1a0005f8 <Board_UARTGetChar>:
	return pUART->LSR;
1a0005f8:	4b05      	ldr	r3, [pc, #20]	; (1a000610 <Board_UARTGetChar+0x18>)
1a0005fa:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0005fc:	f013 0f01 	tst.w	r3, #1
1a000600:	d003      	beq.n	1a00060a <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000602:	4b03      	ldr	r3, [pc, #12]	; (1a000610 <Board_UARTGetChar+0x18>)
1a000604:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000606:	b2c0      	uxtb	r0, r0
1a000608:	4770      	bx	lr
    }
    return EOF;
1a00060a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00060e:	4770      	bx	lr
1a000610:	400c1000 	.word	0x400c1000

1a000614 <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a000614:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a000616:	b2c0      	uxtb	r0, r0
1a000618:	f7ff ffe4 	bl	1a0005e4 <Board_UARTPutChar>
}
1a00061c:	bd08      	pop	{r3, pc}

1a00061e <__stdio_getchar>:

int __stdio_getchar() {
1a00061e:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a000620:	f7ff ffea 	bl	1a0005f8 <Board_UARTGetChar>
}
1a000624:	bd08      	pop	{r3, pc}

1a000626 <__stdio_init>:

void __stdio_init() {
1a000626:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000628:	f7ff ffca 	bl	1a0005c0 <Board_Debug_Init>
1a00062c:	bd08      	pop	{r3, pc}
1a00062e:	Address 0x000000001a00062e is out of bounds.


1a000630 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000630:	2300      	movs	r3, #0
1a000632:	2b1c      	cmp	r3, #28
1a000634:	d812      	bhi.n	1a00065c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000636:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000638:	4a09      	ldr	r2, [pc, #36]	; (1a000660 <Board_SetupMuxing+0x30>)
1a00063a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00063e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000642:	784a      	ldrb	r2, [r1, #1]
1a000644:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000646:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00064a:	4906      	ldr	r1, [pc, #24]	; (1a000664 <Board_SetupMuxing+0x34>)
1a00064c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000650:	3301      	adds	r3, #1
1a000652:	2b1c      	cmp	r3, #28
1a000654:	d9f0      	bls.n	1a000638 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000656:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00065a:	4770      	bx	lr
1a00065c:	4770      	bx	lr
1a00065e:	bf00      	nop
1a000660:	1a00819c 	.word	0x1a00819c
1a000664:	40086000 	.word	0x40086000

1a000668 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000668:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00066a:	4a17      	ldr	r2, [pc, #92]	; (1a0006c8 <Board_SetupClocking+0x60>)
1a00066c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000670:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000674:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000678:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00067c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000680:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000684:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000688:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00068c:	2201      	movs	r2, #1
1a00068e:	490f      	ldr	r1, [pc, #60]	; (1a0006cc <Board_SetupClocking+0x64>)
1a000690:	2006      	movs	r0, #6
1a000692:	f000 fc43 	bl	1a000f1c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000696:	2400      	movs	r4, #0
1a000698:	b14c      	cbz	r4, 1a0006ae <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00069a:	4b0b      	ldr	r3, [pc, #44]	; (1a0006c8 <Board_SetupClocking+0x60>)
1a00069c:	685a      	ldr	r2, [r3, #4]
1a00069e:	f022 020c 	bic.w	r2, r2, #12
1a0006a2:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0006a4:	685a      	ldr	r2, [r3, #4]
1a0006a6:	f042 0203 	orr.w	r2, r2, #3
1a0006aa:	605a      	str	r2, [r3, #4]
}
1a0006ac:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0006ae:	4808      	ldr	r0, [pc, #32]	; (1a0006d0 <Board_SetupClocking+0x68>)
1a0006b0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0006b4:	2301      	movs	r3, #1
1a0006b6:	788a      	ldrb	r2, [r1, #2]
1a0006b8:	7849      	ldrb	r1, [r1, #1]
1a0006ba:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0006be:	f000 fae7 	bl	1a000c90 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0006c2:	3401      	adds	r4, #1
1a0006c4:	e7e8      	b.n	1a000698 <Board_SetupClocking+0x30>
1a0006c6:	bf00      	nop
1a0006c8:	40043000 	.word	0x40043000
1a0006cc:	0c28cb00 	.word	0x0c28cb00
1a0006d0:	1a008198 	.word	0x1a008198

1a0006d4 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0006d4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0006d6:	f7ff ffab 	bl	1a000630 <Board_SetupMuxing>
    Board_SetupClocking();
1a0006da:	f7ff ffc5 	bl	1a000668 <Board_SetupClocking>
}
1a0006de:	bd08      	pop	{r3, pc}

1a0006e0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0006e0:	4b09      	ldr	r3, [pc, #36]	; (1a000708 <Chip_UART_GetIndex+0x28>)
1a0006e2:	4298      	cmp	r0, r3
1a0006e4:	d009      	beq.n	1a0006fa <Chip_UART_GetIndex+0x1a>
1a0006e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0006ea:	4298      	cmp	r0, r3
1a0006ec:	d007      	beq.n	1a0006fe <Chip_UART_GetIndex+0x1e>
1a0006ee:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0006f2:	4298      	cmp	r0, r3
1a0006f4:	d005      	beq.n	1a000702 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0006f6:	2000      	movs	r0, #0
1a0006f8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0006fa:	2002      	movs	r0, #2
1a0006fc:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0006fe:	2003      	movs	r0, #3
1a000700:	4770      	bx	lr
			return 1;
1a000702:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000704:	4770      	bx	lr
1a000706:	bf00      	nop
1a000708:	400c1000 	.word	0x400c1000

1a00070c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00070c:	b530      	push	{r4, r5, lr}
1a00070e:	b083      	sub	sp, #12
1a000710:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000712:	f7ff ffe5 	bl	1a0006e0 <Chip_UART_GetIndex>
1a000716:	2301      	movs	r3, #1
1a000718:	461a      	mov	r2, r3
1a00071a:	4619      	mov	r1, r3
1a00071c:	4d0e      	ldr	r5, [pc, #56]	; (1a000758 <Chip_UART_Init+0x4c>)
1a00071e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000722:	f000 fafb 	bl	1a000d1c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000726:	2307      	movs	r3, #7
1a000728:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00072a:	2300      	movs	r3, #0
1a00072c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00072e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000730:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000732:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000734:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000736:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000738:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00073a:	4b08      	ldr	r3, [pc, #32]	; (1a00075c <Chip_UART_Init+0x50>)
1a00073c:	429c      	cmp	r4, r3
1a00073e:	d006      	beq.n	1a00074e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000740:	2303      	movs	r3, #3
1a000742:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000744:	2310      	movs	r3, #16
1a000746:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000748:	9b01      	ldr	r3, [sp, #4]
}
1a00074a:	b003      	add	sp, #12
1a00074c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00074e:	2300      	movs	r3, #0
1a000750:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000752:	69a3      	ldr	r3, [r4, #24]
1a000754:	9301      	str	r3, [sp, #4]
1a000756:	e7f3      	b.n	1a000740 <Chip_UART_Init+0x34>
1a000758:	1a008218 	.word	0x1a008218
1a00075c:	40082000 	.word	0x40082000

1a000760 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000764:	b083      	sub	sp, #12
1a000766:	4683      	mov	fp, r0
1a000768:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00076a:	f7ff ffb9 	bl	1a0006e0 <Chip_UART_GetIndex>
1a00076e:	4b35      	ldr	r3, [pc, #212]	; (1a000844 <Chip_UART_SetBaudFDR+0xe4>)
1a000770:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000774:	f000 fb0a 	bl	1a000d8c <Chip_Clock_GetRate>
1a000778:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00077a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00077e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000780:	2300      	movs	r3, #0
1a000782:	9301      	str	r3, [sp, #4]
1a000784:	46a2      	mov	sl, r4
1a000786:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000788:	e02a      	b.n	1a0007e0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00078a:	4242      	negs	r2, r0
				div ++;
1a00078c:	1c4b      	adds	r3, r1, #1
1a00078e:	e017      	b.n	1a0007c0 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000790:	b30a      	cbz	r2, 1a0007d6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000792:	4617      	mov	r7, r2
			sd = d;
1a000794:	9501      	str	r5, [sp, #4]
			sm = m;
1a000796:	46a2      	mov	sl, r4
			sdiv = div;
1a000798:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00079a:	3501      	adds	r5, #1
1a00079c:	42ac      	cmp	r4, r5
1a00079e:	d91e      	bls.n	1a0007de <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0007a0:	0933      	lsrs	r3, r6, #4
1a0007a2:	0730      	lsls	r0, r6, #28
1a0007a4:	fba4 0100 	umull	r0, r1, r4, r0
1a0007a8:	fb04 1103 	mla	r1, r4, r3, r1
1a0007ac:	1962      	adds	r2, r4, r5
1a0007ae:	fb08 f202 	mul.w	r2, r8, r2
1a0007b2:	2300      	movs	r3, #0
1a0007b4:	f002 f8a2 	bl	1a0028fc <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0007b8:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0007ba:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0007bc:	2800      	cmp	r0, #0
1a0007be:	dbe4      	blt.n	1a00078a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0007c0:	4297      	cmp	r7, r2
1a0007c2:	d3ea      	bcc.n	1a00079a <Chip_UART_SetBaudFDR+0x3a>
1a0007c4:	2b00      	cmp	r3, #0
1a0007c6:	d0e8      	beq.n	1a00079a <Chip_UART_SetBaudFDR+0x3a>
1a0007c8:	0c19      	lsrs	r1, r3, #16
1a0007ca:	d1e6      	bne.n	1a00079a <Chip_UART_SetBaudFDR+0x3a>
1a0007cc:	2b02      	cmp	r3, #2
1a0007ce:	d8df      	bhi.n	1a000790 <Chip_UART_SetBaudFDR+0x30>
1a0007d0:	2d00      	cmp	r5, #0
1a0007d2:	d0dd      	beq.n	1a000790 <Chip_UART_SetBaudFDR+0x30>
1a0007d4:	e7e1      	b.n	1a00079a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0007d6:	4617      	mov	r7, r2
			sd = d;
1a0007d8:	9501      	str	r5, [sp, #4]
			sm = m;
1a0007da:	46a2      	mov	sl, r4
			sdiv = div;
1a0007dc:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0007de:	3401      	adds	r4, #1
1a0007e0:	b11f      	cbz	r7, 1a0007ea <Chip_UART_SetBaudFDR+0x8a>
1a0007e2:	2c0f      	cmp	r4, #15
1a0007e4:	d801      	bhi.n	1a0007ea <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0007e6:	2500      	movs	r5, #0
1a0007e8:	e7d8      	b.n	1a00079c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0007ea:	f1b9 0f00 	cmp.w	r9, #0
1a0007ee:	d024      	beq.n	1a00083a <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0007f0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0007f8:	f8cb 300c 	str.w	r3, [fp, #12]
1a0007fc:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a000800:	f8cb 3000 	str.w	r3, [fp]
1a000804:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000808:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00080c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000814:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000818:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00081c:	b2db      	uxtb	r3, r3
1a00081e:	9901      	ldr	r1, [sp, #4]
1a000820:	f001 020f 	and.w	r2, r1, #15
1a000824:	4313      	orrs	r3, r2
1a000826:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00082a:	0933      	lsrs	r3, r6, #4
1a00082c:	fb0a f303 	mul.w	r3, sl, r3
1a000830:	448a      	add	sl, r1
1a000832:	fb09 f90a 	mul.w	r9, r9, sl
1a000836:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00083a:	4648      	mov	r0, r9
1a00083c:	b003      	add	sp, #12
1a00083e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000842:	bf00      	nop
1a000844:	1a008210 	.word	0x1a008210

1a000848 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000848:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00084a:	680b      	ldr	r3, [r1, #0]
1a00084c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000850:	d002      	beq.n	1a000858 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000856:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000858:	4607      	mov	r7, r0
1a00085a:	2501      	movs	r5, #1
1a00085c:	e03b      	b.n	1a0008d6 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00085e:	694b      	ldr	r3, [r1, #20]
1a000860:	fb03 f302 	mul.w	r3, r3, r2
1a000864:	fbb3 f3f5 	udiv	r3, r3, r5
1a000868:	e014      	b.n	1a000894 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00086a:	461c      	mov	r4, r3
1a00086c:	e020      	b.n	1a0008b0 <pll_calc_divs+0x68>
		return -val;
1a00086e:	f1cc 0c00 	rsb	ip, ip, #0
1a000872:	e020      	b.n	1a0008b6 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a000874:	3201      	adds	r2, #1
1a000876:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00087a:	dc26      	bgt.n	1a0008ca <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a00087c:	680c      	ldr	r4, [r1, #0]
1a00087e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000882:	d0ec      	beq.n	1a00085e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000884:	1c73      	adds	r3, r6, #1
1a000886:	fa02 fc03 	lsl.w	ip, r2, r3
1a00088a:	694b      	ldr	r3, [r1, #20]
1a00088c:	fb03 f30c 	mul.w	r3, r3, ip
1a000890:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000894:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a0008e4 <pll_calc_divs+0x9c>
1a000898:	4563      	cmp	r3, ip
1a00089a:	d9eb      	bls.n	1a000874 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a00089c:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a0008e8 <pll_calc_divs+0xa0>
1a0008a0:	4563      	cmp	r3, ip
1a0008a2:	d812      	bhi.n	1a0008ca <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a0008a4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0008a8:	d1df      	bne.n	1a00086a <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a0008aa:	1c74      	adds	r4, r6, #1
1a0008ac:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a0008b0:	ebb0 0c04 	subs.w	ip, r0, r4
1a0008b4:	d4db      	bmi.n	1a00086e <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a0008b6:	4567      	cmp	r7, ip
1a0008b8:	d9dc      	bls.n	1a000874 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a0008ba:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0008bc:	1c77      	adds	r7, r6, #1
1a0008be:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0008c0:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0008c2:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0008c4:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0008c6:	4667      	mov	r7, ip
1a0008c8:	e7d4      	b.n	1a000874 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a0008ca:	3601      	adds	r6, #1
1a0008cc:	2e03      	cmp	r6, #3
1a0008ce:	dc01      	bgt.n	1a0008d4 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a0008d0:	2201      	movs	r2, #1
1a0008d2:	e7d0      	b.n	1a000876 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a0008d4:	3501      	adds	r5, #1
1a0008d6:	2d04      	cmp	r5, #4
1a0008d8:	dc01      	bgt.n	1a0008de <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a0008da:	2600      	movs	r6, #0
1a0008dc:	e7f6      	b.n	1a0008cc <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a0008de:	bcf0      	pop	{r4, r5, r6, r7}
1a0008e0:	4770      	bx	lr
1a0008e2:	bf00      	nop
1a0008e4:	094c5eff 	.word	0x094c5eff
1a0008e8:	1312d000 	.word	0x1312d000

1a0008ec <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0008ec:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0008ee:	b099      	sub	sp, #100	; 0x64
1a0008f0:	4605      	mov	r5, r0
1a0008f2:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0008f4:	225c      	movs	r2, #92	; 0x5c
1a0008f6:	2100      	movs	r1, #0
1a0008f8:	a801      	add	r0, sp, #4
1a0008fa:	f002 fa3d 	bl	1a002d78 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0008fe:	2380      	movs	r3, #128	; 0x80
1a000900:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000902:	6963      	ldr	r3, [r4, #20]
1a000904:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000906:	7923      	ldrb	r3, [r4, #4]
1a000908:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a00090c:	4669      	mov	r1, sp
1a00090e:	4628      	mov	r0, r5
1a000910:	f7ff ff9a 	bl	1a000848 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000914:	9b06      	ldr	r3, [sp, #24]
1a000916:	42ab      	cmp	r3, r5
1a000918:	d027      	beq.n	1a00096a <pll_get_frac+0x7e>
	if (val < 0)
1a00091a:	1aeb      	subs	r3, r5, r3
1a00091c:	d42e      	bmi.n	1a00097c <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00091e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000920:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000926:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000928:	6963      	ldr	r3, [r4, #20]
1a00092a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00092c:	7923      	ldrb	r3, [r4, #4]
1a00092e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000932:	a910      	add	r1, sp, #64	; 0x40
1a000934:	4628      	mov	r0, r5
1a000936:	f7ff ff87 	bl	1a000848 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00093a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00093c:	42ab      	cmp	r3, r5
1a00093e:	d01f      	beq.n	1a000980 <pll_get_frac+0x94>
	if (val < 0)
1a000940:	1aeb      	subs	r3, r5, r3
1a000942:	d425      	bmi.n	1a000990 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000944:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000946:	4b2b      	ldr	r3, [pc, #172]	; (1a0009f4 <pll_get_frac+0x108>)
1a000948:	429d      	cmp	r5, r3
1a00094a:	d923      	bls.n	1a000994 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a00094c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00094e:	1aed      	subs	r5, r5, r3
1a000950:	d433      	bmi.n	1a0009ba <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000952:	42ae      	cmp	r6, r5
1a000954:	dc3b      	bgt.n	1a0009ce <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000956:	42be      	cmp	r6, r7
1a000958:	dc31      	bgt.n	1a0009be <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00095a:	466d      	mov	r5, sp
1a00095c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00095e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000960:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000964:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000968:	e006      	b.n	1a000978 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00096a:	466d      	mov	r5, sp
1a00096c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00096e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000970:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000978:	b019      	add	sp, #100	; 0x64
1a00097a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a00097c:	425b      	negs	r3, r3
1a00097e:	e7ce      	b.n	1a00091e <pll_get_frac+0x32>
		*ppll = pll[2];
1a000980:	ad10      	add	r5, sp, #64	; 0x40
1a000982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000986:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00098a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00098e:	e7f3      	b.n	1a000978 <pll_get_frac+0x8c>
		return -val;
1a000990:	425b      	negs	r3, r3
1a000992:	e7d7      	b.n	1a000944 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000994:	2340      	movs	r3, #64	; 0x40
1a000996:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000998:	6963      	ldr	r3, [r4, #20]
1a00099a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a00099c:	a908      	add	r1, sp, #32
1a00099e:	4628      	mov	r0, r5
1a0009a0:	f7ff ff52 	bl	1a000848 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0009a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0009a6:	42ab      	cmp	r3, r5
1a0009a8:	d1d0      	bne.n	1a00094c <pll_get_frac+0x60>
			*ppll = pll[1];
1a0009aa:	ad08      	add	r5, sp, #32
1a0009ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0009ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0009b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0009b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0009b8:	e7de      	b.n	1a000978 <pll_get_frac+0x8c>
		return -val;
1a0009ba:	426d      	negs	r5, r5
1a0009bc:	e7c9      	b.n	1a000952 <pll_get_frac+0x66>
			*ppll = pll[2];
1a0009be:	ad10      	add	r5, sp, #64	; 0x40
1a0009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0009c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0009c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0009c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0009cc:	e7d4      	b.n	1a000978 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0009ce:	42af      	cmp	r7, r5
1a0009d0:	db07      	blt.n	1a0009e2 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0009d2:	ad08      	add	r5, sp, #32
1a0009d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0009d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0009d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0009dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0009e0:	e7ca      	b.n	1a000978 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0009e2:	ad10      	add	r5, sp, #64	; 0x40
1a0009e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0009e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0009e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0009ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0009f0:	e7c2      	b.n	1a000978 <pll_get_frac+0x8c>
1a0009f2:	bf00      	nop
1a0009f4:	068e7780 	.word	0x068e7780

1a0009f8 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0009f8:	b430      	push	{r4, r5}
1a0009fa:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0009fc:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0009fe:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000a00:	e000      	b.n	1a000a04 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000a02:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000a04:	281c      	cmp	r0, #28
1a000a06:	d118      	bne.n	1a000a3a <Chip_Clock_FindBaseClock+0x42>
1a000a08:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000a0c:	0051      	lsls	r1, r2, #1
1a000a0e:	4a0c      	ldr	r2, [pc, #48]	; (1a000a40 <Chip_Clock_FindBaseClock+0x48>)
1a000a10:	440a      	add	r2, r1
1a000a12:	7914      	ldrb	r4, [r2, #4]
1a000a14:	4284      	cmp	r4, r0
1a000a16:	d010      	beq.n	1a000a3a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000a18:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000a1c:	004a      	lsls	r2, r1, #1
1a000a1e:	4908      	ldr	r1, [pc, #32]	; (1a000a40 <Chip_Clock_FindBaseClock+0x48>)
1a000a20:	5a8a      	ldrh	r2, [r1, r2]
1a000a22:	42aa      	cmp	r2, r5
1a000a24:	d8ed      	bhi.n	1a000a02 <Chip_Clock_FindBaseClock+0xa>
1a000a26:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000a2a:	0051      	lsls	r1, r2, #1
1a000a2c:	4a04      	ldr	r2, [pc, #16]	; (1a000a40 <Chip_Clock_FindBaseClock+0x48>)
1a000a2e:	440a      	add	r2, r1
1a000a30:	8852      	ldrh	r2, [r2, #2]
1a000a32:	42aa      	cmp	r2, r5
1a000a34:	d3e5      	bcc.n	1a000a02 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000a36:	4620      	mov	r0, r4
1a000a38:	e7e4      	b.n	1a000a04 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000a3a:	bc30      	pop	{r4, r5}
1a000a3c:	4770      	bx	lr
1a000a3e:	bf00      	nop
1a000a40:	1a00822c 	.word	0x1a00822c

1a000a44 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000a44:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000a4a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000a4c:	4a0d      	ldr	r2, [pc, #52]	; (1a000a84 <Chip_Clock_EnableCrystal+0x40>)
1a000a4e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000a50:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000a54:	6992      	ldr	r2, [r2, #24]
1a000a56:	428a      	cmp	r2, r1
1a000a58:	d001      	beq.n	1a000a5e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000a5a:	4a0a      	ldr	r2, [pc, #40]	; (1a000a84 <Chip_Clock_EnableCrystal+0x40>)
1a000a5c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000a5e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000a62:	4a09      	ldr	r2, [pc, #36]	; (1a000a88 <Chip_Clock_EnableCrystal+0x44>)
1a000a64:	6811      	ldr	r1, [r2, #0]
1a000a66:	4a09      	ldr	r2, [pc, #36]	; (1a000a8c <Chip_Clock_EnableCrystal+0x48>)
1a000a68:	4291      	cmp	r1, r2
1a000a6a:	d901      	bls.n	1a000a70 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000a6c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000a70:	4a04      	ldr	r2, [pc, #16]	; (1a000a84 <Chip_Clock_EnableCrystal+0x40>)
1a000a72:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000a74:	9b01      	ldr	r3, [sp, #4]
1a000a76:	1e5a      	subs	r2, r3, #1
1a000a78:	9201      	str	r2, [sp, #4]
1a000a7a:	2b00      	cmp	r3, #0
1a000a7c:	d1fa      	bne.n	1a000a74 <Chip_Clock_EnableCrystal+0x30>
}
1a000a7e:	b002      	add	sp, #8
1a000a80:	4770      	bx	lr
1a000a82:	bf00      	nop
1a000a84:	40050000 	.word	0x40050000
1a000a88:	1a008194 	.word	0x1a008194
1a000a8c:	01312cff 	.word	0x01312cff

1a000a90 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000a90:	3012      	adds	r0, #18
1a000a92:	4b05      	ldr	r3, [pc, #20]	; (1a000aa8 <Chip_Clock_GetDividerSource+0x18>)
1a000a94:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000a98:	f010 0f01 	tst.w	r0, #1
1a000a9c:	d102      	bne.n	1a000aa4 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000a9e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000aa2:	4770      	bx	lr
		return CLKINPUT_PD;
1a000aa4:	2011      	movs	r0, #17
}
1a000aa6:	4770      	bx	lr
1a000aa8:	40050000 	.word	0x40050000

1a000aac <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000aac:	f100 0212 	add.w	r2, r0, #18
1a000ab0:	4b03      	ldr	r3, [pc, #12]	; (1a000ac0 <Chip_Clock_GetDividerDivisor+0x14>)
1a000ab2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000ab6:	4b03      	ldr	r3, [pc, #12]	; (1a000ac4 <Chip_Clock_GetDividerDivisor+0x18>)
1a000ab8:	5c18      	ldrb	r0, [r3, r0]
}
1a000aba:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000abe:	4770      	bx	lr
1a000ac0:	40050000 	.word	0x40050000
1a000ac4:	1a008224 	.word	0x1a008224

1a000ac8 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000ac8:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000aca:	2810      	cmp	r0, #16
1a000acc:	d80a      	bhi.n	1a000ae4 <Chip_Clock_GetClockInputHz+0x1c>
1a000ace:	e8df f000 	tbb	[pc, r0]
1a000ad2:	0b42      	.short	0x0b42
1a000ad4:	091f160d 	.word	0x091f160d
1a000ad8:	2b282522 	.word	0x2b282522
1a000adc:	322e0909 	.word	0x322e0909
1a000ae0:	3a36      	.short	0x3a36
1a000ae2:	3e          	.byte	0x3e
1a000ae3:	00          	.byte	0x00
	uint32_t rate = 0;
1a000ae4:	2000      	movs	r0, #0
1a000ae6:	e038      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000ae8:	481e      	ldr	r0, [pc, #120]	; (1a000b64 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000aea:	e036      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000aec:	4b1e      	ldr	r3, [pc, #120]	; (1a000b68 <Chip_Clock_GetClockInputHz+0xa0>)
1a000aee:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000af2:	f003 0307 	and.w	r3, r3, #7
1a000af6:	2b04      	cmp	r3, #4
1a000af8:	d130      	bne.n	1a000b5c <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a000afa:	2000      	movs	r0, #0
1a000afc:	e02d      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000afe:	4b1a      	ldr	r3, [pc, #104]	; (1a000b68 <Chip_Clock_GetClockInputHz+0xa0>)
1a000b00:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000b04:	f003 0307 	and.w	r3, r3, #7
1a000b08:	2b04      	cmp	r3, #4
1a000b0a:	d029      	beq.n	1a000b60 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000b0c:	4817      	ldr	r0, [pc, #92]	; (1a000b6c <Chip_Clock_GetClockInputHz+0xa4>)
1a000b0e:	e024      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000b10:	4b17      	ldr	r3, [pc, #92]	; (1a000b70 <Chip_Clock_GetClockInputHz+0xa8>)
1a000b12:	6818      	ldr	r0, [r3, #0]
		break;
1a000b14:	e021      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000b16:	4b17      	ldr	r3, [pc, #92]	; (1a000b74 <Chip_Clock_GetClockInputHz+0xac>)
1a000b18:	6818      	ldr	r0, [r3, #0]
		break;
1a000b1a:	e01e      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000b1c:	4b16      	ldr	r3, [pc, #88]	; (1a000b78 <Chip_Clock_GetClockInputHz+0xb0>)
1a000b1e:	6818      	ldr	r0, [r3, #0]
		break;
1a000b20:	e01b      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000b22:	4b15      	ldr	r3, [pc, #84]	; (1a000b78 <Chip_Clock_GetClockInputHz+0xb0>)
1a000b24:	6858      	ldr	r0, [r3, #4]
		break;
1a000b26:	e018      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000b28:	f000 f86a 	bl	1a000c00 <Chip_Clock_GetMainPLLHz>
		break;
1a000b2c:	e015      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000b2e:	2100      	movs	r1, #0
1a000b30:	f000 f89c 	bl	1a000c6c <Chip_Clock_GetDivRate>
		break;
1a000b34:	e011      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000b36:	2101      	movs	r1, #1
1a000b38:	f000 f898 	bl	1a000c6c <Chip_Clock_GetDivRate>
		break;
1a000b3c:	e00d      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000b3e:	2102      	movs	r1, #2
1a000b40:	f000 f894 	bl	1a000c6c <Chip_Clock_GetDivRate>
		break;
1a000b44:	e009      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000b46:	2103      	movs	r1, #3
1a000b48:	f000 f890 	bl	1a000c6c <Chip_Clock_GetDivRate>
		break;
1a000b4c:	e005      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000b4e:	2104      	movs	r1, #4
1a000b50:	f000 f88c 	bl	1a000c6c <Chip_Clock_GetDivRate>
		break;
1a000b54:	e001      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a000b56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000b5a:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a000b5c:	4803      	ldr	r0, [pc, #12]	; (1a000b6c <Chip_Clock_GetClockInputHz+0xa4>)
1a000b5e:	e7fc      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a000b60:	4806      	ldr	r0, [pc, #24]	; (1a000b7c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000b62:	e7fa      	b.n	1a000b5a <Chip_Clock_GetClockInputHz+0x92>
1a000b64:	00b71b00 	.word	0x00b71b00
1a000b68:	40043000 	.word	0x40043000
1a000b6c:	017d7840 	.word	0x017d7840
1a000b70:	1a008190 	.word	0x1a008190
1a000b74:	1a008194 	.word	0x1a008194
1a000b78:	10000a7c 	.word	0x10000a7c
1a000b7c:	02faf080 	.word	0x02faf080

1a000b80 <Chip_Clock_CalcMainPLLValue>:
{
1a000b80:	b538      	push	{r3, r4, r5, lr}
1a000b82:	4605      	mov	r5, r0
1a000b84:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000b86:	7908      	ldrb	r0, [r1, #4]
1a000b88:	f7ff ff9e 	bl	1a000ac8 <Chip_Clock_GetClockInputHz>
1a000b8c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000b8e:	4b19      	ldr	r3, [pc, #100]	; (1a000bf4 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000b90:	442b      	add	r3, r5
1a000b92:	4a19      	ldr	r2, [pc, #100]	; (1a000bf8 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000b94:	4293      	cmp	r3, r2
1a000b96:	d821      	bhi.n	1a000bdc <Chip_Clock_CalcMainPLLValue+0x5c>
1a000b98:	b318      	cbz	r0, 1a000be2 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000b9a:	2380      	movs	r3, #128	; 0x80
1a000b9c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000b9e:	2300      	movs	r3, #0
1a000ba0:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000ba2:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000ba4:	fbb5 f3f0 	udiv	r3, r5, r0
1a000ba8:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000baa:	4a14      	ldr	r2, [pc, #80]	; (1a000bfc <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000bac:	4295      	cmp	r5, r2
1a000bae:	d903      	bls.n	1a000bb8 <Chip_Clock_CalcMainPLLValue+0x38>
1a000bb0:	fb03 f000 	mul.w	r0, r3, r0
1a000bb4:	42a8      	cmp	r0, r5
1a000bb6:	d007      	beq.n	1a000bc8 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000bb8:	4621      	mov	r1, r4
1a000bba:	4628      	mov	r0, r5
1a000bbc:	f7ff fe96 	bl	1a0008ec <pll_get_frac>
		if (!ppll->nsel) {
1a000bc0:	68a3      	ldr	r3, [r4, #8]
1a000bc2:	b18b      	cbz	r3, 1a000be8 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000bc4:	3b01      	subs	r3, #1
1a000bc6:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000bc8:	6923      	ldr	r3, [r4, #16]
1a000bca:	b183      	cbz	r3, 1a000bee <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000bcc:	68e2      	ldr	r2, [r4, #12]
1a000bce:	b10a      	cbz	r2, 1a000bd4 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000bd0:	3a01      	subs	r2, #1
1a000bd2:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000bd4:	3b01      	subs	r3, #1
1a000bd6:	6123      	str	r3, [r4, #16]
	return 0;
1a000bd8:	2000      	movs	r0, #0
}
1a000bda:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000be0:	e7fb      	b.n	1a000bda <Chip_Clock_CalcMainPLLValue+0x5a>
1a000be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000be6:	e7f8      	b.n	1a000bda <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000bec:	e7f5      	b.n	1a000bda <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000bf2:	e7f2      	b.n	1a000bda <Chip_Clock_CalcMainPLLValue+0x5a>
1a000bf4:	ff6b3a10 	.word	0xff6b3a10
1a000bf8:	0b940510 	.word	0x0b940510
1a000bfc:	094c5eff 	.word	0x094c5eff

1a000c00 <Chip_Clock_GetMainPLLHz>:
{
1a000c00:	b530      	push	{r4, r5, lr}
1a000c02:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000c04:	4d17      	ldr	r5, [pc, #92]	; (1a000c64 <Chip_Clock_GetMainPLLHz+0x64>)
1a000c06:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000c08:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000c0c:	f7ff ff5c 	bl	1a000ac8 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000c10:	4b15      	ldr	r3, [pc, #84]	; (1a000c68 <Chip_Clock_GetMainPLLHz+0x68>)
1a000c12:	681b      	ldr	r3, [r3, #0]
1a000c14:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000c16:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000c18:	f013 0f01 	tst.w	r3, #1
1a000c1c:	d01f      	beq.n	1a000c5e <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a000c1e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000c22:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000c26:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000c2a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000c2e:	3301      	adds	r3, #1
	n = nsel + 1;
1a000c30:	3201      	adds	r2, #1
	p = ptab[psel];
1a000c32:	f10d 0c08 	add.w	ip, sp, #8
1a000c36:	4461      	add	r1, ip
1a000c38:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000c3c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000c40:	d108      	bne.n	1a000c54 <Chip_Clock_GetMainPLLHz+0x54>
1a000c42:	b93d      	cbnz	r5, 1a000c54 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000c44:	0049      	lsls	r1, r1, #1
1a000c46:	fbb3 f3f1 	udiv	r3, r3, r1
1a000c4a:	fbb0 f0f2 	udiv	r0, r0, r2
1a000c4e:	fb00 f003 	mul.w	r0, r0, r3
1a000c52:	e005      	b.n	1a000c60 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a000c54:	fbb0 f0f2 	udiv	r0, r0, r2
1a000c58:	fb03 f000 	mul.w	r0, r3, r0
1a000c5c:	e000      	b.n	1a000c60 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a000c5e:	2000      	movs	r0, #0
}
1a000c60:	b003      	add	sp, #12
1a000c62:	bd30      	pop	{r4, r5, pc}
1a000c64:	40050000 	.word	0x40050000
1a000c68:	1a008220 	.word	0x1a008220

1a000c6c <Chip_Clock_GetDivRate>:
{
1a000c6c:	b538      	push	{r3, r4, r5, lr}
1a000c6e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000c70:	4608      	mov	r0, r1
1a000c72:	f7ff ff0d 	bl	1a000a90 <Chip_Clock_GetDividerSource>
1a000c76:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000c78:	4620      	mov	r0, r4
1a000c7a:	f7ff ff17 	bl	1a000aac <Chip_Clock_GetDividerDivisor>
1a000c7e:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000c80:	4628      	mov	r0, r5
1a000c82:	f7ff ff21 	bl	1a000ac8 <Chip_Clock_GetClockInputHz>
1a000c86:	3401      	adds	r4, #1
}
1a000c88:	fbb0 f0f4 	udiv	r0, r0, r4
1a000c8c:	bd38      	pop	{r3, r4, r5, pc}
1a000c8e:	Address 0x000000001a000c8e is out of bounds.


1a000c90 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000c90:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000c92:	f100 0416 	add.w	r4, r0, #22
1a000c96:	00a4      	lsls	r4, r4, #2
1a000c98:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000c9c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000ca0:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000ca2:	281b      	cmp	r0, #27
1a000ca4:	d813      	bhi.n	1a000cce <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000ca6:	2911      	cmp	r1, #17
1a000ca8:	d01a      	beq.n	1a000ce0 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000caa:	4d0e      	ldr	r5, [pc, #56]	; (1a000ce4 <Chip_Clock_SetBaseClock+0x54>)
1a000cac:	4025      	ands	r5, r4

			if (autoblocken) {
1a000cae:	b10a      	cbz	r2, 1a000cb4 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000cb0:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000cb4:	b10b      	cbz	r3, 1a000cba <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000cb6:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000cba:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000cbe:	3016      	adds	r0, #22
1a000cc0:	0080      	lsls	r0, r0, #2
1a000cc2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000cc6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000cca:	6045      	str	r5, [r0, #4]
1a000ccc:	e008      	b.n	1a000ce0 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000cce:	f044 0401 	orr.w	r4, r4, #1
1a000cd2:	3016      	adds	r0, #22
1a000cd4:	0080      	lsls	r0, r0, #2
1a000cd6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000cda:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000cde:	6044      	str	r4, [r0, #4]
	}
}
1a000ce0:	bc30      	pop	{r4, r5}
1a000ce2:	4770      	bx	lr
1a000ce4:	e0fff7fe 	.word	0xe0fff7fe

1a000ce8 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000ce8:	281b      	cmp	r0, #27
1a000cea:	d80c      	bhi.n	1a000d06 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000cec:	3016      	adds	r0, #22
1a000cee:	0080      	lsls	r0, r0, #2
1a000cf0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000cf4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000cf8:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000cfa:	f010 0f01 	tst.w	r0, #1
1a000cfe:	d104      	bne.n	1a000d0a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000d00:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000d04:	4770      	bx	lr
		return CLKINPUT_PD;
1a000d06:	2011      	movs	r0, #17
1a000d08:	4770      	bx	lr
		return CLKINPUT_PD;
1a000d0a:	2011      	movs	r0, #17
}
1a000d0c:	4770      	bx	lr

1a000d0e <Chip_Clock_GetBaseClocktHz>:
{
1a000d0e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000d10:	f7ff ffea 	bl	1a000ce8 <Chip_Clock_GetBaseClock>
1a000d14:	f7ff fed8 	bl	1a000ac8 <Chip_Clock_GetClockInputHz>
}
1a000d18:	bd08      	pop	{r3, pc}
1a000d1a:	Address 0x000000001a000d1a is out of bounds.


1a000d1c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000d1c:	b969      	cbnz	r1, 1a000d3a <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a000d1e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000d20:	b10a      	cbz	r2, 1a000d26 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000d22:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000d26:	2b02      	cmp	r3, #2
1a000d28:	d009      	beq.n	1a000d3e <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000d2a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000d2e:	d209      	bcs.n	1a000d44 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000d30:	3020      	adds	r0, #32
1a000d32:	4b07      	ldr	r3, [pc, #28]	; (1a000d50 <Chip_Clock_EnableOpts+0x34>)
1a000d34:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000d38:	4770      	bx	lr
		reg |= (1 << 1);
1a000d3a:	2103      	movs	r1, #3
1a000d3c:	e7f0      	b.n	1a000d20 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000d3e:	f041 0120 	orr.w	r1, r1, #32
1a000d42:	e7f2      	b.n	1a000d2a <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000d44:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000d48:	4b02      	ldr	r3, [pc, #8]	; (1a000d54 <Chip_Clock_EnableOpts+0x38>)
1a000d4a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000d4e:	4770      	bx	lr
1a000d50:	40051000 	.word	0x40051000
1a000d54:	40052000 	.word	0x40052000

1a000d58 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a000d58:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000d5c:	d208      	bcs.n	1a000d70 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000d5e:	4a09      	ldr	r2, [pc, #36]	; (1a000d84 <Chip_Clock_Enable+0x2c>)
1a000d60:	3020      	adds	r0, #32
1a000d62:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000d66:	f043 0301 	orr.w	r3, r3, #1
1a000d6a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a000d6e:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000d70:	4a05      	ldr	r2, [pc, #20]	; (1a000d88 <Chip_Clock_Enable+0x30>)
1a000d72:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000d76:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000d7a:	f043 0301 	orr.w	r3, r3, #1
1a000d7e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000d82:	4770      	bx	lr
1a000d84:	40051000 	.word	0x40051000
1a000d88:	40052000 	.word	0x40052000

1a000d8c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000d8c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a000d8e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000d92:	d309      	bcc.n	1a000da8 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000d94:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000d98:	4a0d      	ldr	r2, [pc, #52]	; (1a000dd0 <Chip_Clock_GetRate+0x44>)
1a000d9a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a000d9e:	f014 0f01 	tst.w	r4, #1
1a000da2:	d107      	bne.n	1a000db4 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a000da4:	2000      	movs	r0, #0
	}

	return rate;
}
1a000da6:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000da8:	f100 0320 	add.w	r3, r0, #32
1a000dac:	4a09      	ldr	r2, [pc, #36]	; (1a000dd4 <Chip_Clock_GetRate+0x48>)
1a000dae:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000db2:	e7f4      	b.n	1a000d9e <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a000db4:	f7ff fe20 	bl	1a0009f8 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000db8:	f7ff ffa9 	bl	1a000d0e <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a000dbc:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000dc0:	d103      	bne.n	1a000dca <Chip_Clock_GetRate+0x3e>
			div = 1;
1a000dc2:	2301      	movs	r3, #1
		rate = rate / div;
1a000dc4:	fbb0 f0f3 	udiv	r0, r0, r3
1a000dc8:	e7ed      	b.n	1a000da6 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a000dca:	2302      	movs	r3, #2
1a000dcc:	e7fa      	b.n	1a000dc4 <Chip_Clock_GetRate+0x38>
1a000dce:	bf00      	nop
1a000dd0:	40052000 	.word	0x40052000
1a000dd4:	40051000 	.word	0x40051000

1a000dd8 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000dd8:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000dda:	2069      	movs	r0, #105	; 0x69
1a000ddc:	f7ff ffd6 	bl	1a000d8c <Chip_Clock_GetRate>
1a000de0:	4b01      	ldr	r3, [pc, #4]	; (1a000de8 <SystemCoreClockUpdate+0x10>)
1a000de2:	6018      	str	r0, [r3, #0]
}
1a000de4:	bd08      	pop	{r3, pc}
1a000de6:	bf00      	nop
1a000de8:	10000c24 	.word	0x10000c24

1a000dec <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a000dec:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a000dee:	6843      	ldr	r3, [r0, #4]
1a000df0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a000df4:	2b30      	cmp	r3, #48	; 0x30
1a000df6:	d04a      	beq.n	1a000e8e <Chip_I2CM_XferHandler+0xa2>
1a000df8:	d90f      	bls.n	1a000e1a <Chip_I2CM_XferHandler+0x2e>
1a000dfa:	2b48      	cmp	r3, #72	; 0x48
1a000dfc:	d06a      	beq.n	1a000ed4 <Chip_I2CM_XferHandler+0xe8>
1a000dfe:	d83a      	bhi.n	1a000e76 <Chip_I2CM_XferHandler+0x8a>
1a000e00:	2b38      	cmp	r3, #56	; 0x38
1a000e02:	d06b      	beq.n	1a000edc <Chip_I2CM_XferHandler+0xf0>
1a000e04:	2b40      	cmp	r3, #64	; 0x40
1a000e06:	d13e      	bne.n	1a000e86 <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a000e08:	88ca      	ldrh	r2, [r1, #6]
1a000e0a:	2a01      	cmp	r2, #1
1a000e0c:	d95a      	bls.n	1a000ec4 <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a000e0e:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a000e10:	b9b2      	cbnz	r2, 1a000e40 <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a000e12:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a000e14:	f023 0310 	bic.w	r3, r3, #16
1a000e18:	e012      	b.n	1a000e40 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a000e1a:	2b10      	cmp	r3, #16
1a000e1c:	d007      	beq.n	1a000e2e <Chip_I2CM_XferHandler+0x42>
1a000e1e:	d81c      	bhi.n	1a000e5a <Chip_I2CM_XferHandler+0x6e>
1a000e20:	b91b      	cbnz	r3, 1a000e2a <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a000e22:	2303      	movs	r3, #3
1a000e24:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a000e26:	232c      	movs	r3, #44	; 0x2c
        break;
1a000e28:	e00a      	b.n	1a000e40 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a000e2a:	2b08      	cmp	r3, #8
1a000e2c:	d12b      	bne.n	1a000e86 <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a000e2e:	780a      	ldrb	r2, [r1, #0]
1a000e30:	888b      	ldrh	r3, [r1, #4]
1a000e32:	fab3 f383 	clz	r3, r3
1a000e36:	095b      	lsrs	r3, r3, #5
1a000e38:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a000e3c:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a000e3e:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a000e40:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a000e44:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a000e46:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a000e4a:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a000e4c:	8848      	ldrh	r0, [r1, #2]
1a000e4e:	38ff      	subs	r0, #255	; 0xff
1a000e50:	bf18      	it	ne
1a000e52:	2001      	movne	r0, #1
}
1a000e54:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000e58:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a000e5a:	2b20      	cmp	r3, #32
1a000e5c:	d017      	beq.n	1a000e8e <Chip_I2CM_XferHandler+0xa2>
1a000e5e:	2b28      	cmp	r3, #40	; 0x28
1a000e60:	d001      	beq.n	1a000e66 <Chip_I2CM_XferHandler+0x7a>
1a000e62:	2b18      	cmp	r3, #24
1a000e64:	d10f      	bne.n	1a000e86 <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a000e66:	888b      	ldrh	r3, [r1, #4]
1a000e68:	b9cb      	cbnz	r3, 1a000e9e <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a000e6a:	88cb      	ldrh	r3, [r1, #6]
1a000e6c:	2b00      	cmp	r3, #0
1a000e6e:	d139      	bne.n	1a000ee4 <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a000e70:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a000e72:	232c      	movs	r3, #44	; 0x2c
1a000e74:	e7e4      	b.n	1a000e40 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a000e76:	2b58      	cmp	r3, #88	; 0x58
1a000e78:	d01b      	beq.n	1a000eb2 <Chip_I2CM_XferHandler+0xc6>
1a000e7a:	2bf8      	cmp	r3, #248	; 0xf8
1a000e7c:	d101      	bne.n	1a000e82 <Chip_I2CM_XferHandler+0x96>
      return 0;
1a000e7e:	2000      	movs	r0, #0
1a000e80:	e7e8      	b.n	1a000e54 <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a000e82:	2b50      	cmp	r3, #80	; 0x50
1a000e84:	d015      	beq.n	1a000eb2 <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a000e86:	2301      	movs	r3, #1
1a000e88:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a000e8a:	232c      	movs	r3, #44	; 0x2c
        break;
1a000e8c:	e7d8      	b.n	1a000e40 <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a000e8e:	784b      	ldrb	r3, [r1, #1]
1a000e90:	f013 0f01 	tst.w	r3, #1
1a000e94:	d1e7      	bne.n	1a000e66 <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a000e96:	2302      	movs	r3, #2
1a000e98:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a000e9a:	232c      	movs	r3, #44	; 0x2c
			break;
1a000e9c:	e7d0      	b.n	1a000e40 <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a000e9e:	688b      	ldr	r3, [r1, #8]
1a000ea0:	1c5a      	adds	r2, r3, #1
1a000ea2:	608a      	str	r2, [r1, #8]
1a000ea4:	781b      	ldrb	r3, [r3, #0]
1a000ea6:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a000ea8:	888b      	ldrh	r3, [r1, #4]
1a000eaa:	3b01      	subs	r3, #1
1a000eac:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a000eae:	233c      	movs	r3, #60	; 0x3c
1a000eb0:	e7c6      	b.n	1a000e40 <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a000eb2:	6882      	ldr	r2, [r0, #8]
1a000eb4:	68cb      	ldr	r3, [r1, #12]
1a000eb6:	1c5c      	adds	r4, r3, #1
1a000eb8:	60cc      	str	r4, [r1, #12]
1a000eba:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a000ebc:	88cb      	ldrh	r3, [r1, #6]
1a000ebe:	3b01      	subs	r3, #1
1a000ec0:	80cb      	strh	r3, [r1, #6]
1a000ec2:	e7a1      	b.n	1a000e08 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a000ec4:	784b      	ldrb	r3, [r1, #1]
1a000ec6:	f013 0f02 	tst.w	r3, #2
1a000eca:	d101      	bne.n	1a000ed0 <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a000ecc:	233c      	movs	r3, #60	; 0x3c
1a000ece:	e79f      	b.n	1a000e10 <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a000ed0:	2338      	movs	r3, #56	; 0x38
1a000ed2:	e79d      	b.n	1a000e10 <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a000ed4:	2304      	movs	r3, #4
1a000ed6:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a000ed8:	232c      	movs	r3, #44	; 0x2c
		break;
1a000eda:	e7b1      	b.n	1a000e40 <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a000edc:	2305      	movs	r3, #5
1a000ede:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a000ee0:	233c      	movs	r3, #60	; 0x3c
		break;
1a000ee2:	e7ad      	b.n	1a000e40 <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a000ee4:	231c      	movs	r3, #28
1a000ee6:	e7ab      	b.n	1a000e40 <Chip_I2CM_XferHandler+0x54>

1a000ee8 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a000ee8:	23ff      	movs	r3, #255	; 0xff
1a000eea:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a000eec:	232c      	movs	r3, #44	; 0x2c
1a000eee:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a000ef0:	2360      	movs	r3, #96	; 0x60
1a000ef2:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a000ef4:	4770      	bx	lr

1a000ef6 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a000ef6:	b538      	push	{r3, r4, r5, lr}
1a000ef8:	4604      	mov	r4, r0
1a000efa:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a000efc:	f7ff fff4 	bl	1a000ee8 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a000f00:	2000      	movs	r0, #0

	while (ret == 0) {
1a000f02:	e007      	b.n	1a000f14 <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a000f04:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a000f06:	f013 0f08 	tst.w	r3, #8
1a000f0a:	d0fb      	beq.n	1a000f04 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a000f0c:	4629      	mov	r1, r5
1a000f0e:	4620      	mov	r0, r4
1a000f10:	f7ff ff6c 	bl	1a000dec <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a000f14:	2800      	cmp	r0, #0
1a000f16:	d0f5      	beq.n	1a000f04 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a000f18:	bd38      	pop	{r3, r4, r5, pc}

1a000f1a <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000f1a:	4770      	bx	lr

1a000f1c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000f1c:	b570      	push	{r4, r5, r6, lr}
1a000f1e:	b08a      	sub	sp, #40	; 0x28
1a000f20:	4605      	mov	r5, r0
1a000f22:	460e      	mov	r6, r1
1a000f24:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000f26:	f242 7310 	movw	r3, #10000	; 0x2710
1a000f2a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000f2c:	2806      	cmp	r0, #6
1a000f2e:	d018      	beq.n	1a000f62 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000f30:	2300      	movs	r3, #0
1a000f32:	2201      	movs	r2, #1
1a000f34:	4629      	mov	r1, r5
1a000f36:	2004      	movs	r0, #4
1a000f38:	f7ff feaa 	bl	1a000c90 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000f3c:	4a49      	ldr	r2, [pc, #292]	; (1a001064 <Chip_SetupCoreClock+0x148>)
1a000f3e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000f40:	f043 0301 	orr.w	r3, r3, #1
1a000f44:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000f46:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000f4a:	a901      	add	r1, sp, #4
1a000f4c:	4630      	mov	r0, r6
1a000f4e:	f7ff fe17 	bl	1a000b80 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000f52:	4b45      	ldr	r3, [pc, #276]	; (1a001068 <Chip_SetupCoreClock+0x14c>)
1a000f54:	429e      	cmp	r6, r3
1a000f56:	d916      	bls.n	1a000f86 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000f58:	9b01      	ldr	r3, [sp, #4]
1a000f5a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000f5e:	d003      	beq.n	1a000f68 <Chip_SetupCoreClock+0x4c>
1a000f60:	e7fe      	b.n	1a000f60 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000f62:	f7ff fd6f 	bl	1a000a44 <Chip_Clock_EnableCrystal>
1a000f66:	e7e3      	b.n	1a000f30 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a000f68:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000f6c:	d005      	beq.n	1a000f7a <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000f72:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000f74:	2500      	movs	r5, #0
			direct = 1;
1a000f76:	2601      	movs	r6, #1
1a000f78:	e007      	b.n	1a000f8a <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000f7a:	9b04      	ldr	r3, [sp, #16]
1a000f7c:	3301      	adds	r3, #1
1a000f7e:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000f80:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000f82:	2600      	movs	r6, #0
1a000f84:	e001      	b.n	1a000f8a <Chip_SetupCoreClock+0x6e>
1a000f86:	2500      	movs	r5, #0
1a000f88:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000f8a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000f8e:	9b01      	ldr	r3, [sp, #4]
1a000f90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000f94:	9a05      	ldr	r2, [sp, #20]
1a000f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000f9a:	9a03      	ldr	r2, [sp, #12]
1a000f9c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000fa0:	9a04      	ldr	r2, [sp, #16]
1a000fa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000fa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000faa:	4a2e      	ldr	r2, [pc, #184]	; (1a001064 <Chip_SetupCoreClock+0x148>)
1a000fac:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000fae:	4b2d      	ldr	r3, [pc, #180]	; (1a001064 <Chip_SetupCoreClock+0x148>)
1a000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000fb2:	f013 0f01 	tst.w	r3, #1
1a000fb6:	d0fa      	beq.n	1a000fae <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000fb8:	2300      	movs	r3, #0
1a000fba:	2201      	movs	r2, #1
1a000fbc:	2109      	movs	r1, #9
1a000fbe:	2004      	movs	r0, #4
1a000fc0:	f7ff fe66 	bl	1a000c90 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000fc4:	b1fe      	cbz	r6, 1a001006 <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000fc6:	f242 7310 	movw	r3, #10000	; 0x2710
1a000fca:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000fce:	1e5a      	subs	r2, r3, #1
1a000fd0:	9209      	str	r2, [sp, #36]	; 0x24
1a000fd2:	2b00      	cmp	r3, #0
1a000fd4:	d1fa      	bne.n	1a000fcc <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000fd6:	9b01      	ldr	r3, [sp, #4]
1a000fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000fdc:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000fde:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000fe2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000fe6:	9a05      	ldr	r2, [sp, #20]
1a000fe8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000fec:	9a03      	ldr	r2, [sp, #12]
1a000fee:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000ff2:	9a04      	ldr	r2, [sp, #16]
1a000ff4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000ff8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000ffc:	4a19      	ldr	r2, [pc, #100]	; (1a001064 <Chip_SetupCoreClock+0x148>)
1a000ffe:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001000:	b36c      	cbz	r4, 1a00105e <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001002:	2400      	movs	r4, #0
1a001004:	e029      	b.n	1a00105a <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a001006:	2d00      	cmp	r5, #0
1a001008:	d0fa      	beq.n	1a001000 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00100a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00100e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001010:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001012:	1e5a      	subs	r2, r3, #1
1a001014:	9209      	str	r2, [sp, #36]	; 0x24
1a001016:	2b00      	cmp	r3, #0
1a001018:	d1fa      	bne.n	1a001010 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a00101a:	9b04      	ldr	r3, [sp, #16]
1a00101c:	1e5a      	subs	r2, r3, #1
1a00101e:	9204      	str	r2, [sp, #16]
1a001020:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001024:	9b01      	ldr	r3, [sp, #4]
1a001026:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00102a:	9905      	ldr	r1, [sp, #20]
1a00102c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001030:	9903      	ldr	r1, [sp, #12]
1a001032:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001036:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00103a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00103e:	4a09      	ldr	r2, [pc, #36]	; (1a001064 <Chip_SetupCoreClock+0x148>)
1a001040:	6453      	str	r3, [r2, #68]	; 0x44
1a001042:	e7dd      	b.n	1a001000 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001044:	4809      	ldr	r0, [pc, #36]	; (1a00106c <Chip_SetupCoreClock+0x150>)
1a001046:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00104a:	78cb      	ldrb	r3, [r1, #3]
1a00104c:	788a      	ldrb	r2, [r1, #2]
1a00104e:	7849      	ldrb	r1, [r1, #1]
1a001050:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001054:	f7ff fe1c 	bl	1a000c90 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001058:	3401      	adds	r4, #1
1a00105a:	2c11      	cmp	r4, #17
1a00105c:	d9f2      	bls.n	1a001044 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00105e:	b00a      	add	sp, #40	; 0x28
1a001060:	bd70      	pop	{r4, r5, r6, pc}
1a001062:	bf00      	nop
1a001064:	40050000 	.word	0x40050000
1a001068:	068e7780 	.word	0x068e7780
1a00106c:	1a008298 	.word	0x1a008298

1a001070 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001070:	2901      	cmp	r1, #1
1a001072:	d000      	beq.n	1a001076 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a001074:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a001076:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00107a:	0082      	lsls	r2, r0, #2
1a00107c:	4b03      	ldr	r3, [pc, #12]	; (1a00108c <Chip_I2C_EventHandler+0x1c>)
1a00107e:	4413      	add	r3, r2
1a001080:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a001082:	7d13      	ldrb	r3, [r2, #20]
1a001084:	b2db      	uxtb	r3, r3
1a001086:	2b04      	cmp	r3, #4
1a001088:	d0fb      	beq.n	1a001082 <Chip_I2C_EventHandler+0x12>
1a00108a:	e7f3      	b.n	1a001074 <Chip_I2C_EventHandler+0x4>
1a00108c:	10000004 	.word	0x10000004

1a001090 <handleMasterXferState>:
{
1a001090:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a001092:	6843      	ldr	r3, [r0, #4]
1a001094:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a001098:	2b58      	cmp	r3, #88	; 0x58
1a00109a:	d87e      	bhi.n	1a00119a <handleMasterXferState+0x10a>
1a00109c:	e8df f003 	tbb	[pc, r3]
1a0010a0:	7d7d7d79 	.word	0x7d7d7d79
1a0010a4:	7d7d7d7d 	.word	0x7d7d7d7d
1a0010a8:	7d7d7d2f 	.word	0x7d7d7d2f
1a0010ac:	7d7d7d7d 	.word	0x7d7d7d7d
1a0010b0:	7d7d7d2f 	.word	0x7d7d7d2f
1a0010b4:	7d7d7d7d 	.word	0x7d7d7d7d
1a0010b8:	7d7d7d39 	.word	0x7d7d7d39
1a0010bc:	7d7d7d7d 	.word	0x7d7d7d7d
1a0010c0:	7d7d7d6d 	.word	0x7d7d7d6d
1a0010c4:	7d7d7d7d 	.word	0x7d7d7d7d
1a0010c8:	7d7d7d39 	.word	0x7d7d7d39
1a0010cc:	7d7d7d7d 	.word	0x7d7d7d7d
1a0010d0:	7d7d7d71 	.word	0x7d7d7d71
1a0010d4:	7d7d7d7d 	.word	0x7d7d7d7d
1a0010d8:	7d7d7d75 	.word	0x7d7d7d75
1a0010dc:	7d7d7d7d 	.word	0x7d7d7d7d
1a0010e0:	7d7d7d6b 	.word	0x7d7d7d6b
1a0010e4:	7d7d7d7d 	.word	0x7d7d7d7d
1a0010e8:	7d7d7d6d 	.word	0x7d7d7d6d
1a0010ec:	7d7d7d7d 	.word	0x7d7d7d7d
1a0010f0:	7d7d7d2d 	.word	0x7d7d7d2d
1a0010f4:	7d7d7d7d 	.word	0x7d7d7d7d
1a0010f8:	4f          	.byte	0x4f
1a0010f9:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a0010fa:	233c      	movs	r3, #60	; 0x3c
1a0010fc:	e020      	b.n	1a001140 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a0010fe:	780a      	ldrb	r2, [r1, #0]
1a001100:	688b      	ldr	r3, [r1, #8]
1a001102:	fab3 f383 	clz	r3, r3
1a001106:	095b      	lsrs	r3, r3, #5
1a001108:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a00110c:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00110e:	233c      	movs	r3, #60	; 0x3c
		break;
1a001110:	e023      	b.n	1a00115a <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a001112:	688b      	ldr	r3, [r1, #8]
1a001114:	b94b      	cbnz	r3, 1a00112a <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a001116:	690b      	ldr	r3, [r1, #16]
1a001118:	b123      	cbz	r3, 1a001124 <handleMasterXferState+0x94>
1a00111a:	f06f 0320 	mvn.w	r3, #32
1a00111e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a001122:	e01a      	b.n	1a00115a <handleMasterXferState+0xca>
1a001124:	f06f 0310 	mvn.w	r3, #16
1a001128:	e7f9      	b.n	1a00111e <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a00112a:	684b      	ldr	r3, [r1, #4]
1a00112c:	1c5a      	adds	r2, r3, #1
1a00112e:	604a      	str	r2, [r1, #4]
1a001130:	781b      	ldrb	r3, [r3, #0]
1a001132:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a001134:	688b      	ldr	r3, [r1, #8]
1a001136:	3b01      	subs	r3, #1
1a001138:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00113a:	233c      	movs	r3, #60	; 0x3c
1a00113c:	e00d      	b.n	1a00115a <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a00113e:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a001140:	6884      	ldr	r4, [r0, #8]
1a001142:	68ca      	ldr	r2, [r1, #12]
1a001144:	1c55      	adds	r5, r2, #1
1a001146:	60cd      	str	r5, [r1, #12]
1a001148:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a00114a:	690a      	ldr	r2, [r1, #16]
1a00114c:	3a01      	subs	r2, #1
1a00114e:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a001150:	690a      	ldr	r2, [r1, #16]
1a001152:	2a01      	cmp	r2, #1
1a001154:	dd01      	ble.n	1a00115a <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a001156:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a00115a:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a00115e:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a001160:	f023 0210 	bic.w	r2, r3, #16
1a001164:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a001166:	f013 0f10 	tst.w	r3, #16
1a00116a:	d018      	beq.n	1a00119e <handleMasterXferState+0x10e>
1a00116c:	7d0b      	ldrb	r3, [r1, #20]
1a00116e:	2b02      	cmp	r3, #2
1a001170:	d015      	beq.n	1a00119e <handleMasterXferState+0x10e>
	return 1;
1a001172:	2001      	movs	r0, #1
1a001174:	e017      	b.n	1a0011a6 <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a001176:	233c      	movs	r3, #60	; 0x3c
1a001178:	e7ea      	b.n	1a001150 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a00117a:	2305      	movs	r3, #5
1a00117c:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00117e:	232c      	movs	r3, #44	; 0x2c
		break;
1a001180:	e7eb      	b.n	1a00115a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a001182:	2301      	movs	r3, #1
1a001184:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a001186:	232c      	movs	r3, #44	; 0x2c
		break;
1a001188:	e7e7      	b.n	1a00115a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a00118a:	2302      	movs	r3, #2
1a00118c:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a00118e:	233c      	movs	r3, #60	; 0x3c
		break;
1a001190:	e7e3      	b.n	1a00115a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a001192:	2303      	movs	r3, #3
1a001194:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a001196:	232c      	movs	r3, #44	; 0x2c
1a001198:	e7df      	b.n	1a00115a <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a00119a:	233c      	movs	r3, #60	; 0x3c
1a00119c:	e7dd      	b.n	1a00115a <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a00119e:	7d0b      	ldrb	r3, [r1, #20]
1a0011a0:	2b04      	cmp	r3, #4
1a0011a2:	d002      	beq.n	1a0011aa <handleMasterXferState+0x11a>
		return 0;
1a0011a4:	2000      	movs	r0, #0
}
1a0011a6:	bc30      	pop	{r4, r5}
1a0011a8:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a0011aa:	2000      	movs	r0, #0
1a0011ac:	7508      	strb	r0, [r1, #20]
1a0011ae:	e7fa      	b.n	1a0011a6 <handleMasterXferState+0x116>

1a0011b0 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0011b0:	b570      	push	{r4, r5, r6, lr}
1a0011b2:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0011b4:	4e06      	ldr	r6, [pc, #24]	; (1a0011d0 <Chip_I2C_Init+0x20>)
1a0011b6:	00c4      	lsls	r4, r0, #3
1a0011b8:	1a22      	subs	r2, r4, r0
1a0011ba:	0093      	lsls	r3, r2, #2
1a0011bc:	4433      	add	r3, r6
1a0011be:	8898      	ldrh	r0, [r3, #4]
1a0011c0:	f7ff fdca 	bl	1a000d58 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0011c4:	1b64      	subs	r4, r4, r5
1a0011c6:	00a3      	lsls	r3, r4, #2
1a0011c8:	58f3      	ldr	r3, [r6, r3]
1a0011ca:	226c      	movs	r2, #108	; 0x6c
1a0011cc:	619a      	str	r2, [r3, #24]
}
1a0011ce:	bd70      	pop	{r4, r5, r6, pc}
1a0011d0:	10000004 	.word	0x10000004

1a0011d4 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0011d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0011d8:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0011da:	4e0b      	ldr	r6, [pc, #44]	; (1a001208 <Chip_I2C_SetClockRate+0x34>)
1a0011dc:	00c5      	lsls	r5, r0, #3
1a0011de:	1a2b      	subs	r3, r5, r0
1a0011e0:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0011e4:	eb06 0308 	add.w	r3, r6, r8
1a0011e8:	8898      	ldrh	r0, [r3, #4]
1a0011ea:	f7ff fdcf 	bl	1a000d8c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0011ee:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0011f2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0011f6:	0842      	lsrs	r2, r0, #1
1a0011f8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0011fa:	f856 3008 	ldr.w	r3, [r6, r8]
1a0011fe:	691a      	ldr	r2, [r3, #16]
1a001200:	1a80      	subs	r0, r0, r2
1a001202:	6158      	str	r0, [r3, #20]
}
1a001204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001208:	10000004 	.word	0x10000004

1a00120c <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a00120c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001210:	009a      	lsls	r2, r3, #2
1a001212:	4b09      	ldr	r3, [pc, #36]	; (1a001238 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001214:	4413      	add	r3, r2
1a001216:	691b      	ldr	r3, [r3, #16]
1a001218:	b153      	cbz	r3, 1a001230 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a00121a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00121e:	0082      	lsls	r2, r0, #2
1a001220:	4b05      	ldr	r3, [pc, #20]	; (1a001238 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001222:	4413      	add	r3, r2
1a001224:	6898      	ldr	r0, [r3, #8]
}
1a001226:	4288      	cmp	r0, r1
1a001228:	bf14      	ite	ne
1a00122a:	2000      	movne	r0, #0
1a00122c:	2001      	moveq	r0, #1
1a00122e:	4770      	bx	lr
		iic->mEvent = event;
1a001230:	4b01      	ldr	r3, [pc, #4]	; (1a001238 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001232:	4413      	add	r3, r2
1a001234:	6099      	str	r1, [r3, #8]
1a001236:	e7f0      	b.n	1a00121a <Chip_I2C_SetMasterEventHandler+0xe>
1a001238:	10000004 	.word	0x10000004

1a00123c <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a00123c:	b510      	push	{r4, lr}
1a00123e:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a001240:	4809      	ldr	r0, [pc, #36]	; (1a001268 <Chip_I2C_MasterStateHandler+0x2c>)
1a001242:	00e3      	lsls	r3, r4, #3
1a001244:	1b1b      	subs	r3, r3, r4
1a001246:	009a      	lsls	r2, r3, #2
1a001248:	1883      	adds	r3, r0, r2
1a00124a:	6919      	ldr	r1, [r3, #16]
1a00124c:	5880      	ldr	r0, [r0, r2]
1a00124e:	f7ff ff1f 	bl	1a001090 <handleMasterXferState>
1a001252:	b940      	cbnz	r0, 1a001266 <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a001254:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a001258:	009a      	lsls	r2, r3, #2
1a00125a:	4b03      	ldr	r3, [pc, #12]	; (1a001268 <Chip_I2C_MasterStateHandler+0x2c>)
1a00125c:	4413      	add	r3, r2
1a00125e:	689b      	ldr	r3, [r3, #8]
1a001260:	2102      	movs	r1, #2
1a001262:	4620      	mov	r0, r4
1a001264:	4798      	blx	r3
	}
}
1a001266:	bd10      	pop	{r4, pc}
1a001268:	10000004 	.word	0x10000004

1a00126c <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a00126c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001270:	0083      	lsls	r3, r0, #2
1a001272:	4a03      	ldr	r2, [pc, #12]	; (1a001280 <Chip_I2C_IsStateChanged+0x14>)
1a001274:	58d3      	ldr	r3, [r2, r3]
1a001276:	6818      	ldr	r0, [r3, #0]
}
1a001278:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a00127c:	4770      	bx	lr
1a00127e:	bf00      	nop
1a001280:	10000004 	.word	0x10000004

1a001284 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a001284:	2901      	cmp	r1, #1
1a001286:	d000      	beq.n	1a00128a <Chip_I2C_EventHandlerPolling+0x6>
1a001288:	4770      	bx	lr
{
1a00128a:	b538      	push	{r3, r4, r5, lr}
1a00128c:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a00128e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001292:	009a      	lsls	r2, r3, #2
1a001294:	4b08      	ldr	r3, [pc, #32]	; (1a0012b8 <Chip_I2C_EventHandlerPolling+0x34>)
1a001296:	4413      	add	r3, r2
1a001298:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a00129a:	7d2b      	ldrb	r3, [r5, #20]
1a00129c:	b2db      	uxtb	r3, r3
1a00129e:	2b04      	cmp	r3, #4
1a0012a0:	d108      	bne.n	1a0012b4 <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a0012a2:	4620      	mov	r0, r4
1a0012a4:	f7ff ffe2 	bl	1a00126c <Chip_I2C_IsStateChanged>
1a0012a8:	2800      	cmp	r0, #0
1a0012aa:	d0f6      	beq.n	1a00129a <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a0012ac:	4620      	mov	r0, r4
1a0012ae:	f7ff ffc5 	bl	1a00123c <Chip_I2C_MasterStateHandler>
1a0012b2:	e7f2      	b.n	1a00129a <Chip_I2C_EventHandlerPolling+0x16>
}
1a0012b4:	bd38      	pop	{r3, r4, r5, pc}
1a0012b6:	bf00      	nop
1a0012b8:	10000004 	.word	0x10000004

1a0012bc <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0012bc:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0012be:	4a0a      	ldr	r2, [pc, #40]	; (1a0012e8 <SystemInit+0x2c>)
1a0012c0:	4b0a      	ldr	r3, [pc, #40]	; (1a0012ec <SystemInit+0x30>)
1a0012c2:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0012c4:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0012c8:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0012ca:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0012ce:	2b20      	cmp	r3, #32
1a0012d0:	d002      	beq.n	1a0012d8 <SystemInit+0x1c>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0012d2:	f7ff f9ff 	bl	1a0006d4 <Board_SystemInit>
}
1a0012d6:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0012d8:	4a04      	ldr	r2, [pc, #16]	; (1a0012ec <SystemInit+0x30>)
1a0012da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0012de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0012e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0012e6:	e7f4      	b.n	1a0012d2 <SystemInit+0x16>
1a0012e8:	1a000000 	.word	0x1a000000
1a0012ec:	e000ed00 	.word	0xe000ed00

1a0012f0 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0012f0:	4b04      	ldr	r3, [pc, #16]	; (1a001304 <cyclesCounterInit+0x14>)
1a0012f2:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a0012f4:	4b04      	ldr	r3, [pc, #16]	; (1a001308 <cyclesCounterInit+0x18>)
1a0012f6:	681a      	ldr	r2, [r3, #0]
1a0012f8:	6813      	ldr	r3, [r2, #0]
1a0012fa:	f043 0301 	orr.w	r3, r3, #1
1a0012fe:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001300:	2001      	movs	r0, #1
1a001302:	4770      	bx	lr
1a001304:	1000003c 	.word	0x1000003c
1a001308:	10000040 	.word	0x10000040

1a00130c <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a00130c:	4b01      	ldr	r3, [pc, #4]	; (1a001314 <tickRead+0x8>)
1a00130e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001312:	4770      	bx	lr
1a001314:	10000a88 	.word	0x10000a88

1a001318 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a001318:	b918      	cbnz	r0, 1a001322 <tickPowerSet+0xa>
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a00131a:	4b04      	ldr	r3, [pc, #16]	; (1a00132c <tickPowerSet+0x14>)
1a00131c:	2200      	movs	r2, #0
1a00131e:	601a      	str	r2, [r3, #0]
   }
}
1a001320:	4770      	bx	lr
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001322:	4b02      	ldr	r3, [pc, #8]	; (1a00132c <tickPowerSet+0x14>)
1a001324:	2207      	movs	r2, #7
1a001326:	601a      	str	r2, [r3, #0]
1a001328:	4770      	bx	lr
1a00132a:	bf00      	nop
1a00132c:	e000e010 	.word	0xe000e010

1a001330 <tickInit>:
{
1a001330:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001332:	ea50 0301 	orrs.w	r3, r0, r1
1a001336:	d02a      	beq.n	1a00138e <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001338:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a00133c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001340:	2b00      	cmp	r3, #0
1a001342:	bf08      	it	eq
1a001344:	2a32      	cmpeq	r2, #50	; 0x32
1a001346:	d227      	bcs.n	1a001398 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001348:	4b14      	ldr	r3, [pc, #80]	; (1a00139c <tickInit+0x6c>)
1a00134a:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00134e:	4b14      	ldr	r3, [pc, #80]	; (1a0013a0 <tickInit+0x70>)
1a001350:	681b      	ldr	r3, [r3, #0]
1a001352:	fba3 4500 	umull	r4, r5, r3, r0
1a001356:	fb03 5501 	mla	r5, r3, r1, r5
1a00135a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00135e:	2300      	movs	r3, #0
1a001360:	4620      	mov	r0, r4
1a001362:	4629      	mov	r1, r5
1a001364:	f001 faca 	bl	1a0028fc <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001368:	3801      	subs	r0, #1
1a00136a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00136e:	d209      	bcs.n	1a001384 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001370:	4b0c      	ldr	r3, [pc, #48]	; (1a0013a4 <tickInit+0x74>)
1a001372:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001374:	4a0c      	ldr	r2, [pc, #48]	; (1a0013a8 <tickInit+0x78>)
1a001376:	21e0      	movs	r1, #224	; 0xe0
1a001378:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a00137c:	2200      	movs	r2, #0
1a00137e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001380:	2207      	movs	r2, #7
1a001382:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001384:	2001      	movs	r0, #1
1a001386:	f7ff ffc7 	bl	1a001318 <tickPowerSet>
      bool_t ret_val = 1;
1a00138a:	2001      	movs	r0, #1
}
1a00138c:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00138e:	2000      	movs	r0, #0
1a001390:	f7ff ffc2 	bl	1a001318 <tickPowerSet>
         ret_val = 0;
1a001394:	2000      	movs	r0, #0
1a001396:	e7f9      	b.n	1a00138c <tickInit+0x5c>
            ret_val = 0;
1a001398:	2000      	movs	r0, #0
1a00139a:	e7f7      	b.n	1a00138c <tickInit+0x5c>
1a00139c:	10000c28 	.word	0x10000c28
1a0013a0:	10000c24 	.word	0x10000c24
1a0013a4:	e000e010 	.word	0xe000e010
1a0013a8:	e000ed00 	.word	0xe000ed00

1a0013ac <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0013ac:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a0013b0:	4908      	ldr	r1, [pc, #32]	; (1a0013d4 <SysTick_Handler+0x28>)
1a0013b2:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0013b6:	f112 0b01 	adds.w	fp, r2, #1
1a0013ba:	f143 0c00 	adc.w	ip, r3, #0
1a0013be:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0013c2:	4b05      	ldr	r3, [pc, #20]	; (1a0013d8 <SysTick_Handler+0x2c>)
1a0013c4:	681b      	ldr	r3, [r3, #0]
1a0013c6:	b113      	cbz	r3, 1a0013ce <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a0013c8:	4a04      	ldr	r2, [pc, #16]	; (1a0013dc <SysTick_Handler+0x30>)
1a0013ca:	6810      	ldr	r0, [r2, #0]
1a0013cc:	4798      	blx	r3
   }
}
1a0013ce:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a0013d2:	bf00      	nop
1a0013d4:	10000a88 	.word	0x10000a88
1a0013d8:	10000a90 	.word	0x10000a90
1a0013dc:	10000a84 	.word	0x10000a84

1a0013e0 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a0013e0:	b538      	push	{r3, r4, r5, lr}
1a0013e2:	4604      	mov	r4, r0
1a0013e4:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0013e6:	4b08      	ldr	r3, [pc, #32]	; (1a001408 <i2cHardwareInit+0x28>)
1a0013e8:	f640 0208 	movw	r2, #2056	; 0x808
1a0013ec:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE );

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a0013f0:	f7ff fede 	bl	1a0011b0 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a0013f4:	4629      	mov	r1, r5
1a0013f6:	4620      	mov	r0, r4
1a0013f8:	f7ff feec 	bl	1a0011d4 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a0013fc:	4903      	ldr	r1, [pc, #12]	; (1a00140c <i2cHardwareInit+0x2c>)
1a0013fe:	4620      	mov	r0, r4
1a001400:	f7ff ff04 	bl	1a00120c <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a001404:	2001      	movs	r0, #1
1a001406:	bd38      	pop	{r3, r4, r5, pc}
1a001408:	40086000 	.word	0x40086000
1a00140c:	1a001285 	.word	0x1a001285

1a001410 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a001410:	b500      	push	{lr}
1a001412:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a001414:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a001418:	2100      	movs	r1, #0
1a00141a:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a00141e:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a001422:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a001424:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a001428:	9b07      	ldr	r3, [sp, #28]
1a00142a:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a00142c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a001430:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a001434:	4669      	mov	r1, sp
1a001436:	4804      	ldr	r0, [pc, #16]	; (1a001448 <i2cHardwareRead+0x38>)
1a001438:	f7ff fd5d 	bl	1a000ef6 <Chip_I2CM_XferBlocking>
1a00143c:	b100      	cbz	r0, 1a001440 <i2cHardwareRead+0x30>
      return FALSE;
   }

   return TRUE;
1a00143e:	2001      	movs	r0, #1
}
1a001440:	b005      	add	sp, #20
1a001442:	f85d fb04 	ldr.w	pc, [sp], #4
1a001446:	bf00      	nop
1a001448:	400a1000 	.word	0x400a1000

1a00144c <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a00144c:	b108      	cbz	r0, 1a001452 <i2cHardwareWrite+0x6>
      return FALSE;
1a00144e:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a001450:	4770      	bx	lr
{
1a001452:	b500      	push	{lr}
1a001454:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a001456:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a00145a:	2100      	movs	r1, #0
1a00145c:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a001460:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a001464:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a001466:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a00146a:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a00146c:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a001470:	4669      	mov	r1, sp
1a001472:	4804      	ldr	r0, [pc, #16]	; (1a001484 <i2cHardwareWrite+0x38>)
1a001474:	f7ff fd3f 	bl	1a000ef6 <Chip_I2CM_XferBlocking>
1a001478:	b100      	cbz	r0, 1a00147c <i2cHardwareWrite+0x30>
   return TRUE;
1a00147a:	2001      	movs	r0, #1
}
1a00147c:	b005      	add	sp, #20
1a00147e:	f85d fb04 	ldr.w	pc, [sp], #4
1a001482:	bf00      	nop
1a001484:	400a1000 	.word	0x400a1000

1a001488 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001488:	b108      	cbz	r0, 1a00148e <i2cInit+0x6>
      return FALSE;
1a00148a:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a00148c:	4770      	bx	lr
{
1a00148e:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a001490:	f7ff ffa6 	bl	1a0013e0 <i2cHardwareInit>
}
1a001494:	bd08      	pop	{r3, pc}

1a001496 <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001496:	b108      	cbz	r0, 1a00149c <i2cRead+0x6>
      return FALSE;
1a001498:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a00149a:	4770      	bx	lr
{
1a00149c:	b510      	push	{r4, lr}
1a00149e:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a0014a0:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a0014a4:	9403      	str	r4, [sp, #12]
1a0014a6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a0014aa:	9402      	str	r4, [sp, #8]
1a0014ac:	9c07      	ldr	r4, [sp, #28]
1a0014ae:	9401      	str	r4, [sp, #4]
1a0014b0:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a0014b4:	9400      	str	r4, [sp, #0]
1a0014b6:	f7ff ffab 	bl	1a001410 <i2cHardwareRead>
}
1a0014ba:	b004      	add	sp, #16
1a0014bc:	bd10      	pop	{r4, pc}

1a0014be <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0014be:	b108      	cbz	r0, 1a0014c4 <i2cWrite+0x6>
      return FALSE;
1a0014c0:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a0014c2:	4770      	bx	lr
{
1a0014c4:	b510      	push	{r4, lr}
1a0014c6:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a0014c8:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a0014cc:	9400      	str	r4, [sp, #0]
1a0014ce:	f7ff ffbd 	bl	1a00144c <i2cHardwareWrite>
}
1a0014d2:	b002      	add	sp, #8
1a0014d4:	bd10      	pop	{r4, pc}

1a0014d6 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a0014d6:	e7fe      	b.n	1a0014d6 <errorOcurred>

1a0014d8 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a0014d8:	4770      	bx	lr
1a0014da:	Address 0x000000001a0014da is out of bounds.


1a0014dc <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0014dc:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0014de:	2400      	movs	r4, #0
1a0014e0:	e001      	b.n	1a0014e6 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0014e2:	3401      	adds	r4, #1
1a0014e4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0014e6:	2c03      	cmp	r4, #3
1a0014e8:	d812      	bhi.n	1a001510 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0014ea:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0014ec:	4b09      	ldr	r3, [pc, #36]	; (1a001514 <TIMER0_IRQHandler+0x38>)
1a0014ee:	681a      	ldr	r2, [r3, #0]
1a0014f0:	f004 010f 	and.w	r1, r4, #15
1a0014f4:	2301      	movs	r3, #1
1a0014f6:	408b      	lsls	r3, r1
1a0014f8:	421a      	tst	r2, r3
1a0014fa:	d0f2      	beq.n	1a0014e2 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0014fc:	4b06      	ldr	r3, [pc, #24]	; (1a001518 <TIMER0_IRQHandler+0x3c>)
1a0014fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a001502:	2000      	movs	r0, #0
1a001504:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001506:	2301      	movs	r3, #1
1a001508:	40ab      	lsls	r3, r5
1a00150a:	4a02      	ldr	r2, [pc, #8]	; (1a001514 <TIMER0_IRQHandler+0x38>)
1a00150c:	6013      	str	r3, [r2, #0]
1a00150e:	e7e8      	b.n	1a0014e2 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a001510:	bd38      	pop	{r3, r4, r5, pc}
1a001512:	bf00      	nop
1a001514:	40084000 	.word	0x40084000
1a001518:	10000044 	.word	0x10000044

1a00151c <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a00151c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00151e:	2400      	movs	r4, #0
1a001520:	e001      	b.n	1a001526 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001522:	3401      	adds	r4, #1
1a001524:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001526:	2c03      	cmp	r4, #3
1a001528:	d813      	bhi.n	1a001552 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a00152a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00152c:	4b09      	ldr	r3, [pc, #36]	; (1a001554 <TIMER1_IRQHandler+0x38>)
1a00152e:	681a      	ldr	r2, [r3, #0]
1a001530:	f004 010f 	and.w	r1, r4, #15
1a001534:	2301      	movs	r3, #1
1a001536:	408b      	lsls	r3, r1
1a001538:	421a      	tst	r2, r3
1a00153a:	d0f2      	beq.n	1a001522 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00153c:	1d23      	adds	r3, r4, #4
1a00153e:	4a06      	ldr	r2, [pc, #24]	; (1a001558 <TIMER1_IRQHandler+0x3c>)
1a001540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001544:	2000      	movs	r0, #0
1a001546:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001548:	2301      	movs	r3, #1
1a00154a:	40ab      	lsls	r3, r5
1a00154c:	4a01      	ldr	r2, [pc, #4]	; (1a001554 <TIMER1_IRQHandler+0x38>)
1a00154e:	6013      	str	r3, [r2, #0]
1a001550:	e7e7      	b.n	1a001522 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a001552:	bd38      	pop	{r3, r4, r5, pc}
1a001554:	40085000 	.word	0x40085000
1a001558:	10000044 	.word	0x10000044

1a00155c <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a00155c:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00155e:	2400      	movs	r4, #0
1a001560:	e001      	b.n	1a001566 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001562:	3401      	adds	r4, #1
1a001564:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001566:	2c03      	cmp	r4, #3
1a001568:	d814      	bhi.n	1a001594 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a00156a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00156c:	4b0a      	ldr	r3, [pc, #40]	; (1a001598 <TIMER2_IRQHandler+0x3c>)
1a00156e:	681a      	ldr	r2, [r3, #0]
1a001570:	f004 010f 	and.w	r1, r4, #15
1a001574:	2301      	movs	r3, #1
1a001576:	408b      	lsls	r3, r1
1a001578:	421a      	tst	r2, r3
1a00157a:	d0f2      	beq.n	1a001562 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00157c:	f104 0308 	add.w	r3, r4, #8
1a001580:	4a06      	ldr	r2, [pc, #24]	; (1a00159c <TIMER2_IRQHandler+0x40>)
1a001582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001586:	2000      	movs	r0, #0
1a001588:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00158a:	2301      	movs	r3, #1
1a00158c:	40ab      	lsls	r3, r5
1a00158e:	4a02      	ldr	r2, [pc, #8]	; (1a001598 <TIMER2_IRQHandler+0x3c>)
1a001590:	6013      	str	r3, [r2, #0]
1a001592:	e7e6      	b.n	1a001562 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a001594:	bd38      	pop	{r3, r4, r5, pc}
1a001596:	bf00      	nop
1a001598:	400c3000 	.word	0x400c3000
1a00159c:	10000044 	.word	0x10000044

1a0015a0 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0015a0:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015a2:	2400      	movs	r4, #0
1a0015a4:	e001      	b.n	1a0015aa <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0015a6:	3401      	adds	r4, #1
1a0015a8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015aa:	2c03      	cmp	r4, #3
1a0015ac:	d814      	bhi.n	1a0015d8 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0015ae:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0015b0:	4b0a      	ldr	r3, [pc, #40]	; (1a0015dc <TIMER3_IRQHandler+0x3c>)
1a0015b2:	681a      	ldr	r2, [r3, #0]
1a0015b4:	f004 010f 	and.w	r1, r4, #15
1a0015b8:	2301      	movs	r3, #1
1a0015ba:	408b      	lsls	r3, r1
1a0015bc:	421a      	tst	r2, r3
1a0015be:	d0f2      	beq.n	1a0015a6 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0015c0:	f104 030c 	add.w	r3, r4, #12
1a0015c4:	4a06      	ldr	r2, [pc, #24]	; (1a0015e0 <TIMER3_IRQHandler+0x40>)
1a0015c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0015ca:	2000      	movs	r0, #0
1a0015cc:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0015ce:	2301      	movs	r3, #1
1a0015d0:	40ab      	lsls	r3, r5
1a0015d2:	4a02      	ldr	r2, [pc, #8]	; (1a0015dc <TIMER3_IRQHandler+0x3c>)
1a0015d4:	6013      	str	r3, [r2, #0]
1a0015d6:	e7e6      	b.n	1a0015a6 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0015d8:	bd38      	pop	{r3, r4, r5, pc}
1a0015da:	bf00      	nop
1a0015dc:	400c4000 	.word	0x400c4000
1a0015e0:	10000044 	.word	0x10000044

1a0015e4 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0015e4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0015e6:	4d0b      	ldr	r5, [pc, #44]	; (1a001614 <gpioObtainPinInit+0x30>)
1a0015e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0015ec:	182c      	adds	r4, r5, r0
1a0015ee:	5628      	ldrsb	r0, [r5, r0]
1a0015f0:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0015f2:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0015f6:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0015f8:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0015fc:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0015fe:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001602:	9b02      	ldr	r3, [sp, #8]
1a001604:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001606:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00160a:	9b03      	ldr	r3, [sp, #12]
1a00160c:	701a      	strb	r2, [r3, #0]
}
1a00160e:	bc30      	pop	{r4, r5}
1a001610:	4770      	bx	lr
1a001612:	bf00      	nop
1a001614:	1a0082e0 	.word	0x1a0082e0

1a001618 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a001618:	b570      	push	{r4, r5, r6, lr}
1a00161a:	b084      	sub	sp, #16
1a00161c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00161e:	2300      	movs	r3, #0
1a001620:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001624:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001628:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00162c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001630:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001634:	f10d 030b 	add.w	r3, sp, #11
1a001638:	9301      	str	r3, [sp, #4]
1a00163a:	ab03      	add	r3, sp, #12
1a00163c:	9300      	str	r3, [sp, #0]
1a00163e:	f10d 030d 	add.w	r3, sp, #13
1a001642:	f10d 020e 	add.w	r2, sp, #14
1a001646:	f10d 010f 	add.w	r1, sp, #15
1a00164a:	f7ff ffcb 	bl	1a0015e4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00164e:	2c05      	cmp	r4, #5
1a001650:	f200 80a5 	bhi.w	1a00179e <gpioInit+0x186>
1a001654:	e8df f004 	tbb	[pc, r4]
1a001658:	45278109 	.word	0x45278109
1a00165c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00165e:	4851      	ldr	r0, [pc, #324]	; (1a0017a4 <gpioInit+0x18c>)
1a001660:	f7ff fc5b 	bl	1a000f1a <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001664:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001666:	b004      	add	sp, #16
1a001668:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00166a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00166e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001672:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001676:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00167a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00167e:	494a      	ldr	r1, [pc, #296]	; (1a0017a8 <gpioInit+0x190>)
1a001680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001684:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001688:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00168c:	2001      	movs	r0, #1
1a00168e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001692:	4c44      	ldr	r4, [pc, #272]	; (1a0017a4 <gpioInit+0x18c>)
1a001694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001698:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00169c:	ea22 0201 	bic.w	r2, r2, r1
1a0016a0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0016a4:	e7df      	b.n	1a001666 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0016a6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0016aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0016ae:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0016b2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0016b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0016ba:	493b      	ldr	r1, [pc, #236]	; (1a0017a8 <gpioInit+0x190>)
1a0016bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0016c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0016c4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0016c8:	2001      	movs	r0, #1
1a0016ca:	fa00 f102 	lsl.w	r1, r0, r2
1a0016ce:	4c35      	ldr	r4, [pc, #212]	; (1a0017a4 <gpioInit+0x18c>)
1a0016d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0016d4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0016d8:	ea22 0201 	bic.w	r2, r2, r1
1a0016dc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0016e0:	e7c1      	b.n	1a001666 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0016e2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0016e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0016ea:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0016ee:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0016f2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0016f6:	492c      	ldr	r1, [pc, #176]	; (1a0017a8 <gpioInit+0x190>)
1a0016f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0016fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001700:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001704:	2001      	movs	r0, #1
1a001706:	fa00 f102 	lsl.w	r1, r0, r2
1a00170a:	4c26      	ldr	r4, [pc, #152]	; (1a0017a4 <gpioInit+0x18c>)
1a00170c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001710:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001714:	ea22 0201 	bic.w	r2, r2, r1
1a001718:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00171c:	e7a3      	b.n	1a001666 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00171e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001722:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001726:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00172a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00172e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001732:	491d      	ldr	r1, [pc, #116]	; (1a0017a8 <gpioInit+0x190>)
1a001734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001738:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00173c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001740:	2001      	movs	r0, #1
1a001742:	fa00 f102 	lsl.w	r1, r0, r2
1a001746:	4c17      	ldr	r4, [pc, #92]	; (1a0017a4 <gpioInit+0x18c>)
1a001748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00174c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001750:	ea22 0201 	bic.w	r2, r2, r1
1a001754:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001758:	e785      	b.n	1a001666 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00175a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00175e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001762:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001766:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00176a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00176e:	490e      	ldr	r1, [pc, #56]	; (1a0017a8 <gpioInit+0x190>)
1a001770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001774:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001778:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00177c:	2001      	movs	r0, #1
1a00177e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001782:	4b08      	ldr	r3, [pc, #32]	; (1a0017a4 <gpioInit+0x18c>)
1a001784:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001788:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a00178c:	4331      	orrs	r1, r6
1a00178e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001792:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001794:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001798:	2100      	movs	r1, #0
1a00179a:	5499      	strb	r1, [r3, r2]
1a00179c:	e763      	b.n	1a001666 <gpioInit+0x4e>
      ret_val = 0;
1a00179e:	2000      	movs	r0, #0
1a0017a0:	e761      	b.n	1a001666 <gpioInit+0x4e>
1a0017a2:	bf00      	nop
1a0017a4:	400f4000 	.word	0x400f4000
1a0017a8:	40086000 	.word	0x40086000

1a0017ac <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0017ac:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0017ae:	4b04      	ldr	r3, [pc, #16]	; (1a0017c0 <USB0_IRQHandler+0x14>)
1a0017b0:	681b      	ldr	r3, [r3, #0]
1a0017b2:	681b      	ldr	r3, [r3, #0]
1a0017b4:	68db      	ldr	r3, [r3, #12]
1a0017b6:	4a03      	ldr	r2, [pc, #12]	; (1a0017c4 <USB0_IRQHandler+0x18>)
1a0017b8:	6810      	ldr	r0, [r2, #0]
1a0017ba:	4798      	blx	r3
}
1a0017bc:	bd08      	pop	{r3, pc}
1a0017be:	bf00      	nop
1a0017c0:	10000c30 	.word	0x10000c30
1a0017c4:	10000a94 	.word	0x10000a94

1a0017c8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0017c8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0017ca:	f7ff fb05 	bl	1a000dd8 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0017ce:	4b3a      	ldr	r3, [pc, #232]	; (1a0018b8 <boardInit+0xf0>)
1a0017d0:	6818      	ldr	r0, [r3, #0]
1a0017d2:	f7ff fd8d 	bl	1a0012f0 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a0017d6:	2001      	movs	r0, #1
1a0017d8:	2100      	movs	r1, #0
1a0017da:	f7ff fda9 	bl	1a001330 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a0017de:	2105      	movs	r1, #5
1a0017e0:	2000      	movs	r0, #0
1a0017e2:	f7ff ff19 	bl	1a001618 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a0017e6:	2100      	movs	r1, #0
1a0017e8:	2024      	movs	r0, #36	; 0x24
1a0017ea:	f7ff ff15 	bl	1a001618 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a0017ee:	2100      	movs	r1, #0
1a0017f0:	2025      	movs	r0, #37	; 0x25
1a0017f2:	f7ff ff11 	bl	1a001618 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a0017f6:	2100      	movs	r1, #0
1a0017f8:	2026      	movs	r0, #38	; 0x26
1a0017fa:	f7ff ff0d 	bl	1a001618 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a0017fe:	2100      	movs	r1, #0
1a001800:	2027      	movs	r0, #39	; 0x27
1a001802:	f7ff ff09 	bl	1a001618 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a001806:	2101      	movs	r1, #1
1a001808:	2028      	movs	r0, #40	; 0x28
1a00180a:	f7ff ff05 	bl	1a001618 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a00180e:	2101      	movs	r1, #1
1a001810:	2029      	movs	r0, #41	; 0x29
1a001812:	f7ff ff01 	bl	1a001618 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a001816:	2101      	movs	r1, #1
1a001818:	202a      	movs	r0, #42	; 0x2a
1a00181a:	f7ff fefd 	bl	1a001618 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a00181e:	2101      	movs	r1, #1
1a001820:	202b      	movs	r0, #43	; 0x2b
1a001822:	f7ff fef9 	bl	1a001618 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a001826:	2101      	movs	r1, #1
1a001828:	202c      	movs	r0, #44	; 0x2c
1a00182a:	f7ff fef5 	bl	1a001618 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a00182e:	2101      	movs	r1, #1
1a001830:	202d      	movs	r0, #45	; 0x2d
1a001832:	f7ff fef1 	bl	1a001618 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a001836:	2100      	movs	r1, #0
1a001838:	202e      	movs	r0, #46	; 0x2e
1a00183a:	f7ff feed 	bl	1a001618 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a00183e:	2100      	movs	r1, #0
1a001840:	202f      	movs	r0, #47	; 0x2f
1a001842:	f7ff fee9 	bl	1a001618 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a001846:	2100      	movs	r1, #0
1a001848:	2030      	movs	r0, #48	; 0x30
1a00184a:	f7ff fee5 	bl	1a001618 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a00184e:	2100      	movs	r1, #0
1a001850:	2031      	movs	r0, #49	; 0x31
1a001852:	f7ff fee1 	bl	1a001618 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a001856:	2100      	movs	r1, #0
1a001858:	2032      	movs	r0, #50	; 0x32
1a00185a:	f7ff fedd 	bl	1a001618 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a00185e:	2100      	movs	r1, #0
1a001860:	2033      	movs	r0, #51	; 0x33
1a001862:	f7ff fed9 	bl	1a001618 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a001866:	2100      	movs	r1, #0
1a001868:	2034      	movs	r0, #52	; 0x34
1a00186a:	f7ff fed5 	bl	1a001618 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a00186e:	2100      	movs	r1, #0
1a001870:	2035      	movs	r0, #53	; 0x35
1a001872:	f7ff fed1 	bl	1a001618 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a001876:	2101      	movs	r1, #1
1a001878:	2036      	movs	r0, #54	; 0x36
1a00187a:	f7ff fecd 	bl	1a001618 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a00187e:	2101      	movs	r1, #1
1a001880:	2037      	movs	r0, #55	; 0x37
1a001882:	f7ff fec9 	bl	1a001618 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a001886:	2101      	movs	r1, #1
1a001888:	2038      	movs	r0, #56	; 0x38
1a00188a:	f7ff fec5 	bl	1a001618 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a00188e:	2101      	movs	r1, #1
1a001890:	2039      	movs	r0, #57	; 0x39
1a001892:	f7ff fec1 	bl	1a001618 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a001896:	2101      	movs	r1, #1
1a001898:	203a      	movs	r0, #58	; 0x3a
1a00189a:	f7ff febd 	bl	1a001618 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a00189e:	2101      	movs	r1, #1
1a0018a0:	203b      	movs	r0, #59	; 0x3b
1a0018a2:	f7ff feb9 	bl	1a001618 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0018a6:	2101      	movs	r1, #1
1a0018a8:	203c      	movs	r0, #60	; 0x3c
1a0018aa:	f7ff feb5 	bl	1a001618 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a0018ae:	2101      	movs	r1, #1
1a0018b0:	203d      	movs	r0, #61	; 0x3d
1a0018b2:	f7ff feb1 	bl	1a001618 <gpioInit>

}
1a0018b6:	bd08      	pop	{r3, pc}
1a0018b8:	10000c24 	.word	0x10000c24

1a0018bc <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a0018bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0018c0:	4680      	mov	r8, r0
1a0018c2:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a0018c4:	f7ff fd22 	bl	1a00130c <tickRead>
1a0018c8:	4606      	mov	r6, r0
1a0018ca:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a0018cc:	f7ff fd1e 	bl	1a00130c <tickRead>
1a0018d0:	1b84      	subs	r4, r0, r6
1a0018d2:	eb61 0507 	sbc.w	r5, r1, r7
1a0018d6:	4b06      	ldr	r3, [pc, #24]	; (1a0018f0 <delay+0x34>)
1a0018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0018dc:	4640      	mov	r0, r8
1a0018de:	4649      	mov	r1, r9
1a0018e0:	f001 f80c 	bl	1a0028fc <__aeabi_uldivmod>
1a0018e4:	428d      	cmp	r5, r1
1a0018e6:	bf08      	it	eq
1a0018e8:	4284      	cmpeq	r4, r0
1a0018ea:	d3ef      	bcc.n	1a0018cc <delay+0x10>
}
1a0018ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0018f0:	10000c28 	.word	0x10000c28

1a0018f4 <mpu9250InitializeControlStructure>:

/*==================[internal functions definition]==========================*/

static int8_t mpu9250InitializeControlStructure( void )
{
	control._tempScale = 333.87f;
1a0018f4:	4b1b      	ldr	r3, [pc, #108]	; (1a001964 <mpu9250InitializeControlStructure+0x70>)
1a0018f6:	4a1c      	ldr	r2, [pc, #112]	; (1a001968 <mpu9250InitializeControlStructure+0x74>)
1a0018f8:	619a      	str	r2, [r3, #24]
	control._tempOffset = 21.0f;
1a0018fa:	4a1c      	ldr	r2, [pc, #112]	; (1a00196c <mpu9250InitializeControlStructure+0x78>)
1a0018fc:	61da      	str	r2, [r3, #28]
	control._numSamples = 100;
1a0018fe:	2264      	movs	r2, #100	; 0x64
1a001900:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	control._axs = 1.0f;
1a001904:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a001908:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	control._ays = 1.0f;
1a00190c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	control._azs = 1.0f;
1a001910:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	control._maxCounts = 1000;
1a001914:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a001918:	f8a3 10d8 	strh.w	r1, [r3, #216]	; 0xd8
	control._deltaThresh = 0.3f;
1a00191c:	4914      	ldr	r1, [pc, #80]	; (1a001970 <mpu9250InitializeControlStructure+0x7c>)
1a00191e:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
	control._coeff = 8;
1a001922:	2108      	movs	r1, #8
1a001924:	f883 10e0 	strb.w	r1, [r3, #224]	; 0xe0
	control._hxs = 1.0f;
1a001928:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	control._hys = 1.0f;
1a00192c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	control._hzs = 1.0f;
1a001930:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	control.tX[0] = 0;
1a001934:	2200      	movs	r2, #0
1a001936:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	control.tX[1] = 1;
1a00193a:	2101      	movs	r1, #1
1a00193c:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
	control.tX[2] = 0;
1a001940:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	control.tY[0] = 1;
1a001944:	f8a3 1146 	strh.w	r1, [r3, #326]	; 0x146
	control.tY[1] = 0;
1a001948:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
	control.tY[2] = 0;
1a00194c:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	control.tZ[0] = 0;
1a001950:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	control.tZ[1] = 0;
1a001954:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
	control.tZ[2] = -1;
1a001958:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a00195c:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
1a001960:	4770      	bx	lr
1a001962:	bf00      	nop
1a001964:	10000a98 	.word	0x10000a98
1a001968:	43a6ef5c 	.word	0x43a6ef5c
1a00196c:	41a80000 	.word	0x41a80000
1a001970:	3e99999a 	.word	0x3e99999a

1a001974 <mpu9250ReadRegisters>:
      return -1;
	}
}

static int8_t mpu9250ReadRegisters( uint8_t subAddress, uint8_t count )
{
1a001974:	b510      	push	{r4, lr}
1a001976:	b086      	sub	sp, #24
1a001978:	aa06      	add	r2, sp, #24
1a00197a:	f802 0d01 	strb.w	r0, [r2, #-1]!
	if( i2cRead( I2C0,control.address,&subAddress,1,TRUE,control._buffer,count,TRUE) ){
1a00197e:	4809      	ldr	r0, [pc, #36]	; (1a0019a4 <mpu9250ReadRegisters+0x30>)
1a001980:	f810 4b24 	ldrb.w	r4, [r0], #36
1a001984:	2301      	movs	r3, #1
1a001986:	9303      	str	r3, [sp, #12]
1a001988:	9102      	str	r1, [sp, #8]
1a00198a:	9001      	str	r0, [sp, #4]
1a00198c:	9300      	str	r3, [sp, #0]
1a00198e:	4621      	mov	r1, r4
1a001990:	2000      	movs	r0, #0
1a001992:	f7ff fd80 	bl	1a001496 <i2cRead>
1a001996:	b110      	cbz	r0, 1a00199e <mpu9250ReadRegisters+0x2a>
		return 1;
1a001998:	2001      	movs	r0, #1
	} else {
		return -1;
	}
}
1a00199a:	b006      	add	sp, #24
1a00199c:	bd10      	pop	{r4, pc}
		return -1;
1a00199e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0019a2:	e7fa      	b.n	1a00199a <mpu9250ReadRegisters+0x26>
1a0019a4:	10000a98 	.word	0x10000a98

1a0019a8 <mpu9250WhoAmI>:
		return -6;
	}
}

static int8_t mpu9250WhoAmI( void )
{
1a0019a8:	b508      	push	{r3, lr}
	// read the WHO AM I register
	if (mpu9250ReadRegisters(MPU9250_WHO_AM_I,1) < 0) {
1a0019aa:	2101      	movs	r1, #1
1a0019ac:	2075      	movs	r0, #117	; 0x75
1a0019ae:	f7ff ffe1 	bl	1a001974 <mpu9250ReadRegisters>
1a0019b2:	2800      	cmp	r0, #0
1a0019b4:	db03      	blt.n	1a0019be <mpu9250WhoAmI+0x16>
		return -1;
	}
	// return the register value
	return control._buffer[0];
1a0019b6:	4b03      	ldr	r3, [pc, #12]	; (1a0019c4 <mpu9250WhoAmI+0x1c>)
1a0019b8:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a0019bc:	bd08      	pop	{r3, pc}
		return -1;
1a0019be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0019c2:	e7fb      	b.n	1a0019bc <mpu9250WhoAmI+0x14>
1a0019c4:	10000a98 	.word	0x10000a98

1a0019c8 <mpu9250WriteRegister>:
{
1a0019c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0019ca:	b085      	sub	sp, #20
1a0019cc:	4606      	mov	r6, r0
1a0019ce:	460c      	mov	r4, r1
	transmitDataBuffer[0] = subAddress;
1a0019d0:	f88d 000c 	strb.w	r0, [sp, #12]
	transmitDataBuffer[1] = data;
1a0019d4:	f88d 100d 	strb.w	r1, [sp, #13]
	i2cWrite(I2C0, control.address, transmitDataBuffer, 2, TRUE);
1a0019d8:	4d0d      	ldr	r5, [pc, #52]	; (1a001a10 <mpu9250WriteRegister+0x48>)
1a0019da:	7829      	ldrb	r1, [r5, #0]
1a0019dc:	2701      	movs	r7, #1
1a0019de:	9700      	str	r7, [sp, #0]
1a0019e0:	2302      	movs	r3, #2
1a0019e2:	aa03      	add	r2, sp, #12
1a0019e4:	2000      	movs	r0, #0
1a0019e6:	f7ff fd6a 	bl	1a0014be <i2cWrite>
	delay(10);
1a0019ea:	200a      	movs	r0, #10
1a0019ec:	2100      	movs	r1, #0
1a0019ee:	f7ff ff65 	bl	1a0018bc <delay>
	mpu9250ReadRegisters(subAddress,1);
1a0019f2:	4639      	mov	r1, r7
1a0019f4:	4630      	mov	r0, r6
1a0019f6:	f7ff ffbd 	bl	1a001974 <mpu9250ReadRegisters>
	if(control._buffer[0] == data) {
1a0019fa:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
1a0019fe:	42a3      	cmp	r3, r4
1a001a00:	d102      	bne.n	1a001a08 <mpu9250WriteRegister+0x40>
      return 1;
1a001a02:	4638      	mov	r0, r7
}
1a001a04:	b005      	add	sp, #20
1a001a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return -1;
1a001a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001a0c:	e7fa      	b.n	1a001a04 <mpu9250WriteRegister+0x3c>
1a001a0e:	bf00      	nop
1a001a10:	10000a98 	.word	0x10000a98

1a001a14 <mpu9250ReadAK8963Registers>:
	// return the register value
	return control._buffer[0];
}

static int8_t mpu9250ReadAK8963Registers( uint8_t subAddress, uint8_t count )
{
1a001a14:	b538      	push	{r3, r4, r5, lr}
1a001a16:	4605      	mov	r5, r0
1a001a18:	460c      	mov	r4, r1
	// set slave 0 to the AK8963 and set for read
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR | MPU9250_I2C_READ_FLAG) < 0) {
1a001a1a:	218c      	movs	r1, #140	; 0x8c
1a001a1c:	2025      	movs	r0, #37	; 0x25
1a001a1e:	f7ff ffd3 	bl	1a0019c8 <mpu9250WriteRegister>
1a001a22:	2800      	cmp	r0, #0
1a001a24:	db18      	blt.n	1a001a58 <mpu9250ReadAK8963Registers+0x44>
		return -1;
	}
	// set the register to the desired AK8963 sub address
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a001a26:	4629      	mov	r1, r5
1a001a28:	2026      	movs	r0, #38	; 0x26
1a001a2a:	f7ff ffcd 	bl	1a0019c8 <mpu9250WriteRegister>
1a001a2e:	2800      	cmp	r0, #0
1a001a30:	db15      	blt.n	1a001a5e <mpu9250ReadAK8963Registers+0x4a>
		return -2;
	}
	// enable I2C and request the bytes
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | count) < 0) {
1a001a32:	f044 0180 	orr.w	r1, r4, #128	; 0x80
1a001a36:	2027      	movs	r0, #39	; 0x27
1a001a38:	f7ff ffc6 	bl	1a0019c8 <mpu9250WriteRegister>
1a001a3c:	2800      	cmp	r0, #0
1a001a3e:	db11      	blt.n	1a001a64 <mpu9250ReadAK8963Registers+0x50>
		return -3;
	}
	delay(1); // takes some time for these registers to fill
1a001a40:	2001      	movs	r0, #1
1a001a42:	2100      	movs	r1, #0
1a001a44:	f7ff ff3a 	bl	1a0018bc <delay>
	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	control._status = mpu9250ReadRegisters(MPU9250_EXT_SENS_DATA_00,count);
1a001a48:	4621      	mov	r1, r4
1a001a4a:	2049      	movs	r0, #73	; 0x49
1a001a4c:	f7ff ff92 	bl	1a001974 <mpu9250ReadRegisters>
1a001a50:	4b06      	ldr	r3, [pc, #24]	; (1a001a6c <mpu9250ReadAK8963Registers+0x58>)
1a001a52:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	return control._status;
}
1a001a56:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001a5c:	e7fb      	b.n	1a001a56 <mpu9250ReadAK8963Registers+0x42>
		return -2;
1a001a5e:	f06f 0001 	mvn.w	r0, #1
1a001a62:	e7f8      	b.n	1a001a56 <mpu9250ReadAK8963Registers+0x42>
		return -3;
1a001a64:	f06f 0002 	mvn.w	r0, #2
1a001a68:	e7f5      	b.n	1a001a56 <mpu9250ReadAK8963Registers+0x42>
1a001a6a:	bf00      	nop
1a001a6c:	10000a98 	.word	0x10000a98

1a001a70 <mpu9250WhoAmIAK8963>:
{
1a001a70:	b508      	push	{r3, lr}
	if (mpu9250ReadAK8963Registers(MPU9250_AK8963_WHO_AM_I,1) < 0) {
1a001a72:	2101      	movs	r1, #1
1a001a74:	2000      	movs	r0, #0
1a001a76:	f7ff ffcd 	bl	1a001a14 <mpu9250ReadAK8963Registers>
1a001a7a:	2800      	cmp	r0, #0
1a001a7c:	db03      	blt.n	1a001a86 <mpu9250WhoAmIAK8963+0x16>
	return control._buffer[0];
1a001a7e:	4b03      	ldr	r3, [pc, #12]	; (1a001a8c <mpu9250WhoAmIAK8963+0x1c>)
1a001a80:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a001a84:	bd08      	pop	{r3, pc}
		return -1;
1a001a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001a8a:	e7fb      	b.n	1a001a84 <mpu9250WhoAmIAK8963+0x14>
1a001a8c:	10000a98 	.word	0x10000a98

1a001a90 <mpu9250WriteAK8963Register>:
{
1a001a90:	b538      	push	{r3, r4, r5, lr}
1a001a92:	4604      	mov	r4, r0
1a001a94:	460d      	mov	r5, r1
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR) < 0) {
1a001a96:	210c      	movs	r1, #12
1a001a98:	2025      	movs	r0, #37	; 0x25
1a001a9a:	f7ff ff95 	bl	1a0019c8 <mpu9250WriteRegister>
1a001a9e:	2800      	cmp	r0, #0
1a001aa0:	db1e      	blt.n	1a001ae0 <mpu9250WriteAK8963Register+0x50>
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a001aa2:	4621      	mov	r1, r4
1a001aa4:	2026      	movs	r0, #38	; 0x26
1a001aa6:	f7ff ff8f 	bl	1a0019c8 <mpu9250WriteRegister>
1a001aaa:	2800      	cmp	r0, #0
1a001aac:	db1b      	blt.n	1a001ae6 <mpu9250WriteAK8963Register+0x56>
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_DO, data) < 0) {
1a001aae:	4629      	mov	r1, r5
1a001ab0:	2063      	movs	r0, #99	; 0x63
1a001ab2:	f7ff ff89 	bl	1a0019c8 <mpu9250WriteRegister>
1a001ab6:	2800      	cmp	r0, #0
1a001ab8:	db18      	blt.n	1a001aec <mpu9250WriteAK8963Register+0x5c>
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | (uint8_t)1) < 0) {
1a001aba:	2181      	movs	r1, #129	; 0x81
1a001abc:	2027      	movs	r0, #39	; 0x27
1a001abe:	f7ff ff83 	bl	1a0019c8 <mpu9250WriteRegister>
1a001ac2:	2800      	cmp	r0, #0
1a001ac4:	db15      	blt.n	1a001af2 <mpu9250WriteAK8963Register+0x62>
	if (mpu9250ReadAK8963Registers(subAddress,1) < 0) {
1a001ac6:	2101      	movs	r1, #1
1a001ac8:	4620      	mov	r0, r4
1a001aca:	f7ff ffa3 	bl	1a001a14 <mpu9250ReadAK8963Registers>
1a001ace:	2800      	cmp	r0, #0
1a001ad0:	db12      	blt.n	1a001af8 <mpu9250WriteAK8963Register+0x68>
	if(control._buffer[0] == data) {
1a001ad2:	4b0c      	ldr	r3, [pc, #48]	; (1a001b04 <mpu9250WriteAK8963Register+0x74>)
1a001ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a001ad8:	42ab      	cmp	r3, r5
1a001ada:	d110      	bne.n	1a001afe <mpu9250WriteAK8963Register+0x6e>
		return 1;
1a001adc:	2001      	movs	r0, #1
}
1a001ade:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001ae4:	e7fb      	b.n	1a001ade <mpu9250WriteAK8963Register+0x4e>
		return -2;
1a001ae6:	f06f 0001 	mvn.w	r0, #1
1a001aea:	e7f8      	b.n	1a001ade <mpu9250WriteAK8963Register+0x4e>
		return -3;
1a001aec:	f06f 0002 	mvn.w	r0, #2
1a001af0:	e7f5      	b.n	1a001ade <mpu9250WriteAK8963Register+0x4e>
		return -4;
1a001af2:	f06f 0003 	mvn.w	r0, #3
1a001af6:	e7f2      	b.n	1a001ade <mpu9250WriteAK8963Register+0x4e>
		return -5;
1a001af8:	f06f 0004 	mvn.w	r0, #4
1a001afc:	e7ef      	b.n	1a001ade <mpu9250WriteAK8963Register+0x4e>
		return -6;
1a001afe:	f06f 0005 	mvn.w	r0, #5
1a001b02:	e7ec      	b.n	1a001ade <mpu9250WriteAK8963Register+0x4e>
1a001b04:	10000a98 	.word	0x10000a98

1a001b08 <mpu9250SetGyroRange>:
	}
	return 1;
}

static int8_t mpu9250SetGyroRange( MPU9250_GyroRange_t range )
{
1a001b08:	b510      	push	{r4, lr}
1a001b0a:	4604      	mov	r4, r0
	switch(range) {
1a001b0c:	2803      	cmp	r0, #3
1a001b0e:	d80c      	bhi.n	1a001b2a <mpu9250SetGyroRange+0x22>
1a001b10:	e8df f000 	tbb	[pc, r0]
1a001b14:	241a1002 	.word	0x241a1002
		case MPU9250_GYRO_RANGE_250DPS: {
		  // setting the gyro range to 250DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_250DPS) < 0){
1a001b18:	2100      	movs	r1, #0
1a001b1a:	201b      	movs	r0, #27
1a001b1c:	f7ff ff54 	bl	1a0019c8 <mpu9250WriteRegister>
1a001b20:	2800      	cmp	r0, #0
1a001b22:	db25      	blt.n	1a001b70 <mpu9250SetGyroRange+0x68>
			return -1;
		  }
        // setting the gyro scale to 250DPS
		  control._gyroScale = 250.0f/32767.5f * MPU9250_D2R; 
1a001b24:	4b18      	ldr	r3, [pc, #96]	; (1a001b88 <mpu9250SetGyroRange+0x80>)
1a001b26:	4a19      	ldr	r2, [pc, #100]	; (1a001b8c <mpu9250SetGyroRange+0x84>)
1a001b28:	609a      	str	r2, [r3, #8]
        // setting the gyro scale to 2000DPS
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
		  break;
		}
	}
	control._gyroRange = range;
1a001b2a:	4b17      	ldr	r3, [pc, #92]	; (1a001b88 <mpu9250SetGyroRange+0x80>)
1a001b2c:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	return 1;
1a001b30:	2001      	movs	r0, #1
}
1a001b32:	bd10      	pop	{r4, pc}
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_500DPS) < 0){
1a001b34:	2108      	movs	r1, #8
1a001b36:	201b      	movs	r0, #27
1a001b38:	f7ff ff46 	bl	1a0019c8 <mpu9250WriteRegister>
1a001b3c:	2800      	cmp	r0, #0
1a001b3e:	db1a      	blt.n	1a001b76 <mpu9250SetGyroRange+0x6e>
		  control._gyroScale = 500.0f/32767.5f * MPU9250_D2R; 
1a001b40:	4b11      	ldr	r3, [pc, #68]	; (1a001b88 <mpu9250SetGyroRange+0x80>)
1a001b42:	4a13      	ldr	r2, [pc, #76]	; (1a001b90 <mpu9250SetGyroRange+0x88>)
1a001b44:	609a      	str	r2, [r3, #8]
		  break;
1a001b46:	e7f0      	b.n	1a001b2a <mpu9250SetGyroRange+0x22>
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_1000DPS) < 0){
1a001b48:	2110      	movs	r1, #16
1a001b4a:	201b      	movs	r0, #27
1a001b4c:	f7ff ff3c 	bl	1a0019c8 <mpu9250WriteRegister>
1a001b50:	2800      	cmp	r0, #0
1a001b52:	db13      	blt.n	1a001b7c <mpu9250SetGyroRange+0x74>
		  control._gyroScale = 1000.0f/32767.5f * MPU9250_D2R; 
1a001b54:	4b0c      	ldr	r3, [pc, #48]	; (1a001b88 <mpu9250SetGyroRange+0x80>)
1a001b56:	4a0f      	ldr	r2, [pc, #60]	; (1a001b94 <mpu9250SetGyroRange+0x8c>)
1a001b58:	609a      	str	r2, [r3, #8]
		  break;
1a001b5a:	e7e6      	b.n	1a001b2a <mpu9250SetGyroRange+0x22>
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0){
1a001b5c:	2118      	movs	r1, #24
1a001b5e:	201b      	movs	r0, #27
1a001b60:	f7ff ff32 	bl	1a0019c8 <mpu9250WriteRegister>
1a001b64:	2800      	cmp	r0, #0
1a001b66:	db0c      	blt.n	1a001b82 <mpu9250SetGyroRange+0x7a>
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
1a001b68:	4b07      	ldr	r3, [pc, #28]	; (1a001b88 <mpu9250SetGyroRange+0x80>)
1a001b6a:	4a0b      	ldr	r2, [pc, #44]	; (1a001b98 <mpu9250SetGyroRange+0x90>)
1a001b6c:	609a      	str	r2, [r3, #8]
		  break;
1a001b6e:	e7dc      	b.n	1a001b2a <mpu9250SetGyroRange+0x22>
			return -1;
1a001b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b74:	e7dd      	b.n	1a001b32 <mpu9250SetGyroRange+0x2a>
			return -1;
1a001b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b7a:	e7da      	b.n	1a001b32 <mpu9250SetGyroRange+0x2a>
			return -1;
1a001b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b80:	e7d7      	b.n	1a001b32 <mpu9250SetGyroRange+0x2a>
			return -1;
1a001b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b86:	e7d4      	b.n	1a001b32 <mpu9250SetGyroRange+0x2a>
1a001b88:	10000a98 	.word	0x10000a98
1a001b8c:	390ba0e4 	.word	0x390ba0e4
1a001b90:	398ba0e4 	.word	0x398ba0e4
1a001b94:	3a0ba0e4 	.word	0x3a0ba0e4
1a001b98:	3a8ba0e4 	.word	0x3a8ba0e4

1a001b9c <mpu9250SetDlpfBandwidth>:

static int8_t mpu9250SetDlpfBandwidth( MPU9250_DlpfBandwidth_t bandwidth )
{
1a001b9c:	b510      	push	{r4, lr}
1a001b9e:	4604      	mov	r4, r0
	switch (bandwidth) {
1a001ba0:	2805      	cmp	r0, #5
1a001ba2:	d810      	bhi.n	1a001bc6 <mpu9250SetDlpfBandwidth+0x2a>
1a001ba4:	e8df f000 	tbb	[pc, r0]
1a001ba8:	32231403 	.word	0x32231403
1a001bac:	5041      	.short	0x5041
		case MPU9250_DLPF_BANDWIDTH_184HZ: {
         // setting accel bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) { 
1a001bae:	2101      	movs	r1, #1
1a001bb0:	201d      	movs	r0, #29
1a001bb2:	f7ff ff09 	bl	1a0019c8 <mpu9250WriteRegister>
1a001bb6:	2800      	cmp	r0, #0
1a001bb8:	db55      	blt.n	1a001c66 <mpu9250SetDlpfBandwidth+0xca>
				return -1;
			}
         // setting gyro bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a001bba:	2101      	movs	r1, #1
1a001bbc:	201a      	movs	r0, #26
1a001bbe:	f7ff ff03 	bl	1a0019c8 <mpu9250WriteRegister>
1a001bc2:	2800      	cmp	r0, #0
1a001bc4:	db52      	blt.n	1a001c6c <mpu9250SetDlpfBandwidth+0xd0>
				return -2;
			}
			break;
		}
	}
	control._bandwidth = bandwidth;
1a001bc6:	4b32      	ldr	r3, [pc, #200]	; (1a001c90 <mpu9250SetDlpfBandwidth+0xf4>)
1a001bc8:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
	return 1;
1a001bcc:	2001      	movs	r0, #1
}
1a001bce:	bd10      	pop	{r4, pc}
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_92) < 0) { 
1a001bd0:	2102      	movs	r1, #2
1a001bd2:	201d      	movs	r0, #29
1a001bd4:	f7ff fef8 	bl	1a0019c8 <mpu9250WriteRegister>
1a001bd8:	2800      	cmp	r0, #0
1a001bda:	db4a      	blt.n	1a001c72 <mpu9250SetDlpfBandwidth+0xd6>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_92) < 0) { 
1a001bdc:	2102      	movs	r1, #2
1a001bde:	201a      	movs	r0, #26
1a001be0:	f7ff fef2 	bl	1a0019c8 <mpu9250WriteRegister>
1a001be4:	2800      	cmp	r0, #0
1a001be6:	daee      	bge.n	1a001bc6 <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a001be8:	f06f 0001 	mvn.w	r0, #1
1a001bec:	e7ef      	b.n	1a001bce <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_41) < 0) { 
1a001bee:	2103      	movs	r1, #3
1a001bf0:	201d      	movs	r0, #29
1a001bf2:	f7ff fee9 	bl	1a0019c8 <mpu9250WriteRegister>
1a001bf6:	2800      	cmp	r0, #0
1a001bf8:	db3e      	blt.n	1a001c78 <mpu9250SetDlpfBandwidth+0xdc>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_41) < 0) { 
1a001bfa:	2103      	movs	r1, #3
1a001bfc:	201a      	movs	r0, #26
1a001bfe:	f7ff fee3 	bl	1a0019c8 <mpu9250WriteRegister>
1a001c02:	2800      	cmp	r0, #0
1a001c04:	dadf      	bge.n	1a001bc6 <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a001c06:	f06f 0001 	mvn.w	r0, #1
1a001c0a:	e7e0      	b.n	1a001bce <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_20) < 0) { 
1a001c0c:	2104      	movs	r1, #4
1a001c0e:	201d      	movs	r0, #29
1a001c10:	f7ff feda 	bl	1a0019c8 <mpu9250WriteRegister>
1a001c14:	2800      	cmp	r0, #0
1a001c16:	db32      	blt.n	1a001c7e <mpu9250SetDlpfBandwidth+0xe2>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_20) < 0) { 
1a001c18:	2104      	movs	r1, #4
1a001c1a:	201a      	movs	r0, #26
1a001c1c:	f7ff fed4 	bl	1a0019c8 <mpu9250WriteRegister>
1a001c20:	2800      	cmp	r0, #0
1a001c22:	dad0      	bge.n	1a001bc6 <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a001c24:	f06f 0001 	mvn.w	r0, #1
1a001c28:	e7d1      	b.n	1a001bce <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_10) < 0) { 
1a001c2a:	2105      	movs	r1, #5
1a001c2c:	201d      	movs	r0, #29
1a001c2e:	f7ff fecb 	bl	1a0019c8 <mpu9250WriteRegister>
1a001c32:	2800      	cmp	r0, #0
1a001c34:	db26      	blt.n	1a001c84 <mpu9250SetDlpfBandwidth+0xe8>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_10) < 0) { 
1a001c36:	2105      	movs	r1, #5
1a001c38:	201a      	movs	r0, #26
1a001c3a:	f7ff fec5 	bl	1a0019c8 <mpu9250WriteRegister>
1a001c3e:	2800      	cmp	r0, #0
1a001c40:	dac1      	bge.n	1a001bc6 <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a001c42:	f06f 0001 	mvn.w	r0, #1
1a001c46:	e7c2      	b.n	1a001bce <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_5) < 0) { 
1a001c48:	2106      	movs	r1, #6
1a001c4a:	201d      	movs	r0, #29
1a001c4c:	f7ff febc 	bl	1a0019c8 <mpu9250WriteRegister>
1a001c50:	2800      	cmp	r0, #0
1a001c52:	db1a      	blt.n	1a001c8a <mpu9250SetDlpfBandwidth+0xee>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_5) < 0) { 
1a001c54:	2106      	movs	r1, #6
1a001c56:	201a      	movs	r0, #26
1a001c58:	f7ff feb6 	bl	1a0019c8 <mpu9250WriteRegister>
1a001c5c:	2800      	cmp	r0, #0
1a001c5e:	dab2      	bge.n	1a001bc6 <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a001c60:	f06f 0001 	mvn.w	r0, #1
1a001c64:	e7b3      	b.n	1a001bce <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a001c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001c6a:	e7b0      	b.n	1a001bce <mpu9250SetDlpfBandwidth+0x32>
				return -2;
1a001c6c:	f06f 0001 	mvn.w	r0, #1
1a001c70:	e7ad      	b.n	1a001bce <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a001c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001c76:	e7aa      	b.n	1a001bce <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a001c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001c7c:	e7a7      	b.n	1a001bce <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a001c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001c82:	e7a4      	b.n	1a001bce <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a001c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001c88:	e7a1      	b.n	1a001bce <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a001c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001c8e:	e79e      	b.n	1a001bce <mpu9250SetDlpfBandwidth+0x32>
1a001c90:	10000a98 	.word	0x10000a98

1a001c94 <mpu9250SetSrd>:

static int8_t mpu9250SetSrd( uint8_t srd )
{
1a001c94:	b510      	push	{r4, lr}
1a001c96:	4604      	mov	r4, r0
	/* setting the sample rate divider to 19 to facilitate setting up 
      magnetometer */
   // setting the sample rate divider
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 19) < 0) {
1a001c98:	2113      	movs	r1, #19
1a001c9a:	2019      	movs	r0, #25
1a001c9c:	f7ff fe94 	bl	1a0019c8 <mpu9250WriteRegister>
1a001ca0:	2800      	cmp	r0, #0
1a001ca2:	db3d      	blt.n	1a001d20 <mpu9250SetSrd+0x8c>
		return -1;
	}
	if (srd > 9) {
1a001ca4:	2c09      	cmp	r4, #9
1a001ca6:	d922      	bls.n	1a001cee <mpu9250SetSrd+0x5a>
		// set AK8963 to Power Down
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a001ca8:	2100      	movs	r1, #0
1a001caa:	200a      	movs	r0, #10
1a001cac:	f7ff fef0 	bl	1a001a90 <mpu9250WriteAK8963Register>
1a001cb0:	2800      	cmp	r0, #0
1a001cb2:	db38      	blt.n	1a001d26 <mpu9250SetSrd+0x92>
			return -2;
		}
		delay(100); // long wait between AK8963 mode changes
1a001cb4:	2064      	movs	r0, #100	; 0x64
1a001cb6:	2100      	movs	r1, #0
1a001cb8:	f7ff fe00 	bl	1a0018bc <delay>
		// set AK8963 to 16 bit resolution, 8 Hz update rate
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS1) < 0) {
1a001cbc:	2112      	movs	r1, #18
1a001cbe:	200a      	movs	r0, #10
1a001cc0:	f7ff fee6 	bl	1a001a90 <mpu9250WriteAK8963Register>
1a001cc4:	2800      	cmp	r0, #0
1a001cc6:	db31      	blt.n	1a001d2c <mpu9250SetSrd+0x98>
			return -3;
		}
		delay(100); // long wait between AK8963 mode changes
1a001cc8:	2064      	movs	r0, #100	; 0x64
1a001cca:	2100      	movs	r1, #0
1a001ccc:	f7ff fdf6 	bl	1a0018bc <delay>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a001cd0:	2107      	movs	r1, #7
1a001cd2:	2003      	movs	r0, #3
1a001cd4:	f7ff fe9e 	bl	1a001a14 <mpu9250ReadAK8963Registers>
		delay(100); // long wait between AK8963 mode changes
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
	}
	/* setting the sample rate divider */
	if (mpu9250WriteRegister(MPU9250_SMPDIV, srd) < 0) { // setting the sample rate divider
1a001cd8:	4621      	mov	r1, r4
1a001cda:	2019      	movs	r0, #25
1a001cdc:	f7ff fe74 	bl	1a0019c8 <mpu9250WriteRegister>
1a001ce0:	2800      	cmp	r0, #0
1a001ce2:	db2c      	blt.n	1a001d3e <mpu9250SetSrd+0xaa>
		return -4;
	}
	control._srd = srd;
1a001ce4:	4b17      	ldr	r3, [pc, #92]	; (1a001d44 <mpu9250SetSrd+0xb0>)
1a001ce6:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
	return 1;
1a001cea:	2001      	movs	r0, #1
}
1a001cec:	bd10      	pop	{r4, pc}
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a001cee:	2100      	movs	r1, #0
1a001cf0:	200a      	movs	r0, #10
1a001cf2:	f7ff fecd 	bl	1a001a90 <mpu9250WriteAK8963Register>
1a001cf6:	2800      	cmp	r0, #0
1a001cf8:	db1b      	blt.n	1a001d32 <mpu9250SetSrd+0x9e>
		delay(100); // long wait between AK8963 mode changes
1a001cfa:	2064      	movs	r0, #100	; 0x64
1a001cfc:	2100      	movs	r1, #0
1a001cfe:	f7ff fddd 	bl	1a0018bc <delay>
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a001d02:	2116      	movs	r1, #22
1a001d04:	200a      	movs	r0, #10
1a001d06:	f7ff fec3 	bl	1a001a90 <mpu9250WriteAK8963Register>
1a001d0a:	2800      	cmp	r0, #0
1a001d0c:	db14      	blt.n	1a001d38 <mpu9250SetSrd+0xa4>
		delay(100); // long wait between AK8963 mode changes
1a001d0e:	2064      	movs	r0, #100	; 0x64
1a001d10:	2100      	movs	r1, #0
1a001d12:	f7ff fdd3 	bl	1a0018bc <delay>
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a001d16:	2107      	movs	r1, #7
1a001d18:	2003      	movs	r0, #3
1a001d1a:	f7ff fe7b 	bl	1a001a14 <mpu9250ReadAK8963Registers>
1a001d1e:	e7db      	b.n	1a001cd8 <mpu9250SetSrd+0x44>
		return -1;
1a001d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001d24:	e7e2      	b.n	1a001cec <mpu9250SetSrd+0x58>
			return -2;
1a001d26:	f06f 0001 	mvn.w	r0, #1
1a001d2a:	e7df      	b.n	1a001cec <mpu9250SetSrd+0x58>
			return -3;
1a001d2c:	f06f 0002 	mvn.w	r0, #2
1a001d30:	e7dc      	b.n	1a001cec <mpu9250SetSrd+0x58>
			return -2;
1a001d32:	f06f 0001 	mvn.w	r0, #1
1a001d36:	e7d9      	b.n	1a001cec <mpu9250SetSrd+0x58>
			return -3;
1a001d38:	f06f 0002 	mvn.w	r0, #2
1a001d3c:	e7d6      	b.n	1a001cec <mpu9250SetSrd+0x58>
		return -4;
1a001d3e:	f06f 0003 	mvn.w	r0, #3
1a001d42:	e7d3      	b.n	1a001cec <mpu9250SetSrd+0x58>
1a001d44:	10000a98 	.word	0x10000a98

1a001d48 <mpu9250Read>:
	return 1;
}

//Read sensor registers and store data at control structure
bool_t mpu9250Read(void)
{
1a001d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001d4c:	b083      	sub	sp, #12
	// grab the data from the MPU9250
	if( !mpu9250ReadRegisters(MPU9250_ACCEL_OUT, 21) ){
1a001d4e:	2115      	movs	r1, #21
1a001d50:	203b      	movs	r0, #59	; 0x3b
1a001d52:	f7ff fe0f 	bl	1a001974 <mpu9250ReadRegisters>
1a001d56:	2800      	cmp	r0, #0
1a001d58:	f000 8136 	beq.w	1a001fc8 <mpu9250Read+0x280>
		return 0;
	}
	// combine into 16 bit values
	control._axcounts = (((int16_t)control._buffer[0]) << 8)  | control._buffer[1];
1a001d5c:	4b9b      	ldr	r3, [pc, #620]	; (1a001fcc <mpu9250Read+0x284>)
1a001d5e:	f893 b024 	ldrb.w	fp, [r3, #36]	; 0x24
1a001d62:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
1a001d66:	ea41 210b 	orr.w	r1, r1, fp, lsl #8
1a001d6a:	fa0f fb81 	sxth.w	fp, r1
1a001d6e:	f8a3 b12c 	strh.w	fp, [r3, #300]	; 0x12c
	control._aycounts = (((int16_t)control._buffer[2]) << 8)  | control._buffer[3];
1a001d72:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a001d76:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
1a001d7a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
1a001d7e:	b209      	sxth	r1, r1
1a001d80:	f8a3 112e 	strh.w	r1, [r3, #302]	; 0x12e
	control._azcounts = (((int16_t)control._buffer[4]) << 8)  | control._buffer[5];
1a001d84:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
1a001d88:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
1a001d8c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
1a001d90:	b212      	sxth	r2, r2
1a001d92:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	control._tcounts  = (((int16_t)control._buffer[6]) << 8)  | control._buffer[7];
1a001d96:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
1a001d9a:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
1a001d9e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a001da2:	b200      	sxth	r0, r0
1a001da4:	ee05 0a90 	vmov	s11, r0
1a001da8:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
	control._gxcounts = (((int16_t)control._buffer[8]) << 8)  | control._buffer[9];
1a001dac:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
1a001db0:	f893 602d 	ldrb.w	r6, [r3, #45]	; 0x2d
1a001db4:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
1a001db8:	b236      	sxth	r6, r6
1a001dba:	f8a3 6132 	strh.w	r6, [r3, #306]	; 0x132
	control._gycounts = (((int16_t)control._buffer[10]) << 8) | control._buffer[11];
1a001dbe:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
1a001dc2:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
1a001dc6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a001dca:	b200      	sxth	r0, r0
1a001dcc:	f8a3 0134 	strh.w	r0, [r3, #308]	; 0x134
	control._gzcounts = (((int16_t)control._buffer[12]) << 8) | control._buffer[13];
1a001dd0:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
1a001dd4:	f893 5031 	ldrb.w	r5, [r3, #49]	; 0x31
1a001dd8:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
1a001ddc:	b22d      	sxth	r5, r5
1a001dde:	f8a3 5136 	strh.w	r5, [r3, #310]	; 0x136
	control._hxcounts = (((int16_t)control._buffer[15]) << 8) | control._buffer[14];
1a001de2:	f893 7033 	ldrb.w	r7, [r3, #51]	; 0x33
1a001de6:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
1a001dea:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a001dee:	b224      	sxth	r4, r4
1a001df0:	ee06 4a90 	vmov	s13, r4
1a001df4:	f8a3 4138 	strh.w	r4, [r3, #312]	; 0x138
	control._hycounts = (((int16_t)control._buffer[17]) << 8) | control._buffer[16];
1a001df8:	f893 7035 	ldrb.w	r7, [r3, #53]	; 0x35
1a001dfc:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
1a001e00:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a001e04:	b224      	sxth	r4, r4
1a001e06:	ee07 4a10 	vmov	s14, r4
1a001e0a:	f8a3 413a 	strh.w	r4, [r3, #314]	; 0x13a
	control._hzcounts = (((int16_t)control._buffer[19]) << 8) | control._buffer[18];
1a001e0e:	f893 7037 	ldrb.w	r7, [r3, #55]	; 0x37
1a001e12:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
1a001e16:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a001e1a:	b224      	sxth	r4, r4
1a001e1c:	ee07 4a90 	vmov	s15, r4
1a001e20:	f8a3 413c 	strh.w	r4, [r3, #316]	; 0x13c
	// transform and convert to float values
	control._ax = (((float)(control.tX[0]*control._axcounts + control.tX[1]*control._aycounts + control.tX[2]*control._azcounts) * control._accelScale) - control._axb)*control._axs;
1a001e24:	f9b3 a140 	ldrsh.w	sl, [r3, #320]	; 0x140
1a001e28:	f9b3 7142 	ldrsh.w	r7, [r3, #322]	; 0x142
1a001e2c:	fb01 f407 	mul.w	r4, r1, r7
1a001e30:	fb0b 4c0a 	mla	ip, fp, sl, r4
1a001e34:	f9b3 4144 	ldrsh.w	r4, [r3, #324]	; 0x144
1a001e38:	9401      	str	r4, [sp, #4]
1a001e3a:	fb02 cc04 	mla	ip, r2, r4, ip
1a001e3e:	ee06 ca10 	vmov	s12, ip
1a001e42:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a001e46:	ed93 5a01 	vldr	s10, [r3, #4]
1a001e4a:	ee26 6a05 	vmul.f32	s12, s12, s10
1a001e4e:	edd3 4a30 	vldr	s9, [r3, #192]	; 0xc0
1a001e52:	ee36 6a64 	vsub.f32	s12, s12, s9
1a001e56:	edd3 4a33 	vldr	s9, [r3, #204]	; 0xcc
1a001e5a:	ee26 6a24 	vmul.f32	s12, s12, s9
1a001e5e:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
	control._ay = (((float)(control.tY[0]*control._axcounts + control.tY[1]*control._aycounts + control.tY[2]*control._azcounts) * control._accelScale) - control._ayb)*control._ays;
1a001e62:	f9b3 e146 	ldrsh.w	lr, [r3, #326]	; 0x146
1a001e66:	f9b3 8148 	ldrsh.w	r8, [r3, #328]	; 0x148
1a001e6a:	fb08 fc01 	mul.w	ip, r8, r1
1a001e6e:	fb0e cc0b 	mla	ip, lr, fp, ip
1a001e72:	f9b3 414a 	ldrsh.w	r4, [r3, #330]	; 0x14a
1a001e76:	fb04 cc02 	mla	ip, r4, r2, ip
1a001e7a:	ee06 ca10 	vmov	s12, ip
1a001e7e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a001e82:	ee25 6a06 	vmul.f32	s12, s10, s12
1a001e86:	edd3 4a31 	vldr	s9, [r3, #196]	; 0xc4
1a001e8a:	ee36 6a64 	vsub.f32	s12, s12, s9
1a001e8e:	edd3 4a34 	vldr	s9, [r3, #208]	; 0xd0
1a001e92:	ee26 6a24 	vmul.f32	s12, s12, s9
1a001e96:	ed83 6a10 	vstr	s12, [r3, #64]	; 0x40
	control._az = (((float)(control.tZ[0]*control._axcounts + control.tZ[1]*control._aycounts + control.tZ[2]*control._azcounts) * control._accelScale) - control._azb)*control._azs;
1a001e9a:	f9b3 c14c 	ldrsh.w	ip, [r3, #332]	; 0x14c
1a001e9e:	f9b3 914e 	ldrsh.w	r9, [r3, #334]	; 0x14e
1a001ea2:	fb09 f101 	mul.w	r1, r9, r1
1a001ea6:	fb0c 110b 	mla	r1, ip, fp, r1
1a001eaa:	f9b3 b150 	ldrsh.w	fp, [r3, #336]	; 0x150
1a001eae:	fb0b 1102 	mla	r1, fp, r2, r1
1a001eb2:	ee06 1a10 	vmov	s12, r1
1a001eb6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a001eba:	ee25 5a06 	vmul.f32	s10, s10, s12
1a001ebe:	ed93 6a32 	vldr	s12, [r3, #200]	; 0xc8
1a001ec2:	ee35 5a46 	vsub.f32	s10, s10, s12
1a001ec6:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
1a001eca:	ee25 5a06 	vmul.f32	s10, s10, s12
1a001ece:	ed83 5a11 	vstr	s10, [r3, #68]	; 0x44
	control._gx = ((float) (control.tX[0]*control._gxcounts + control.tX[1]*control._gycounts + control.tX[2]*control._gzcounts) * control._gyroScale) -  control._gxb;
1a001ed2:	fb00 f707 	mul.w	r7, r0, r7
1a001ed6:	fb06 770a 	mla	r7, r6, sl, r7
1a001eda:	9a01      	ldr	r2, [sp, #4]
1a001edc:	fb05 7202 	mla	r2, r5, r2, r7
1a001ee0:	ee06 2a10 	vmov	s12, r2
1a001ee4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a001ee8:	ed93 5a02 	vldr	s10, [r3, #8]
1a001eec:	ee26 6a05 	vmul.f32	s12, s12, s10
1a001ef0:	edd3 4a20 	vldr	s9, [r3, #128]	; 0x80
1a001ef4:	ee36 6a64 	vsub.f32	s12, s12, s9
1a001ef8:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
	control._gy = ((float) (control.tY[0]*control._gxcounts + control.tY[1]*control._gycounts + control.tY[2]*control._gzcounts) * control._gyroScale) -  control._gyb;
1a001efc:	fb00 f808 	mul.w	r8, r0, r8
1a001f00:	fb06 8e0e 	mla	lr, r6, lr, r8
1a001f04:	fb05 e204 	mla	r2, r5, r4, lr
1a001f08:	ee06 2a10 	vmov	s12, r2
1a001f0c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a001f10:	ee25 6a06 	vmul.f32	s12, s10, s12
1a001f14:	edd3 4a21 	vldr	s9, [r3, #132]	; 0x84
1a001f18:	ee36 6a64 	vsub.f32	s12, s12, s9
1a001f1c:	ed83 6a13 	vstr	s12, [r3, #76]	; 0x4c
	control._gz = ((float) (control.tZ[0]*control._gxcounts + control.tZ[1]*control._gycounts + control.tZ[2]*control._gzcounts) * control._gyroScale) -  control._gzb;
1a001f20:	fb00 f009 	mul.w	r0, r0, r9
1a001f24:	fb06 000c 	mla	r0, r6, ip, r0
1a001f28:	fb05 050b 	mla	r5, r5, fp, r0
1a001f2c:	ee06 5a10 	vmov	s12, r5
1a001f30:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a001f34:	ee25 5a06 	vmul.f32	s10, s10, s12
1a001f38:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
1a001f3c:	ee35 5a46 	vsub.f32	s10, s10, s12
1a001f40:	ed83 5a14 	vstr	s10, [r3, #80]	; 0x50
	control._hx = (((float)(control._hxcounts) * control._magScaleX) - control._hxb)*control._hxs;
1a001f44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
1a001f48:	ed93 6a03 	vldr	s12, [r3, #12]
1a001f4c:	ee66 6a86 	vmul.f32	s13, s13, s12
1a001f50:	ed93 6a44 	vldr	s12, [r3, #272]	; 0x110
1a001f54:	ee76 6ac6 	vsub.f32	s13, s13, s12
1a001f58:	ed93 6a47 	vldr	s12, [r3, #284]	; 0x11c
1a001f5c:	ee66 6a86 	vmul.f32	s13, s13, s12
1a001f60:	edc3 6a15 	vstr	s13, [r3, #84]	; 0x54
	control._hy = (((float)(control._hycounts) * control._magScaleY) - control._hyb)*control._hys;
1a001f64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a001f68:	edd3 6a04 	vldr	s13, [r3, #16]
1a001f6c:	ee27 7a26 	vmul.f32	s14, s14, s13
1a001f70:	edd3 6a45 	vldr	s13, [r3, #276]	; 0x114
1a001f74:	ee37 7a66 	vsub.f32	s14, s14, s13
1a001f78:	edd3 6a48 	vldr	s13, [r3, #288]	; 0x120
1a001f7c:	ee27 7a26 	vmul.f32	s14, s14, s13
1a001f80:	ed83 7a16 	vstr	s14, [r3, #88]	; 0x58
	control._hz = (((float)(control._hzcounts) * control._magScaleZ) - control._hzb)*control._hzs;
1a001f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a001f88:	ed93 7a05 	vldr	s14, [r3, #20]
1a001f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
1a001f90:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
1a001f94:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a001f98:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
1a001f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
1a001fa0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	control._t = ((((float) control._tcounts)  - control._tempOffset)/ control._tempScale) + control._tempOffset;
1a001fa4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
1a001fa8:	edd3 7a07 	vldr	s15, [r3, #28]
1a001fac:	ee75 5ae7 	vsub.f32	s11, s11, s15
1a001fb0:	edd3 6a06 	vldr	s13, [r3, #24]
1a001fb4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
1a001fb8:	ee77 7a87 	vadd.f32	s15, s15, s14
1a001fbc:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	return 1;
1a001fc0:	2001      	movs	r0, #1
}
1a001fc2:	b003      	add	sp, #12
1a001fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
1a001fc8:	2000      	movs	r0, #0
1a001fca:	e7fa      	b.n	1a001fc2 <mpu9250Read+0x27a>
1a001fcc:	10000a98 	.word	0x10000a98

1a001fd0 <mpu9250GetAccelX_mss>:

// Returns the accelerometer measurement in the x direction, m/s/s
float mpu9250GetAccelX_mss( void )
{
	return control._ax;
}
1a001fd0:	4b01      	ldr	r3, [pc, #4]	; (1a001fd8 <mpu9250GetAccelX_mss+0x8>)
1a001fd2:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
1a001fd6:	4770      	bx	lr
1a001fd8:	10000a98 	.word	0x10000a98

1a001fdc <mpu9250GetAccelY_mss>:

// Returns the accelerometer measurement in the y direction, m/s/s
float mpu9250GetAccelY_mss( void )
{
	return control._ay;
}
1a001fdc:	4b01      	ldr	r3, [pc, #4]	; (1a001fe4 <mpu9250GetAccelY_mss+0x8>)
1a001fde:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
1a001fe2:	4770      	bx	lr
1a001fe4:	10000a98 	.word	0x10000a98

1a001fe8 <mpu9250GetAccelZ_mss>:

// Returns the accelerometer measurement in the z direction, m/s/s
float mpu9250GetAccelZ_mss( void )
{
	return control._az;
}
1a001fe8:	4b01      	ldr	r3, [pc, #4]	; (1a001ff0 <mpu9250GetAccelZ_mss+0x8>)
1a001fea:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
1a001fee:	4770      	bx	lr
1a001ff0:	10000a98 	.word	0x10000a98

1a001ff4 <mpu9250GetGyroX_rads>:

// Returns the gyroscope measurement in the x direction, rad/s
float mpu9250GetGyroX_rads( void )
{
	return control._gx;
}
1a001ff4:	4b01      	ldr	r3, [pc, #4]	; (1a001ffc <mpu9250GetGyroX_rads+0x8>)
1a001ff6:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
1a001ffa:	4770      	bx	lr
1a001ffc:	10000a98 	.word	0x10000a98

1a002000 <mpu9250GetGyroY_rads>:

// Returns the gyroscope measurement in the y direction, rad/s
float mpu9250GetGyroY_rads( void )
{
	return control._gy;
}
1a002000:	4b01      	ldr	r3, [pc, #4]	; (1a002008 <mpu9250GetGyroY_rads+0x8>)
1a002002:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
1a002006:	4770      	bx	lr
1a002008:	10000a98 	.word	0x10000a98

1a00200c <mpu9250GetGyroZ_rads>:

// Returns the gyroscope measurement in the z direction, rad/s
float mpu9250GetGyroZ_rads( void )
{
	return control._gz;
}
1a00200c:	4b01      	ldr	r3, [pc, #4]	; (1a002014 <mpu9250GetGyroZ_rads+0x8>)
1a00200e:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
1a002012:	4770      	bx	lr
1a002014:	10000a98 	.word	0x10000a98

1a002018 <mpu9250CalibrateGyro>:
{
1a002018:	b538      	push	{r3, r4, r5, lr}
1a00201a:	ed2d 8b02 	vpush	{d8}
	if (mpu9250SetGyroRange(MPU9250_GYRO_RANGE_250DPS) < 0) {
1a00201e:	2000      	movs	r0, #0
1a002020:	f7ff fd72 	bl	1a001b08 <mpu9250SetGyroRange>
1a002024:	2800      	cmp	r0, #0
1a002026:	f2c0 8093 	blt.w	1a002150 <mpu9250CalibrateGyro+0x138>
	if (mpu9250SetDlpfBandwidth(MPU9250_DLPF_BANDWIDTH_20HZ) < 0) {
1a00202a:	2003      	movs	r0, #3
1a00202c:	f7ff fdb6 	bl	1a001b9c <mpu9250SetDlpfBandwidth>
1a002030:	2800      	cmp	r0, #0
1a002032:	f2c0 8090 	blt.w	1a002156 <mpu9250CalibrateGyro+0x13e>
	if (mpu9250SetSrd(19) < 0) {
1a002036:	2013      	movs	r0, #19
1a002038:	f7ff fe2c 	bl	1a001c94 <mpu9250SetSrd>
1a00203c:	2800      	cmp	r0, #0
1a00203e:	f2c0 808d 	blt.w	1a00215c <mpu9250CalibrateGyro+0x144>
	control._gxbD = 0;
1a002042:	4b4b      	ldr	r3, [pc, #300]	; (1a002170 <mpu9250CalibrateGyro+0x158>)
1a002044:	2000      	movs	r0, #0
1a002046:	2100      	movs	r1, #0
1a002048:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
	control._gybD = 0;
1a00204c:	e9c3 011c 	strd	r0, r1, [r3, #112]	; 0x70
	control._gzbD = 0;
1a002050:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
	for (uint8_t i=0; i < control._numSamples; i++) {
1a002054:	2500      	movs	r5, #0
1a002056:	e04a      	b.n	1a0020ee <mpu9250CalibrateGyro+0xd6>
		mpu9250Read();
1a002058:	f7ff fe76 	bl	1a001d48 <mpu9250Read>
		control._gxbD += ((mpu9250GetGyroX_rads() + control._gxb)/control._numSamples);
1a00205c:	f7ff ffca 	bl	1a001ff4 <mpu9250GetGyroX_rads>
1a002060:	4c43      	ldr	r4, [pc, #268]	; (1a002170 <mpu9250CalibrateGyro+0x158>)
1a002062:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
1a002066:	ee30 0a27 	vadd.f32	s0, s0, s15
1a00206a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
1a00206e:	ee08 3a10 	vmov	s16, r3
1a002072:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
1a002076:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a00207a:	ee17 0a90 	vmov	r0, s15
1a00207e:	f000 fb95 	bl	1a0027ac <__aeabi_f2d>
1a002082:	4602      	mov	r2, r0
1a002084:	460b      	mov	r3, r1
1a002086:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a00208a:	f000 fa31 	bl	1a0024f0 <__adddf3>
1a00208e:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
		control._gybD += ((mpu9250GetGyroY_rads() + control._gyb)/control._numSamples);
1a002092:	f7ff ffb5 	bl	1a002000 <mpu9250GetGyroY_rads>
1a002096:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
1a00209a:	ee30 0a27 	vadd.f32	s0, s0, s15
1a00209e:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a0020a2:	ee17 0a90 	vmov	r0, s15
1a0020a6:	f000 fb81 	bl	1a0027ac <__aeabi_f2d>
1a0020aa:	4602      	mov	r2, r0
1a0020ac:	460b      	mov	r3, r1
1a0020ae:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a0020b2:	f000 fa1d 	bl	1a0024f0 <__adddf3>
1a0020b6:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
		control._gzbD += ((mpu9250GetGyroZ_rads() + control._gzb)/control._numSamples);
1a0020ba:	f7ff ffa7 	bl	1a00200c <mpu9250GetGyroZ_rads>
1a0020be:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
1a0020c2:	ee30 0a27 	vadd.f32	s0, s0, s15
1a0020c6:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a0020ca:	ee17 0a90 	vmov	r0, s15
1a0020ce:	f000 fb6d 	bl	1a0027ac <__aeabi_f2d>
1a0020d2:	4602      	mov	r2, r0
1a0020d4:	460b      	mov	r3, r1
1a0020d6:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a0020da:	f000 fa09 	bl	1a0024f0 <__adddf3>
1a0020de:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
		delay(20);
1a0020e2:	2014      	movs	r0, #20
1a0020e4:	2100      	movs	r1, #0
1a0020e6:	f7ff fbe9 	bl	1a0018bc <delay>
	for (uint8_t i=0; i < control._numSamples; i++) {
1a0020ea:	3501      	adds	r5, #1
1a0020ec:	b2ed      	uxtb	r5, r5
1a0020ee:	4b20      	ldr	r3, [pc, #128]	; (1a002170 <mpu9250CalibrateGyro+0x158>)
1a0020f0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
1a0020f4:	42ab      	cmp	r3, r5
1a0020f6:	d8af      	bhi.n	1a002058 <mpu9250CalibrateGyro+0x40>
	control._gxb = (float)control._gxbD;
1a0020f8:	4c1d      	ldr	r4, [pc, #116]	; (1a002170 <mpu9250CalibrateGyro+0x158>)
1a0020fa:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a0020fe:	f000 fbad 	bl	1a00285c <__aeabi_d2f>
1a002102:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	control._gyb = (float)control._gybD;
1a002106:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a00210a:	f000 fba7 	bl	1a00285c <__aeabi_d2f>
1a00210e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
	control._gzb = (float)control._gzbD;
1a002112:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a002116:	f000 fba1 	bl	1a00285c <__aeabi_d2f>
1a00211a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	if (mpu9250SetGyroRange(control._gyroRange) < 0) {
1a00211e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
1a002122:	f7ff fcf1 	bl	1a001b08 <mpu9250SetGyroRange>
1a002126:	2800      	cmp	r0, #0
1a002128:	db1b      	blt.n	1a002162 <mpu9250CalibrateGyro+0x14a>
	if (mpu9250SetDlpfBandwidth(control._bandwidth) < 0) {
1a00212a:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
1a00212e:	f7ff fd35 	bl	1a001b9c <mpu9250SetDlpfBandwidth>
1a002132:	2800      	cmp	r0, #0
1a002134:	db18      	blt.n	1a002168 <mpu9250CalibrateGyro+0x150>
	if (mpu9250SetSrd(control._srd) < 0) {
1a002136:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
1a00213a:	f7ff fdab 	bl	1a001c94 <mpu9250SetSrd>
1a00213e:	2800      	cmp	r0, #0
1a002140:	db03      	blt.n	1a00214a <mpu9250CalibrateGyro+0x132>
	return 1;
1a002142:	2001      	movs	r0, #1
}
1a002144:	ecbd 8b02 	vpop	{d8}
1a002148:	bd38      	pop	{r3, r4, r5, pc}
		return -6;
1a00214a:	f06f 0005 	mvn.w	r0, #5
1a00214e:	e7f9      	b.n	1a002144 <mpu9250CalibrateGyro+0x12c>
		return -1;
1a002150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002154:	e7f6      	b.n	1a002144 <mpu9250CalibrateGyro+0x12c>
		return -2;
1a002156:	f06f 0001 	mvn.w	r0, #1
1a00215a:	e7f3      	b.n	1a002144 <mpu9250CalibrateGyro+0x12c>
		return -3;
1a00215c:	f06f 0002 	mvn.w	r0, #2
1a002160:	e7f0      	b.n	1a002144 <mpu9250CalibrateGyro+0x12c>
		return -4;
1a002162:	f06f 0003 	mvn.w	r0, #3
1a002166:	e7ed      	b.n	1a002144 <mpu9250CalibrateGyro+0x12c>
		return -5;
1a002168:	f06f 0004 	mvn.w	r0, #4
1a00216c:	e7ea      	b.n	1a002144 <mpu9250CalibrateGyro+0x12c>
1a00216e:	bf00      	nop
1a002170:	10000a98 	.word	0x10000a98

1a002174 <mpu9250Init>:
{
1a002174:	b510      	push	{r4, lr}
1a002176:	4604      	mov	r4, r0
	mpu9250InitializeControlStructure();
1a002178:	f7ff fbbc 	bl	1a0018f4 <mpu9250InitializeControlStructure>
	control.address = address;
1a00217c:	4ba2      	ldr	r3, [pc, #648]	; (1a002408 <mpu9250Init+0x294>)
1a00217e:	701c      	strb	r4, [r3, #0]
	i2cInit(I2C0, MPU9250_I2C_RATE);
1a002180:	49a2      	ldr	r1, [pc, #648]	; (1a00240c <mpu9250Init+0x298>)
1a002182:	2000      	movs	r0, #0
1a002184:	f7ff f980 	bl	1a001488 <i2cInit>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a002188:	2101      	movs	r1, #1
1a00218a:	206b      	movs	r0, #107	; 0x6b
1a00218c:	f7ff fc1c 	bl	1a0019c8 <mpu9250WriteRegister>
1a002190:	2800      	cmp	r0, #0
1a002192:	f2c0 8100 	blt.w	1a002396 <mpu9250Init+0x222>
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a002196:	2120      	movs	r1, #32
1a002198:	206a      	movs	r0, #106	; 0x6a
1a00219a:	f7ff fc15 	bl	1a0019c8 <mpu9250WriteRegister>
1a00219e:	2800      	cmp	r0, #0
1a0021a0:	f2c0 80fc 	blt.w	1a00239c <mpu9250Init+0x228>
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a0021a4:	210d      	movs	r1, #13
1a0021a6:	2024      	movs	r0, #36	; 0x24
1a0021a8:	f7ff fc0e 	bl	1a0019c8 <mpu9250WriteRegister>
1a0021ac:	2800      	cmp	r0, #0
1a0021ae:	f2c0 80f8 	blt.w	1a0023a2 <mpu9250Init+0x22e>
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN);
1a0021b2:	2100      	movs	r1, #0
1a0021b4:	200a      	movs	r0, #10
1a0021b6:	f7ff fc6b 	bl	1a001a90 <mpu9250WriteAK8963Register>
	mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_PWR_RESET);
1a0021ba:	2180      	movs	r1, #128	; 0x80
1a0021bc:	206b      	movs	r0, #107	; 0x6b
1a0021be:	f7ff fc03 	bl	1a0019c8 <mpu9250WriteRegister>
	delay(1);
1a0021c2:	2001      	movs	r0, #1
1a0021c4:	2100      	movs	r1, #0
1a0021c6:	f7ff fb79 	bl	1a0018bc <delay>
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL2, MPU9250_AK8963_RESET);
1a0021ca:	2101      	movs	r1, #1
1a0021cc:	200b      	movs	r0, #11
1a0021ce:	f7ff fc5f 	bl	1a001a90 <mpu9250WriteAK8963Register>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a0021d2:	2101      	movs	r1, #1
1a0021d4:	206b      	movs	r0, #107	; 0x6b
1a0021d6:	f7ff fbf7 	bl	1a0019c8 <mpu9250WriteRegister>
1a0021da:	2800      	cmp	r0, #0
1a0021dc:	f2c0 80e4 	blt.w	1a0023a8 <mpu9250Init+0x234>
	if ((mpu9250WhoAmI() != 113) && (mpu9250WhoAmI() != 115)) {
1a0021e0:	f7ff fbe2 	bl	1a0019a8 <mpu9250WhoAmI>
1a0021e4:	2871      	cmp	r0, #113	; 0x71
1a0021e6:	d004      	beq.n	1a0021f2 <mpu9250Init+0x7e>
1a0021e8:	f7ff fbde 	bl	1a0019a8 <mpu9250WhoAmI>
1a0021ec:	2873      	cmp	r0, #115	; 0x73
1a0021ee:	f040 80de 	bne.w	1a0023ae <mpu9250Init+0x23a>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_2, MPU9250_SEN_ENABLE) < 0) {
1a0021f2:	2100      	movs	r1, #0
1a0021f4:	206c      	movs	r0, #108	; 0x6c
1a0021f6:	f7ff fbe7 	bl	1a0019c8 <mpu9250WriteRegister>
1a0021fa:	2800      	cmp	r0, #0
1a0021fc:	f2c0 80da 	blt.w	1a0023b4 <mpu9250Init+0x240>
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG, MPU9250_ACCEL_FS_SEL_16G) < 0) {
1a002200:	2118      	movs	r1, #24
1a002202:	201c      	movs	r0, #28
1a002204:	f7ff fbe0 	bl	1a0019c8 <mpu9250WriteRegister>
1a002208:	2800      	cmp	r0, #0
1a00220a:	f2c0 80d6 	blt.w	1a0023ba <mpu9250Init+0x246>
	control._accelScale = MPU9250_G * 16.0f / 32767.5f; // setting the accel scale to 16G
1a00220e:	4b7e      	ldr	r3, [pc, #504]	; (1a002408 <mpu9250Init+0x294>)
1a002210:	4a7f      	ldr	r2, [pc, #508]	; (1a002410 <mpu9250Init+0x29c>)
1a002212:	605a      	str	r2, [r3, #4]
	control._accelRange = MPU9250_ACCEL_RANGE_16G;
1a002214:	2203      	movs	r2, #3
1a002216:	f883 2020 	strb.w	r2, [r3, #32]
	if (mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0) {
1a00221a:	2118      	movs	r1, #24
1a00221c:	201b      	movs	r0, #27
1a00221e:	f7ff fbd3 	bl	1a0019c8 <mpu9250WriteRegister>
1a002222:	2800      	cmp	r0, #0
1a002224:	f2c0 80cc 	blt.w	1a0023c0 <mpu9250Init+0x24c>
	control._gyroScale = 2000.0f / 32767.5f * MPU9250_D2R; 
1a002228:	4b77      	ldr	r3, [pc, #476]	; (1a002408 <mpu9250Init+0x294>)
1a00222a:	4a7a      	ldr	r2, [pc, #488]	; (1a002414 <mpu9250Init+0x2a0>)
1a00222c:	609a      	str	r2, [r3, #8]
	control._gyroRange = MPU9250_GYRO_RANGE_2000DPS;
1a00222e:	2203      	movs	r2, #3
1a002230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
1a002234:	2101      	movs	r1, #1
1a002236:	201d      	movs	r0, #29
1a002238:	f7ff fbc6 	bl	1a0019c8 <mpu9250WriteRegister>
1a00223c:	2800      	cmp	r0, #0
1a00223e:	f2c0 80c2 	blt.w	1a0023c6 <mpu9250Init+0x252>
	if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a002242:	2101      	movs	r1, #1
1a002244:	201a      	movs	r0, #26
1a002246:	f7ff fbbf 	bl	1a0019c8 <mpu9250WriteRegister>
1a00224a:	2800      	cmp	r0, #0
1a00224c:	f2c0 80be 	blt.w	1a0023cc <mpu9250Init+0x258>
	control._bandwidth = MPU9250_DLPF_BANDWIDTH_184HZ;
1a002250:	2100      	movs	r1, #0
1a002252:	4b6d      	ldr	r3, [pc, #436]	; (1a002408 <mpu9250Init+0x294>)
1a002254:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 0x00) < 0) {
1a002258:	2019      	movs	r0, #25
1a00225a:	f7ff fbb5 	bl	1a0019c8 <mpu9250WriteRegister>
1a00225e:	2800      	cmp	r0, #0
1a002260:	f2c0 80b7 	blt.w	1a0023d2 <mpu9250Init+0x25e>
	control._srd = 0;
1a002264:	4b68      	ldr	r3, [pc, #416]	; (1a002408 <mpu9250Init+0x294>)
1a002266:	2200      	movs	r2, #0
1a002268:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a00226c:	2120      	movs	r1, #32
1a00226e:	206a      	movs	r0, #106	; 0x6a
1a002270:	f7ff fbaa 	bl	1a0019c8 <mpu9250WriteRegister>
1a002274:	2800      	cmp	r0, #0
1a002276:	f2c0 80af 	blt.w	1a0023d8 <mpu9250Init+0x264>
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a00227a:	210d      	movs	r1, #13
1a00227c:	2024      	movs	r0, #36	; 0x24
1a00227e:	f7ff fba3 	bl	1a0019c8 <mpu9250WriteRegister>
1a002282:	2800      	cmp	r0, #0
1a002284:	f2c0 80ab 	blt.w	1a0023de <mpu9250Init+0x26a>
	if (mpu9250WhoAmIAK8963() != 72) {
1a002288:	f7ff fbf2 	bl	1a001a70 <mpu9250WhoAmIAK8963>
1a00228c:	2848      	cmp	r0, #72	; 0x48
1a00228e:	f040 80a9 	bne.w	1a0023e4 <mpu9250Init+0x270>
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a002292:	2100      	movs	r1, #0
1a002294:	200a      	movs	r0, #10
1a002296:	f7ff fbfb 	bl	1a001a90 <mpu9250WriteAK8963Register>
1a00229a:	2800      	cmp	r0, #0
1a00229c:	f2c0 80a5 	blt.w	1a0023ea <mpu9250Init+0x276>
	delay(100); // long wait between AK8963 mode changes
1a0022a0:	2064      	movs	r0, #100	; 0x64
1a0022a2:	2100      	movs	r1, #0
1a0022a4:	f7ff fb0a 	bl	1a0018bc <delay>
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_FUSE_ROM) < 0) {
1a0022a8:	210f      	movs	r1, #15
1a0022aa:	200a      	movs	r0, #10
1a0022ac:	f7ff fbf0 	bl	1a001a90 <mpu9250WriteAK8963Register>
1a0022b0:	2800      	cmp	r0, #0
1a0022b2:	f2c0 809d 	blt.w	1a0023f0 <mpu9250Init+0x27c>
	delay(100); // long wait between AK8963 mode changes
1a0022b6:	2064      	movs	r0, #100	; 0x64
1a0022b8:	2100      	movs	r1, #0
1a0022ba:	f7ff faff 	bl	1a0018bc <delay>
	mpu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
1a0022be:	2103      	movs	r1, #3
1a0022c0:	2010      	movs	r0, #16
1a0022c2:	f7ff fba7 	bl	1a001a14 <mpu9250ReadAK8963Registers>
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0022c6:	4b50      	ldr	r3, [pc, #320]	; (1a002408 <mpu9250Init+0x294>)
1a0022c8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
1a0022cc:	ee07 2a10 	vmov	s14, r2
1a0022d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a0022d4:	eddf 4a50 	vldr	s9, [pc, #320]	; 1a002418 <mpu9250Init+0x2a4>
1a0022d8:	ee37 7a64 	vsub.f32	s14, s14, s9
1a0022dc:	ed9f 5a4f 	vldr	s10, [pc, #316]	; 1a00241c <mpu9250Init+0x2a8>
1a0022e0:	ee27 7a05 	vmul.f32	s14, s14, s10
1a0022e4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
1a0022e8:	ee37 7a25 	vadd.f32	s14, s14, s11
1a0022ec:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 1a002420 <mpu9250Init+0x2ac>
1a0022f0:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a0022f4:	eddf 6a4b 	vldr	s13, [pc, #300]	; 1a002424 <mpu9250Init+0x2b0>
1a0022f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0022fc:	edc3 7a03 	vstr	s15, [r3, #12]
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a002300:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
1a002304:	ee07 2a10 	vmov	s14, r2
1a002308:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a00230c:	ee37 7a64 	vsub.f32	s14, s14, s9
1a002310:	ee27 7a05 	vmul.f32	s14, s14, s10
1a002314:	ee37 7a25 	vadd.f32	s14, s14, s11
1a002318:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a00231c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a002320:	edc3 7a04 	vstr	s15, [r3, #16]
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a002324:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a002328:	ee07 2a90 	vmov	s15, r2
1a00232c:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a002330:	ee77 7ae4 	vsub.f32	s15, s15, s9
1a002334:	ee67 7a85 	vmul.f32	s15, s15, s10
1a002338:	ee77 7aa5 	vadd.f32	s15, s15, s11
1a00233c:	ee67 7a86 	vmul.f32	s15, s15, s12
			/ 32760.0f; // micro Tesla
1a002340:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a002344:	ed83 7a05 	vstr	s14, [r3, #20]
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a002348:	2100      	movs	r1, #0
1a00234a:	200a      	movs	r0, #10
1a00234c:	f7ff fba0 	bl	1a001a90 <mpu9250WriteAK8963Register>
1a002350:	2800      	cmp	r0, #0
1a002352:	db50      	blt.n	1a0023f6 <mpu9250Init+0x282>
	delay(100); // long wait between AK8963 mode changes
1a002354:	2064      	movs	r0, #100	; 0x64
1a002356:	2100      	movs	r1, #0
1a002358:	f7ff fab0 	bl	1a0018bc <delay>
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a00235c:	2116      	movs	r1, #22
1a00235e:	200a      	movs	r0, #10
1a002360:	f7ff fb96 	bl	1a001a90 <mpu9250WriteAK8963Register>
1a002364:	2800      	cmp	r0, #0
1a002366:	db49      	blt.n	1a0023fc <mpu9250Init+0x288>
	delay(100); // long wait between AK8963 mode changes
1a002368:	2064      	movs	r0, #100	; 0x64
1a00236a:	2100      	movs	r1, #0
1a00236c:	f7ff faa6 	bl	1a0018bc <delay>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a002370:	2101      	movs	r1, #1
1a002372:	206b      	movs	r0, #107	; 0x6b
1a002374:	f7ff fb28 	bl	1a0019c8 <mpu9250WriteRegister>
1a002378:	2800      	cmp	r0, #0
1a00237a:	db42      	blt.n	1a002402 <mpu9250Init+0x28e>
	mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a00237c:	2107      	movs	r1, #7
1a00237e:	2003      	movs	r0, #3
1a002380:	f7ff fb48 	bl	1a001a14 <mpu9250ReadAK8963Registers>
	if (mpu9250CalibrateGyro() < 0) {
1a002384:	f7ff fe48 	bl	1a002018 <mpu9250CalibrateGyro>
1a002388:	2800      	cmp	r0, #0
1a00238a:	db01      	blt.n	1a002390 <mpu9250Init+0x21c>
	return 1;
1a00238c:	2001      	movs	r0, #1
}
1a00238e:	bd10      	pop	{r4, pc}
		return -20;
1a002390:	f06f 0013 	mvn.w	r0, #19
1a002394:	e7fb      	b.n	1a00238e <mpu9250Init+0x21a>
		return -1;
1a002396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00239a:	e7f8      	b.n	1a00238e <mpu9250Init+0x21a>
		return -2;
1a00239c:	f06f 0001 	mvn.w	r0, #1
1a0023a0:	e7f5      	b.n	1a00238e <mpu9250Init+0x21a>
		return -3;
1a0023a2:	f06f 0002 	mvn.w	r0, #2
1a0023a6:	e7f2      	b.n	1a00238e <mpu9250Init+0x21a>
		return -4;
1a0023a8:	f06f 0003 	mvn.w	r0, #3
1a0023ac:	e7ef      	b.n	1a00238e <mpu9250Init+0x21a>
		return -5;
1a0023ae:	f06f 0004 	mvn.w	r0, #4
1a0023b2:	e7ec      	b.n	1a00238e <mpu9250Init+0x21a>
		return -6;
1a0023b4:	f06f 0005 	mvn.w	r0, #5
1a0023b8:	e7e9      	b.n	1a00238e <mpu9250Init+0x21a>
		return -7;
1a0023ba:	f06f 0006 	mvn.w	r0, #6
1a0023be:	e7e6      	b.n	1a00238e <mpu9250Init+0x21a>
		return -8;
1a0023c0:	f06f 0007 	mvn.w	r0, #7
1a0023c4:	e7e3      	b.n	1a00238e <mpu9250Init+0x21a>
		return -9;
1a0023c6:	f06f 0008 	mvn.w	r0, #8
1a0023ca:	e7e0      	b.n	1a00238e <mpu9250Init+0x21a>
		return -10;
1a0023cc:	f06f 0009 	mvn.w	r0, #9
1a0023d0:	e7dd      	b.n	1a00238e <mpu9250Init+0x21a>
		return -11;
1a0023d2:	f06f 000a 	mvn.w	r0, #10
1a0023d6:	e7da      	b.n	1a00238e <mpu9250Init+0x21a>
		return -12;
1a0023d8:	f06f 000b 	mvn.w	r0, #11
1a0023dc:	e7d7      	b.n	1a00238e <mpu9250Init+0x21a>
		return -13;
1a0023de:	f06f 000c 	mvn.w	r0, #12
1a0023e2:	e7d4      	b.n	1a00238e <mpu9250Init+0x21a>
		return -14;
1a0023e4:	f06f 000d 	mvn.w	r0, #13
1a0023e8:	e7d1      	b.n	1a00238e <mpu9250Init+0x21a>
		return -15;
1a0023ea:	f06f 000e 	mvn.w	r0, #14
1a0023ee:	e7ce      	b.n	1a00238e <mpu9250Init+0x21a>
		return -16;
1a0023f0:	f06f 000f 	mvn.w	r0, #15
1a0023f4:	e7cb      	b.n	1a00238e <mpu9250Init+0x21a>
		return -17;
1a0023f6:	f06f 0010 	mvn.w	r0, #16
1a0023fa:	e7c8      	b.n	1a00238e <mpu9250Init+0x21a>
		return -18;
1a0023fc:	f06f 0011 	mvn.w	r0, #17
1a002400:	e7c5      	b.n	1a00238e <mpu9250Init+0x21a>
		return -19;
1a002402:	f06f 0012 	mvn.w	r0, #18
1a002406:	e7c2      	b.n	1a00238e <mpu9250Init+0x21a>
1a002408:	10000a98 	.word	0x10000a98
1a00240c:	00061a80 	.word	0x00061a80
1a002410:	3b9cea16 	.word	0x3b9cea16
1a002414:	3a8ba0e4 	.word	0x3a8ba0e4
1a002418:	43000000 	.word	0x43000000
1a00241c:	3b800000 	.word	0x3b800000
1a002420:	45998000 	.word	0x45998000
1a002424:	46fff000 	.word	0x46fff000

1a002428 <mpu9250GetMagX_uT>:

// Returns the magnetometer measurement in the x direction, uT
float mpu9250GetMagX_uT( void )
{
  return control._hx;
}
1a002428:	4b01      	ldr	r3, [pc, #4]	; (1a002430 <mpu9250GetMagX_uT+0x8>)
1a00242a:	ed93 0a15 	vldr	s0, [r3, #84]	; 0x54
1a00242e:	4770      	bx	lr
1a002430:	10000a98 	.word	0x10000a98

1a002434 <mpu9250GetMagY_uT>:

// Returns the magnetometer measurement in the y direction, uT
float mpu9250GetMagY_uT( void )
{
  return control._hy;
}
1a002434:	4b01      	ldr	r3, [pc, #4]	; (1a00243c <mpu9250GetMagY_uT+0x8>)
1a002436:	ed93 0a16 	vldr	s0, [r3, #88]	; 0x58
1a00243a:	4770      	bx	lr
1a00243c:	10000a98 	.word	0x10000a98

1a002440 <mpu9250GetMagZ_uT>:

// Returns the magnetometer measurement in the z direction, uT
float mpu9250GetMagZ_uT( void )
{
  return control._hz;
}
1a002440:	4b01      	ldr	r3, [pc, #4]	; (1a002448 <mpu9250GetMagZ_uT+0x8>)
1a002442:	ed93 0a17 	vldr	s0, [r3, #92]	; 0x5c
1a002446:	4770      	bx	lr
1a002448:	10000a98 	.word	0x10000a98

1a00244c <mpu9250GetTemperature_C>:

// Returns the die temperature, C
float mpu9250GetTemperature_C( void )
{
  return control._t;
}
1a00244c:	4b01      	ldr	r3, [pc, #4]	; (1a002454 <mpu9250GetTemperature_C+0x8>)
1a00244e:	ed93 0a18 	vldr	s0, [r3, #96]	; 0x60
1a002452:	4770      	bx	lr
1a002454:	10000a98 	.word	0x10000a98

1a002458 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002458:	2301      	movs	r3, #1
1a00245a:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00245e:	4b01      	ldr	r3, [pc, #4]	; (1a002464 <clearInterrupt+0xc>)
1a002460:	6258      	str	r0, [r3, #36]	; 0x24
}
1a002462:	4770      	bx	lr
1a002464:	40087000 	.word	0x40087000

1a002468 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00246a:	4b12      	ldr	r3, [pc, #72]	; (1a0024b4 <serveInterrupt+0x4c>)
1a00246c:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a00246e:	4b12      	ldr	r3, [pc, #72]	; (1a0024b8 <serveInterrupt+0x50>)
1a002470:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a002472:	2301      	movs	r3, #1
1a002474:	4083      	lsls	r3, r0
1a002476:	420b      	tst	r3, r1
1a002478:	d111      	bne.n	1a00249e <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a00247a:	4910      	ldr	r1, [pc, #64]	; (1a0024bc <serveInterrupt+0x54>)
1a00247c:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00247e:	4d10      	ldr	r5, [pc, #64]	; (1a0024c0 <serveInterrupt+0x58>)
1a002480:	0051      	lsls	r1, r2, #1
1a002482:	188f      	adds	r7, r1, r2
1a002484:	00fc      	lsls	r4, r7, #3
1a002486:	4627      	mov	r7, r4
1a002488:	442c      	add	r4, r5
1a00248a:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a00248c:	6864      	ldr	r4, [r4, #4]
1a00248e:	1b36      	subs	r6, r6, r4
1a002490:	443d      	add	r5, r7
1a002492:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a002494:	4a08      	ldr	r2, [pc, #32]	; (1a0024b8 <serveInterrupt+0x50>)
1a002496:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a002498:	f7ff ffde 	bl	1a002458 <clearInterrupt>
}
1a00249c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00249e:	4907      	ldr	r1, [pc, #28]	; (1a0024bc <serveInterrupt+0x54>)
1a0024a0:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0024a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0024a6:	00d1      	lsls	r1, r2, #3
1a0024a8:	4a05      	ldr	r2, [pc, #20]	; (1a0024c0 <serveInterrupt+0x58>)
1a0024aa:	440a      	add	r2, r1
1a0024ac:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a0024ae:	4a02      	ldr	r2, [pc, #8]	; (1a0024b8 <serveInterrupt+0x50>)
1a0024b0:	61d3      	str	r3, [r2, #28]
1a0024b2:	e7f1      	b.n	1a002498 <serveInterrupt+0x30>
1a0024b4:	1a008418 	.word	0x1a008418
1a0024b8:	40087000 	.word	0x40087000
1a0024bc:	40084000 	.word	0x40084000
1a0024c0:	10000084 	.word	0x10000084

1a0024c4 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0024c4:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0024c6:	2000      	movs	r0, #0
1a0024c8:	f7ff ffce 	bl	1a002468 <serveInterrupt>
}
1a0024cc:	bd08      	pop	{r3, pc}

1a0024ce <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0024ce:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0024d0:	2001      	movs	r0, #1
1a0024d2:	f7ff ffc9 	bl	1a002468 <serveInterrupt>
}
1a0024d6:	bd08      	pop	{r3, pc}

1a0024d8 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a0024d8:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0024da:	2002      	movs	r0, #2
1a0024dc:	f7ff ffc4 	bl	1a002468 <serveInterrupt>
}
1a0024e0:	bd08      	pop	{r3, pc}
1a0024e2:	Address 0x000000001a0024e2 is out of bounds.


1a0024e4 <__aeabi_drsub>:
1a0024e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a0024e8:	e002      	b.n	1a0024f0 <__adddf3>
1a0024ea:	bf00      	nop

1a0024ec <__aeabi_dsub>:
1a0024ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a0024f0 <__adddf3>:
1a0024f0:	b530      	push	{r4, r5, lr}
1a0024f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a0024f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a0024fa:	ea94 0f05 	teq	r4, r5
1a0024fe:	bf08      	it	eq
1a002500:	ea90 0f02 	teqeq	r0, r2
1a002504:	bf1f      	itttt	ne
1a002506:	ea54 0c00 	orrsne.w	ip, r4, r0
1a00250a:	ea55 0c02 	orrsne.w	ip, r5, r2
1a00250e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a002512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002516:	f000 80e2 	beq.w	1a0026de <__adddf3+0x1ee>
1a00251a:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a00251e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a002522:	bfb8      	it	lt
1a002524:	426d      	neglt	r5, r5
1a002526:	dd0c      	ble.n	1a002542 <__adddf3+0x52>
1a002528:	442c      	add	r4, r5
1a00252a:	ea80 0202 	eor.w	r2, r0, r2
1a00252e:	ea81 0303 	eor.w	r3, r1, r3
1a002532:	ea82 0000 	eor.w	r0, r2, r0
1a002536:	ea83 0101 	eor.w	r1, r3, r1
1a00253a:	ea80 0202 	eor.w	r2, r0, r2
1a00253e:	ea81 0303 	eor.w	r3, r1, r3
1a002542:	2d36      	cmp	r5, #54	; 0x36
1a002544:	bf88      	it	hi
1a002546:	bd30      	pophi	{r4, r5, pc}
1a002548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a00254c:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a002554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a002558:	d002      	beq.n	1a002560 <__adddf3+0x70>
1a00255a:	4240      	negs	r0, r0
1a00255c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a002564:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a00256c:	d002      	beq.n	1a002574 <__adddf3+0x84>
1a00256e:	4252      	negs	r2, r2
1a002570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a002574:	ea94 0f05 	teq	r4, r5
1a002578:	f000 80a7 	beq.w	1a0026ca <__adddf3+0x1da>
1a00257c:	f1a4 0401 	sub.w	r4, r4, #1
1a002580:	f1d5 0e20 	rsbs	lr, r5, #32
1a002584:	db0d      	blt.n	1a0025a2 <__adddf3+0xb2>
1a002586:	fa02 fc0e 	lsl.w	ip, r2, lr
1a00258a:	fa22 f205 	lsr.w	r2, r2, r5
1a00258e:	1880      	adds	r0, r0, r2
1a002590:	f141 0100 	adc.w	r1, r1, #0
1a002594:	fa03 f20e 	lsl.w	r2, r3, lr
1a002598:	1880      	adds	r0, r0, r2
1a00259a:	fa43 f305 	asr.w	r3, r3, r5
1a00259e:	4159      	adcs	r1, r3
1a0025a0:	e00e      	b.n	1a0025c0 <__adddf3+0xd0>
1a0025a2:	f1a5 0520 	sub.w	r5, r5, #32
1a0025a6:	f10e 0e20 	add.w	lr, lr, #32
1a0025aa:	2a01      	cmp	r2, #1
1a0025ac:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0025b0:	bf28      	it	cs
1a0025b2:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0025b6:	fa43 f305 	asr.w	r3, r3, r5
1a0025ba:	18c0      	adds	r0, r0, r3
1a0025bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0025c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0025c4:	d507      	bpl.n	1a0025d6 <__adddf3+0xe6>
1a0025c6:	f04f 0e00 	mov.w	lr, #0
1a0025ca:	f1dc 0c00 	rsbs	ip, ip, #0
1a0025ce:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0025d2:	eb6e 0101 	sbc.w	r1, lr, r1
1a0025d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0025da:	d31b      	bcc.n	1a002614 <__adddf3+0x124>
1a0025dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a0025e0:	d30c      	bcc.n	1a0025fc <__adddf3+0x10c>
1a0025e2:	0849      	lsrs	r1, r1, #1
1a0025e4:	ea5f 0030 	movs.w	r0, r0, rrx
1a0025e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a0025ec:	f104 0401 	add.w	r4, r4, #1
1a0025f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a0025f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a0025f8:	f080 809a 	bcs.w	1a002730 <__adddf3+0x240>
1a0025fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002600:	bf08      	it	eq
1a002602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002606:	f150 0000 	adcs.w	r0, r0, #0
1a00260a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00260e:	ea41 0105 	orr.w	r1, r1, r5
1a002612:	bd30      	pop	{r4, r5, pc}
1a002614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a002618:	4140      	adcs	r0, r0
1a00261a:	eb41 0101 	adc.w	r1, r1, r1
1a00261e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002622:	f1a4 0401 	sub.w	r4, r4, #1
1a002626:	d1e9      	bne.n	1a0025fc <__adddf3+0x10c>
1a002628:	f091 0f00 	teq	r1, #0
1a00262c:	bf04      	itt	eq
1a00262e:	4601      	moveq	r1, r0
1a002630:	2000      	moveq	r0, #0
1a002632:	fab1 f381 	clz	r3, r1
1a002636:	bf08      	it	eq
1a002638:	3320      	addeq	r3, #32
1a00263a:	f1a3 030b 	sub.w	r3, r3, #11
1a00263e:	f1b3 0220 	subs.w	r2, r3, #32
1a002642:	da0c      	bge.n	1a00265e <__adddf3+0x16e>
1a002644:	320c      	adds	r2, #12
1a002646:	dd08      	ble.n	1a00265a <__adddf3+0x16a>
1a002648:	f102 0c14 	add.w	ip, r2, #20
1a00264c:	f1c2 020c 	rsb	r2, r2, #12
1a002650:	fa01 f00c 	lsl.w	r0, r1, ip
1a002654:	fa21 f102 	lsr.w	r1, r1, r2
1a002658:	e00c      	b.n	1a002674 <__adddf3+0x184>
1a00265a:	f102 0214 	add.w	r2, r2, #20
1a00265e:	bfd8      	it	le
1a002660:	f1c2 0c20 	rsble	ip, r2, #32
1a002664:	fa01 f102 	lsl.w	r1, r1, r2
1a002668:	fa20 fc0c 	lsr.w	ip, r0, ip
1a00266c:	bfdc      	itt	le
1a00266e:	ea41 010c 	orrle.w	r1, r1, ip
1a002672:	4090      	lslle	r0, r2
1a002674:	1ae4      	subs	r4, r4, r3
1a002676:	bfa2      	ittt	ge
1a002678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a00267c:	4329      	orrge	r1, r5
1a00267e:	bd30      	popge	{r4, r5, pc}
1a002680:	ea6f 0404 	mvn.w	r4, r4
1a002684:	3c1f      	subs	r4, #31
1a002686:	da1c      	bge.n	1a0026c2 <__adddf3+0x1d2>
1a002688:	340c      	adds	r4, #12
1a00268a:	dc0e      	bgt.n	1a0026aa <__adddf3+0x1ba>
1a00268c:	f104 0414 	add.w	r4, r4, #20
1a002690:	f1c4 0220 	rsb	r2, r4, #32
1a002694:	fa20 f004 	lsr.w	r0, r0, r4
1a002698:	fa01 f302 	lsl.w	r3, r1, r2
1a00269c:	ea40 0003 	orr.w	r0, r0, r3
1a0026a0:	fa21 f304 	lsr.w	r3, r1, r4
1a0026a4:	ea45 0103 	orr.w	r1, r5, r3
1a0026a8:	bd30      	pop	{r4, r5, pc}
1a0026aa:	f1c4 040c 	rsb	r4, r4, #12
1a0026ae:	f1c4 0220 	rsb	r2, r4, #32
1a0026b2:	fa20 f002 	lsr.w	r0, r0, r2
1a0026b6:	fa01 f304 	lsl.w	r3, r1, r4
1a0026ba:	ea40 0003 	orr.w	r0, r0, r3
1a0026be:	4629      	mov	r1, r5
1a0026c0:	bd30      	pop	{r4, r5, pc}
1a0026c2:	fa21 f004 	lsr.w	r0, r1, r4
1a0026c6:	4629      	mov	r1, r5
1a0026c8:	bd30      	pop	{r4, r5, pc}
1a0026ca:	f094 0f00 	teq	r4, #0
1a0026ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a0026d2:	bf06      	itte	eq
1a0026d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a0026d8:	3401      	addeq	r4, #1
1a0026da:	3d01      	subne	r5, #1
1a0026dc:	e74e      	b.n	1a00257c <__adddf3+0x8c>
1a0026de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0026e2:	bf18      	it	ne
1a0026e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0026e8:	d029      	beq.n	1a00273e <__adddf3+0x24e>
1a0026ea:	ea94 0f05 	teq	r4, r5
1a0026ee:	bf08      	it	eq
1a0026f0:	ea90 0f02 	teqeq	r0, r2
1a0026f4:	d005      	beq.n	1a002702 <__adddf3+0x212>
1a0026f6:	ea54 0c00 	orrs.w	ip, r4, r0
1a0026fa:	bf04      	itt	eq
1a0026fc:	4619      	moveq	r1, r3
1a0026fe:	4610      	moveq	r0, r2
1a002700:	bd30      	pop	{r4, r5, pc}
1a002702:	ea91 0f03 	teq	r1, r3
1a002706:	bf1e      	ittt	ne
1a002708:	2100      	movne	r1, #0
1a00270a:	2000      	movne	r0, #0
1a00270c:	bd30      	popne	{r4, r5, pc}
1a00270e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a002712:	d105      	bne.n	1a002720 <__adddf3+0x230>
1a002714:	0040      	lsls	r0, r0, #1
1a002716:	4149      	adcs	r1, r1
1a002718:	bf28      	it	cs
1a00271a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a00271e:	bd30      	pop	{r4, r5, pc}
1a002720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a002724:	bf3c      	itt	cc
1a002726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a00272a:	bd30      	popcc	{r4, r5, pc}
1a00272c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a002734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002738:	f04f 0000 	mov.w	r0, #0
1a00273c:	bd30      	pop	{r4, r5, pc}
1a00273e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002742:	bf1a      	itte	ne
1a002744:	4619      	movne	r1, r3
1a002746:	4610      	movne	r0, r2
1a002748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a00274c:	bf1c      	itt	ne
1a00274e:	460b      	movne	r3, r1
1a002750:	4602      	movne	r2, r0
1a002752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002756:	bf06      	itte	eq
1a002758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a00275c:	ea91 0f03 	teqeq	r1, r3
1a002760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a002764:	bd30      	pop	{r4, r5, pc}
1a002766:	bf00      	nop

1a002768 <__aeabi_ui2d>:
1a002768:	f090 0f00 	teq	r0, #0
1a00276c:	bf04      	itt	eq
1a00276e:	2100      	moveq	r1, #0
1a002770:	4770      	bxeq	lr
1a002772:	b530      	push	{r4, r5, lr}
1a002774:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002778:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00277c:	f04f 0500 	mov.w	r5, #0
1a002780:	f04f 0100 	mov.w	r1, #0
1a002784:	e750      	b.n	1a002628 <__adddf3+0x138>
1a002786:	bf00      	nop

1a002788 <__aeabi_i2d>:
1a002788:	f090 0f00 	teq	r0, #0
1a00278c:	bf04      	itt	eq
1a00278e:	2100      	moveq	r1, #0
1a002790:	4770      	bxeq	lr
1a002792:	b530      	push	{r4, r5, lr}
1a002794:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002798:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00279c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0027a0:	bf48      	it	mi
1a0027a2:	4240      	negmi	r0, r0
1a0027a4:	f04f 0100 	mov.w	r1, #0
1a0027a8:	e73e      	b.n	1a002628 <__adddf3+0x138>
1a0027aa:	bf00      	nop

1a0027ac <__aeabi_f2d>:
1a0027ac:	0042      	lsls	r2, r0, #1
1a0027ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a0027b2:	ea4f 0131 	mov.w	r1, r1, rrx
1a0027b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0027ba:	bf1f      	itttt	ne
1a0027bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0027c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0027c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a0027c8:	4770      	bxne	lr
1a0027ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a0027ce:	bf08      	it	eq
1a0027d0:	4770      	bxeq	lr
1a0027d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a0027d6:	bf04      	itt	eq
1a0027d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0027dc:	4770      	bxeq	lr
1a0027de:	b530      	push	{r4, r5, lr}
1a0027e0:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0027e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0027e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0027ec:	e71c      	b.n	1a002628 <__adddf3+0x138>
1a0027ee:	bf00      	nop

1a0027f0 <__aeabi_ul2d>:
1a0027f0:	ea50 0201 	orrs.w	r2, r0, r1
1a0027f4:	bf08      	it	eq
1a0027f6:	4770      	bxeq	lr
1a0027f8:	b530      	push	{r4, r5, lr}
1a0027fa:	f04f 0500 	mov.w	r5, #0
1a0027fe:	e00a      	b.n	1a002816 <__aeabi_l2d+0x16>

1a002800 <__aeabi_l2d>:
1a002800:	ea50 0201 	orrs.w	r2, r0, r1
1a002804:	bf08      	it	eq
1a002806:	4770      	bxeq	lr
1a002808:	b530      	push	{r4, r5, lr}
1a00280a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a00280e:	d502      	bpl.n	1a002816 <__aeabi_l2d+0x16>
1a002810:	4240      	negs	r0, r0
1a002812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002816:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00281a:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00281e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a002822:	f43f aed8 	beq.w	1a0025d6 <__adddf3+0xe6>
1a002826:	f04f 0203 	mov.w	r2, #3
1a00282a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00282e:	bf18      	it	ne
1a002830:	3203      	addne	r2, #3
1a002832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002836:	bf18      	it	ne
1a002838:	3203      	addne	r2, #3
1a00283a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a00283e:	f1c2 0320 	rsb	r3, r2, #32
1a002842:	fa00 fc03 	lsl.w	ip, r0, r3
1a002846:	fa20 f002 	lsr.w	r0, r0, r2
1a00284a:	fa01 fe03 	lsl.w	lr, r1, r3
1a00284e:	ea40 000e 	orr.w	r0, r0, lr
1a002852:	fa21 f102 	lsr.w	r1, r1, r2
1a002856:	4414      	add	r4, r2
1a002858:	e6bd      	b.n	1a0025d6 <__adddf3+0xe6>
1a00285a:	bf00      	nop

1a00285c <__aeabi_d2f>:
1a00285c:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a002860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a002864:	bf24      	itt	cs
1a002866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a00286a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a00286e:	d90d      	bls.n	1a00288c <__aeabi_d2f+0x30>
1a002870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a002874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a002878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a00287c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a002880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a002884:	bf08      	it	eq
1a002886:	f020 0001 	biceq.w	r0, r0, #1
1a00288a:	4770      	bx	lr
1a00288c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a002890:	d121      	bne.n	1a0028d6 <__aeabi_d2f+0x7a>
1a002892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a002896:	bfbc      	itt	lt
1a002898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a00289c:	4770      	bxlt	lr
1a00289e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0028a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a0028a6:	f1c2 0218 	rsb	r2, r2, #24
1a0028aa:	f1c2 0c20 	rsb	ip, r2, #32
1a0028ae:	fa10 f30c 	lsls.w	r3, r0, ip
1a0028b2:	fa20 f002 	lsr.w	r0, r0, r2
1a0028b6:	bf18      	it	ne
1a0028b8:	f040 0001 	orrne.w	r0, r0, #1
1a0028bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0028c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a0028c4:	fa03 fc0c 	lsl.w	ip, r3, ip
1a0028c8:	ea40 000c 	orr.w	r0, r0, ip
1a0028cc:	fa23 f302 	lsr.w	r3, r3, r2
1a0028d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a0028d4:	e7cc      	b.n	1a002870 <__aeabi_d2f+0x14>
1a0028d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a0028da:	d107      	bne.n	1a0028ec <__aeabi_d2f+0x90>
1a0028dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a0028e0:	bf1e      	ittt	ne
1a0028e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a0028e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a0028ea:	4770      	bxne	lr
1a0028ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a0028f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a0028f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a0028f8:	4770      	bx	lr
1a0028fa:	bf00      	nop

1a0028fc <__aeabi_uldivmod>:
1a0028fc:	b953      	cbnz	r3, 1a002914 <__aeabi_uldivmod+0x18>
1a0028fe:	b94a      	cbnz	r2, 1a002914 <__aeabi_uldivmod+0x18>
1a002900:	2900      	cmp	r1, #0
1a002902:	bf08      	it	eq
1a002904:	2800      	cmpeq	r0, #0
1a002906:	bf1c      	itt	ne
1a002908:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00290c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002910:	f000 b972 	b.w	1a002bf8 <__aeabi_idiv0>
1a002914:	f1ad 0c08 	sub.w	ip, sp, #8
1a002918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00291c:	f000 f806 	bl	1a00292c <__udivmoddi4>
1a002920:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002928:	b004      	add	sp, #16
1a00292a:	4770      	bx	lr

1a00292c <__udivmoddi4>:
1a00292c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002930:	9e08      	ldr	r6, [sp, #32]
1a002932:	4604      	mov	r4, r0
1a002934:	4688      	mov	r8, r1
1a002936:	2b00      	cmp	r3, #0
1a002938:	d14b      	bne.n	1a0029d2 <__udivmoddi4+0xa6>
1a00293a:	428a      	cmp	r2, r1
1a00293c:	4615      	mov	r5, r2
1a00293e:	d967      	bls.n	1a002a10 <__udivmoddi4+0xe4>
1a002940:	fab2 f282 	clz	r2, r2
1a002944:	b14a      	cbz	r2, 1a00295a <__udivmoddi4+0x2e>
1a002946:	f1c2 0720 	rsb	r7, r2, #32
1a00294a:	fa01 f302 	lsl.w	r3, r1, r2
1a00294e:	fa20 f707 	lsr.w	r7, r0, r7
1a002952:	4095      	lsls	r5, r2
1a002954:	ea47 0803 	orr.w	r8, r7, r3
1a002958:	4094      	lsls	r4, r2
1a00295a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00295e:	0c23      	lsrs	r3, r4, #16
1a002960:	fbb8 f7fe 	udiv	r7, r8, lr
1a002964:	fa1f fc85 	uxth.w	ip, r5
1a002968:	fb0e 8817 	mls	r8, lr, r7, r8
1a00296c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002970:	fb07 f10c 	mul.w	r1, r7, ip
1a002974:	4299      	cmp	r1, r3
1a002976:	d909      	bls.n	1a00298c <__udivmoddi4+0x60>
1a002978:	18eb      	adds	r3, r5, r3
1a00297a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00297e:	f080 811b 	bcs.w	1a002bb8 <__udivmoddi4+0x28c>
1a002982:	4299      	cmp	r1, r3
1a002984:	f240 8118 	bls.w	1a002bb8 <__udivmoddi4+0x28c>
1a002988:	3f02      	subs	r7, #2
1a00298a:	442b      	add	r3, r5
1a00298c:	1a5b      	subs	r3, r3, r1
1a00298e:	b2a4      	uxth	r4, r4
1a002990:	fbb3 f0fe 	udiv	r0, r3, lr
1a002994:	fb0e 3310 	mls	r3, lr, r0, r3
1a002998:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00299c:	fb00 fc0c 	mul.w	ip, r0, ip
1a0029a0:	45a4      	cmp	ip, r4
1a0029a2:	d909      	bls.n	1a0029b8 <__udivmoddi4+0x8c>
1a0029a4:	192c      	adds	r4, r5, r4
1a0029a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0029aa:	f080 8107 	bcs.w	1a002bbc <__udivmoddi4+0x290>
1a0029ae:	45a4      	cmp	ip, r4
1a0029b0:	f240 8104 	bls.w	1a002bbc <__udivmoddi4+0x290>
1a0029b4:	3802      	subs	r0, #2
1a0029b6:	442c      	add	r4, r5
1a0029b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0029bc:	eba4 040c 	sub.w	r4, r4, ip
1a0029c0:	2700      	movs	r7, #0
1a0029c2:	b11e      	cbz	r6, 1a0029cc <__udivmoddi4+0xa0>
1a0029c4:	40d4      	lsrs	r4, r2
1a0029c6:	2300      	movs	r3, #0
1a0029c8:	e9c6 4300 	strd	r4, r3, [r6]
1a0029cc:	4639      	mov	r1, r7
1a0029ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0029d2:	428b      	cmp	r3, r1
1a0029d4:	d909      	bls.n	1a0029ea <__udivmoddi4+0xbe>
1a0029d6:	2e00      	cmp	r6, #0
1a0029d8:	f000 80eb 	beq.w	1a002bb2 <__udivmoddi4+0x286>
1a0029dc:	2700      	movs	r7, #0
1a0029de:	e9c6 0100 	strd	r0, r1, [r6]
1a0029e2:	4638      	mov	r0, r7
1a0029e4:	4639      	mov	r1, r7
1a0029e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0029ea:	fab3 f783 	clz	r7, r3
1a0029ee:	2f00      	cmp	r7, #0
1a0029f0:	d147      	bne.n	1a002a82 <__udivmoddi4+0x156>
1a0029f2:	428b      	cmp	r3, r1
1a0029f4:	d302      	bcc.n	1a0029fc <__udivmoddi4+0xd0>
1a0029f6:	4282      	cmp	r2, r0
1a0029f8:	f200 80fa 	bhi.w	1a002bf0 <__udivmoddi4+0x2c4>
1a0029fc:	1a84      	subs	r4, r0, r2
1a0029fe:	eb61 0303 	sbc.w	r3, r1, r3
1a002a02:	2001      	movs	r0, #1
1a002a04:	4698      	mov	r8, r3
1a002a06:	2e00      	cmp	r6, #0
1a002a08:	d0e0      	beq.n	1a0029cc <__udivmoddi4+0xa0>
1a002a0a:	e9c6 4800 	strd	r4, r8, [r6]
1a002a0e:	e7dd      	b.n	1a0029cc <__udivmoddi4+0xa0>
1a002a10:	b902      	cbnz	r2, 1a002a14 <__udivmoddi4+0xe8>
1a002a12:	deff      	udf	#255	; 0xff
1a002a14:	fab2 f282 	clz	r2, r2
1a002a18:	2a00      	cmp	r2, #0
1a002a1a:	f040 808f 	bne.w	1a002b3c <__udivmoddi4+0x210>
1a002a1e:	1b49      	subs	r1, r1, r5
1a002a20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002a24:	fa1f f885 	uxth.w	r8, r5
1a002a28:	2701      	movs	r7, #1
1a002a2a:	fbb1 fcfe 	udiv	ip, r1, lr
1a002a2e:	0c23      	lsrs	r3, r4, #16
1a002a30:	fb0e 111c 	mls	r1, lr, ip, r1
1a002a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002a38:	fb08 f10c 	mul.w	r1, r8, ip
1a002a3c:	4299      	cmp	r1, r3
1a002a3e:	d907      	bls.n	1a002a50 <__udivmoddi4+0x124>
1a002a40:	18eb      	adds	r3, r5, r3
1a002a42:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a002a46:	d202      	bcs.n	1a002a4e <__udivmoddi4+0x122>
1a002a48:	4299      	cmp	r1, r3
1a002a4a:	f200 80cd 	bhi.w	1a002be8 <__udivmoddi4+0x2bc>
1a002a4e:	4684      	mov	ip, r0
1a002a50:	1a59      	subs	r1, r3, r1
1a002a52:	b2a3      	uxth	r3, r4
1a002a54:	fbb1 f0fe 	udiv	r0, r1, lr
1a002a58:	fb0e 1410 	mls	r4, lr, r0, r1
1a002a5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002a60:	fb08 f800 	mul.w	r8, r8, r0
1a002a64:	45a0      	cmp	r8, r4
1a002a66:	d907      	bls.n	1a002a78 <__udivmoddi4+0x14c>
1a002a68:	192c      	adds	r4, r5, r4
1a002a6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002a6e:	d202      	bcs.n	1a002a76 <__udivmoddi4+0x14a>
1a002a70:	45a0      	cmp	r8, r4
1a002a72:	f200 80b6 	bhi.w	1a002be2 <__udivmoddi4+0x2b6>
1a002a76:	4618      	mov	r0, r3
1a002a78:	eba4 0408 	sub.w	r4, r4, r8
1a002a7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002a80:	e79f      	b.n	1a0029c2 <__udivmoddi4+0x96>
1a002a82:	f1c7 0c20 	rsb	ip, r7, #32
1a002a86:	40bb      	lsls	r3, r7
1a002a88:	fa22 fe0c 	lsr.w	lr, r2, ip
1a002a8c:	ea4e 0e03 	orr.w	lr, lr, r3
1a002a90:	fa01 f407 	lsl.w	r4, r1, r7
1a002a94:	fa20 f50c 	lsr.w	r5, r0, ip
1a002a98:	fa21 f30c 	lsr.w	r3, r1, ip
1a002a9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a002aa0:	4325      	orrs	r5, r4
1a002aa2:	fbb3 f9f8 	udiv	r9, r3, r8
1a002aa6:	0c2c      	lsrs	r4, r5, #16
1a002aa8:	fb08 3319 	mls	r3, r8, r9, r3
1a002aac:	fa1f fa8e 	uxth.w	sl, lr
1a002ab0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a002ab4:	fb09 f40a 	mul.w	r4, r9, sl
1a002ab8:	429c      	cmp	r4, r3
1a002aba:	fa02 f207 	lsl.w	r2, r2, r7
1a002abe:	fa00 f107 	lsl.w	r1, r0, r7
1a002ac2:	d90b      	bls.n	1a002adc <__udivmoddi4+0x1b0>
1a002ac4:	eb1e 0303 	adds.w	r3, lr, r3
1a002ac8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a002acc:	f080 8087 	bcs.w	1a002bde <__udivmoddi4+0x2b2>
1a002ad0:	429c      	cmp	r4, r3
1a002ad2:	f240 8084 	bls.w	1a002bde <__udivmoddi4+0x2b2>
1a002ad6:	f1a9 0902 	sub.w	r9, r9, #2
1a002ada:	4473      	add	r3, lr
1a002adc:	1b1b      	subs	r3, r3, r4
1a002ade:	b2ad      	uxth	r5, r5
1a002ae0:	fbb3 f0f8 	udiv	r0, r3, r8
1a002ae4:	fb08 3310 	mls	r3, r8, r0, r3
1a002ae8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a002aec:	fb00 fa0a 	mul.w	sl, r0, sl
1a002af0:	45a2      	cmp	sl, r4
1a002af2:	d908      	bls.n	1a002b06 <__udivmoddi4+0x1da>
1a002af4:	eb1e 0404 	adds.w	r4, lr, r4
1a002af8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002afc:	d26b      	bcs.n	1a002bd6 <__udivmoddi4+0x2aa>
1a002afe:	45a2      	cmp	sl, r4
1a002b00:	d969      	bls.n	1a002bd6 <__udivmoddi4+0x2aa>
1a002b02:	3802      	subs	r0, #2
1a002b04:	4474      	add	r4, lr
1a002b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002b0a:	fba0 8902 	umull	r8, r9, r0, r2
1a002b0e:	eba4 040a 	sub.w	r4, r4, sl
1a002b12:	454c      	cmp	r4, r9
1a002b14:	46c2      	mov	sl, r8
1a002b16:	464b      	mov	r3, r9
1a002b18:	d354      	bcc.n	1a002bc4 <__udivmoddi4+0x298>
1a002b1a:	d051      	beq.n	1a002bc0 <__udivmoddi4+0x294>
1a002b1c:	2e00      	cmp	r6, #0
1a002b1e:	d069      	beq.n	1a002bf4 <__udivmoddi4+0x2c8>
1a002b20:	ebb1 050a 	subs.w	r5, r1, sl
1a002b24:	eb64 0403 	sbc.w	r4, r4, r3
1a002b28:	fa04 fc0c 	lsl.w	ip, r4, ip
1a002b2c:	40fd      	lsrs	r5, r7
1a002b2e:	40fc      	lsrs	r4, r7
1a002b30:	ea4c 0505 	orr.w	r5, ip, r5
1a002b34:	e9c6 5400 	strd	r5, r4, [r6]
1a002b38:	2700      	movs	r7, #0
1a002b3a:	e747      	b.n	1a0029cc <__udivmoddi4+0xa0>
1a002b3c:	f1c2 0320 	rsb	r3, r2, #32
1a002b40:	fa20 f703 	lsr.w	r7, r0, r3
1a002b44:	4095      	lsls	r5, r2
1a002b46:	fa01 f002 	lsl.w	r0, r1, r2
1a002b4a:	fa21 f303 	lsr.w	r3, r1, r3
1a002b4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002b52:	4338      	orrs	r0, r7
1a002b54:	0c01      	lsrs	r1, r0, #16
1a002b56:	fbb3 f7fe 	udiv	r7, r3, lr
1a002b5a:	fa1f f885 	uxth.w	r8, r5
1a002b5e:	fb0e 3317 	mls	r3, lr, r7, r3
1a002b62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002b66:	fb07 f308 	mul.w	r3, r7, r8
1a002b6a:	428b      	cmp	r3, r1
1a002b6c:	fa04 f402 	lsl.w	r4, r4, r2
1a002b70:	d907      	bls.n	1a002b82 <__udivmoddi4+0x256>
1a002b72:	1869      	adds	r1, r5, r1
1a002b74:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a002b78:	d22f      	bcs.n	1a002bda <__udivmoddi4+0x2ae>
1a002b7a:	428b      	cmp	r3, r1
1a002b7c:	d92d      	bls.n	1a002bda <__udivmoddi4+0x2ae>
1a002b7e:	3f02      	subs	r7, #2
1a002b80:	4429      	add	r1, r5
1a002b82:	1acb      	subs	r3, r1, r3
1a002b84:	b281      	uxth	r1, r0
1a002b86:	fbb3 f0fe 	udiv	r0, r3, lr
1a002b8a:	fb0e 3310 	mls	r3, lr, r0, r3
1a002b8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002b92:	fb00 f308 	mul.w	r3, r0, r8
1a002b96:	428b      	cmp	r3, r1
1a002b98:	d907      	bls.n	1a002baa <__udivmoddi4+0x27e>
1a002b9a:	1869      	adds	r1, r5, r1
1a002b9c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002ba0:	d217      	bcs.n	1a002bd2 <__udivmoddi4+0x2a6>
1a002ba2:	428b      	cmp	r3, r1
1a002ba4:	d915      	bls.n	1a002bd2 <__udivmoddi4+0x2a6>
1a002ba6:	3802      	subs	r0, #2
1a002ba8:	4429      	add	r1, r5
1a002baa:	1ac9      	subs	r1, r1, r3
1a002bac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002bb0:	e73b      	b.n	1a002a2a <__udivmoddi4+0xfe>
1a002bb2:	4637      	mov	r7, r6
1a002bb4:	4630      	mov	r0, r6
1a002bb6:	e709      	b.n	1a0029cc <__udivmoddi4+0xa0>
1a002bb8:	4607      	mov	r7, r0
1a002bba:	e6e7      	b.n	1a00298c <__udivmoddi4+0x60>
1a002bbc:	4618      	mov	r0, r3
1a002bbe:	e6fb      	b.n	1a0029b8 <__udivmoddi4+0x8c>
1a002bc0:	4541      	cmp	r1, r8
1a002bc2:	d2ab      	bcs.n	1a002b1c <__udivmoddi4+0x1f0>
1a002bc4:	ebb8 0a02 	subs.w	sl, r8, r2
1a002bc8:	eb69 020e 	sbc.w	r2, r9, lr
1a002bcc:	3801      	subs	r0, #1
1a002bce:	4613      	mov	r3, r2
1a002bd0:	e7a4      	b.n	1a002b1c <__udivmoddi4+0x1f0>
1a002bd2:	4660      	mov	r0, ip
1a002bd4:	e7e9      	b.n	1a002baa <__udivmoddi4+0x27e>
1a002bd6:	4618      	mov	r0, r3
1a002bd8:	e795      	b.n	1a002b06 <__udivmoddi4+0x1da>
1a002bda:	4667      	mov	r7, ip
1a002bdc:	e7d1      	b.n	1a002b82 <__udivmoddi4+0x256>
1a002bde:	4681      	mov	r9, r0
1a002be0:	e77c      	b.n	1a002adc <__udivmoddi4+0x1b0>
1a002be2:	3802      	subs	r0, #2
1a002be4:	442c      	add	r4, r5
1a002be6:	e747      	b.n	1a002a78 <__udivmoddi4+0x14c>
1a002be8:	f1ac 0c02 	sub.w	ip, ip, #2
1a002bec:	442b      	add	r3, r5
1a002bee:	e72f      	b.n	1a002a50 <__udivmoddi4+0x124>
1a002bf0:	4638      	mov	r0, r7
1a002bf2:	e708      	b.n	1a002a06 <__udivmoddi4+0xda>
1a002bf4:	4637      	mov	r7, r6
1a002bf6:	e6e9      	b.n	1a0029cc <__udivmoddi4+0xa0>

1a002bf8 <__aeabi_idiv0>:
1a002bf8:	4770      	bx	lr
1a002bfa:	bf00      	nop

1a002bfc <__libc_init_array>:
1a002bfc:	b570      	push	{r4, r5, r6, lr}
1a002bfe:	4e0d      	ldr	r6, [pc, #52]	; (1a002c34 <__libc_init_array+0x38>)
1a002c00:	4d0d      	ldr	r5, [pc, #52]	; (1a002c38 <__libc_init_array+0x3c>)
1a002c02:	1b76      	subs	r6, r6, r5
1a002c04:	10b6      	asrs	r6, r6, #2
1a002c06:	d006      	beq.n	1a002c16 <__libc_init_array+0x1a>
1a002c08:	2400      	movs	r4, #0
1a002c0a:	3401      	adds	r4, #1
1a002c0c:	f855 3b04 	ldr.w	r3, [r5], #4
1a002c10:	4798      	blx	r3
1a002c12:	42a6      	cmp	r6, r4
1a002c14:	d1f9      	bne.n	1a002c0a <__libc_init_array+0xe>
1a002c16:	4e09      	ldr	r6, [pc, #36]	; (1a002c3c <__libc_init_array+0x40>)
1a002c18:	4d09      	ldr	r5, [pc, #36]	; (1a002c40 <__libc_init_array+0x44>)
1a002c1a:	1b76      	subs	r6, r6, r5
1a002c1c:	f7fd fc6c 	bl	1a0004f8 <_init>
1a002c20:	10b6      	asrs	r6, r6, #2
1a002c22:	d006      	beq.n	1a002c32 <__libc_init_array+0x36>
1a002c24:	2400      	movs	r4, #0
1a002c26:	3401      	adds	r4, #1
1a002c28:	f855 3b04 	ldr.w	r3, [r5], #4
1a002c2c:	4798      	blx	r3
1a002c2e:	42a6      	cmp	r6, r4
1a002c30:	d1f9      	bne.n	1a002c26 <__libc_init_array+0x2a>
1a002c32:	bd70      	pop	{r4, r5, r6, pc}
1a002c34:	1a0086a0 	.word	0x1a0086a0
1a002c38:	1a0086a0 	.word	0x1a0086a0
1a002c3c:	1a0086a4 	.word	0x1a0086a4
1a002c40:	1a0086a0 	.word	0x1a0086a0

1a002c44 <memcpy>:
1a002c44:	4684      	mov	ip, r0
1a002c46:	ea41 0300 	orr.w	r3, r1, r0
1a002c4a:	f013 0303 	ands.w	r3, r3, #3
1a002c4e:	d16d      	bne.n	1a002d2c <memcpy+0xe8>
1a002c50:	3a40      	subs	r2, #64	; 0x40
1a002c52:	d341      	bcc.n	1a002cd8 <memcpy+0x94>
1a002c54:	f851 3b04 	ldr.w	r3, [r1], #4
1a002c58:	f840 3b04 	str.w	r3, [r0], #4
1a002c5c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002c60:	f840 3b04 	str.w	r3, [r0], #4
1a002c64:	f851 3b04 	ldr.w	r3, [r1], #4
1a002c68:	f840 3b04 	str.w	r3, [r0], #4
1a002c6c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002c70:	f840 3b04 	str.w	r3, [r0], #4
1a002c74:	f851 3b04 	ldr.w	r3, [r1], #4
1a002c78:	f840 3b04 	str.w	r3, [r0], #4
1a002c7c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002c80:	f840 3b04 	str.w	r3, [r0], #4
1a002c84:	f851 3b04 	ldr.w	r3, [r1], #4
1a002c88:	f840 3b04 	str.w	r3, [r0], #4
1a002c8c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002c90:	f840 3b04 	str.w	r3, [r0], #4
1a002c94:	f851 3b04 	ldr.w	r3, [r1], #4
1a002c98:	f840 3b04 	str.w	r3, [r0], #4
1a002c9c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002ca0:	f840 3b04 	str.w	r3, [r0], #4
1a002ca4:	f851 3b04 	ldr.w	r3, [r1], #4
1a002ca8:	f840 3b04 	str.w	r3, [r0], #4
1a002cac:	f851 3b04 	ldr.w	r3, [r1], #4
1a002cb0:	f840 3b04 	str.w	r3, [r0], #4
1a002cb4:	f851 3b04 	ldr.w	r3, [r1], #4
1a002cb8:	f840 3b04 	str.w	r3, [r0], #4
1a002cbc:	f851 3b04 	ldr.w	r3, [r1], #4
1a002cc0:	f840 3b04 	str.w	r3, [r0], #4
1a002cc4:	f851 3b04 	ldr.w	r3, [r1], #4
1a002cc8:	f840 3b04 	str.w	r3, [r0], #4
1a002ccc:	f851 3b04 	ldr.w	r3, [r1], #4
1a002cd0:	f840 3b04 	str.w	r3, [r0], #4
1a002cd4:	3a40      	subs	r2, #64	; 0x40
1a002cd6:	d2bd      	bcs.n	1a002c54 <memcpy+0x10>
1a002cd8:	3230      	adds	r2, #48	; 0x30
1a002cda:	d311      	bcc.n	1a002d00 <memcpy+0xbc>
1a002cdc:	f851 3b04 	ldr.w	r3, [r1], #4
1a002ce0:	f840 3b04 	str.w	r3, [r0], #4
1a002ce4:	f851 3b04 	ldr.w	r3, [r1], #4
1a002ce8:	f840 3b04 	str.w	r3, [r0], #4
1a002cec:	f851 3b04 	ldr.w	r3, [r1], #4
1a002cf0:	f840 3b04 	str.w	r3, [r0], #4
1a002cf4:	f851 3b04 	ldr.w	r3, [r1], #4
1a002cf8:	f840 3b04 	str.w	r3, [r0], #4
1a002cfc:	3a10      	subs	r2, #16
1a002cfe:	d2ed      	bcs.n	1a002cdc <memcpy+0x98>
1a002d00:	320c      	adds	r2, #12
1a002d02:	d305      	bcc.n	1a002d10 <memcpy+0xcc>
1a002d04:	f851 3b04 	ldr.w	r3, [r1], #4
1a002d08:	f840 3b04 	str.w	r3, [r0], #4
1a002d0c:	3a04      	subs	r2, #4
1a002d0e:	d2f9      	bcs.n	1a002d04 <memcpy+0xc0>
1a002d10:	3204      	adds	r2, #4
1a002d12:	d008      	beq.n	1a002d26 <memcpy+0xe2>
1a002d14:	07d2      	lsls	r2, r2, #31
1a002d16:	bf1c      	itt	ne
1a002d18:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a002d1c:	f800 3b01 	strbne.w	r3, [r0], #1
1a002d20:	d301      	bcc.n	1a002d26 <memcpy+0xe2>
1a002d22:	880b      	ldrh	r3, [r1, #0]
1a002d24:	8003      	strh	r3, [r0, #0]
1a002d26:	4660      	mov	r0, ip
1a002d28:	4770      	bx	lr
1a002d2a:	bf00      	nop
1a002d2c:	2a08      	cmp	r2, #8
1a002d2e:	d313      	bcc.n	1a002d58 <memcpy+0x114>
1a002d30:	078b      	lsls	r3, r1, #30
1a002d32:	d08d      	beq.n	1a002c50 <memcpy+0xc>
1a002d34:	f010 0303 	ands.w	r3, r0, #3
1a002d38:	d08a      	beq.n	1a002c50 <memcpy+0xc>
1a002d3a:	f1c3 0304 	rsb	r3, r3, #4
1a002d3e:	1ad2      	subs	r2, r2, r3
1a002d40:	07db      	lsls	r3, r3, #31
1a002d42:	bf1c      	itt	ne
1a002d44:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a002d48:	f800 3b01 	strbne.w	r3, [r0], #1
1a002d4c:	d380      	bcc.n	1a002c50 <memcpy+0xc>
1a002d4e:	f831 3b02 	ldrh.w	r3, [r1], #2
1a002d52:	f820 3b02 	strh.w	r3, [r0], #2
1a002d56:	e77b      	b.n	1a002c50 <memcpy+0xc>
1a002d58:	3a04      	subs	r2, #4
1a002d5a:	d3d9      	bcc.n	1a002d10 <memcpy+0xcc>
1a002d5c:	3a01      	subs	r2, #1
1a002d5e:	f811 3b01 	ldrb.w	r3, [r1], #1
1a002d62:	f800 3b01 	strb.w	r3, [r0], #1
1a002d66:	d2f9      	bcs.n	1a002d5c <memcpy+0x118>
1a002d68:	780b      	ldrb	r3, [r1, #0]
1a002d6a:	7003      	strb	r3, [r0, #0]
1a002d6c:	784b      	ldrb	r3, [r1, #1]
1a002d6e:	7043      	strb	r3, [r0, #1]
1a002d70:	788b      	ldrb	r3, [r1, #2]
1a002d72:	7083      	strb	r3, [r0, #2]
1a002d74:	4660      	mov	r0, ip
1a002d76:	4770      	bx	lr

1a002d78 <memset>:
1a002d78:	b4f0      	push	{r4, r5, r6, r7}
1a002d7a:	0786      	lsls	r6, r0, #30
1a002d7c:	d043      	beq.n	1a002e06 <memset+0x8e>
1a002d7e:	1e54      	subs	r4, r2, #1
1a002d80:	2a00      	cmp	r2, #0
1a002d82:	d03e      	beq.n	1a002e02 <memset+0x8a>
1a002d84:	b2ca      	uxtb	r2, r1
1a002d86:	4603      	mov	r3, r0
1a002d88:	e002      	b.n	1a002d90 <memset+0x18>
1a002d8a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a002d8e:	d338      	bcc.n	1a002e02 <memset+0x8a>
1a002d90:	f803 2b01 	strb.w	r2, [r3], #1
1a002d94:	079d      	lsls	r5, r3, #30
1a002d96:	d1f8      	bne.n	1a002d8a <memset+0x12>
1a002d98:	2c03      	cmp	r4, #3
1a002d9a:	d92b      	bls.n	1a002df4 <memset+0x7c>
1a002d9c:	b2cd      	uxtb	r5, r1
1a002d9e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a002da2:	2c0f      	cmp	r4, #15
1a002da4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a002da8:	d916      	bls.n	1a002dd8 <memset+0x60>
1a002daa:	f1a4 0710 	sub.w	r7, r4, #16
1a002dae:	093f      	lsrs	r7, r7, #4
1a002db0:	f103 0620 	add.w	r6, r3, #32
1a002db4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a002db8:	f103 0210 	add.w	r2, r3, #16
1a002dbc:	e942 5504 	strd	r5, r5, [r2, #-16]
1a002dc0:	e942 5502 	strd	r5, r5, [r2, #-8]
1a002dc4:	3210      	adds	r2, #16
1a002dc6:	42b2      	cmp	r2, r6
1a002dc8:	d1f8      	bne.n	1a002dbc <memset+0x44>
1a002dca:	f004 040f 	and.w	r4, r4, #15
1a002dce:	3701      	adds	r7, #1
1a002dd0:	2c03      	cmp	r4, #3
1a002dd2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
1a002dd6:	d90d      	bls.n	1a002df4 <memset+0x7c>
1a002dd8:	461e      	mov	r6, r3
1a002dda:	4622      	mov	r2, r4
1a002ddc:	3a04      	subs	r2, #4
1a002dde:	2a03      	cmp	r2, #3
1a002de0:	f846 5b04 	str.w	r5, [r6], #4
1a002de4:	d8fa      	bhi.n	1a002ddc <memset+0x64>
1a002de6:	1f22      	subs	r2, r4, #4
1a002de8:	f022 0203 	bic.w	r2, r2, #3
1a002dec:	3204      	adds	r2, #4
1a002dee:	4413      	add	r3, r2
1a002df0:	f004 0403 	and.w	r4, r4, #3
1a002df4:	b12c      	cbz	r4, 1a002e02 <memset+0x8a>
1a002df6:	b2c9      	uxtb	r1, r1
1a002df8:	441c      	add	r4, r3
1a002dfa:	f803 1b01 	strb.w	r1, [r3], #1
1a002dfe:	429c      	cmp	r4, r3
1a002e00:	d1fb      	bne.n	1a002dfa <memset+0x82>
1a002e02:	bcf0      	pop	{r4, r5, r6, r7}
1a002e04:	4770      	bx	lr
1a002e06:	4614      	mov	r4, r2
1a002e08:	4603      	mov	r3, r0
1a002e0a:	e7c5      	b.n	1a002d98 <memset+0x20>

1a002e0c <printf>:
1a002e0c:	b40f      	push	{r0, r1, r2, r3}
1a002e0e:	b500      	push	{lr}
1a002e10:	4907      	ldr	r1, [pc, #28]	; (1a002e30 <printf+0x24>)
1a002e12:	b083      	sub	sp, #12
1a002e14:	ab04      	add	r3, sp, #16
1a002e16:	6808      	ldr	r0, [r1, #0]
1a002e18:	f853 2b04 	ldr.w	r2, [r3], #4
1a002e1c:	6881      	ldr	r1, [r0, #8]
1a002e1e:	9301      	str	r3, [sp, #4]
1a002e20:	f000 f8de 	bl	1a002fe0 <_vfprintf_r>
1a002e24:	b003      	add	sp, #12
1a002e26:	f85d eb04 	ldr.w	lr, [sp], #4
1a002e2a:	b004      	add	sp, #16
1a002e2c:	4770      	bx	lr
1a002e2e:	bf00      	nop
1a002e30:	100000cc 	.word	0x100000cc

1a002e34 <_puts_r>:
1a002e34:	b570      	push	{r4, r5, r6, lr}
1a002e36:	4605      	mov	r5, r0
1a002e38:	b088      	sub	sp, #32
1a002e3a:	4608      	mov	r0, r1
1a002e3c:	460c      	mov	r4, r1
1a002e3e:	f000 f85f 	bl	1a002f00 <strlen>
1a002e42:	4a22      	ldr	r2, [pc, #136]	; (1a002ecc <_puts_r+0x98>)
1a002e44:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a002e46:	9404      	str	r4, [sp, #16]
1a002e48:	2601      	movs	r6, #1
1a002e4a:	1c44      	adds	r4, r0, #1
1a002e4c:	a904      	add	r1, sp, #16
1a002e4e:	9206      	str	r2, [sp, #24]
1a002e50:	2202      	movs	r2, #2
1a002e52:	9403      	str	r4, [sp, #12]
1a002e54:	9005      	str	r0, [sp, #20]
1a002e56:	68ac      	ldr	r4, [r5, #8]
1a002e58:	9607      	str	r6, [sp, #28]
1a002e5a:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a002e5e:	b31b      	cbz	r3, 1a002ea8 <_puts_r+0x74>
1a002e60:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a002e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002e66:	07ce      	lsls	r6, r1, #31
1a002e68:	b29a      	uxth	r2, r3
1a002e6a:	d401      	bmi.n	1a002e70 <_puts_r+0x3c>
1a002e6c:	0590      	lsls	r0, r2, #22
1a002e6e:	d525      	bpl.n	1a002ebc <_puts_r+0x88>
1a002e70:	0491      	lsls	r1, r2, #18
1a002e72:	d406      	bmi.n	1a002e82 <_puts_r+0x4e>
1a002e74:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a002e76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a002e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a002e7e:	81a3      	strh	r3, [r4, #12]
1a002e80:	6662      	str	r2, [r4, #100]	; 0x64
1a002e82:	4628      	mov	r0, r5
1a002e84:	aa01      	add	r2, sp, #4
1a002e86:	4621      	mov	r1, r4
1a002e88:	f003 f8b4 	bl	1a005ff4 <__sfvwrite_r>
1a002e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002e8e:	2800      	cmp	r0, #0
1a002e90:	bf0c      	ite	eq
1a002e92:	250a      	moveq	r5, #10
1a002e94:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a002e98:	07da      	lsls	r2, r3, #31
1a002e9a:	d402      	bmi.n	1a002ea2 <_puts_r+0x6e>
1a002e9c:	89a3      	ldrh	r3, [r4, #12]
1a002e9e:	059b      	lsls	r3, r3, #22
1a002ea0:	d506      	bpl.n	1a002eb0 <_puts_r+0x7c>
1a002ea2:	4628      	mov	r0, r5
1a002ea4:	b008      	add	sp, #32
1a002ea6:	bd70      	pop	{r4, r5, r6, pc}
1a002ea8:	4628      	mov	r0, r5
1a002eaa:	f002 ff27 	bl	1a005cfc <__sinit>
1a002eae:	e7d7      	b.n	1a002e60 <_puts_r+0x2c>
1a002eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002eb2:	f003 fa5b 	bl	1a00636c <__retarget_lock_release_recursive>
1a002eb6:	4628      	mov	r0, r5
1a002eb8:	b008      	add	sp, #32
1a002eba:	bd70      	pop	{r4, r5, r6, pc}
1a002ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002ebe:	f003 fa53 	bl	1a006368 <__retarget_lock_acquire_recursive>
1a002ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002ec6:	b29a      	uxth	r2, r3
1a002ec8:	e7d2      	b.n	1a002e70 <_puts_r+0x3c>
1a002eca:	bf00      	nop
1a002ecc:	1a00816c 	.word	0x1a00816c

1a002ed0 <puts>:
1a002ed0:	4b02      	ldr	r3, [pc, #8]	; (1a002edc <puts+0xc>)
1a002ed2:	4601      	mov	r1, r0
1a002ed4:	6818      	ldr	r0, [r3, #0]
1a002ed6:	f7ff bfad 	b.w	1a002e34 <_puts_r>
1a002eda:	bf00      	nop
1a002edc:	100000cc 	.word	0x100000cc
1a002ee0:	ffffffff 	.word	0xffffffff
1a002ee4:	ffffffff 	.word	0xffffffff
1a002ee8:	ffffffff 	.word	0xffffffff
1a002eec:	ffffffff 	.word	0xffffffff
1a002ef0:	ffffffff 	.word	0xffffffff
1a002ef4:	ffffffff 	.word	0xffffffff
1a002ef8:	ffffffff 	.word	0xffffffff
1a002efc:	ffffffff 	.word	0xffffffff

1a002f00 <strlen>:
1a002f00:	f890 f000 	pld	[r0]
1a002f04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a002f08:	f020 0107 	bic.w	r1, r0, #7
1a002f0c:	f06f 0c00 	mvn.w	ip, #0
1a002f10:	f010 0407 	ands.w	r4, r0, #7
1a002f14:	f891 f020 	pld	[r1, #32]
1a002f18:	f040 8049 	bne.w	1a002fae <strlen+0xae>
1a002f1c:	f04f 0400 	mov.w	r4, #0
1a002f20:	f06f 0007 	mvn.w	r0, #7
1a002f24:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002f28:	f891 f040 	pld	[r1, #64]	; 0x40
1a002f2c:	f100 0008 	add.w	r0, r0, #8
1a002f30:	fa82 f24c 	uadd8	r2, r2, ip
1a002f34:	faa4 f28c 	sel	r2, r4, ip
1a002f38:	fa83 f34c 	uadd8	r3, r3, ip
1a002f3c:	faa2 f38c 	sel	r3, r2, ip
1a002f40:	bb4b      	cbnz	r3, 1a002f96 <strlen+0x96>
1a002f42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a002f46:	fa82 f24c 	uadd8	r2, r2, ip
1a002f4a:	f100 0008 	add.w	r0, r0, #8
1a002f4e:	faa4 f28c 	sel	r2, r4, ip
1a002f52:	fa83 f34c 	uadd8	r3, r3, ip
1a002f56:	faa2 f38c 	sel	r3, r2, ip
1a002f5a:	b9e3      	cbnz	r3, 1a002f96 <strlen+0x96>
1a002f5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a002f60:	fa82 f24c 	uadd8	r2, r2, ip
1a002f64:	f100 0008 	add.w	r0, r0, #8
1a002f68:	faa4 f28c 	sel	r2, r4, ip
1a002f6c:	fa83 f34c 	uadd8	r3, r3, ip
1a002f70:	faa2 f38c 	sel	r3, r2, ip
1a002f74:	b97b      	cbnz	r3, 1a002f96 <strlen+0x96>
1a002f76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a002f7a:	f101 0120 	add.w	r1, r1, #32
1a002f7e:	fa82 f24c 	uadd8	r2, r2, ip
1a002f82:	f100 0008 	add.w	r0, r0, #8
1a002f86:	faa4 f28c 	sel	r2, r4, ip
1a002f8a:	fa83 f34c 	uadd8	r3, r3, ip
1a002f8e:	faa2 f38c 	sel	r3, r2, ip
1a002f92:	2b00      	cmp	r3, #0
1a002f94:	d0c6      	beq.n	1a002f24 <strlen+0x24>
1a002f96:	2a00      	cmp	r2, #0
1a002f98:	bf04      	itt	eq
1a002f9a:	3004      	addeq	r0, #4
1a002f9c:	461a      	moveq	r2, r3
1a002f9e:	ba12      	rev	r2, r2
1a002fa0:	fab2 f282 	clz	r2, r2
1a002fa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a002fa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a002fac:	4770      	bx	lr
1a002fae:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002fb2:	f004 0503 	and.w	r5, r4, #3
1a002fb6:	f1c4 0000 	rsb	r0, r4, #0
1a002fba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a002fbe:	f014 0f04 	tst.w	r4, #4
1a002fc2:	f891 f040 	pld	[r1, #64]	; 0x40
1a002fc6:	fa0c f505 	lsl.w	r5, ip, r5
1a002fca:	ea62 0205 	orn	r2, r2, r5
1a002fce:	bf1c      	itt	ne
1a002fd0:	ea63 0305 	ornne	r3, r3, r5
1a002fd4:	4662      	movne	r2, ip
1a002fd6:	f04f 0400 	mov.w	r4, #0
1a002fda:	e7a9      	b.n	1a002f30 <strlen+0x30>
1a002fdc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a002fe0 <_vfprintf_r>:
1a002fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002fe4:	b0d7      	sub	sp, #348	; 0x15c
1a002fe6:	461c      	mov	r4, r3
1a002fe8:	4689      	mov	r9, r1
1a002fea:	4617      	mov	r7, r2
1a002fec:	4605      	mov	r5, r0
1a002fee:	9003      	str	r0, [sp, #12]
1a002ff0:	f003 f9a8 	bl	1a006344 <_localeconv_r>
1a002ff4:	6803      	ldr	r3, [r0, #0]
1a002ff6:	9316      	str	r3, [sp, #88]	; 0x58
1a002ff8:	4618      	mov	r0, r3
1a002ffa:	f7ff ff81 	bl	1a002f00 <strlen>
1a002ffe:	9408      	str	r4, [sp, #32]
1a003000:	9015      	str	r0, [sp, #84]	; 0x54
1a003002:	b11d      	cbz	r5, 1a00300c <_vfprintf_r+0x2c>
1a003004:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a003006:	2b00      	cmp	r3, #0
1a003008:	f000 8107 	beq.w	1a00321a <_vfprintf_r+0x23a>
1a00300c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a003010:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a003014:	07c8      	lsls	r0, r1, #31
1a003016:	b293      	uxth	r3, r2
1a003018:	d402      	bmi.n	1a003020 <_vfprintf_r+0x40>
1a00301a:	0599      	lsls	r1, r3, #22
1a00301c:	f140 811f 	bpl.w	1a00325e <_vfprintf_r+0x27e>
1a003020:	049e      	lsls	r6, r3, #18
1a003022:	d40a      	bmi.n	1a00303a <_vfprintf_r+0x5a>
1a003024:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a003028:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a00302c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a003030:	f8a9 300c 	strh.w	r3, [r9, #12]
1a003034:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a003038:	b29b      	uxth	r3, r3
1a00303a:	071d      	lsls	r5, r3, #28
1a00303c:	f140 80b2 	bpl.w	1a0031a4 <_vfprintf_r+0x1c4>
1a003040:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a003044:	2a00      	cmp	r2, #0
1a003046:	f000 80ad 	beq.w	1a0031a4 <_vfprintf_r+0x1c4>
1a00304a:	f003 021a 	and.w	r2, r3, #26
1a00304e:	2a0a      	cmp	r2, #10
1a003050:	f000 80c9 	beq.w	1a0031e6 <_vfprintf_r+0x206>
1a003054:	2300      	movs	r3, #0
1a003056:	ed9f 7b86 	vldr	d7, [pc, #536]	; 1a003270 <_vfprintf_r+0x290>
1a00305a:	9310      	str	r3, [sp, #64]	; 0x40
1a00305c:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
1a003060:	9317      	str	r3, [sp, #92]	; 0x5c
1a003062:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
1a003066:	931b      	str	r3, [sp, #108]	; 0x6c
1a003068:	9318      	str	r3, [sp, #96]	; 0x60
1a00306a:	9305      	str	r3, [sp, #20]
1a00306c:	ab2d      	add	r3, sp, #180	; 0xb4
1a00306e:	932a      	str	r3, [sp, #168]	; 0xa8
1a003070:	469b      	mov	fp, r3
1a003072:	783b      	ldrb	r3, [r7, #0]
1a003074:	f8cd 901c 	str.w	r9, [sp, #28]
1a003078:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a00307c:	2b00      	cmp	r3, #0
1a00307e:	f000 8259 	beq.w	1a003534 <_vfprintf_r+0x554>
1a003082:	2b25      	cmp	r3, #37	; 0x25
1a003084:	463c      	mov	r4, r7
1a003086:	d102      	bne.n	1a00308e <_vfprintf_r+0xae>
1a003088:	e01d      	b.n	1a0030c6 <_vfprintf_r+0xe6>
1a00308a:	2b25      	cmp	r3, #37	; 0x25
1a00308c:	d003      	beq.n	1a003096 <_vfprintf_r+0xb6>
1a00308e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
1a003092:	2b00      	cmp	r3, #0
1a003094:	d1f9      	bne.n	1a00308a <_vfprintf_r+0xaa>
1a003096:	1be5      	subs	r5, r4, r7
1a003098:	b18d      	cbz	r5, 1a0030be <_vfprintf_r+0xde>
1a00309a:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
1a00309e:	3301      	adds	r3, #1
1a0030a0:	442a      	add	r2, r5
1a0030a2:	2b07      	cmp	r3, #7
1a0030a4:	f8cb 7000 	str.w	r7, [fp]
1a0030a8:	f8cb 5004 	str.w	r5, [fp, #4]
1a0030ac:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
1a0030b0:	f300 80ca 	bgt.w	1a003248 <_vfprintf_r+0x268>
1a0030b4:	f10b 0b08 	add.w	fp, fp, #8
1a0030b8:	9b05      	ldr	r3, [sp, #20]
1a0030ba:	442b      	add	r3, r5
1a0030bc:	9305      	str	r3, [sp, #20]
1a0030be:	7823      	ldrb	r3, [r4, #0]
1a0030c0:	2b00      	cmp	r3, #0
1a0030c2:	f000 8237 	beq.w	1a003534 <_vfprintf_r+0x554>
1a0030c6:	2300      	movs	r3, #0
1a0030c8:	7866      	ldrb	r6, [r4, #1]
1a0030ca:	9306      	str	r3, [sp, #24]
1a0030cc:	4698      	mov	r8, r3
1a0030ce:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a0030d2:	f104 0a01 	add.w	sl, r4, #1
1a0030d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a0030da:	252b      	movs	r5, #43	; 0x2b
1a0030dc:	f10a 0a01 	add.w	sl, sl, #1
1a0030e0:	f1a6 0320 	sub.w	r3, r6, #32
1a0030e4:	2b5a      	cmp	r3, #90	; 0x5a
1a0030e6:	f200 842a 	bhi.w	1a00393e <_vfprintf_r+0x95e>
1a0030ea:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0030ee:	03aa      	.short	0x03aa
1a0030f0:	04280428 	.word	0x04280428
1a0030f4:	0428029c 	.word	0x0428029c
1a0030f8:	04280428 	.word	0x04280428
1a0030fc:	042802a7 	.word	0x042802a7
1a003100:	02c60428 	.word	0x02c60428
1a003104:	042802d2 	.word	0x042802d2
1a003108:	02dc02d7 	.word	0x02dc02d7
1a00310c:	02f60428 	.word	0x02f60428
1a003110:	026d026d 	.word	0x026d026d
1a003114:	026d026d 	.word	0x026d026d
1a003118:	026d026d 	.word	0x026d026d
1a00311c:	026d026d 	.word	0x026d026d
1a003120:	0428026d 	.word	0x0428026d
1a003124:	04280428 	.word	0x04280428
1a003128:	04280428 	.word	0x04280428
1a00312c:	04280428 	.word	0x04280428
1a003130:	042802fb 	.word	0x042802fb
1a003134:	03f3033c 	.word	0x03f3033c
1a003138:	02fb02fb 	.word	0x02fb02fb
1a00313c:	042802fb 	.word	0x042802fb
1a003140:	04280428 	.word	0x04280428
1a003144:	03ee0428 	.word	0x03ee0428
1a003148:	04280428 	.word	0x04280428
1a00314c:	0428009a 	.word	0x0428009a
1a003150:	04280428 	.word	0x04280428
1a003154:	04280350 	.word	0x04280350
1a003158:	04280379 	.word	0x04280379
1a00315c:	03900428 	.word	0x03900428
1a003160:	04280428 	.word	0x04280428
1a003164:	04280428 	.word	0x04280428
1a003168:	04280428 	.word	0x04280428
1a00316c:	04280428 	.word	0x04280428
1a003170:	042802fb 	.word	0x042802fb
1a003174:	00c5033c 	.word	0x00c5033c
1a003178:	02fb02fb 	.word	0x02fb02fb
1a00317c:	03d102fb 	.word	0x03d102fb
1a003180:	007000c5 	.word	0x007000c5
1a003184:	03b50428 	.word	0x03b50428
1a003188:	03c20428 	.word	0x03c20428
1a00318c:	03de009c 	.word	0x03de009c
1a003190:	04280070 	.word	0x04280070
1a003194:	00720350 	.word	0x00720350
1a003198:	0428022c 	.word	0x0428022c
1a00319c:	027c0428 	.word	0x027c0428
1a0031a0:	00720428 	.word	0x00720428
1a0031a4:	4649      	mov	r1, r9
1a0031a6:	9803      	ldr	r0, [sp, #12]
1a0031a8:	f001 fc9a 	bl	1a004ae0 <__swsetup_r>
1a0031ac:	b1a0      	cbz	r0, 1a0031d8 <_vfprintf_r+0x1f8>
1a0031ae:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a0031b2:	07d8      	lsls	r0, r3, #31
1a0031b4:	d404      	bmi.n	1a0031c0 <_vfprintf_r+0x1e0>
1a0031b6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0031ba:	0599      	lsls	r1, r3, #22
1a0031bc:	f140 83b7 	bpl.w	1a00392e <_vfprintf_r+0x94e>
1a0031c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0031c4:	9305      	str	r3, [sp, #20]
1a0031c6:	9805      	ldr	r0, [sp, #20]
1a0031c8:	b057      	add	sp, #348	; 0x15c
1a0031ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0031ce:	f048 0820 	orr.w	r8, r8, #32
1a0031d2:	f89a 6000 	ldrb.w	r6, [sl]
1a0031d6:	e781      	b.n	1a0030dc <_vfprintf_r+0xfc>
1a0031d8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0031dc:	f003 021a 	and.w	r2, r3, #26
1a0031e0:	2a0a      	cmp	r2, #10
1a0031e2:	f47f af37 	bne.w	1a003054 <_vfprintf_r+0x74>
1a0031e6:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a0031ea:	2a00      	cmp	r2, #0
1a0031ec:	f6ff af32 	blt.w	1a003054 <_vfprintf_r+0x74>
1a0031f0:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a0031f4:	07d2      	lsls	r2, r2, #31
1a0031f6:	d405      	bmi.n	1a003204 <_vfprintf_r+0x224>
1a0031f8:	059b      	lsls	r3, r3, #22
1a0031fa:	d403      	bmi.n	1a003204 <_vfprintf_r+0x224>
1a0031fc:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a003200:	f003 f8b4 	bl	1a00636c <__retarget_lock_release_recursive>
1a003204:	4623      	mov	r3, r4
1a003206:	463a      	mov	r2, r7
1a003208:	4649      	mov	r1, r9
1a00320a:	9803      	ldr	r0, [sp, #12]
1a00320c:	f001 fc26 	bl	1a004a5c <__sbprintf>
1a003210:	9005      	str	r0, [sp, #20]
1a003212:	9805      	ldr	r0, [sp, #20]
1a003214:	b057      	add	sp, #348	; 0x15c
1a003216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00321a:	9803      	ldr	r0, [sp, #12]
1a00321c:	f002 fd6e 	bl	1a005cfc <__sinit>
1a003220:	e6f4      	b.n	1a00300c <_vfprintf_r+0x2c>
1a003222:	f048 0810 	orr.w	r8, r8, #16
1a003226:	f018 0f20 	tst.w	r8, #32
1a00322a:	f000 836c 	beq.w	1a003906 <_vfprintf_r+0x926>
1a00322e:	9c08      	ldr	r4, [sp, #32]
1a003230:	3407      	adds	r4, #7
1a003232:	f024 0307 	bic.w	r3, r4, #7
1a003236:	e9d3 4500 	ldrd	r4, r5, [r3]
1a00323a:	f103 0208 	add.w	r2, r3, #8
1a00323e:	9208      	str	r2, [sp, #32]
1a003240:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
1a003244:	2200      	movs	r2, #0
1a003246:	e18c      	b.n	1a003562 <_vfprintf_r+0x582>
1a003248:	aa2a      	add	r2, sp, #168	; 0xa8
1a00324a:	9907      	ldr	r1, [sp, #28]
1a00324c:	9803      	ldr	r0, [sp, #12]
1a00324e:	f004 fa0d 	bl	1a00766c <__sprint_r>
1a003252:	2800      	cmp	r0, #0
1a003254:	f041 8376 	bne.w	1a004944 <_vfprintf_r+0x1964>
1a003258:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00325c:	e72c      	b.n	1a0030b8 <_vfprintf_r+0xd8>
1a00325e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a003262:	f003 f881 	bl	1a006368 <__retarget_lock_acquire_recursive>
1a003266:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a00326a:	b293      	uxth	r3, r2
1a00326c:	e6d8      	b.n	1a003020 <_vfprintf_r+0x40>
1a00326e:	bf00      	nop
	...
1a003278:	4643      	mov	r3, r8
1a00327a:	069f      	lsls	r7, r3, #26
1a00327c:	f140 832f 	bpl.w	1a0038de <_vfprintf_r+0x8fe>
1a003280:	9c08      	ldr	r4, [sp, #32]
1a003282:	3407      	adds	r4, #7
1a003284:	f024 0407 	bic.w	r4, r4, #7
1a003288:	e9d4 0100 	ldrd	r0, r1, [r4]
1a00328c:	f104 0208 	add.w	r2, r4, #8
1a003290:	9208      	str	r2, [sp, #32]
1a003292:	4604      	mov	r4, r0
1a003294:	460d      	mov	r5, r1
1a003296:	2800      	cmp	r0, #0
1a003298:	f171 0200 	sbcs.w	r2, r1, #0
1a00329c:	da05      	bge.n	1a0032aa <_vfprintf_r+0x2ca>
1a00329e:	222d      	movs	r2, #45	; 0x2d
1a0032a0:	4264      	negs	r4, r4
1a0032a2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a0032a6:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a0032aa:	aa56      	add	r2, sp, #344	; 0x158
1a0032ac:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0032b0:	9204      	str	r2, [sp, #16]
1a0032b2:	f000 84b2 	beq.w	1a003c1a <_vfprintf_r+0xc3a>
1a0032b6:	2201      	movs	r2, #1
1a0032b8:	ea54 0105 	orrs.w	r1, r4, r5
1a0032bc:	f023 0880 	bic.w	r8, r3, #128	; 0x80
1a0032c0:	f040 8159 	bne.w	1a003576 <_vfprintf_r+0x596>
1a0032c4:	f1b9 0f00 	cmp.w	r9, #0
1a0032c8:	f040 8619 	bne.w	1a003efe <_vfprintf_r+0xf1e>
1a0032cc:	2a00      	cmp	r2, #0
1a0032ce:	f040 8508 	bne.w	1a003ce2 <_vfprintf_r+0xd02>
1a0032d2:	f013 0301 	ands.w	r3, r3, #1
1a0032d6:	af56      	add	r7, sp, #344	; 0x158
1a0032d8:	9309      	str	r3, [sp, #36]	; 0x24
1a0032da:	d002      	beq.n	1a0032e2 <_vfprintf_r+0x302>
1a0032dc:	2330      	movs	r3, #48	; 0x30
1a0032de:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a0032e2:	2300      	movs	r3, #0
1a0032e4:	930a      	str	r3, [sp, #40]	; 0x28
1a0032e6:	930f      	str	r3, [sp, #60]	; 0x3c
1a0032e8:	9314      	str	r3, [sp, #80]	; 0x50
1a0032ea:	9311      	str	r3, [sp, #68]	; 0x44
1a0032ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0032ee:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a0032f2:	454b      	cmp	r3, r9
1a0032f4:	bfb8      	it	lt
1a0032f6:	464b      	movlt	r3, r9
1a0032f8:	9304      	str	r3, [sp, #16]
1a0032fa:	b112      	cbz	r2, 1a003302 <_vfprintf_r+0x322>
1a0032fc:	9b04      	ldr	r3, [sp, #16]
1a0032fe:	3301      	adds	r3, #1
1a003300:	9304      	str	r3, [sp, #16]
1a003302:	f018 0302 	ands.w	r3, r8, #2
1a003306:	930b      	str	r3, [sp, #44]	; 0x2c
1a003308:	d002      	beq.n	1a003310 <_vfprintf_r+0x330>
1a00330a:	9b04      	ldr	r3, [sp, #16]
1a00330c:	3302      	adds	r3, #2
1a00330e:	9304      	str	r3, [sp, #16]
1a003310:	f018 0384 	ands.w	r3, r8, #132	; 0x84
1a003314:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003316:	930e      	str	r3, [sp, #56]	; 0x38
1a003318:	d13f      	bne.n	1a00339a <_vfprintf_r+0x3ba>
1a00331a:	9b06      	ldr	r3, [sp, #24]
1a00331c:	9904      	ldr	r1, [sp, #16]
1a00331e:	1a5d      	subs	r5, r3, r1
1a003320:	2d00      	cmp	r5, #0
1a003322:	dd3a      	ble.n	1a00339a <_vfprintf_r+0x3ba>
1a003324:	2d10      	cmp	r5, #16
1a003326:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003328:	dd29      	ble.n	1a00337e <_vfprintf_r+0x39e>
1a00332a:	4659      	mov	r1, fp
1a00332c:	4620      	mov	r0, r4
1a00332e:	9620      	str	r6, [sp, #128]	; 0x80
1a003330:	2310      	movs	r3, #16
1a003332:	9c03      	ldr	r4, [sp, #12]
1a003334:	9e07      	ldr	r6, [sp, #28]
1a003336:	46bb      	mov	fp, r7
1a003338:	e004      	b.n	1a003344 <_vfprintf_r+0x364>
1a00333a:	3d10      	subs	r5, #16
1a00333c:	2d10      	cmp	r5, #16
1a00333e:	f101 0108 	add.w	r1, r1, #8
1a003342:	dd18      	ble.n	1a003376 <_vfprintf_r+0x396>
1a003344:	3201      	adds	r2, #1
1a003346:	4fba      	ldr	r7, [pc, #744]	; (1a003630 <_vfprintf_r+0x650>)
1a003348:	3010      	adds	r0, #16
1a00334a:	2a07      	cmp	r2, #7
1a00334c:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a003350:	e9c1 7300 	strd	r7, r3, [r1]
1a003354:	ddf1      	ble.n	1a00333a <_vfprintf_r+0x35a>
1a003356:	aa2a      	add	r2, sp, #168	; 0xa8
1a003358:	4631      	mov	r1, r6
1a00335a:	4620      	mov	r0, r4
1a00335c:	930c      	str	r3, [sp, #48]	; 0x30
1a00335e:	f004 f985 	bl	1a00766c <__sprint_r>
1a003362:	2800      	cmp	r0, #0
1a003364:	f040 843d 	bne.w	1a003be2 <_vfprintf_r+0xc02>
1a003368:	3d10      	subs	r5, #16
1a00336a:	2d10      	cmp	r5, #16
1a00336c:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a003370:	a92d      	add	r1, sp, #180	; 0xb4
1a003372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a003374:	dce6      	bgt.n	1a003344 <_vfprintf_r+0x364>
1a003376:	9e20      	ldr	r6, [sp, #128]	; 0x80
1a003378:	465f      	mov	r7, fp
1a00337a:	4604      	mov	r4, r0
1a00337c:	468b      	mov	fp, r1
1a00337e:	3201      	adds	r2, #1
1a003380:	4bab      	ldr	r3, [pc, #684]	; (1a003630 <_vfprintf_r+0x650>)
1a003382:	442c      	add	r4, r5
1a003384:	2a07      	cmp	r2, #7
1a003386:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00338a:	e9cb 3500 	strd	r3, r5, [fp]
1a00338e:	f300 84ff 	bgt.w	1a003d90 <_vfprintf_r+0xdb0>
1a003392:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a003396:	f10b 0b08 	add.w	fp, fp, #8
1a00339a:	b172      	cbz	r2, 1a0033ba <_vfprintf_r+0x3da>
1a00339c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a00339e:	3201      	adds	r2, #1
1a0033a0:	3401      	adds	r4, #1
1a0033a2:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
1a0033a6:	2101      	movs	r1, #1
1a0033a8:	2a07      	cmp	r2, #7
1a0033aa:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a0033ae:	e9cb 0100 	strd	r0, r1, [fp]
1a0033b2:	f300 8418 	bgt.w	1a003be6 <_vfprintf_r+0xc06>
1a0033b6:	f10b 0b08 	add.w	fp, fp, #8
1a0033ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0033bc:	b16b      	cbz	r3, 1a0033da <_vfprintf_r+0x3fa>
1a0033be:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0033c0:	3301      	adds	r3, #1
1a0033c2:	3402      	adds	r4, #2
1a0033c4:	a923      	add	r1, sp, #140	; 0x8c
1a0033c6:	2202      	movs	r2, #2
1a0033c8:	2b07      	cmp	r3, #7
1a0033ca:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a0033ce:	e9cb 1200 	strd	r1, r2, [fp]
1a0033d2:	f300 8415 	bgt.w	1a003c00 <_vfprintf_r+0xc20>
1a0033d6:	f10b 0b08 	add.w	fp, fp, #8
1a0033da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0033dc:	2b80      	cmp	r3, #128	; 0x80
1a0033de:	f000 8331 	beq.w	1a003a44 <_vfprintf_r+0xa64>
1a0033e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0033e4:	eba9 0503 	sub.w	r5, r9, r3
1a0033e8:	2d00      	cmp	r5, #0
1a0033ea:	dd37      	ble.n	1a00345c <_vfprintf_r+0x47c>
1a0033ec:	2d10      	cmp	r5, #16
1a0033ee:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0033f0:	4b90      	ldr	r3, [pc, #576]	; (1a003634 <_vfprintf_r+0x654>)
1a0033f2:	dd28      	ble.n	1a003446 <_vfprintf_r+0x466>
1a0033f4:	4659      	mov	r1, fp
1a0033f6:	4620      	mov	r0, r4
1a0033f8:	46bb      	mov	fp, r7
1a0033fa:	f04f 0910 	mov.w	r9, #16
1a0033fe:	4637      	mov	r7, r6
1a003400:	461c      	mov	r4, r3
1a003402:	9e07      	ldr	r6, [sp, #28]
1a003404:	e004      	b.n	1a003410 <_vfprintf_r+0x430>
1a003406:	3d10      	subs	r5, #16
1a003408:	2d10      	cmp	r5, #16
1a00340a:	f101 0108 	add.w	r1, r1, #8
1a00340e:	dd15      	ble.n	1a00343c <_vfprintf_r+0x45c>
1a003410:	3201      	adds	r2, #1
1a003412:	3010      	adds	r0, #16
1a003414:	2a07      	cmp	r2, #7
1a003416:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a00341a:	e9c1 4900 	strd	r4, r9, [r1]
1a00341e:	ddf2      	ble.n	1a003406 <_vfprintf_r+0x426>
1a003420:	aa2a      	add	r2, sp, #168	; 0xa8
1a003422:	4631      	mov	r1, r6
1a003424:	9803      	ldr	r0, [sp, #12]
1a003426:	f004 f921 	bl	1a00766c <__sprint_r>
1a00342a:	2800      	cmp	r0, #0
1a00342c:	f040 83d9 	bne.w	1a003be2 <_vfprintf_r+0xc02>
1a003430:	3d10      	subs	r5, #16
1a003432:	2d10      	cmp	r5, #16
1a003434:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a003438:	a92d      	add	r1, sp, #180	; 0xb4
1a00343a:	dce9      	bgt.n	1a003410 <_vfprintf_r+0x430>
1a00343c:	463e      	mov	r6, r7
1a00343e:	4623      	mov	r3, r4
1a003440:	465f      	mov	r7, fp
1a003442:	4604      	mov	r4, r0
1a003444:	468b      	mov	fp, r1
1a003446:	3201      	adds	r2, #1
1a003448:	442c      	add	r4, r5
1a00344a:	2a07      	cmp	r2, #7
1a00344c:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a003450:	e9cb 3500 	strd	r3, r5, [fp]
1a003454:	f300 83ef 	bgt.w	1a003c36 <_vfprintf_r+0xc56>
1a003458:	f10b 0b08 	add.w	fp, fp, #8
1a00345c:	f418 7f80 	tst.w	r8, #256	; 0x100
1a003460:	f040 8280 	bne.w	1a003964 <_vfprintf_r+0x984>
1a003464:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a003466:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003468:	f8cb 7000 	str.w	r7, [fp]
1a00346c:	3301      	adds	r3, #1
1a00346e:	4414      	add	r4, r2
1a003470:	2b07      	cmp	r3, #7
1a003472:	942c      	str	r4, [sp, #176]	; 0xb0
1a003474:	f8cb 2004 	str.w	r2, [fp, #4]
1a003478:	932b      	str	r3, [sp, #172]	; 0xac
1a00347a:	f300 8392 	bgt.w	1a003ba2 <_vfprintf_r+0xbc2>
1a00347e:	f10b 0b08 	add.w	fp, fp, #8
1a003482:	f018 0f04 	tst.w	r8, #4
1a003486:	d03b      	beq.n	1a003500 <_vfprintf_r+0x520>
1a003488:	9b06      	ldr	r3, [sp, #24]
1a00348a:	9a04      	ldr	r2, [sp, #16]
1a00348c:	1a9d      	subs	r5, r3, r2
1a00348e:	2d00      	cmp	r5, #0
1a003490:	dd36      	ble.n	1a003500 <_vfprintf_r+0x520>
1a003492:	2d10      	cmp	r5, #16
1a003494:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a003496:	dd21      	ble.n	1a0034dc <_vfprintf_r+0x4fc>
1a003498:	2610      	movs	r6, #16
1a00349a:	9f03      	ldr	r7, [sp, #12]
1a00349c:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a0034a0:	e004      	b.n	1a0034ac <_vfprintf_r+0x4cc>
1a0034a2:	3d10      	subs	r5, #16
1a0034a4:	2d10      	cmp	r5, #16
1a0034a6:	f10b 0b08 	add.w	fp, fp, #8
1a0034aa:	dd17      	ble.n	1a0034dc <_vfprintf_r+0x4fc>
1a0034ac:	3301      	adds	r3, #1
1a0034ae:	4a60      	ldr	r2, [pc, #384]	; (1a003630 <_vfprintf_r+0x650>)
1a0034b0:	3410      	adds	r4, #16
1a0034b2:	2b07      	cmp	r3, #7
1a0034b4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a0034b8:	e9cb 2600 	strd	r2, r6, [fp]
1a0034bc:	ddf1      	ble.n	1a0034a2 <_vfprintf_r+0x4c2>
1a0034be:	aa2a      	add	r2, sp, #168	; 0xa8
1a0034c0:	4641      	mov	r1, r8
1a0034c2:	4638      	mov	r0, r7
1a0034c4:	f004 f8d2 	bl	1a00766c <__sprint_r>
1a0034c8:	2800      	cmp	r0, #0
1a0034ca:	f040 856c 	bne.w	1a003fa6 <_vfprintf_r+0xfc6>
1a0034ce:	3d10      	subs	r5, #16
1a0034d0:	2d10      	cmp	r5, #16
1a0034d2:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a0034d6:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0034da:	dce7      	bgt.n	1a0034ac <_vfprintf_r+0x4cc>
1a0034dc:	3301      	adds	r3, #1
1a0034de:	4a54      	ldr	r2, [pc, #336]	; (1a003630 <_vfprintf_r+0x650>)
1a0034e0:	442c      	add	r4, r5
1a0034e2:	2b07      	cmp	r3, #7
1a0034e4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a0034e8:	e9cb 2500 	strd	r2, r5, [fp]
1a0034ec:	dd08      	ble.n	1a003500 <_vfprintf_r+0x520>
1a0034ee:	aa2a      	add	r2, sp, #168	; 0xa8
1a0034f0:	9907      	ldr	r1, [sp, #28]
1a0034f2:	9803      	ldr	r0, [sp, #12]
1a0034f4:	f004 f8ba 	bl	1a00766c <__sprint_r>
1a0034f8:	2800      	cmp	r0, #0
1a0034fa:	f040 82e9 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a0034fe:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003500:	9904      	ldr	r1, [sp, #16]
1a003502:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
1a003506:	428a      	cmp	r2, r1
1a003508:	bfac      	ite	ge
1a00350a:	189b      	addge	r3, r3, r2
1a00350c:	185b      	addlt	r3, r3, r1
1a00350e:	9305      	str	r3, [sp, #20]
1a003510:	2c00      	cmp	r4, #0
1a003512:	f040 82d5 	bne.w	1a003ac0 <_vfprintf_r+0xae0>
1a003516:	2300      	movs	r3, #0
1a003518:	932b      	str	r3, [sp, #172]	; 0xac
1a00351a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00351c:	b11b      	cbz	r3, 1a003526 <_vfprintf_r+0x546>
1a00351e:	990a      	ldr	r1, [sp, #40]	; 0x28
1a003520:	9803      	ldr	r0, [sp, #12]
1a003522:	f002 fc73 	bl	1a005e0c <_free_r>
1a003526:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00352a:	4657      	mov	r7, sl
1a00352c:	783b      	ldrb	r3, [r7, #0]
1a00352e:	2b00      	cmp	r3, #0
1a003530:	f47f ada7 	bne.w	1a003082 <_vfprintf_r+0xa2>
1a003534:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
1a003536:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00353a:	2b00      	cmp	r3, #0
1a00353c:	f041 80e7 	bne.w	1a00470e <_vfprintf_r+0x172e>
1a003540:	2300      	movs	r3, #0
1a003542:	932b      	str	r3, [sp, #172]	; 0xac
1a003544:	e2cb      	b.n	1a003ade <_vfprintf_r+0xafe>
1a003546:	4643      	mov	r3, r8
1a003548:	069a      	lsls	r2, r3, #26
1a00354a:	f140 814e 	bpl.w	1a0037ea <_vfprintf_r+0x80a>
1a00354e:	9c08      	ldr	r4, [sp, #32]
1a003550:	3407      	adds	r4, #7
1a003552:	f024 0207 	bic.w	r2, r4, #7
1a003556:	f102 0108 	add.w	r1, r2, #8
1a00355a:	e9d2 4500 	ldrd	r4, r5, [r2]
1a00355e:	9108      	str	r1, [sp, #32]
1a003560:	2201      	movs	r2, #1
1a003562:	2100      	movs	r1, #0
1a003564:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
1a003568:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a00356c:	a956      	add	r1, sp, #344	; 0x158
1a00356e:	9104      	str	r1, [sp, #16]
1a003570:	f47f aea2 	bne.w	1a0032b8 <_vfprintf_r+0x2d8>
1a003574:	4698      	mov	r8, r3
1a003576:	2a01      	cmp	r2, #1
1a003578:	f000 8350 	beq.w	1a003c1c <_vfprintf_r+0xc3c>
1a00357c:	2a02      	cmp	r2, #2
1a00357e:	f000 831b 	beq.w	1a003bb8 <_vfprintf_r+0xbd8>
1a003582:	a956      	add	r1, sp, #344	; 0x158
1a003584:	e000      	b.n	1a003588 <_vfprintf_r+0x5a8>
1a003586:	4639      	mov	r1, r7
1a003588:	08e2      	lsrs	r2, r4, #3
1a00358a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a00358e:	08e8      	lsrs	r0, r5, #3
1a003590:	f004 0307 	and.w	r3, r4, #7
1a003594:	4605      	mov	r5, r0
1a003596:	4614      	mov	r4, r2
1a003598:	3330      	adds	r3, #48	; 0x30
1a00359a:	ea54 0205 	orrs.w	r2, r4, r5
1a00359e:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0035a2:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a0035a6:	d1ee      	bne.n	1a003586 <_vfprintf_r+0x5a6>
1a0035a8:	f018 0f01 	tst.w	r8, #1
1a0035ac:	f000 8314 	beq.w	1a003bd8 <_vfprintf_r+0xbf8>
1a0035b0:	2b30      	cmp	r3, #48	; 0x30
1a0035b2:	f000 8311 	beq.w	1a003bd8 <_vfprintf_r+0xbf8>
1a0035b6:	9a04      	ldr	r2, [sp, #16]
1a0035b8:	3902      	subs	r1, #2
1a0035ba:	2330      	movs	r3, #48	; 0x30
1a0035bc:	1a52      	subs	r2, r2, r1
1a0035be:	f807 3c01 	strb.w	r3, [r7, #-1]
1a0035c2:	9209      	str	r2, [sp, #36]	; 0x24
1a0035c4:	460f      	mov	r7, r1
1a0035c6:	e68c      	b.n	1a0032e2 <_vfprintf_r+0x302>
1a0035c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a0035cc:	2200      	movs	r2, #0
1a0035ce:	f81a 6b01 	ldrb.w	r6, [sl], #1
1a0035d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0035d6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a0035da:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a0035de:	2b09      	cmp	r3, #9
1a0035e0:	d9f5      	bls.n	1a0035ce <_vfprintf_r+0x5ee>
1a0035e2:	9206      	str	r2, [sp, #24]
1a0035e4:	e57c      	b.n	1a0030e0 <_vfprintf_r+0x100>
1a0035e6:	4b14      	ldr	r3, [pc, #80]	; (1a003638 <_vfprintf_r+0x658>)
1a0035e8:	9317      	str	r3, [sp, #92]	; 0x5c
1a0035ea:	f018 0f20 	tst.w	r8, #32
1a0035ee:	f000 8114 	beq.w	1a00381a <_vfprintf_r+0x83a>
1a0035f2:	9c08      	ldr	r4, [sp, #32]
1a0035f4:	3407      	adds	r4, #7
1a0035f6:	f024 0307 	bic.w	r3, r4, #7
1a0035fa:	e9d3 4500 	ldrd	r4, r5, [r3]
1a0035fe:	f103 0208 	add.w	r2, r3, #8
1a003602:	9208      	str	r2, [sp, #32]
1a003604:	f018 0f01 	tst.w	r8, #1
1a003608:	d009      	beq.n	1a00361e <_vfprintf_r+0x63e>
1a00360a:	ea54 0305 	orrs.w	r3, r4, r5
1a00360e:	d006      	beq.n	1a00361e <_vfprintf_r+0x63e>
1a003610:	2330      	movs	r3, #48	; 0x30
1a003612:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
1a003616:	f048 0802 	orr.w	r8, r8, #2
1a00361a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a00361e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
1a003622:	2202      	movs	r2, #2
1a003624:	e79d      	b.n	1a003562 <_vfprintf_r+0x582>
1a003626:	f048 0801 	orr.w	r8, r8, #1
1a00362a:	f89a 6000 	ldrb.w	r6, [sl]
1a00362e:	e555      	b.n	1a0030dc <_vfprintf_r+0xfc>
1a003630:	1a008460 	.word	0x1a008460
1a003634:	1a008470 	.word	0x1a008470
1a003638:	1a00842c 	.word	0x1a00842c
1a00363c:	9e03      	ldr	r6, [sp, #12]
1a00363e:	4630      	mov	r0, r6
1a003640:	f002 fe80 	bl	1a006344 <_localeconv_r>
1a003644:	6843      	ldr	r3, [r0, #4]
1a003646:	9318      	str	r3, [sp, #96]	; 0x60
1a003648:	4618      	mov	r0, r3
1a00364a:	f7ff fc59 	bl	1a002f00 <strlen>
1a00364e:	901b      	str	r0, [sp, #108]	; 0x6c
1a003650:	4604      	mov	r4, r0
1a003652:	4630      	mov	r0, r6
1a003654:	f002 fe76 	bl	1a006344 <_localeconv_r>
1a003658:	6883      	ldr	r3, [r0, #8]
1a00365a:	931a      	str	r3, [sp, #104]	; 0x68
1a00365c:	2c00      	cmp	r4, #0
1a00365e:	f43f adb8 	beq.w	1a0031d2 <_vfprintf_r+0x1f2>
1a003662:	f89a 6000 	ldrb.w	r6, [sl]
1a003666:	2b00      	cmp	r3, #0
1a003668:	f43f ad38 	beq.w	1a0030dc <_vfprintf_r+0xfc>
1a00366c:	781b      	ldrb	r3, [r3, #0]
1a00366e:	2b00      	cmp	r3, #0
1a003670:	f43f ad34 	beq.w	1a0030dc <_vfprintf_r+0xfc>
1a003674:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
1a003678:	e530      	b.n	1a0030dc <_vfprintf_r+0xfc>
1a00367a:	9b08      	ldr	r3, [sp, #32]
1a00367c:	f89a 6000 	ldrb.w	r6, [sl]
1a003680:	681a      	ldr	r2, [r3, #0]
1a003682:	9206      	str	r2, [sp, #24]
1a003684:	2a00      	cmp	r2, #0
1a003686:	f103 0304 	add.w	r3, r3, #4
1a00368a:	f2c0 8697 	blt.w	1a0043bc <_vfprintf_r+0x13dc>
1a00368e:	9308      	str	r3, [sp, #32]
1a003690:	e524      	b.n	1a0030dc <_vfprintf_r+0xfc>
1a003692:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
1a003696:	f89a 6000 	ldrb.w	r6, [sl]
1a00369a:	e51f      	b.n	1a0030dc <_vfprintf_r+0xfc>
1a00369c:	f89a 6000 	ldrb.w	r6, [sl]
1a0036a0:	f048 0804 	orr.w	r8, r8, #4
1a0036a4:	e51a      	b.n	1a0030dc <_vfprintf_r+0xfc>
1a0036a6:	f89a 6000 	ldrb.w	r6, [sl]
1a0036aa:	2e2a      	cmp	r6, #42	; 0x2a
1a0036ac:	f10a 0201 	add.w	r2, sl, #1
1a0036b0:	f001 81b0 	beq.w	1a004a14 <_vfprintf_r+0x1a34>
1a0036b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a0036b8:	2b09      	cmp	r3, #9
1a0036ba:	4692      	mov	sl, r2
1a0036bc:	f04f 0900 	mov.w	r9, #0
1a0036c0:	f63f ad0e 	bhi.w	1a0030e0 <_vfprintf_r+0x100>
1a0036c4:	f81a 6b01 	ldrb.w	r6, [sl], #1
1a0036c8:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a0036cc:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a0036d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a0036d4:	2b09      	cmp	r3, #9
1a0036d6:	d9f5      	bls.n	1a0036c4 <_vfprintf_r+0x6e4>
1a0036d8:	e502      	b.n	1a0030e0 <_vfprintf_r+0x100>
1a0036da:	f048 0880 	orr.w	r8, r8, #128	; 0x80
1a0036de:	f89a 6000 	ldrb.w	r6, [sl]
1a0036e2:	e4fb      	b.n	1a0030dc <_vfprintf_r+0xfc>
1a0036e4:	9c08      	ldr	r4, [sp, #32]
1a0036e6:	3407      	adds	r4, #7
1a0036e8:	f024 0407 	bic.w	r4, r4, #7
1a0036ec:	ed94 7b00 	vldr	d7, [r4]
1a0036f0:	ec52 1b17 	vmov	r1, r2, d7
1a0036f4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
1a0036f8:	931d      	str	r3, [sp, #116]	; 0x74
1a0036fa:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
1a0036fe:	3408      	adds	r4, #8
1a003700:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a003704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003708:	4bba      	ldr	r3, [pc, #744]	; (1a0039f4 <_vfprintf_r+0xa14>)
1a00370a:	9408      	str	r4, [sp, #32]
1a00370c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a003710:	f004 fc20 	bl	1a007f54 <__aeabi_dcmpun>
1a003714:	2800      	cmp	r0, #0
1a003716:	f040 846f 	bne.w	1a003ff8 <_vfprintf_r+0x1018>
1a00371a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00371e:	4bb5      	ldr	r3, [pc, #724]	; (1a0039f4 <_vfprintf_r+0xa14>)
1a003720:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a003724:	f004 fbf8 	bl	1a007f18 <__aeabi_dcmple>
1a003728:	2800      	cmp	r0, #0
1a00372a:	f040 8465 	bne.w	1a003ff8 <_vfprintf_r+0x1018>
1a00372e:	2200      	movs	r2, #0
1a003730:	2300      	movs	r3, #0
1a003732:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a003736:	f004 fbe5 	bl	1a007f04 <__aeabi_dcmplt>
1a00373a:	2800      	cmp	r0, #0
1a00373c:	f040 855b 	bne.w	1a0041f6 <_vfprintf_r+0x1216>
1a003740:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a003744:	4fac      	ldr	r7, [pc, #688]	; (1a0039f8 <_vfprintf_r+0xa18>)
1a003746:	4bad      	ldr	r3, [pc, #692]	; (1a0039fc <_vfprintf_r+0xa1c>)
1a003748:	2000      	movs	r0, #0
1a00374a:	2103      	movs	r1, #3
1a00374c:	9104      	str	r1, [sp, #16]
1a00374e:	900a      	str	r0, [sp, #40]	; 0x28
1a003750:	f028 0880 	bic.w	r8, r8, #128	; 0x80
1a003754:	2e47      	cmp	r6, #71	; 0x47
1a003756:	bfd8      	it	le
1a003758:	461f      	movle	r7, r3
1a00375a:	9109      	str	r1, [sp, #36]	; 0x24
1a00375c:	4681      	mov	r9, r0
1a00375e:	900f      	str	r0, [sp, #60]	; 0x3c
1a003760:	9014      	str	r0, [sp, #80]	; 0x50
1a003762:	9011      	str	r0, [sp, #68]	; 0x44
1a003764:	e5c9      	b.n	1a0032fa <_vfprintf_r+0x31a>
1a003766:	9808      	ldr	r0, [sp, #32]
1a003768:	2300      	movs	r3, #0
1a00376a:	6801      	ldr	r1, [r0, #0]
1a00376c:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a003770:	461a      	mov	r2, r3
1a003772:	f88d 10f4 	strb.w	r1, [sp, #244]	; 0xf4
1a003776:	2301      	movs	r3, #1
1a003778:	1d01      	adds	r1, r0, #4
1a00377a:	9304      	str	r3, [sp, #16]
1a00377c:	920a      	str	r2, [sp, #40]	; 0x28
1a00377e:	4691      	mov	r9, r2
1a003780:	920f      	str	r2, [sp, #60]	; 0x3c
1a003782:	9214      	str	r2, [sp, #80]	; 0x50
1a003784:	9211      	str	r2, [sp, #68]	; 0x44
1a003786:	e9cd 1308 	strd	r1, r3, [sp, #32]
1a00378a:	af3d      	add	r7, sp, #244	; 0xf4
1a00378c:	e5b9      	b.n	1a003302 <_vfprintf_r+0x322>
1a00378e:	9b08      	ldr	r3, [sp, #32]
1a003790:	681f      	ldr	r7, [r3, #0]
1a003792:	2500      	movs	r5, #0
1a003794:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
1a003798:	1d1c      	adds	r4, r3, #4
1a00379a:	2f00      	cmp	r7, #0
1a00379c:	f000 8639 	beq.w	1a004412 <_vfprintf_r+0x1432>
1a0037a0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0037a4:	f000 8711 	beq.w	1a0045ca <_vfprintf_r+0x15ea>
1a0037a8:	464a      	mov	r2, r9
1a0037aa:	4629      	mov	r1, r5
1a0037ac:	4638      	mov	r0, r7
1a0037ae:	f003 f8ff 	bl	1a0069b0 <memchr>
1a0037b2:	900a      	str	r0, [sp, #40]	; 0x28
1a0037b4:	2800      	cmp	r0, #0
1a0037b6:	f000 85e7 	beq.w	1a004388 <_vfprintf_r+0x13a8>
1a0037ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0037bc:	1bdb      	subs	r3, r3, r7
1a0037be:	9309      	str	r3, [sp, #36]	; 0x24
1a0037c0:	46a9      	mov	r9, r5
1a0037c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a0037c6:	9408      	str	r4, [sp, #32]
1a0037c8:	9304      	str	r3, [sp, #16]
1a0037ca:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a0037ce:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
1a0037d2:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
1a0037d6:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
1a0037da:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a0037de:	e58c      	b.n	1a0032fa <_vfprintf_r+0x31a>
1a0037e0:	f048 0310 	orr.w	r3, r8, #16
1a0037e4:	069a      	lsls	r2, r3, #26
1a0037e6:	f53f aeb2 	bmi.w	1a00354e <_vfprintf_r+0x56e>
1a0037ea:	9a08      	ldr	r2, [sp, #32]
1a0037ec:	06df      	lsls	r7, r3, #27
1a0037ee:	f102 0104 	add.w	r1, r2, #4
1a0037f2:	f100 837e 	bmi.w	1a003ef2 <_vfprintf_r+0xf12>
1a0037f6:	065d      	lsls	r5, r3, #25
1a0037f8:	9a08      	ldr	r2, [sp, #32]
1a0037fa:	f100 84e4 	bmi.w	1a0041c6 <_vfprintf_r+0x11e6>
1a0037fe:	059c      	lsls	r4, r3, #22
1a003800:	f140 8377 	bpl.w	1a003ef2 <_vfprintf_r+0xf12>
1a003804:	7814      	ldrb	r4, [r2, #0]
1a003806:	9108      	str	r1, [sp, #32]
1a003808:	2500      	movs	r5, #0
1a00380a:	2201      	movs	r2, #1
1a00380c:	e6a9      	b.n	1a003562 <_vfprintf_r+0x582>
1a00380e:	4b7c      	ldr	r3, [pc, #496]	; (1a003a00 <_vfprintf_r+0xa20>)
1a003810:	9317      	str	r3, [sp, #92]	; 0x5c
1a003812:	f018 0f20 	tst.w	r8, #32
1a003816:	f47f aeec 	bne.w	1a0035f2 <_vfprintf_r+0x612>
1a00381a:	9a08      	ldr	r2, [sp, #32]
1a00381c:	f018 0f10 	tst.w	r8, #16
1a003820:	f102 0304 	add.w	r3, r2, #4
1a003824:	f040 8354 	bne.w	1a003ed0 <_vfprintf_r+0xef0>
1a003828:	f018 0f40 	tst.w	r8, #64	; 0x40
1a00382c:	9a08      	ldr	r2, [sp, #32]
1a00382e:	f040 84d0 	bne.w	1a0041d2 <_vfprintf_r+0x11f2>
1a003832:	f418 7f00 	tst.w	r8, #512	; 0x200
1a003836:	f000 834b 	beq.w	1a003ed0 <_vfprintf_r+0xef0>
1a00383a:	7814      	ldrb	r4, [r2, #0]
1a00383c:	9308      	str	r3, [sp, #32]
1a00383e:	2500      	movs	r5, #0
1a003840:	e6e0      	b.n	1a003604 <_vfprintf_r+0x624>
1a003842:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
1a003846:	f89a 6000 	ldrb.w	r6, [sl]
1a00384a:	2b00      	cmp	r3, #0
1a00384c:	f47f ac46 	bne.w	1a0030dc <_vfprintf_r+0xfc>
1a003850:	2320      	movs	r3, #32
1a003852:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a003856:	e441      	b.n	1a0030dc <_vfprintf_r+0xfc>
1a003858:	f89a 6000 	ldrb.w	r6, [sl]
1a00385c:	2e6c      	cmp	r6, #108	; 0x6c
1a00385e:	bf03      	ittte	eq
1a003860:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
1a003864:	f048 0820 	orreq.w	r8, r8, #32
1a003868:	f10a 0a01 	addeq.w	sl, sl, #1
1a00386c:	f048 0810 	orrne.w	r8, r8, #16
1a003870:	e434      	b.n	1a0030dc <_vfprintf_r+0xfc>
1a003872:	9a08      	ldr	r2, [sp, #32]
1a003874:	f018 0f20 	tst.w	r8, #32
1a003878:	f852 3b04 	ldr.w	r3, [r2], #4
1a00387c:	9208      	str	r2, [sp, #32]
1a00387e:	f000 83a1 	beq.w	1a003fc4 <_vfprintf_r+0xfe4>
1a003882:	9a05      	ldr	r2, [sp, #20]
1a003884:	4610      	mov	r0, r2
1a003886:	17d1      	asrs	r1, r2, #31
1a003888:	e9c3 0100 	strd	r0, r1, [r3]
1a00388c:	4657      	mov	r7, sl
1a00388e:	e64d      	b.n	1a00352c <_vfprintf_r+0x54c>
1a003890:	f89a 6000 	ldrb.w	r6, [sl]
1a003894:	2e68      	cmp	r6, #104	; 0x68
1a003896:	bf03      	ittte	eq
1a003898:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
1a00389c:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
1a0038a0:	f10a 0a01 	addeq.w	sl, sl, #1
1a0038a4:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
1a0038a8:	e418      	b.n	1a0030dc <_vfprintf_r+0xfc>
1a0038aa:	9908      	ldr	r1, [sp, #32]
1a0038ac:	4b55      	ldr	r3, [pc, #340]	; (1a003a04 <_vfprintf_r+0xa24>)
1a0038ae:	680c      	ldr	r4, [r1, #0]
1a0038b0:	9317      	str	r3, [sp, #92]	; 0x5c
1a0038b2:	f647 0230 	movw	r2, #30768	; 0x7830
1a0038b6:	3104      	adds	r1, #4
1a0038b8:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
1a0038bc:	f048 0302 	orr.w	r3, r8, #2
1a0038c0:	9108      	str	r1, [sp, #32]
1a0038c2:	2500      	movs	r5, #0
1a0038c4:	2202      	movs	r2, #2
1a0038c6:	2678      	movs	r6, #120	; 0x78
1a0038c8:	e64b      	b.n	1a003562 <_vfprintf_r+0x582>
1a0038ca:	f048 0808 	orr.w	r8, r8, #8
1a0038ce:	f89a 6000 	ldrb.w	r6, [sl]
1a0038d2:	e403      	b.n	1a0030dc <_vfprintf_r+0xfc>
1a0038d4:	f048 0310 	orr.w	r3, r8, #16
1a0038d8:	069f      	lsls	r7, r3, #26
1a0038da:	f53f acd1 	bmi.w	1a003280 <_vfprintf_r+0x2a0>
1a0038de:	9908      	ldr	r1, [sp, #32]
1a0038e0:	06dd      	lsls	r5, r3, #27
1a0038e2:	f101 0204 	add.w	r2, r1, #4
1a0038e6:	f100 82fd 	bmi.w	1a003ee4 <_vfprintf_r+0xf04>
1a0038ea:	065c      	lsls	r4, r3, #25
1a0038ec:	9908      	ldr	r1, [sp, #32]
1a0038ee:	f100 8475 	bmi.w	1a0041dc <_vfprintf_r+0x11fc>
1a0038f2:	0598      	lsls	r0, r3, #22
1a0038f4:	f140 82f6 	bpl.w	1a003ee4 <_vfprintf_r+0xf04>
1a0038f8:	f991 4000 	ldrsb.w	r4, [r1]
1a0038fc:	9208      	str	r2, [sp, #32]
1a0038fe:	17e5      	asrs	r5, r4, #31
1a003900:	4620      	mov	r0, r4
1a003902:	4629      	mov	r1, r5
1a003904:	e4c7      	b.n	1a003296 <_vfprintf_r+0x2b6>
1a003906:	9a08      	ldr	r2, [sp, #32]
1a003908:	f018 0f10 	tst.w	r8, #16
1a00390c:	f102 0304 	add.w	r3, r2, #4
1a003910:	f040 82e3 	bne.w	1a003eda <_vfprintf_r+0xefa>
1a003914:	f018 0f40 	tst.w	r8, #64	; 0x40
1a003918:	9a08      	ldr	r2, [sp, #32]
1a00391a:	f040 8467 	bne.w	1a0041ec <_vfprintf_r+0x120c>
1a00391e:	f418 7f00 	tst.w	r8, #512	; 0x200
1a003922:	f000 82da 	beq.w	1a003eda <_vfprintf_r+0xefa>
1a003926:	7814      	ldrb	r4, [r2, #0]
1a003928:	9308      	str	r3, [sp, #32]
1a00392a:	2500      	movs	r5, #0
1a00392c:	e488      	b.n	1a003240 <_vfprintf_r+0x260>
1a00392e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a003932:	f002 fd1b 	bl	1a00636c <__retarget_lock_release_recursive>
1a003936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00393a:	9305      	str	r3, [sp, #20]
1a00393c:	e443      	b.n	1a0031c6 <_vfprintf_r+0x1e6>
1a00393e:	2e00      	cmp	r6, #0
1a003940:	f43f adf8 	beq.w	1a003534 <_vfprintf_r+0x554>
1a003944:	2300      	movs	r3, #0
1a003946:	2101      	movs	r1, #1
1a003948:	461a      	mov	r2, r3
1a00394a:	9104      	str	r1, [sp, #16]
1a00394c:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
1a003950:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a003954:	930a      	str	r3, [sp, #40]	; 0x28
1a003956:	4699      	mov	r9, r3
1a003958:	930f      	str	r3, [sp, #60]	; 0x3c
1a00395a:	9314      	str	r3, [sp, #80]	; 0x50
1a00395c:	9311      	str	r3, [sp, #68]	; 0x44
1a00395e:	9109      	str	r1, [sp, #36]	; 0x24
1a003960:	af3d      	add	r7, sp, #244	; 0xf4
1a003962:	e4ce      	b.n	1a003302 <_vfprintf_r+0x322>
1a003964:	2e65      	cmp	r6, #101	; 0x65
1a003966:	f340 80ca 	ble.w	1a003afe <_vfprintf_r+0xb1e>
1a00396a:	2200      	movs	r2, #0
1a00396c:	2300      	movs	r3, #0
1a00396e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a003972:	f004 fabd 	bl	1a007ef0 <__aeabi_dcmpeq>
1a003976:	2800      	cmp	r0, #0
1a003978:	f000 8169 	beq.w	1a003c4e <_vfprintf_r+0xc6e>
1a00397c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a00397e:	4a22      	ldr	r2, [pc, #136]	; (1a003a08 <_vfprintf_r+0xa28>)
1a003980:	f8cb 2000 	str.w	r2, [fp]
1a003984:	3301      	adds	r3, #1
1a003986:	3401      	adds	r4, #1
1a003988:	2201      	movs	r2, #1
1a00398a:	2b07      	cmp	r3, #7
1a00398c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a003990:	f8cb 2004 	str.w	r2, [fp, #4]
1a003994:	f300 8406 	bgt.w	1a0041a4 <_vfprintf_r+0x11c4>
1a003998:	f10b 0b08 	add.w	fp, fp, #8
1a00399c:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a00399e:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a0039a0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0039a2:	4293      	cmp	r3, r2
1a0039a4:	db03      	blt.n	1a0039ae <_vfprintf_r+0x9ce>
1a0039a6:	f018 0f01 	tst.w	r8, #1
1a0039aa:	f43f ad6a 	beq.w	1a003482 <_vfprintf_r+0x4a2>
1a0039ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0039b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a0039b2:	f8cb 2000 	str.w	r2, [fp]
1a0039b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0039b8:	f8cb 2004 	str.w	r2, [fp, #4]
1a0039bc:	3301      	adds	r3, #1
1a0039be:	4414      	add	r4, r2
1a0039c0:	2b07      	cmp	r3, #7
1a0039c2:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a0039c6:	f300 8517 	bgt.w	1a0043f8 <_vfprintf_r+0x1418>
1a0039ca:	f10b 0b08 	add.w	fp, fp, #8
1a0039ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0039d0:	1e5d      	subs	r5, r3, #1
1a0039d2:	2d00      	cmp	r5, #0
1a0039d4:	f77f ad55 	ble.w	1a003482 <_vfprintf_r+0x4a2>
1a0039d8:	2d10      	cmp	r5, #16
1a0039da:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0039dc:	4b0b      	ldr	r3, [pc, #44]	; (1a003a0c <_vfprintf_r+0xa2c>)
1a0039de:	f340 82e7 	ble.w	1a003fb0 <_vfprintf_r+0xfd0>
1a0039e2:	4619      	mov	r1, r3
1a0039e4:	2610      	movs	r6, #16
1a0039e6:	4623      	mov	r3, r4
1a0039e8:	9f03      	ldr	r7, [sp, #12]
1a0039ea:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0039ee:	460c      	mov	r4, r1
1a0039f0:	e014      	b.n	1a003a1c <_vfprintf_r+0xa3c>
1a0039f2:	bf00      	nop
1a0039f4:	7fefffff 	.word	0x7fefffff
1a0039f8:	1a008420 	.word	0x1a008420
1a0039fc:	1a00841c 	.word	0x1a00841c
1a003a00:	1a008440 	.word	0x1a008440
1a003a04:	1a00842c 	.word	0x1a00842c
1a003a08:	1a00845c 	.word	0x1a00845c
1a003a0c:	1a008470 	.word	0x1a008470
1a003a10:	f10b 0b08 	add.w	fp, fp, #8
1a003a14:	3d10      	subs	r5, #16
1a003a16:	2d10      	cmp	r5, #16
1a003a18:	f340 82c7 	ble.w	1a003faa <_vfprintf_r+0xfca>
1a003a1c:	3201      	adds	r2, #1
1a003a1e:	3310      	adds	r3, #16
1a003a20:	2a07      	cmp	r2, #7
1a003a22:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a003a26:	e9cb 4600 	strd	r4, r6, [fp]
1a003a2a:	ddf1      	ble.n	1a003a10 <_vfprintf_r+0xa30>
1a003a2c:	aa2a      	add	r2, sp, #168	; 0xa8
1a003a2e:	4649      	mov	r1, r9
1a003a30:	4638      	mov	r0, r7
1a003a32:	f003 fe1b 	bl	1a00766c <__sprint_r>
1a003a36:	2800      	cmp	r0, #0
1a003a38:	d14c      	bne.n	1a003ad4 <_vfprintf_r+0xaf4>
1a003a3a:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a003a3e:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003a42:	e7e7      	b.n	1a003a14 <_vfprintf_r+0xa34>
1a003a44:	9b06      	ldr	r3, [sp, #24]
1a003a46:	9a04      	ldr	r2, [sp, #16]
1a003a48:	1a9d      	subs	r5, r3, r2
1a003a4a:	2d00      	cmp	r5, #0
1a003a4c:	f77f acc9 	ble.w	1a0033e2 <_vfprintf_r+0x402>
1a003a50:	2d10      	cmp	r5, #16
1a003a52:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003a54:	4bbc      	ldr	r3, [pc, #752]	; (1a003d48 <_vfprintf_r+0xd68>)
1a003a56:	dd27      	ble.n	1a003aa8 <_vfprintf_r+0xac8>
1a003a58:	4659      	mov	r1, fp
1a003a5a:	4620      	mov	r0, r4
1a003a5c:	46bb      	mov	fp, r7
1a003a5e:	461c      	mov	r4, r3
1a003a60:	4637      	mov	r7, r6
1a003a62:	9e07      	ldr	r6, [sp, #28]
1a003a64:	e004      	b.n	1a003a70 <_vfprintf_r+0xa90>
1a003a66:	3d10      	subs	r5, #16
1a003a68:	2d10      	cmp	r5, #16
1a003a6a:	f101 0108 	add.w	r1, r1, #8
1a003a6e:	dd16      	ble.n	1a003a9e <_vfprintf_r+0xabe>
1a003a70:	3201      	adds	r2, #1
1a003a72:	3010      	adds	r0, #16
1a003a74:	2310      	movs	r3, #16
1a003a76:	2a07      	cmp	r2, #7
1a003a78:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a003a7c:	600c      	str	r4, [r1, #0]
1a003a7e:	604b      	str	r3, [r1, #4]
1a003a80:	ddf1      	ble.n	1a003a66 <_vfprintf_r+0xa86>
1a003a82:	aa2a      	add	r2, sp, #168	; 0xa8
1a003a84:	4631      	mov	r1, r6
1a003a86:	9803      	ldr	r0, [sp, #12]
1a003a88:	f003 fdf0 	bl	1a00766c <__sprint_r>
1a003a8c:	2800      	cmp	r0, #0
1a003a8e:	f040 80a8 	bne.w	1a003be2 <_vfprintf_r+0xc02>
1a003a92:	3d10      	subs	r5, #16
1a003a94:	2d10      	cmp	r5, #16
1a003a96:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a003a9a:	a92d      	add	r1, sp, #180	; 0xb4
1a003a9c:	dce8      	bgt.n	1a003a70 <_vfprintf_r+0xa90>
1a003a9e:	463e      	mov	r6, r7
1a003aa0:	4623      	mov	r3, r4
1a003aa2:	465f      	mov	r7, fp
1a003aa4:	4604      	mov	r4, r0
1a003aa6:	468b      	mov	fp, r1
1a003aa8:	3201      	adds	r2, #1
1a003aaa:	442c      	add	r4, r5
1a003aac:	2a07      	cmp	r2, #7
1a003aae:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a003ab2:	e9cb 3500 	strd	r3, r5, [fp]
1a003ab6:	f300 8292 	bgt.w	1a003fde <_vfprintf_r+0xffe>
1a003aba:	f10b 0b08 	add.w	fp, fp, #8
1a003abe:	e490      	b.n	1a0033e2 <_vfprintf_r+0x402>
1a003ac0:	aa2a      	add	r2, sp, #168	; 0xa8
1a003ac2:	9907      	ldr	r1, [sp, #28]
1a003ac4:	9803      	ldr	r0, [sp, #12]
1a003ac6:	f003 fdd1 	bl	1a00766c <__sprint_r>
1a003aca:	2800      	cmp	r0, #0
1a003acc:	f43f ad23 	beq.w	1a003516 <_vfprintf_r+0x536>
1a003ad0:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a003ad4:	990a      	ldr	r1, [sp, #40]	; 0x28
1a003ad6:	b111      	cbz	r1, 1a003ade <_vfprintf_r+0xafe>
1a003ad8:	9803      	ldr	r0, [sp, #12]
1a003ada:	f002 f997 	bl	1a005e0c <_free_r>
1a003ade:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a003ae2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003ae6:	07d0      	lsls	r0, r2, #31
1a003ae8:	d402      	bmi.n	1a003af0 <_vfprintf_r+0xb10>
1a003aea:	0599      	lsls	r1, r3, #22
1a003aec:	f140 81d0 	bpl.w	1a003e90 <_vfprintf_r+0xeb0>
1a003af0:	065a      	lsls	r2, r3, #25
1a003af2:	f53f ab65 	bmi.w	1a0031c0 <_vfprintf_r+0x1e0>
1a003af6:	9805      	ldr	r0, [sp, #20]
1a003af8:	b057      	add	sp, #348	; 0x15c
1a003afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003afe:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a003b00:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a003b02:	2a01      	cmp	r2, #1
1a003b04:	f104 0401 	add.w	r4, r4, #1
1a003b08:	f103 0501 	add.w	r5, r3, #1
1a003b0c:	f10b 0608 	add.w	r6, fp, #8
1a003b10:	f340 811c 	ble.w	1a003d4c <_vfprintf_r+0xd6c>
1a003b14:	2301      	movs	r3, #1
1a003b16:	2d07      	cmp	r5, #7
1a003b18:	f8cb 7000 	str.w	r7, [fp]
1a003b1c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
1a003b20:	f8cb 3004 	str.w	r3, [fp, #4]
1a003b24:	f300 81bb 	bgt.w	1a003e9e <_vfprintf_r+0xebe>
1a003b28:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a003b2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a003b2c:	1c69      	adds	r1, r5, #1
1a003b2e:	441c      	add	r4, r3
1a003b30:	2907      	cmp	r1, #7
1a003b32:	910b      	str	r1, [sp, #44]	; 0x2c
1a003b34:	e9cd 142b 	strd	r1, r4, [sp, #172]	; 0xac
1a003b38:	e9c6 2300 	strd	r2, r3, [r6]
1a003b3c:	f300 81bb 	bgt.w	1a003eb6 <_vfprintf_r+0xed6>
1a003b40:	3608      	adds	r6, #8
1a003b42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a003b44:	1c53      	adds	r3, r2, #1
1a003b46:	461d      	mov	r5, r3
1a003b48:	9509      	str	r5, [sp, #36]	; 0x24
1a003b4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
1a003b4c:	930e      	str	r3, [sp, #56]	; 0x38
1a003b4e:	2200      	movs	r2, #0
1a003b50:	2300      	movs	r3, #0
1a003b52:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a003b56:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
1a003b5a:	f106 0b08 	add.w	fp, r6, #8
1a003b5e:	f004 f9c7 	bl	1a007ef0 <__aeabi_dcmpeq>
1a003b62:	2800      	cmp	r0, #0
1a003b64:	f040 80c2 	bne.w	1a003cec <_vfprintf_r+0xd0c>
1a003b68:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a003b6a:	f8c6 9004 	str.w	r9, [r6, #4]
1a003b6e:	3701      	adds	r7, #1
1a003b70:	444c      	add	r4, r9
1a003b72:	2d07      	cmp	r5, #7
1a003b74:	6037      	str	r7, [r6, #0]
1a003b76:	942c      	str	r4, [sp, #176]	; 0xb0
1a003b78:	952b      	str	r5, [sp, #172]	; 0xac
1a003b7a:	f300 80f9 	bgt.w	1a003d70 <_vfprintf_r+0xd90>
1a003b7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a003b80:	f106 0310 	add.w	r3, r6, #16
1a003b84:	3202      	adds	r2, #2
1a003b86:	465e      	mov	r6, fp
1a003b88:	9209      	str	r2, [sp, #36]	; 0x24
1a003b8a:	469b      	mov	fp, r3
1a003b8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a003b8e:	6072      	str	r2, [r6, #4]
1a003b90:	4414      	add	r4, r2
1a003b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003b94:	942c      	str	r4, [sp, #176]	; 0xb0
1a003b96:	ab26      	add	r3, sp, #152	; 0x98
1a003b98:	2a07      	cmp	r2, #7
1a003b9a:	922b      	str	r2, [sp, #172]	; 0xac
1a003b9c:	6033      	str	r3, [r6, #0]
1a003b9e:	f77f ac70 	ble.w	1a003482 <_vfprintf_r+0x4a2>
1a003ba2:	aa2a      	add	r2, sp, #168	; 0xa8
1a003ba4:	9907      	ldr	r1, [sp, #28]
1a003ba6:	9803      	ldr	r0, [sp, #12]
1a003ba8:	f003 fd60 	bl	1a00766c <__sprint_r>
1a003bac:	2800      	cmp	r0, #0
1a003bae:	d18f      	bne.n	1a003ad0 <_vfprintf_r+0xaf0>
1a003bb0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003bb2:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003bb6:	e464      	b.n	1a003482 <_vfprintf_r+0x4a2>
1a003bb8:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a003bba:	af56      	add	r7, sp, #344	; 0x158
1a003bbc:	0923      	lsrs	r3, r4, #4
1a003bbe:	f004 010f 	and.w	r1, r4, #15
1a003bc2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a003bc6:	092a      	lsrs	r2, r5, #4
1a003bc8:	461c      	mov	r4, r3
1a003bca:	4615      	mov	r5, r2
1a003bcc:	5c43      	ldrb	r3, [r0, r1]
1a003bce:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a003bd2:	ea54 0305 	orrs.w	r3, r4, r5
1a003bd6:	d1f1      	bne.n	1a003bbc <_vfprintf_r+0xbdc>
1a003bd8:	9b04      	ldr	r3, [sp, #16]
1a003bda:	1bdb      	subs	r3, r3, r7
1a003bdc:	9309      	str	r3, [sp, #36]	; 0x24
1a003bde:	f7ff bb80 	b.w	1a0032e2 <_vfprintf_r+0x302>
1a003be2:	46b1      	mov	r9, r6
1a003be4:	e776      	b.n	1a003ad4 <_vfprintf_r+0xaf4>
1a003be6:	aa2a      	add	r2, sp, #168	; 0xa8
1a003be8:	9907      	ldr	r1, [sp, #28]
1a003bea:	9803      	ldr	r0, [sp, #12]
1a003bec:	f003 fd3e 	bl	1a00766c <__sprint_r>
1a003bf0:	2800      	cmp	r0, #0
1a003bf2:	f47f af6d 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a003bf6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003bf8:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003bfc:	f7ff bbdd 	b.w	1a0033ba <_vfprintf_r+0x3da>
1a003c00:	aa2a      	add	r2, sp, #168	; 0xa8
1a003c02:	9907      	ldr	r1, [sp, #28]
1a003c04:	9803      	ldr	r0, [sp, #12]
1a003c06:	f003 fd31 	bl	1a00766c <__sprint_r>
1a003c0a:	2800      	cmp	r0, #0
1a003c0c:	f47f af60 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a003c10:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003c12:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003c16:	f7ff bbe0 	b.w	1a0033da <_vfprintf_r+0x3fa>
1a003c1a:	4698      	mov	r8, r3
1a003c1c:	2d00      	cmp	r5, #0
1a003c1e:	bf08      	it	eq
1a003c20:	2c0a      	cmpeq	r4, #10
1a003c22:	f080 8170 	bcs.w	1a003f06 <_vfprintf_r+0xf26>
1a003c26:	af56      	add	r7, sp, #344	; 0x158
1a003c28:	3430      	adds	r4, #48	; 0x30
1a003c2a:	2301      	movs	r3, #1
1a003c2c:	f807 4d01 	strb.w	r4, [r7, #-1]!
1a003c30:	9309      	str	r3, [sp, #36]	; 0x24
1a003c32:	f7ff bb56 	b.w	1a0032e2 <_vfprintf_r+0x302>
1a003c36:	aa2a      	add	r2, sp, #168	; 0xa8
1a003c38:	9907      	ldr	r1, [sp, #28]
1a003c3a:	9803      	ldr	r0, [sp, #12]
1a003c3c:	f003 fd16 	bl	1a00766c <__sprint_r>
1a003c40:	2800      	cmp	r0, #0
1a003c42:	f47f af45 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a003c46:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003c48:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003c4c:	e406      	b.n	1a00345c <_vfprintf_r+0x47c>
1a003c4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a003c50:	2b00      	cmp	r3, #0
1a003c52:	f340 8273 	ble.w	1a00413c <_vfprintf_r+0x115c>
1a003c56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a003c5a:	4293      	cmp	r3, r2
1a003c5c:	bfa8      	it	ge
1a003c5e:	4613      	movge	r3, r2
1a003c60:	2b00      	cmp	r3, #0
1a003c62:	461d      	mov	r5, r3
1a003c64:	dd0d      	ble.n	1a003c82 <_vfprintf_r+0xca2>
1a003c66:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a003c68:	f8cb 7000 	str.w	r7, [fp]
1a003c6c:	3301      	adds	r3, #1
1a003c6e:	442c      	add	r4, r5
1a003c70:	2b07      	cmp	r3, #7
1a003c72:	942c      	str	r4, [sp, #176]	; 0xb0
1a003c74:	f8cb 5004 	str.w	r5, [fp, #4]
1a003c78:	932b      	str	r3, [sp, #172]	; 0xac
1a003c7a:	f300 82c1 	bgt.w	1a004200 <_vfprintf_r+0x1220>
1a003c7e:	f10b 0b08 	add.w	fp, fp, #8
1a003c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a003c84:	2d00      	cmp	r5, #0
1a003c86:	bfa8      	it	ge
1a003c88:	1b5b      	subge	r3, r3, r5
1a003c8a:	2b00      	cmp	r3, #0
1a003c8c:	461d      	mov	r5, r3
1a003c8e:	f340 8099 	ble.w	1a003dc4 <_vfprintf_r+0xde4>
1a003c92:	2d10      	cmp	r5, #16
1a003c94:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003c96:	4b2c      	ldr	r3, [pc, #176]	; (1a003d48 <_vfprintf_r+0xd68>)
1a003c98:	f340 83db 	ble.w	1a004452 <_vfprintf_r+0x1472>
1a003c9c:	4618      	mov	r0, r3
1a003c9e:	4621      	mov	r1, r4
1a003ca0:	465b      	mov	r3, fp
1a003ca2:	2610      	movs	r6, #16
1a003ca4:	46bb      	mov	fp, r7
1a003ca6:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a003caa:	9c07      	ldr	r4, [sp, #28]
1a003cac:	4607      	mov	r7, r0
1a003cae:	e004      	b.n	1a003cba <_vfprintf_r+0xcda>
1a003cb0:	3308      	adds	r3, #8
1a003cb2:	3d10      	subs	r5, #16
1a003cb4:	2d10      	cmp	r5, #16
1a003cb6:	f340 83c7 	ble.w	1a004448 <_vfprintf_r+0x1468>
1a003cba:	3201      	adds	r2, #1
1a003cbc:	3110      	adds	r1, #16
1a003cbe:	2a07      	cmp	r2, #7
1a003cc0:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
1a003cc4:	e9c3 7600 	strd	r7, r6, [r3]
1a003cc8:	ddf2      	ble.n	1a003cb0 <_vfprintf_r+0xcd0>
1a003cca:	aa2a      	add	r2, sp, #168	; 0xa8
1a003ccc:	4621      	mov	r1, r4
1a003cce:	4648      	mov	r0, r9
1a003cd0:	f003 fccc 	bl	1a00766c <__sprint_r>
1a003cd4:	2800      	cmp	r0, #0
1a003cd6:	f040 84a5 	bne.w	1a004624 <_vfprintf_r+0x1644>
1a003cda:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
1a003cde:	ab2d      	add	r3, sp, #180	; 0xb4
1a003ce0:	e7e7      	b.n	1a003cb2 <_vfprintf_r+0xcd2>
1a003ce2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a003ce6:	af56      	add	r7, sp, #344	; 0x158
1a003ce8:	f7ff bafb 	b.w	1a0032e2 <_vfprintf_r+0x302>
1a003cec:	f1b9 0f00 	cmp.w	r9, #0
1a003cf0:	f77f af4c 	ble.w	1a003b8c <_vfprintf_r+0xbac>
1a003cf4:	f1b9 0f10 	cmp.w	r9, #16
1a003cf8:	4b13      	ldr	r3, [pc, #76]	; (1a003d48 <_vfprintf_r+0xd68>)
1a003cfa:	f340 8659 	ble.w	1a0049b0 <_vfprintf_r+0x19d0>
1a003cfe:	4619      	mov	r1, r3
1a003d00:	4622      	mov	r2, r4
1a003d02:	4633      	mov	r3, r6
1a003d04:	2710      	movs	r7, #16
1a003d06:	f8dd b00c 	ldr.w	fp, [sp, #12]
1a003d0a:	9c07      	ldr	r4, [sp, #28]
1a003d0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
1a003d0e:	460e      	mov	r6, r1
1a003d10:	e007      	b.n	1a003d22 <_vfprintf_r+0xd42>
1a003d12:	3308      	adds	r3, #8
1a003d14:	f1a9 0910 	sub.w	r9, r9, #16
1a003d18:	f1b9 0f10 	cmp.w	r9, #16
1a003d1c:	f340 8353 	ble.w	1a0043c6 <_vfprintf_r+0x13e6>
1a003d20:	3501      	adds	r5, #1
1a003d22:	3210      	adds	r2, #16
1a003d24:	2d07      	cmp	r5, #7
1a003d26:	e9cd 522b 	strd	r5, r2, [sp, #172]	; 0xac
1a003d2a:	e9c3 6700 	strd	r6, r7, [r3]
1a003d2e:	ddf0      	ble.n	1a003d12 <_vfprintf_r+0xd32>
1a003d30:	aa2a      	add	r2, sp, #168	; 0xa8
1a003d32:	4621      	mov	r1, r4
1a003d34:	4658      	mov	r0, fp
1a003d36:	f003 fc99 	bl	1a00766c <__sprint_r>
1a003d3a:	2800      	cmp	r0, #0
1a003d3c:	f040 8472 	bne.w	1a004624 <_vfprintf_r+0x1644>
1a003d40:	e9dd 522b 	ldrd	r5, r2, [sp, #172]	; 0xac
1a003d44:	ab2d      	add	r3, sp, #180	; 0xb4
1a003d46:	e7e5      	b.n	1a003d14 <_vfprintf_r+0xd34>
1a003d48:	1a008470 	.word	0x1a008470
1a003d4c:	f018 0f01 	tst.w	r8, #1
1a003d50:	f47f aee0 	bne.w	1a003b14 <_vfprintf_r+0xb34>
1a003d54:	2201      	movs	r2, #1
1a003d56:	2d07      	cmp	r5, #7
1a003d58:	f8cb 7000 	str.w	r7, [fp]
1a003d5c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
1a003d60:	f8cb 2004 	str.w	r2, [fp, #4]
1a003d64:	dc04      	bgt.n	1a003d70 <_vfprintf_r+0xd90>
1a003d66:	3302      	adds	r3, #2
1a003d68:	9309      	str	r3, [sp, #36]	; 0x24
1a003d6a:	f10b 0b10 	add.w	fp, fp, #16
1a003d6e:	e70d      	b.n	1a003b8c <_vfprintf_r+0xbac>
1a003d70:	aa2a      	add	r2, sp, #168	; 0xa8
1a003d72:	9907      	ldr	r1, [sp, #28]
1a003d74:	9803      	ldr	r0, [sp, #12]
1a003d76:	f003 fc79 	bl	1a00766c <__sprint_r>
1a003d7a:	2800      	cmp	r0, #0
1a003d7c:	f47f aea8 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a003d80:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a003d84:	3301      	adds	r3, #1
1a003d86:	9309      	str	r3, [sp, #36]	; 0x24
1a003d88:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
1a003d8c:	ae2d      	add	r6, sp, #180	; 0xb4
1a003d8e:	e6fd      	b.n	1a003b8c <_vfprintf_r+0xbac>
1a003d90:	aa2a      	add	r2, sp, #168	; 0xa8
1a003d92:	9907      	ldr	r1, [sp, #28]
1a003d94:	9803      	ldr	r0, [sp, #12]
1a003d96:	f003 fc69 	bl	1a00766c <__sprint_r>
1a003d9a:	2800      	cmp	r0, #0
1a003d9c:	f47f ae98 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a003da0:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a003da4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003da6:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003daa:	f7ff baf6 	b.w	1a00339a <_vfprintf_r+0x3ba>
1a003dae:	aa2a      	add	r2, sp, #168	; 0xa8
1a003db0:	9907      	ldr	r1, [sp, #28]
1a003db2:	9803      	ldr	r0, [sp, #12]
1a003db4:	f003 fc5a 	bl	1a00766c <__sprint_r>
1a003db8:	2800      	cmp	r0, #0
1a003dba:	f47f ae89 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a003dbe:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003dc0:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003dc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a003dc6:	f418 6f80 	tst.w	r8, #1024	; 0x400
1a003dca:	443b      	add	r3, r7
1a003dcc:	4699      	mov	r9, r3
1a003dce:	f040 8357 	bne.w	1a004480 <_vfprintf_r+0x14a0>
1a003dd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a003dd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a003dd6:	4293      	cmp	r3, r2
1a003dd8:	db49      	blt.n	1a003e6e <_vfprintf_r+0xe8e>
1a003dda:	f018 0f01 	tst.w	r8, #1
1a003dde:	d146      	bne.n	1a003e6e <_vfprintf_r+0xe8e>
1a003de0:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a003de2:	18bd      	adds	r5, r7, r2
1a003de4:	eba5 0509 	sub.w	r5, r5, r9
1a003de8:	1ad3      	subs	r3, r2, r3
1a003dea:	429d      	cmp	r5, r3
1a003dec:	bfa8      	it	ge
1a003dee:	461d      	movge	r5, r3
1a003df0:	2d00      	cmp	r5, #0
1a003df2:	dd0d      	ble.n	1a003e10 <_vfprintf_r+0xe30>
1a003df4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003df6:	f8cb 9000 	str.w	r9, [fp]
1a003dfa:	3201      	adds	r2, #1
1a003dfc:	442c      	add	r4, r5
1a003dfe:	2a07      	cmp	r2, #7
1a003e00:	942c      	str	r4, [sp, #176]	; 0xb0
1a003e02:	f8cb 5004 	str.w	r5, [fp, #4]
1a003e06:	922b      	str	r2, [sp, #172]	; 0xac
1a003e08:	f300 8462 	bgt.w	1a0046d0 <_vfprintf_r+0x16f0>
1a003e0c:	f10b 0b08 	add.w	fp, fp, #8
1a003e10:	2d00      	cmp	r5, #0
1a003e12:	bfac      	ite	ge
1a003e14:	1b5d      	subge	r5, r3, r5
1a003e16:	461d      	movlt	r5, r3
1a003e18:	2d00      	cmp	r5, #0
1a003e1a:	f77f ab32 	ble.w	1a003482 <_vfprintf_r+0x4a2>
1a003e1e:	2d10      	cmp	r5, #16
1a003e20:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003e22:	4bc5      	ldr	r3, [pc, #788]	; (1a004138 <_vfprintf_r+0x1158>)
1a003e24:	f340 80c4 	ble.w	1a003fb0 <_vfprintf_r+0xfd0>
1a003e28:	4619      	mov	r1, r3
1a003e2a:	2610      	movs	r6, #16
1a003e2c:	4623      	mov	r3, r4
1a003e2e:	9f03      	ldr	r7, [sp, #12]
1a003e30:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a003e34:	460c      	mov	r4, r1
1a003e36:	e005      	b.n	1a003e44 <_vfprintf_r+0xe64>
1a003e38:	f10b 0b08 	add.w	fp, fp, #8
1a003e3c:	3d10      	subs	r5, #16
1a003e3e:	2d10      	cmp	r5, #16
1a003e40:	f340 80b3 	ble.w	1a003faa <_vfprintf_r+0xfca>
1a003e44:	3201      	adds	r2, #1
1a003e46:	3310      	adds	r3, #16
1a003e48:	2a07      	cmp	r2, #7
1a003e4a:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a003e4e:	e9cb 4600 	strd	r4, r6, [fp]
1a003e52:	ddf1      	ble.n	1a003e38 <_vfprintf_r+0xe58>
1a003e54:	aa2a      	add	r2, sp, #168	; 0xa8
1a003e56:	4649      	mov	r1, r9
1a003e58:	4638      	mov	r0, r7
1a003e5a:	f003 fc07 	bl	1a00766c <__sprint_r>
1a003e5e:	2800      	cmp	r0, #0
1a003e60:	f47f ae38 	bne.w	1a003ad4 <_vfprintf_r+0xaf4>
1a003e64:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a003e68:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003e6c:	e7e6      	b.n	1a003e3c <_vfprintf_r+0xe5c>
1a003e6e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003e70:	9916      	ldr	r1, [sp, #88]	; 0x58
1a003e72:	f8cb 1000 	str.w	r1, [fp]
1a003e76:	9915      	ldr	r1, [sp, #84]	; 0x54
1a003e78:	f8cb 1004 	str.w	r1, [fp, #4]
1a003e7c:	3201      	adds	r2, #1
1a003e7e:	440c      	add	r4, r1
1a003e80:	2a07      	cmp	r2, #7
1a003e82:	942c      	str	r4, [sp, #176]	; 0xb0
1a003e84:	922b      	str	r2, [sp, #172]	; 0xac
1a003e86:	f300 828c 	bgt.w	1a0043a2 <_vfprintf_r+0x13c2>
1a003e8a:	f10b 0b08 	add.w	fp, fp, #8
1a003e8e:	e7a7      	b.n	1a003de0 <_vfprintf_r+0xe00>
1a003e90:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a003e94:	f002 fa6a 	bl	1a00636c <__retarget_lock_release_recursive>
1a003e98:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003e9c:	e628      	b.n	1a003af0 <_vfprintf_r+0xb10>
1a003e9e:	aa2a      	add	r2, sp, #168	; 0xa8
1a003ea0:	9907      	ldr	r1, [sp, #28]
1a003ea2:	9803      	ldr	r0, [sp, #12]
1a003ea4:	f003 fbe2 	bl	1a00766c <__sprint_r>
1a003ea8:	2800      	cmp	r0, #0
1a003eaa:	f47f ae11 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a003eae:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
1a003eb2:	ae2d      	add	r6, sp, #180	; 0xb4
1a003eb4:	e638      	b.n	1a003b28 <_vfprintf_r+0xb48>
1a003eb6:	aa2a      	add	r2, sp, #168	; 0xa8
1a003eb8:	9907      	ldr	r1, [sp, #28]
1a003eba:	9803      	ldr	r0, [sp, #12]
1a003ebc:	f003 fbd6 	bl	1a00766c <__sprint_r>
1a003ec0:	2800      	cmp	r0, #0
1a003ec2:	f47f ae05 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a003ec6:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a003eca:	ae2d      	add	r6, sp, #180	; 0xb4
1a003ecc:	930b      	str	r3, [sp, #44]	; 0x2c
1a003ece:	e638      	b.n	1a003b42 <_vfprintf_r+0xb62>
1a003ed0:	6814      	ldr	r4, [r2, #0]
1a003ed2:	9308      	str	r3, [sp, #32]
1a003ed4:	2500      	movs	r5, #0
1a003ed6:	f7ff bb95 	b.w	1a003604 <_vfprintf_r+0x624>
1a003eda:	6814      	ldr	r4, [r2, #0]
1a003edc:	9308      	str	r3, [sp, #32]
1a003ede:	2500      	movs	r5, #0
1a003ee0:	f7ff b9ae 	b.w	1a003240 <_vfprintf_r+0x260>
1a003ee4:	680c      	ldr	r4, [r1, #0]
1a003ee6:	9208      	str	r2, [sp, #32]
1a003ee8:	17e5      	asrs	r5, r4, #31
1a003eea:	4620      	mov	r0, r4
1a003eec:	4629      	mov	r1, r5
1a003eee:	f7ff b9d2 	b.w	1a003296 <_vfprintf_r+0x2b6>
1a003ef2:	6814      	ldr	r4, [r2, #0]
1a003ef4:	9108      	str	r1, [sp, #32]
1a003ef6:	2201      	movs	r2, #1
1a003ef8:	2500      	movs	r5, #0
1a003efa:	f7ff bb32 	b.w	1a003562 <_vfprintf_r+0x582>
1a003efe:	2a01      	cmp	r2, #1
1a003f00:	f47f ab3c 	bne.w	1a00357c <_vfprintf_r+0x59c>
1a003f04:	e68f      	b.n	1a003c26 <_vfprintf_r+0xc46>
1a003f06:	f408 6380 	and.w	r3, r8, #1024	; 0x400
1a003f0a:	2200      	movs	r2, #0
1a003f0c:	e9cd a609 	strd	sl, r6, [sp, #36]	; 0x24
1a003f10:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
1a003f14:	af56      	add	r7, sp, #344	; 0x158
1a003f16:	4692      	mov	sl, r2
1a003f18:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
1a003f1c:	461e      	mov	r6, r3
1a003f1e:	e00a      	b.n	1a003f36 <_vfprintf_r+0xf56>
1a003f20:	2300      	movs	r3, #0
1a003f22:	4620      	mov	r0, r4
1a003f24:	4629      	mov	r1, r5
1a003f26:	220a      	movs	r2, #10
1a003f28:	f7fe fce8 	bl	1a0028fc <__aeabi_uldivmod>
1a003f2c:	4604      	mov	r4, r0
1a003f2e:	460d      	mov	r5, r1
1a003f30:	ea54 0305 	orrs.w	r3, r4, r5
1a003f34:	d029      	beq.n	1a003f8a <_vfprintf_r+0xfaa>
1a003f36:	220a      	movs	r2, #10
1a003f38:	2300      	movs	r3, #0
1a003f3a:	4620      	mov	r0, r4
1a003f3c:	4629      	mov	r1, r5
1a003f3e:	f7fe fcdd 	bl	1a0028fc <__aeabi_uldivmod>
1a003f42:	3230      	adds	r2, #48	; 0x30
1a003f44:	f807 2c01 	strb.w	r2, [r7, #-1]
1a003f48:	f10a 0a01 	add.w	sl, sl, #1
1a003f4c:	3f01      	subs	r7, #1
1a003f4e:	2e00      	cmp	r6, #0
1a003f50:	d0e6      	beq.n	1a003f20 <_vfprintf_r+0xf40>
1a003f52:	f898 3000 	ldrb.w	r3, [r8]
1a003f56:	459a      	cmp	sl, r3
1a003f58:	d1e2      	bne.n	1a003f20 <_vfprintf_r+0xf40>
1a003f5a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a003f5e:	d0df      	beq.n	1a003f20 <_vfprintf_r+0xf40>
1a003f60:	2d00      	cmp	r5, #0
1a003f62:	bf08      	it	eq
1a003f64:	2c0a      	cmpeq	r4, #10
1a003f66:	d3db      	bcc.n	1a003f20 <_vfprintf_r+0xf40>
1a003f68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a003f6a:	9918      	ldr	r1, [sp, #96]	; 0x60
1a003f6c:	1aff      	subs	r7, r7, r3
1a003f6e:	461a      	mov	r2, r3
1a003f70:	4638      	mov	r0, r7
1a003f72:	f003 fb0d 	bl	1a007590 <strncpy>
1a003f76:	f898 3001 	ldrb.w	r3, [r8, #1]
1a003f7a:	2b00      	cmp	r3, #0
1a003f7c:	f000 8496 	beq.w	1a0048ac <_vfprintf_r+0x18cc>
1a003f80:	f108 0801 	add.w	r8, r8, #1
1a003f84:	f04f 0a00 	mov.w	sl, #0
1a003f88:	e7ca      	b.n	1a003f20 <_vfprintf_r+0xf40>
1a003f8a:	9b04      	ldr	r3, [sp, #16]
1a003f8c:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
1a003f90:	1bdb      	subs	r3, r3, r7
1a003f92:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
1a003f96:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a003f98:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
1a003f9c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
1a003fa0:	9309      	str	r3, [sp, #36]	; 0x24
1a003fa2:	f7ff b99e 	b.w	1a0032e2 <_vfprintf_r+0x302>
1a003fa6:	46c1      	mov	r9, r8
1a003fa8:	e594      	b.n	1a003ad4 <_vfprintf_r+0xaf4>
1a003faa:	4621      	mov	r1, r4
1a003fac:	461c      	mov	r4, r3
1a003fae:	460b      	mov	r3, r1
1a003fb0:	3201      	adds	r2, #1
1a003fb2:	442c      	add	r4, r5
1a003fb4:	2a07      	cmp	r2, #7
1a003fb6:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a003fba:	e9cb 3500 	strd	r3, r5, [fp]
1a003fbe:	f77f aa5e 	ble.w	1a00347e <_vfprintf_r+0x49e>
1a003fc2:	e5ee      	b.n	1a003ba2 <_vfprintf_r+0xbc2>
1a003fc4:	f018 0f10 	tst.w	r8, #16
1a003fc8:	f040 80f8 	bne.w	1a0041bc <_vfprintf_r+0x11dc>
1a003fcc:	f018 0f40 	tst.w	r8, #64	; 0x40
1a003fd0:	f000 8351 	beq.w	1a004676 <_vfprintf_r+0x1696>
1a003fd4:	9a05      	ldr	r2, [sp, #20]
1a003fd6:	801a      	strh	r2, [r3, #0]
1a003fd8:	4657      	mov	r7, sl
1a003fda:	f7ff baa7 	b.w	1a00352c <_vfprintf_r+0x54c>
1a003fde:	aa2a      	add	r2, sp, #168	; 0xa8
1a003fe0:	9907      	ldr	r1, [sp, #28]
1a003fe2:	9803      	ldr	r0, [sp, #12]
1a003fe4:	f003 fb42 	bl	1a00766c <__sprint_r>
1a003fe8:	2800      	cmp	r0, #0
1a003fea:	f47f ad71 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a003fee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003ff0:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003ff4:	f7ff b9f5 	b.w	1a0033e2 <_vfprintf_r+0x402>
1a003ff8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a003ffc:	4602      	mov	r2, r0
1a003ffe:	460b      	mov	r3, r1
1a004000:	f003 ffa8 	bl	1a007f54 <__aeabi_dcmpun>
1a004004:	2800      	cmp	r0, #0
1a004006:	f040 8491 	bne.w	1a00492c <_vfprintf_r+0x194c>
1a00400a:	2e61      	cmp	r6, #97	; 0x61
1a00400c:	f000 8111 	beq.w	1a004232 <_vfprintf_r+0x1252>
1a004010:	2e41      	cmp	r6, #65	; 0x41
1a004012:	f000 8377 	beq.w	1a004704 <_vfprintf_r+0x1724>
1a004016:	f448 7380 	orr.w	r3, r8, #256	; 0x100
1a00401a:	f026 0220 	bic.w	r2, r6, #32
1a00401e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a004022:	930e      	str	r3, [sp, #56]	; 0x38
1a004024:	9204      	str	r2, [sp, #16]
1a004026:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004028:	f000 842d 	beq.w	1a004886 <_vfprintf_r+0x18a6>
1a00402c:	2a47      	cmp	r2, #71	; 0x47
1a00402e:	f000 8424 	beq.w	1a00487a <_vfprintf_r+0x189a>
1a004032:	2b00      	cmp	r3, #0
1a004034:	f2c0 82f9 	blt.w	1a00462a <_vfprintf_r+0x164a>
1a004038:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
1a00403c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
1a004040:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
1a004044:	2e66      	cmp	r6, #102	; 0x66
1a004046:	f000 83eb 	beq.w	1a004820 <_vfprintf_r+0x1840>
1a00404a:	2e46      	cmp	r6, #70	; 0x46
1a00404c:	f000 847e 	beq.w	1a00494c <_vfprintf_r+0x196c>
1a004050:	9b04      	ldr	r3, [sp, #16]
1a004052:	9803      	ldr	r0, [sp, #12]
1a004054:	2b45      	cmp	r3, #69	; 0x45
1a004056:	bf0c      	ite	eq
1a004058:	f109 0501 	addeq.w	r5, r9, #1
1a00405c:	464d      	movne	r5, r9
1a00405e:	aa28      	add	r2, sp, #160	; 0xa0
1a004060:	ab25      	add	r3, sp, #148	; 0x94
1a004062:	e9cd 3200 	strd	r3, r2, [sp]
1a004066:	2102      	movs	r1, #2
1a004068:	ab24      	add	r3, sp, #144	; 0x90
1a00406a:	462a      	mov	r2, r5
1a00406c:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a004070:	f000 fe2e 	bl	1a004cd0 <_dtoa_r>
1a004074:	2e67      	cmp	r6, #103	; 0x67
1a004076:	4607      	mov	r7, r0
1a004078:	f040 849c 	bne.w	1a0049b4 <_vfprintf_r+0x19d4>
1a00407c:	f018 0f01 	tst.w	r8, #1
1a004080:	f040 83f9 	bne.w	1a004876 <_vfprintf_r+0x1896>
1a004084:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a004086:	4640      	mov	r0, r8
1a004088:	1bdb      	subs	r3, r3, r7
1a00408a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a00408e:	9310      	str	r3, [sp, #64]	; 0x40
1a004090:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a004092:	9311      	str	r3, [sp, #68]	; 0x44
1a004094:	9b04      	ldr	r3, [sp, #16]
1a004096:	2b47      	cmp	r3, #71	; 0x47
1a004098:	f000 81e7 	beq.w	1a00446a <_vfprintf_r+0x148a>
1a00409c:	9b04      	ldr	r3, [sp, #16]
1a00409e:	2b46      	cmp	r3, #70	; 0x46
1a0040a0:	f000 8300 	beq.w	1a0046a4 <_vfprintf_r+0x16c4>
1a0040a4:	9904      	ldr	r1, [sp, #16]
1a0040a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0040a8:	b2f2      	uxtb	r2, r6
1a0040aa:	2941      	cmp	r1, #65	; 0x41
1a0040ac:	bf08      	it	eq
1a0040ae:	320f      	addeq	r2, #15
1a0040b0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
1a0040b4:	bf06      	itte	eq
1a0040b6:	b2d2      	uxtbeq	r2, r2
1a0040b8:	2101      	moveq	r1, #1
1a0040ba:	2100      	movne	r1, #0
1a0040bc:	2b00      	cmp	r3, #0
1a0040be:	9324      	str	r3, [sp, #144]	; 0x90
1a0040c0:	bfb8      	it	lt
1a0040c2:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
1a0040c4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
1a0040c8:	bfba      	itte	lt
1a0040ca:	f1c3 0301 	rsblt	r3, r3, #1
1a0040ce:	222d      	movlt	r2, #45	; 0x2d
1a0040d0:	222b      	movge	r2, #43	; 0x2b
1a0040d2:	2b09      	cmp	r3, #9
1a0040d4:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
1a0040d8:	f300 83f9 	bgt.w	1a0048ce <_vfprintf_r+0x18ee>
1a0040dc:	2900      	cmp	r1, #0
1a0040de:	f040 8487 	bne.w	1a0049f0 <_vfprintf_r+0x1a10>
1a0040e2:	2230      	movs	r2, #48	; 0x30
1a0040e4:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
1a0040e8:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
1a0040ec:	3330      	adds	r3, #48	; 0x30
1a0040ee:	7013      	strb	r3, [r2, #0]
1a0040f0:	1c53      	adds	r3, r2, #1
1a0040f2:	aa26      	add	r2, sp, #152	; 0x98
1a0040f4:	1a9b      	subs	r3, r3, r2
1a0040f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a0040f8:	9319      	str	r3, [sp, #100]	; 0x64
1a0040fa:	2a01      	cmp	r2, #1
1a0040fc:	4413      	add	r3, r2
1a0040fe:	9309      	str	r3, [sp, #36]	; 0x24
1a004100:	f340 8442 	ble.w	1a004988 <_vfprintf_r+0x19a8>
1a004104:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004106:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a004108:	4413      	add	r3, r2
1a00410a:	9309      	str	r3, [sp, #36]	; 0x24
1a00410c:	2300      	movs	r3, #0
1a00410e:	930f      	str	r3, [sp, #60]	; 0x3c
1a004110:	9314      	str	r3, [sp, #80]	; 0x50
1a004112:	9311      	str	r3, [sp, #68]	; 0x44
1a004114:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004116:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
1a00411a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a00411e:	f440 7880 	orr.w	r8, r0, #256	; 0x100
1a004122:	9304      	str	r3, [sp, #16]
1a004124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004126:	2b00      	cmp	r3, #0
1a004128:	f040 8275 	bne.w	1a004616 <_vfprintf_r+0x1636>
1a00412c:	4699      	mov	r9, r3
1a00412e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a004132:	f7ff b8e2 	b.w	1a0032fa <_vfprintf_r+0x31a>
1a004136:	bf00      	nop
1a004138:	1a008470 	.word	0x1a008470
1a00413c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a00413e:	49bd      	ldr	r1, [pc, #756]	; (1a004434 <_vfprintf_r+0x1454>)
1a004140:	f8cb 1000 	str.w	r1, [fp]
1a004144:	3201      	adds	r2, #1
1a004146:	3401      	adds	r4, #1
1a004148:	2101      	movs	r1, #1
1a00414a:	2a07      	cmp	r2, #7
1a00414c:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a004150:	f8cb 1004 	str.w	r1, [fp, #4]
1a004154:	dc60      	bgt.n	1a004218 <_vfprintf_r+0x1238>
1a004156:	f10b 0b08 	add.w	fp, fp, #8
1a00415a:	b92b      	cbnz	r3, 1a004168 <_vfprintf_r+0x1188>
1a00415c:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a00415e:	b91a      	cbnz	r2, 1a004168 <_vfprintf_r+0x1188>
1a004160:	f018 0f01 	tst.w	r8, #1
1a004164:	f43f a98d 	beq.w	1a003482 <_vfprintf_r+0x4a2>
1a004168:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a00416a:	9916      	ldr	r1, [sp, #88]	; 0x58
1a00416c:	f8cb 1000 	str.w	r1, [fp]
1a004170:	9915      	ldr	r1, [sp, #84]	; 0x54
1a004172:	f8cb 1004 	str.w	r1, [fp, #4]
1a004176:	3201      	adds	r2, #1
1a004178:	440c      	add	r4, r1
1a00417a:	2a07      	cmp	r2, #7
1a00417c:	942c      	str	r4, [sp, #176]	; 0xb0
1a00417e:	922b      	str	r2, [sp, #172]	; 0xac
1a004180:	f300 8282 	bgt.w	1a004688 <_vfprintf_r+0x16a8>
1a004184:	f10b 0b08 	add.w	fp, fp, #8
1a004188:	2b00      	cmp	r3, #0
1a00418a:	f2c0 82e7 	blt.w	1a00475c <_vfprintf_r+0x177c>
1a00418e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a004190:	3201      	adds	r2, #1
1a004192:	441c      	add	r4, r3
1a004194:	2a07      	cmp	r2, #7
1a004196:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00419a:	e9cb 7300 	strd	r7, r3, [fp]
1a00419e:	f77f a96e 	ble.w	1a00347e <_vfprintf_r+0x49e>
1a0041a2:	e4fe      	b.n	1a003ba2 <_vfprintf_r+0xbc2>
1a0041a4:	aa2a      	add	r2, sp, #168	; 0xa8
1a0041a6:	9907      	ldr	r1, [sp, #28]
1a0041a8:	9803      	ldr	r0, [sp, #12]
1a0041aa:	f003 fa5f 	bl	1a00766c <__sprint_r>
1a0041ae:	2800      	cmp	r0, #0
1a0041b0:	f47f ac8e 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a0041b4:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0041b8:	f7ff bbf0 	b.w	1a00399c <_vfprintf_r+0x9bc>
1a0041bc:	9a05      	ldr	r2, [sp, #20]
1a0041be:	601a      	str	r2, [r3, #0]
1a0041c0:	4657      	mov	r7, sl
1a0041c2:	f7ff b9b3 	b.w	1a00352c <_vfprintf_r+0x54c>
1a0041c6:	8814      	ldrh	r4, [r2, #0]
1a0041c8:	9108      	str	r1, [sp, #32]
1a0041ca:	2500      	movs	r5, #0
1a0041cc:	2201      	movs	r2, #1
1a0041ce:	f7ff b9c8 	b.w	1a003562 <_vfprintf_r+0x582>
1a0041d2:	8814      	ldrh	r4, [r2, #0]
1a0041d4:	9308      	str	r3, [sp, #32]
1a0041d6:	2500      	movs	r5, #0
1a0041d8:	f7ff ba14 	b.w	1a003604 <_vfprintf_r+0x624>
1a0041dc:	f9b1 4000 	ldrsh.w	r4, [r1]
1a0041e0:	9208      	str	r2, [sp, #32]
1a0041e2:	17e5      	asrs	r5, r4, #31
1a0041e4:	4620      	mov	r0, r4
1a0041e6:	4629      	mov	r1, r5
1a0041e8:	f7ff b855 	b.w	1a003296 <_vfprintf_r+0x2b6>
1a0041ec:	8814      	ldrh	r4, [r2, #0]
1a0041ee:	9308      	str	r3, [sp, #32]
1a0041f0:	2500      	movs	r5, #0
1a0041f2:	f7ff b825 	b.w	1a003240 <_vfprintf_r+0x260>
1a0041f6:	222d      	movs	r2, #45	; 0x2d
1a0041f8:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a0041fc:	f7ff baa2 	b.w	1a003744 <_vfprintf_r+0x764>
1a004200:	aa2a      	add	r2, sp, #168	; 0xa8
1a004202:	9907      	ldr	r1, [sp, #28]
1a004204:	9803      	ldr	r0, [sp, #12]
1a004206:	f003 fa31 	bl	1a00766c <__sprint_r>
1a00420a:	2800      	cmp	r0, #0
1a00420c:	f47f ac60 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a004210:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a004212:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004216:	e534      	b.n	1a003c82 <_vfprintf_r+0xca2>
1a004218:	aa2a      	add	r2, sp, #168	; 0xa8
1a00421a:	9907      	ldr	r1, [sp, #28]
1a00421c:	9803      	ldr	r0, [sp, #12]
1a00421e:	f003 fa25 	bl	1a00766c <__sprint_r>
1a004222:	2800      	cmp	r0, #0
1a004224:	f47f ac54 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a004228:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a00422a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a00422c:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004230:	e793      	b.n	1a00415a <_vfprintf_r+0x117a>
1a004232:	2330      	movs	r3, #48	; 0x30
1a004234:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a004238:	2378      	movs	r3, #120	; 0x78
1a00423a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a00423e:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
1a004242:	f048 0402 	orr.w	r4, r8, #2
1a004246:	f300 82b0 	bgt.w	1a0047aa <_vfprintf_r+0x17ca>
1a00424a:	f448 7381 	orr.w	r3, r8, #258	; 0x102
1a00424e:	930e      	str	r3, [sp, #56]	; 0x38
1a004250:	f026 0320 	bic.w	r3, r6, #32
1a004254:	9304      	str	r3, [sp, #16]
1a004256:	2200      	movs	r2, #0
1a004258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00425a:	920a      	str	r2, [sp, #40]	; 0x28
1a00425c:	46a0      	mov	r8, r4
1a00425e:	af3d      	add	r7, sp, #244	; 0xf4
1a004260:	2b00      	cmp	r3, #0
1a004262:	f2c0 81e3 	blt.w	1a00462c <_vfprintf_r+0x164c>
1a004266:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
1a00426a:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
1a00426e:	2300      	movs	r3, #0
1a004270:	930b      	str	r3, [sp, #44]	; 0x2c
1a004272:	2e61      	cmp	r6, #97	; 0x61
1a004274:	f000 8255 	beq.w	1a004722 <_vfprintf_r+0x1742>
1a004278:	2e41      	cmp	r6, #65	; 0x41
1a00427a:	f47f aee3 	bne.w	1a004044 <_vfprintf_r+0x1064>
1a00427e:	a824      	add	r0, sp, #144	; 0x90
1a004280:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a004284:	f003 f90c 	bl	1a0074a0 <frexp>
1a004288:	2200      	movs	r2, #0
1a00428a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a00428e:	ec51 0b10 	vmov	r0, r1, d0
1a004292:	f003 fbc5 	bl	1a007a20 <__aeabi_dmul>
1a004296:	2200      	movs	r2, #0
1a004298:	2300      	movs	r3, #0
1a00429a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00429e:	f003 fe27 	bl	1a007ef0 <__aeabi_dcmpeq>
1a0042a2:	2800      	cmp	r0, #0
1a0042a4:	f040 8305 	bne.w	1a0048b2 <_vfprintf_r+0x18d2>
1a0042a8:	4b63      	ldr	r3, [pc, #396]	; (1a004438 <_vfprintf_r+0x1458>)
1a0042aa:	9309      	str	r3, [sp, #36]	; 0x24
1a0042ac:	e9cd a60f 	strd	sl, r6, [sp, #60]	; 0x3c
1a0042b0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
1a0042b4:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
1a0042b8:	9721      	str	r7, [sp, #132]	; 0x84
1a0042ba:	46b9      	mov	r9, r7
1a0042bc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
1a0042c0:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
1a0042c4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
1a0042c8:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
1a0042cc:	e003      	b.n	1a0042d6 <_vfprintf_r+0x12f6>
1a0042ce:	f003 fe0f 	bl	1a007ef0 <__aeabi_dcmpeq>
1a0042d2:	bb20      	cbnz	r0, 1a00431e <_vfprintf_r+0x133e>
1a0042d4:	46a9      	mov	r9, r5
1a0042d6:	2200      	movs	r2, #0
1a0042d8:	4b58      	ldr	r3, [pc, #352]	; (1a00443c <_vfprintf_r+0x145c>)
1a0042da:	4630      	mov	r0, r6
1a0042dc:	4639      	mov	r1, r7
1a0042de:	f003 fb9f 	bl	1a007a20 <__aeabi_dmul>
1a0042e2:	460f      	mov	r7, r1
1a0042e4:	4606      	mov	r6, r0
1a0042e6:	f003 fe4b 	bl	1a007f80 <__aeabi_d2iz>
1a0042ea:	4680      	mov	r8, r0
1a0042ec:	f7fe fa4c 	bl	1a002788 <__aeabi_i2d>
1a0042f0:	4602      	mov	r2, r0
1a0042f2:	460b      	mov	r3, r1
1a0042f4:	4630      	mov	r0, r6
1a0042f6:	4639      	mov	r1, r7
1a0042f8:	f7fe f8f8 	bl	1a0024ec <__aeabi_dsub>
1a0042fc:	464d      	mov	r5, r9
1a0042fe:	f81a c008 	ldrb.w	ip, [sl, r8]
1a004302:	f805 cb01 	strb.w	ip, [r5], #1
1a004306:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a00430a:	46a3      	mov	fp, r4
1a00430c:	4606      	mov	r6, r0
1a00430e:	460f      	mov	r7, r1
1a004310:	f04f 0200 	mov.w	r2, #0
1a004314:	f04f 0300 	mov.w	r3, #0
1a004318:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
1a00431c:	d1d7      	bne.n	1a0042ce <_vfprintf_r+0x12ee>
1a00431e:	4630      	mov	r0, r6
1a004320:	4639      	mov	r1, r7
1a004322:	2200      	movs	r2, #0
1a004324:	4b46      	ldr	r3, [pc, #280]	; (1a004440 <_vfprintf_r+0x1460>)
1a004326:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a00432a:	9e10      	ldr	r6, [sp, #64]	; 0x40
1a00432c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
1a004330:	4644      	mov	r4, r8
1a004332:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a004336:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
1a00433a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
1a00433e:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
1a004342:	9f21      	ldr	r7, [sp, #132]	; 0x84
1a004344:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004348:	f003 fdfa 	bl	1a007f40 <__aeabi_dcmpgt>
1a00434c:	2800      	cmp	r0, #0
1a00434e:	f040 8176 	bne.w	1a00463e <_vfprintf_r+0x165e>
1a004352:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a004356:	2200      	movs	r2, #0
1a004358:	4b39      	ldr	r3, [pc, #228]	; (1a004440 <_vfprintf_r+0x1460>)
1a00435a:	f003 fdc9 	bl	1a007ef0 <__aeabi_dcmpeq>
1a00435e:	b110      	cbz	r0, 1a004366 <_vfprintf_r+0x1386>
1a004360:	07e2      	lsls	r2, r4, #31
1a004362:	f100 816c 	bmi.w	1a00463e <_vfprintf_r+0x165e>
1a004366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004368:	2b00      	cmp	r3, #0
1a00436a:	db07      	blt.n	1a00437c <_vfprintf_r+0x139c>
1a00436c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00436e:	3301      	adds	r3, #1
1a004370:	442b      	add	r3, r5
1a004372:	2230      	movs	r2, #48	; 0x30
1a004374:	f805 2b01 	strb.w	r2, [r5], #1
1a004378:	42ab      	cmp	r3, r5
1a00437a:	d1fb      	bne.n	1a004374 <_vfprintf_r+0x1394>
1a00437c:	1beb      	subs	r3, r5, r7
1a00437e:	4640      	mov	r0, r8
1a004380:	9310      	str	r3, [sp, #64]	; 0x40
1a004382:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a004386:	e683      	b.n	1a004090 <_vfprintf_r+0x10b0>
1a004388:	f8cd 9010 	str.w	r9, [sp, #16]
1a00438c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a004390:	9408      	str	r4, [sp, #32]
1a004392:	4681      	mov	r9, r0
1a004394:	900f      	str	r0, [sp, #60]	; 0x3c
1a004396:	9014      	str	r0, [sp, #80]	; 0x50
1a004398:	9011      	str	r0, [sp, #68]	; 0x44
1a00439a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a00439e:	f7fe bfac 	b.w	1a0032fa <_vfprintf_r+0x31a>
1a0043a2:	aa2a      	add	r2, sp, #168	; 0xa8
1a0043a4:	9907      	ldr	r1, [sp, #28]
1a0043a6:	9803      	ldr	r0, [sp, #12]
1a0043a8:	f003 f960 	bl	1a00766c <__sprint_r>
1a0043ac:	2800      	cmp	r0, #0
1a0043ae:	f47f ab8f 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a0043b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a0043b4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0043b6:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0043ba:	e511      	b.n	1a003de0 <_vfprintf_r+0xe00>
1a0043bc:	4252      	negs	r2, r2
1a0043be:	9206      	str	r2, [sp, #24]
1a0043c0:	9308      	str	r3, [sp, #32]
1a0043c2:	f7ff b96d 	b.w	1a0036a0 <_vfprintf_r+0x6c0>
1a0043c6:	4614      	mov	r4, r2
1a0043c8:	4632      	mov	r2, r6
1a0043ca:	461e      	mov	r6, r3
1a0043cc:	4613      	mov	r3, r2
1a0043ce:	462a      	mov	r2, r5
1a0043d0:	3201      	adds	r2, #1
1a0043d2:	9209      	str	r2, [sp, #36]	; 0x24
1a0043d4:	f106 0208 	add.w	r2, r6, #8
1a0043d8:	e9c6 3900 	strd	r3, r9, [r6]
1a0043dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0043de:	932b      	str	r3, [sp, #172]	; 0xac
1a0043e0:	444c      	add	r4, r9
1a0043e2:	2b07      	cmp	r3, #7
1a0043e4:	942c      	str	r4, [sp, #176]	; 0xb0
1a0043e6:	f73f acc3 	bgt.w	1a003d70 <_vfprintf_r+0xd90>
1a0043ea:	3301      	adds	r3, #1
1a0043ec:	9309      	str	r3, [sp, #36]	; 0x24
1a0043ee:	f102 0b08 	add.w	fp, r2, #8
1a0043f2:	4616      	mov	r6, r2
1a0043f4:	f7ff bbca 	b.w	1a003b8c <_vfprintf_r+0xbac>
1a0043f8:	aa2a      	add	r2, sp, #168	; 0xa8
1a0043fa:	9907      	ldr	r1, [sp, #28]
1a0043fc:	9803      	ldr	r0, [sp, #12]
1a0043fe:	f003 f935 	bl	1a00766c <__sprint_r>
1a004402:	2800      	cmp	r0, #0
1a004404:	f47f ab64 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a004408:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a00440a:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00440e:	f7ff bade 	b.w	1a0039ce <_vfprintf_r+0x9ee>
1a004412:	464b      	mov	r3, r9
1a004414:	2b06      	cmp	r3, #6
1a004416:	bf28      	it	cs
1a004418:	2306      	movcs	r3, #6
1a00441a:	46b9      	mov	r9, r7
1a00441c:	970f      	str	r7, [sp, #60]	; 0x3c
1a00441e:	9714      	str	r7, [sp, #80]	; 0x50
1a004420:	9711      	str	r7, [sp, #68]	; 0x44
1a004422:	970a      	str	r7, [sp, #40]	; 0x28
1a004424:	463a      	mov	r2, r7
1a004426:	9304      	str	r3, [sp, #16]
1a004428:	e9cd 4308 	strd	r4, r3, [sp, #32]
1a00442c:	4f05      	ldr	r7, [pc, #20]	; (1a004444 <_vfprintf_r+0x1464>)
1a00442e:	f7fe bf64 	b.w	1a0032fa <_vfprintf_r+0x31a>
1a004432:	bf00      	nop
1a004434:	1a00845c 	.word	0x1a00845c
1a004438:	1a008440 	.word	0x1a008440
1a00443c:	40300000 	.word	0x40300000
1a004440:	3fe00000 	.word	0x3fe00000
1a004444:	1a008454 	.word	0x1a008454
1a004448:	460c      	mov	r4, r1
1a00444a:	4639      	mov	r1, r7
1a00444c:	465f      	mov	r7, fp
1a00444e:	469b      	mov	fp, r3
1a004450:	460b      	mov	r3, r1
1a004452:	3201      	adds	r2, #1
1a004454:	442c      	add	r4, r5
1a004456:	2a07      	cmp	r2, #7
1a004458:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00445c:	e9cb 3500 	strd	r3, r5, [fp]
1a004460:	f73f aca5 	bgt.w	1a003dae <_vfprintf_r+0xdce>
1a004464:	f10b 0b08 	add.w	fp, fp, #8
1a004468:	e4ac      	b.n	1a003dc4 <_vfprintf_r+0xde4>
1a00446a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a00446c:	1cda      	adds	r2, r3, #3
1a00446e:	db02      	blt.n	1a004476 <_vfprintf_r+0x1496>
1a004470:	4599      	cmp	r9, r3
1a004472:	f280 80b5 	bge.w	1a0045e0 <_vfprintf_r+0x1600>
1a004476:	3e02      	subs	r6, #2
1a004478:	f026 0320 	bic.w	r3, r6, #32
1a00447c:	9304      	str	r3, [sp, #16]
1a00447e:	e611      	b.n	1a0040a4 <_vfprintf_r+0x10c4>
1a004480:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a004482:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
1a004486:	465a      	mov	r2, fp
1a004488:	e9dd 8b1a 	ldrd	r8, fp, [sp, #104]	; 0x68
1a00448c:	18fb      	adds	r3, r7, r3
1a00448e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a004492:	970c      	str	r7, [sp, #48]	; 0x30
1a004494:	4eaf      	ldr	r6, [pc, #700]	; (1a004754 <_vfprintf_r+0x1774>)
1a004496:	f8dd a01c 	ldr.w	sl, [sp, #28]
1a00449a:	9309      	str	r3, [sp, #36]	; 0x24
1a00449c:	464f      	mov	r7, r9
1a00449e:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a0044a2:	4621      	mov	r1, r4
1a0044a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a0044a6:	2b00      	cmp	r3, #0
1a0044a8:	d05b      	beq.n	1a004562 <_vfprintf_r+0x1582>
1a0044aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0044ac:	2b00      	cmp	r3, #0
1a0044ae:	d154      	bne.n	1a00455a <_vfprintf_r+0x157a>
1a0044b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a0044b2:	3b01      	subs	r3, #1
1a0044b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a0044b8:	9314      	str	r3, [sp, #80]	; 0x50
1a0044ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0044bc:	9818      	ldr	r0, [sp, #96]	; 0x60
1a0044be:	6010      	str	r0, [r2, #0]
1a0044c0:	3301      	adds	r3, #1
1a0044c2:	4459      	add	r1, fp
1a0044c4:	2b07      	cmp	r3, #7
1a0044c6:	912c      	str	r1, [sp, #176]	; 0xb0
1a0044c8:	f8c2 b004 	str.w	fp, [r2, #4]
1a0044cc:	932b      	str	r3, [sp, #172]	; 0xac
1a0044ce:	dc68      	bgt.n	1a0045a2 <_vfprintf_r+0x15c2>
1a0044d0:	3208      	adds	r2, #8
1a0044d2:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0044d4:	f898 3000 	ldrb.w	r3, [r8]
1a0044d8:	1bc5      	subs	r5, r0, r7
1a0044da:	429d      	cmp	r5, r3
1a0044dc:	bfa8      	it	ge
1a0044de:	461d      	movge	r5, r3
1a0044e0:	2d00      	cmp	r5, #0
1a0044e2:	dd0b      	ble.n	1a0044fc <_vfprintf_r+0x151c>
1a0044e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0044e6:	6017      	str	r7, [r2, #0]
1a0044e8:	3301      	adds	r3, #1
1a0044ea:	4429      	add	r1, r5
1a0044ec:	2b07      	cmp	r3, #7
1a0044ee:	912c      	str	r1, [sp, #176]	; 0xb0
1a0044f0:	6055      	str	r5, [r2, #4]
1a0044f2:	932b      	str	r3, [sp, #172]	; 0xac
1a0044f4:	dc5e      	bgt.n	1a0045b4 <_vfprintf_r+0x15d4>
1a0044f6:	f898 3000 	ldrb.w	r3, [r8]
1a0044fa:	3208      	adds	r2, #8
1a0044fc:	2d00      	cmp	r5, #0
1a0044fe:	bfac      	ite	ge
1a004500:	1b5d      	subge	r5, r3, r5
1a004502:	461d      	movlt	r5, r3
1a004504:	2d00      	cmp	r5, #0
1a004506:	dd26      	ble.n	1a004556 <_vfprintf_r+0x1576>
1a004508:	2d10      	cmp	r5, #16
1a00450a:	982b      	ldr	r0, [sp, #172]	; 0xac
1a00450c:	dd3c      	ble.n	1a004588 <_vfprintf_r+0x15a8>
1a00450e:	2410      	movs	r4, #16
1a004510:	e003      	b.n	1a00451a <_vfprintf_r+0x153a>
1a004512:	3208      	adds	r2, #8
1a004514:	3d10      	subs	r5, #16
1a004516:	2d10      	cmp	r5, #16
1a004518:	dd36      	ble.n	1a004588 <_vfprintf_r+0x15a8>
1a00451a:	3001      	adds	r0, #1
1a00451c:	3110      	adds	r1, #16
1a00451e:	2807      	cmp	r0, #7
1a004520:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
1a004524:	e9c2 6400 	strd	r6, r4, [r2]
1a004528:	ddf3      	ble.n	1a004512 <_vfprintf_r+0x1532>
1a00452a:	aa2a      	add	r2, sp, #168	; 0xa8
1a00452c:	4651      	mov	r1, sl
1a00452e:	4648      	mov	r0, r9
1a004530:	f003 f89c 	bl	1a00766c <__sprint_r>
1a004534:	2800      	cmp	r0, #0
1a004536:	d150      	bne.n	1a0045da <_vfprintf_r+0x15fa>
1a004538:	e9dd 012b 	ldrd	r0, r1, [sp, #172]	; 0xac
1a00453c:	aa2d      	add	r2, sp, #180	; 0xb4
1a00453e:	e7e9      	b.n	1a004514 <_vfprintf_r+0x1534>
1a004540:	aa2a      	add	r2, sp, #168	; 0xa8
1a004542:	4651      	mov	r1, sl
1a004544:	4648      	mov	r0, r9
1a004546:	f003 f891 	bl	1a00766c <__sprint_r>
1a00454a:	2800      	cmp	r0, #0
1a00454c:	d145      	bne.n	1a0045da <_vfprintf_r+0x15fa>
1a00454e:	f898 3000 	ldrb.w	r3, [r8]
1a004552:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a004554:	aa2d      	add	r2, sp, #180	; 0xb4
1a004556:	441f      	add	r7, r3
1a004558:	e7a4      	b.n	1a0044a4 <_vfprintf_r+0x14c4>
1a00455a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00455c:	3b01      	subs	r3, #1
1a00455e:	930f      	str	r3, [sp, #60]	; 0x3c
1a004560:	e7ab      	b.n	1a0044ba <_vfprintf_r+0x14da>
1a004562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004564:	2b00      	cmp	r3, #0
1a004566:	d1f8      	bne.n	1a00455a <_vfprintf_r+0x157a>
1a004568:	46b9      	mov	r9, r7
1a00456a:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00456c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a00456e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
1a004572:	18fb      	adds	r3, r7, r3
1a004574:	4599      	cmp	r9, r3
1a004576:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a00457a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a00457e:	4693      	mov	fp, r2
1a004580:	460c      	mov	r4, r1
1a004582:	bf28      	it	cs
1a004584:	4699      	movcs	r9, r3
1a004586:	e424      	b.n	1a003dd2 <_vfprintf_r+0xdf2>
1a004588:	3001      	adds	r0, #1
1a00458a:	4429      	add	r1, r5
1a00458c:	2807      	cmp	r0, #7
1a00458e:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
1a004592:	e9c2 6500 	strd	r6, r5, [r2]
1a004596:	dcd3      	bgt.n	1a004540 <_vfprintf_r+0x1560>
1a004598:	f898 3000 	ldrb.w	r3, [r8]
1a00459c:	3208      	adds	r2, #8
1a00459e:	441f      	add	r7, r3
1a0045a0:	e780      	b.n	1a0044a4 <_vfprintf_r+0x14c4>
1a0045a2:	aa2a      	add	r2, sp, #168	; 0xa8
1a0045a4:	4651      	mov	r1, sl
1a0045a6:	4648      	mov	r0, r9
1a0045a8:	f003 f860 	bl	1a00766c <__sprint_r>
1a0045ac:	b9a8      	cbnz	r0, 1a0045da <_vfprintf_r+0x15fa>
1a0045ae:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a0045b0:	aa2d      	add	r2, sp, #180	; 0xb4
1a0045b2:	e78e      	b.n	1a0044d2 <_vfprintf_r+0x14f2>
1a0045b4:	aa2a      	add	r2, sp, #168	; 0xa8
1a0045b6:	4651      	mov	r1, sl
1a0045b8:	4648      	mov	r0, r9
1a0045ba:	f003 f857 	bl	1a00766c <__sprint_r>
1a0045be:	b960      	cbnz	r0, 1a0045da <_vfprintf_r+0x15fa>
1a0045c0:	f898 3000 	ldrb.w	r3, [r8]
1a0045c4:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a0045c6:	aa2d      	add	r2, sp, #180	; 0xb4
1a0045c8:	e798      	b.n	1a0044fc <_vfprintf_r+0x151c>
1a0045ca:	4638      	mov	r0, r7
1a0045cc:	f7fe fc98 	bl	1a002f00 <strlen>
1a0045d0:	46a9      	mov	r9, r5
1a0045d2:	4603      	mov	r3, r0
1a0045d4:	9009      	str	r0, [sp, #36]	; 0x24
1a0045d6:	f7ff b8f4 	b.w	1a0037c2 <_vfprintf_r+0x7e2>
1a0045da:	46d1      	mov	r9, sl
1a0045dc:	f7ff ba7a 	b.w	1a003ad4 <_vfprintf_r+0xaf4>
1a0045e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0045e2:	4619      	mov	r1, r3
1a0045e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0045e6:	4299      	cmp	r1, r3
1a0045e8:	f300 8082 	bgt.w	1a0046f0 <_vfprintf_r+0x1710>
1a0045ec:	07c4      	lsls	r4, r0, #31
1a0045ee:	f140 816b 	bpl.w	1a0048c8 <_vfprintf_r+0x18e8>
1a0045f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0045f4:	4413      	add	r3, r2
1a0045f6:	9309      	str	r3, [sp, #36]	; 0x24
1a0045f8:	0541      	lsls	r1, r0, #21
1a0045fa:	d503      	bpl.n	1a004604 <_vfprintf_r+0x1624>
1a0045fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0045fe:	2b00      	cmp	r3, #0
1a004600:	f300 80e6 	bgt.w	1a0047d0 <_vfprintf_r+0x17f0>
1a004604:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004606:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a00460a:	9304      	str	r3, [sp, #16]
1a00460c:	2667      	movs	r6, #103	; 0x67
1a00460e:	2300      	movs	r3, #0
1a004610:	930f      	str	r3, [sp, #60]	; 0x3c
1a004612:	9314      	str	r3, [sp, #80]	; 0x50
1a004614:	e586      	b.n	1a004124 <_vfprintf_r+0x1144>
1a004616:	222d      	movs	r2, #45	; 0x2d
1a004618:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a00461c:	f04f 0900 	mov.w	r9, #0
1a004620:	f7fe be6c 	b.w	1a0032fc <_vfprintf_r+0x31c>
1a004624:	46a1      	mov	r9, r4
1a004626:	f7ff ba55 	b.w	1a003ad4 <_vfprintf_r+0xaf4>
1a00462a:	900a      	str	r0, [sp, #40]	; 0x28
1a00462c:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
1a004630:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a004634:	931f      	str	r3, [sp, #124]	; 0x7c
1a004636:	232d      	movs	r3, #45	; 0x2d
1a004638:	911e      	str	r1, [sp, #120]	; 0x78
1a00463a:	930b      	str	r3, [sp, #44]	; 0x2c
1a00463c:	e619      	b.n	1a004272 <_vfprintf_r+0x1292>
1a00463e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a004640:	9328      	str	r3, [sp, #160]	; 0xa0
1a004642:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004644:	f815 2c01 	ldrb.w	r2, [r5, #-1]
1a004648:	7bd9      	ldrb	r1, [r3, #15]
1a00464a:	4291      	cmp	r1, r2
1a00464c:	462b      	mov	r3, r5
1a00464e:	d109      	bne.n	1a004664 <_vfprintf_r+0x1684>
1a004650:	2030      	movs	r0, #48	; 0x30
1a004652:	f803 0c01 	strb.w	r0, [r3, #-1]
1a004656:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a004658:	1e5a      	subs	r2, r3, #1
1a00465a:	9228      	str	r2, [sp, #160]	; 0xa0
1a00465c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a004660:	4291      	cmp	r1, r2
1a004662:	d0f6      	beq.n	1a004652 <_vfprintf_r+0x1672>
1a004664:	2a39      	cmp	r2, #57	; 0x39
1a004666:	bf0b      	itete	eq
1a004668:	9a09      	ldreq	r2, [sp, #36]	; 0x24
1a00466a:	3201      	addne	r2, #1
1a00466c:	7a92      	ldrbeq	r2, [r2, #10]
1a00466e:	b2d2      	uxtbne	r2, r2
1a004670:	f803 2c01 	strb.w	r2, [r3, #-1]
1a004674:	e682      	b.n	1a00437c <_vfprintf_r+0x139c>
1a004676:	f418 7f00 	tst.w	r8, #512	; 0x200
1a00467a:	f43f ad9f 	beq.w	1a0041bc <_vfprintf_r+0x11dc>
1a00467e:	9a05      	ldr	r2, [sp, #20]
1a004680:	701a      	strb	r2, [r3, #0]
1a004682:	4657      	mov	r7, sl
1a004684:	f7fe bf52 	b.w	1a00352c <_vfprintf_r+0x54c>
1a004688:	aa2a      	add	r2, sp, #168	; 0xa8
1a00468a:	9907      	ldr	r1, [sp, #28]
1a00468c:	9803      	ldr	r0, [sp, #12]
1a00468e:	f002 ffed 	bl	1a00766c <__sprint_r>
1a004692:	2800      	cmp	r0, #0
1a004694:	f47f aa1c 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a004698:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a00469a:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
1a00469e:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0046a2:	e571      	b.n	1a004188 <_vfprintf_r+0x11a8>
1a0046a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0046a6:	2b00      	cmp	r3, #0
1a0046a8:	f340 8164 	ble.w	1a004974 <_vfprintf_r+0x1994>
1a0046ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0046ae:	f1b9 0f00 	cmp.w	r9, #0
1a0046b2:	f040 8103 	bne.w	1a0048bc <_vfprintf_r+0x18dc>
1a0046b6:	07c6      	lsls	r6, r0, #31
1a0046b8:	f100 8100 	bmi.w	1a0048bc <_vfprintf_r+0x18dc>
1a0046bc:	9309      	str	r3, [sp, #36]	; 0x24
1a0046be:	2666      	movs	r6, #102	; 0x66
1a0046c0:	0543      	lsls	r3, r0, #21
1a0046c2:	f100 8086 	bmi.w	1a0047d2 <_vfprintf_r+0x17f2>
1a0046c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0046c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a0046cc:	9304      	str	r3, [sp, #16]
1a0046ce:	e79e      	b.n	1a00460e <_vfprintf_r+0x162e>
1a0046d0:	aa2a      	add	r2, sp, #168	; 0xa8
1a0046d2:	9907      	ldr	r1, [sp, #28]
1a0046d4:	9803      	ldr	r0, [sp, #12]
1a0046d6:	f002 ffc9 	bl	1a00766c <__sprint_r>
1a0046da:	2800      	cmp	r0, #0
1a0046dc:	f47f a9f8 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a0046e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a0046e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a0046e4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0046e6:	1ad3      	subs	r3, r2, r3
1a0046e8:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0046ec:	f7ff bb90 	b.w	1a003e10 <_vfprintf_r+0xe30>
1a0046f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0046f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0046f4:	4413      	add	r3, r2
1a0046f6:	9309      	str	r3, [sp, #36]	; 0x24
1a0046f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0046fa:	2b00      	cmp	r3, #0
1a0046fc:	f340 8149 	ble.w	1a004992 <_vfprintf_r+0x19b2>
1a004700:	2667      	movs	r6, #103	; 0x67
1a004702:	e7dd      	b.n	1a0046c0 <_vfprintf_r+0x16e0>
1a004704:	2330      	movs	r3, #48	; 0x30
1a004706:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a00470a:	2358      	movs	r3, #88	; 0x58
1a00470c:	e595      	b.n	1a00423a <_vfprintf_r+0x125a>
1a00470e:	9803      	ldr	r0, [sp, #12]
1a004710:	aa2a      	add	r2, sp, #168	; 0xa8
1a004712:	4649      	mov	r1, r9
1a004714:	f002 ffaa 	bl	1a00766c <__sprint_r>
1a004718:	2800      	cmp	r0, #0
1a00471a:	f47f a9e0 	bne.w	1a003ade <_vfprintf_r+0xafe>
1a00471e:	f7fe bf0f 	b.w	1a003540 <_vfprintf_r+0x560>
1a004722:	a824      	add	r0, sp, #144	; 0x90
1a004724:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a004728:	f002 feba 	bl	1a0074a0 <frexp>
1a00472c:	2200      	movs	r2, #0
1a00472e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a004732:	ec51 0b10 	vmov	r0, r1, d0
1a004736:	f003 f973 	bl	1a007a20 <__aeabi_dmul>
1a00473a:	2200      	movs	r2, #0
1a00473c:	2300      	movs	r3, #0
1a00473e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004742:	f003 fbd5 	bl	1a007ef0 <__aeabi_dcmpeq>
1a004746:	b108      	cbz	r0, 1a00474c <_vfprintf_r+0x176c>
1a004748:	2301      	movs	r3, #1
1a00474a:	9324      	str	r3, [sp, #144]	; 0x90
1a00474c:	4b02      	ldr	r3, [pc, #8]	; (1a004758 <_vfprintf_r+0x1778>)
1a00474e:	9309      	str	r3, [sp, #36]	; 0x24
1a004750:	e5ac      	b.n	1a0042ac <_vfprintf_r+0x12cc>
1a004752:	bf00      	nop
1a004754:	1a008470 	.word	0x1a008470
1a004758:	1a00842c 	.word	0x1a00842c
1a00475c:	425d      	negs	r5, r3
1a00475e:	3310      	adds	r3, #16
1a004760:	4bb9      	ldr	r3, [pc, #740]	; (1a004a48 <_vfprintf_r+0x1a68>)
1a004762:	f280 8097 	bge.w	1a004894 <_vfprintf_r+0x18b4>
1a004766:	4619      	mov	r1, r3
1a004768:	2610      	movs	r6, #16
1a00476a:	4623      	mov	r3, r4
1a00476c:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a004770:	460c      	mov	r4, r1
1a004772:	e005      	b.n	1a004780 <_vfprintf_r+0x17a0>
1a004774:	f10b 0b08 	add.w	fp, fp, #8
1a004778:	3d10      	subs	r5, #16
1a00477a:	2d10      	cmp	r5, #16
1a00477c:	f340 8087 	ble.w	1a00488e <_vfprintf_r+0x18ae>
1a004780:	3201      	adds	r2, #1
1a004782:	3310      	adds	r3, #16
1a004784:	2a07      	cmp	r2, #7
1a004786:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a00478a:	e9cb 4600 	strd	r4, r6, [fp]
1a00478e:	ddf1      	ble.n	1a004774 <_vfprintf_r+0x1794>
1a004790:	aa2a      	add	r2, sp, #168	; 0xa8
1a004792:	9907      	ldr	r1, [sp, #28]
1a004794:	4648      	mov	r0, r9
1a004796:	f002 ff69 	bl	1a00766c <__sprint_r>
1a00479a:	2800      	cmp	r0, #0
1a00479c:	f47f a998 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a0047a0:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a0047a4:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0047a8:	e7e6      	b.n	1a004778 <_vfprintf_r+0x1798>
1a0047aa:	f109 0101 	add.w	r1, r9, #1
1a0047ae:	9803      	ldr	r0, [sp, #12]
1a0047b0:	f001 fe56 	bl	1a006460 <_malloc_r>
1a0047b4:	4607      	mov	r7, r0
1a0047b6:	2800      	cmp	r0, #0
1a0047b8:	f000 813b 	beq.w	1a004a32 <_vfprintf_r+0x1a52>
1a0047bc:	f448 7381 	orr.w	r3, r8, #258	; 0x102
1a0047c0:	930e      	str	r3, [sp, #56]	; 0x38
1a0047c2:	f026 0320 	bic.w	r3, r6, #32
1a0047c6:	9304      	str	r3, [sp, #16]
1a0047c8:	46a0      	mov	r8, r4
1a0047ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0047cc:	900a      	str	r0, [sp, #40]	; 0x28
1a0047ce:	e547      	b.n	1a004260 <_vfprintf_r+0x1280>
1a0047d0:	2667      	movs	r6, #103	; 0x67
1a0047d2:	981a      	ldr	r0, [sp, #104]	; 0x68
1a0047d4:	2200      	movs	r2, #0
1a0047d6:	920f      	str	r2, [sp, #60]	; 0x3c
1a0047d8:	9214      	str	r2, [sp, #80]	; 0x50
1a0047da:	7803      	ldrb	r3, [r0, #0]
1a0047dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a0047de:	2bff      	cmp	r3, #255	; 0xff
1a0047e0:	d00c      	beq.n	1a0047fc <_vfprintf_r+0x181c>
1a0047e2:	4293      	cmp	r3, r2
1a0047e4:	da0a      	bge.n	1a0047fc <_vfprintf_r+0x181c>
1a0047e6:	7841      	ldrb	r1, [r0, #1]
1a0047e8:	1ad2      	subs	r2, r2, r3
1a0047ea:	b1a9      	cbz	r1, 1a004818 <_vfprintf_r+0x1838>
1a0047ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a0047ee:	3301      	adds	r3, #1
1a0047f0:	9314      	str	r3, [sp, #80]	; 0x50
1a0047f2:	460b      	mov	r3, r1
1a0047f4:	2bff      	cmp	r3, #255	; 0xff
1a0047f6:	f100 0001 	add.w	r0, r0, #1
1a0047fa:	d1f2      	bne.n	1a0047e2 <_vfprintf_r+0x1802>
1a0047fc:	9211      	str	r2, [sp, #68]	; 0x44
1a0047fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a004800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a004802:	9909      	ldr	r1, [sp, #36]	; 0x24
1a004804:	901a      	str	r0, [sp, #104]	; 0x68
1a004806:	4413      	add	r3, r2
1a004808:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
1a00480a:	fb02 1303 	mla	r3, r2, r3, r1
1a00480e:	9309      	str	r3, [sp, #36]	; 0x24
1a004810:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004814:	9304      	str	r3, [sp, #16]
1a004816:	e485      	b.n	1a004124 <_vfprintf_r+0x1144>
1a004818:	990f      	ldr	r1, [sp, #60]	; 0x3c
1a00481a:	3101      	adds	r1, #1
1a00481c:	910f      	str	r1, [sp, #60]	; 0x3c
1a00481e:	e7de      	b.n	1a0047de <_vfprintf_r+0x17fe>
1a004820:	aa28      	add	r2, sp, #160	; 0xa0
1a004822:	ab25      	add	r3, sp, #148	; 0x94
1a004824:	e9cd 3200 	strd	r3, r2, [sp]
1a004828:	2103      	movs	r1, #3
1a00482a:	ab24      	add	r3, sp, #144	; 0x90
1a00482c:	464a      	mov	r2, r9
1a00482e:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a004832:	9803      	ldr	r0, [sp, #12]
1a004834:	f000 fa4c 	bl	1a004cd0 <_dtoa_r>
1a004838:	464d      	mov	r5, r9
1a00483a:	4607      	mov	r7, r0
1a00483c:	eb00 0409 	add.w	r4, r0, r9
1a004840:	783b      	ldrb	r3, [r7, #0]
1a004842:	2b30      	cmp	r3, #48	; 0x30
1a004844:	f000 80be 	beq.w	1a0049c4 <_vfprintf_r+0x19e4>
1a004848:	9d24      	ldr	r5, [sp, #144]	; 0x90
1a00484a:	442c      	add	r4, r5
1a00484c:	2200      	movs	r2, #0
1a00484e:	2300      	movs	r3, #0
1a004850:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a004854:	f003 fb4c 	bl	1a007ef0 <__aeabi_dcmpeq>
1a004858:	b108      	cbz	r0, 1a00485e <_vfprintf_r+0x187e>
1a00485a:	4623      	mov	r3, r4
1a00485c:	e413      	b.n	1a004086 <_vfprintf_r+0x10a6>
1a00485e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a004860:	42a3      	cmp	r3, r4
1a004862:	f4bf ac10 	bcs.w	1a004086 <_vfprintf_r+0x10a6>
1a004866:	2130      	movs	r1, #48	; 0x30
1a004868:	1c5a      	adds	r2, r3, #1
1a00486a:	9228      	str	r2, [sp, #160]	; 0xa0
1a00486c:	7019      	strb	r1, [r3, #0]
1a00486e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a004870:	429c      	cmp	r4, r3
1a004872:	d8f9      	bhi.n	1a004868 <_vfprintf_r+0x1888>
1a004874:	e407      	b.n	1a004086 <_vfprintf_r+0x10a6>
1a004876:	197c      	adds	r4, r7, r5
1a004878:	e7e8      	b.n	1a00484c <_vfprintf_r+0x186c>
1a00487a:	f1b9 0f00 	cmp.w	r9, #0
1a00487e:	f000 8092 	beq.w	1a0049a6 <_vfprintf_r+0x19c6>
1a004882:	900a      	str	r0, [sp, #40]	; 0x28
1a004884:	e4ec      	b.n	1a004260 <_vfprintf_r+0x1280>
1a004886:	900a      	str	r0, [sp, #40]	; 0x28
1a004888:	f04f 0906 	mov.w	r9, #6
1a00488c:	e4e8      	b.n	1a004260 <_vfprintf_r+0x1280>
1a00488e:	4621      	mov	r1, r4
1a004890:	461c      	mov	r4, r3
1a004892:	460b      	mov	r3, r1
1a004894:	3201      	adds	r2, #1
1a004896:	442c      	add	r4, r5
1a004898:	2a07      	cmp	r2, #7
1a00489a:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00489e:	e9cb 3500 	strd	r3, r5, [fp]
1a0048a2:	f300 80a9 	bgt.w	1a0049f8 <_vfprintf_r+0x1a18>
1a0048a6:	f10b 0b08 	add.w	fp, fp, #8
1a0048aa:	e470      	b.n	1a00418e <_vfprintf_r+0x11ae>
1a0048ac:	469a      	mov	sl, r3
1a0048ae:	f7ff bb37 	b.w	1a003f20 <_vfprintf_r+0xf40>
1a0048b2:	2301      	movs	r3, #1
1a0048b4:	9324      	str	r3, [sp, #144]	; 0x90
1a0048b6:	4b65      	ldr	r3, [pc, #404]	; (1a004a4c <_vfprintf_r+0x1a6c>)
1a0048b8:	9309      	str	r3, [sp, #36]	; 0x24
1a0048ba:	e4f7      	b.n	1a0042ac <_vfprintf_r+0x12cc>
1a0048bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0048be:	4413      	add	r3, r2
1a0048c0:	444b      	add	r3, r9
1a0048c2:	9309      	str	r3, [sp, #36]	; 0x24
1a0048c4:	2666      	movs	r6, #102	; 0x66
1a0048c6:	e6fb      	b.n	1a0046c0 <_vfprintf_r+0x16e0>
1a0048c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0048ca:	9309      	str	r3, [sp, #36]	; 0x24
1a0048cc:	e694      	b.n	1a0045f8 <_vfprintf_r+0x1618>
1a0048ce:	f10d 0ca7 	add.w	ip, sp, #167	; 0xa7
1a0048d2:	4664      	mov	r4, ip
1a0048d4:	4d5e      	ldr	r5, [pc, #376]	; (1a004a50 <_vfprintf_r+0x1a70>)
1a0048d6:	e000      	b.n	1a0048da <_vfprintf_r+0x18fa>
1a0048d8:	4614      	mov	r4, r2
1a0048da:	fba5 1203 	umull	r1, r2, r5, r3
1a0048de:	08d2      	lsrs	r2, r2, #3
1a0048e0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a0048e4:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
1a0048e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
1a0048ec:	4613      	mov	r3, r2
1a0048ee:	2b09      	cmp	r3, #9
1a0048f0:	f804 1c01 	strb.w	r1, [r4, #-1]
1a0048f4:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a0048f8:	dcee      	bgt.n	1a0048d8 <_vfprintf_r+0x18f8>
1a0048fa:	3330      	adds	r3, #48	; 0x30
1a0048fc:	3c02      	subs	r4, #2
1a0048fe:	b2db      	uxtb	r3, r3
1a004900:	45a4      	cmp	ip, r4
1a004902:	f802 3c01 	strb.w	r3, [r2, #-1]
1a004906:	f240 8090 	bls.w	1a004a2a <_vfprintf_r+0x1a4a>
1a00490a:	f10d 049a 	add.w	r4, sp, #154	; 0x9a
1a00490e:	4611      	mov	r1, r2
1a004910:	e001      	b.n	1a004916 <_vfprintf_r+0x1936>
1a004912:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004916:	f804 3b01 	strb.w	r3, [r4], #1
1a00491a:	458c      	cmp	ip, r1
1a00491c:	d1f9      	bne.n	1a004912 <_vfprintf_r+0x1932>
1a00491e:	ab2a      	add	r3, sp, #168	; 0xa8
1a004920:	1a9b      	subs	r3, r3, r2
1a004922:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
1a004926:	4413      	add	r3, r2
1a004928:	f7ff bbe3 	b.w	1a0040f2 <_vfprintf_r+0x1112>
1a00492c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00492e:	4f49      	ldr	r7, [pc, #292]	; (1a004a54 <_vfprintf_r+0x1a74>)
1a004930:	2b00      	cmp	r3, #0
1a004932:	bfb6      	itet	lt
1a004934:	222d      	movlt	r2, #45	; 0x2d
1a004936:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
1a00493a:	f88d 208b 	strblt.w	r2, [sp, #139]	; 0x8b
1a00493e:	4b46      	ldr	r3, [pc, #280]	; (1a004a58 <_vfprintf_r+0x1a78>)
1a004940:	f7fe bf02 	b.w	1a003748 <_vfprintf_r+0x768>
1a004944:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a004948:	f7ff b8c9 	b.w	1a003ade <_vfprintf_r+0xafe>
1a00494c:	aa28      	add	r2, sp, #160	; 0xa0
1a00494e:	ab25      	add	r3, sp, #148	; 0x94
1a004950:	e9cd 3200 	strd	r3, r2, [sp]
1a004954:	2103      	movs	r1, #3
1a004956:	ab24      	add	r3, sp, #144	; 0x90
1a004958:	464a      	mov	r2, r9
1a00495a:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a00495e:	9803      	ldr	r0, [sp, #12]
1a004960:	f000 f9b6 	bl	1a004cd0 <_dtoa_r>
1a004964:	464d      	mov	r5, r9
1a004966:	4607      	mov	r7, r0
1a004968:	2e46      	cmp	r6, #70	; 0x46
1a00496a:	eb07 0405 	add.w	r4, r7, r5
1a00496e:	f43f af67 	beq.w	1a004840 <_vfprintf_r+0x1860>
1a004972:	e76b      	b.n	1a00484c <_vfprintf_r+0x186c>
1a004974:	f1b9 0f00 	cmp.w	r9, #0
1a004978:	d131      	bne.n	1a0049de <_vfprintf_r+0x19fe>
1a00497a:	07c5      	lsls	r5, r0, #31
1a00497c:	d42f      	bmi.n	1a0049de <_vfprintf_r+0x19fe>
1a00497e:	2301      	movs	r3, #1
1a004980:	9304      	str	r3, [sp, #16]
1a004982:	9309      	str	r3, [sp, #36]	; 0x24
1a004984:	2666      	movs	r6, #102	; 0x66
1a004986:	e642      	b.n	1a00460e <_vfprintf_r+0x162e>
1a004988:	07c3      	lsls	r3, r0, #31
1a00498a:	f57f abbf 	bpl.w	1a00410c <_vfprintf_r+0x112c>
1a00498e:	f7ff bbb9 	b.w	1a004104 <_vfprintf_r+0x1124>
1a004992:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a004994:	f1c3 0301 	rsb	r3, r3, #1
1a004998:	441a      	add	r2, r3
1a00499a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a00499e:	9209      	str	r2, [sp, #36]	; 0x24
1a0049a0:	9304      	str	r3, [sp, #16]
1a0049a2:	2667      	movs	r6, #103	; 0x67
1a0049a4:	e633      	b.n	1a00460e <_vfprintf_r+0x162e>
1a0049a6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a0049aa:	f04f 0901 	mov.w	r9, #1
1a0049ae:	e457      	b.n	1a004260 <_vfprintf_r+0x1280>
1a0049b0:	465a      	mov	r2, fp
1a0049b2:	e511      	b.n	1a0043d8 <_vfprintf_r+0x13f8>
1a0049b4:	2e47      	cmp	r6, #71	; 0x47
1a0049b6:	f47f af5e 	bne.w	1a004876 <_vfprintf_r+0x1896>
1a0049ba:	f018 0f01 	tst.w	r8, #1
1a0049be:	f43f ab61 	beq.w	1a004084 <_vfprintf_r+0x10a4>
1a0049c2:	e7d1      	b.n	1a004968 <_vfprintf_r+0x1988>
1a0049c4:	2200      	movs	r2, #0
1a0049c6:	2300      	movs	r3, #0
1a0049c8:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a0049cc:	f003 fa90 	bl	1a007ef0 <__aeabi_dcmpeq>
1a0049d0:	2800      	cmp	r0, #0
1a0049d2:	f47f af39 	bne.w	1a004848 <_vfprintf_r+0x1868>
1a0049d6:	f1c5 0501 	rsb	r5, r5, #1
1a0049da:	9524      	str	r5, [sp, #144]	; 0x90
1a0049dc:	e735      	b.n	1a00484a <_vfprintf_r+0x186a>
1a0049de:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a0049e0:	3301      	adds	r3, #1
1a0049e2:	444b      	add	r3, r9
1a0049e4:	9309      	str	r3, [sp, #36]	; 0x24
1a0049e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a0049ea:	9304      	str	r3, [sp, #16]
1a0049ec:	2666      	movs	r6, #102	; 0x66
1a0049ee:	e60e      	b.n	1a00460e <_vfprintf_r+0x162e>
1a0049f0:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
1a0049f4:	f7ff bb7a 	b.w	1a0040ec <_vfprintf_r+0x110c>
1a0049f8:	aa2a      	add	r2, sp, #168	; 0xa8
1a0049fa:	9907      	ldr	r1, [sp, #28]
1a0049fc:	9803      	ldr	r0, [sp, #12]
1a0049fe:	f002 fe35 	bl	1a00766c <__sprint_r>
1a004a02:	2800      	cmp	r0, #0
1a004a04:	f47f a864 	bne.w	1a003ad0 <_vfprintf_r+0xaf0>
1a004a08:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
1a004a0c:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004a10:	f7ff bbbd 	b.w	1a00418e <_vfprintf_r+0x11ae>
1a004a14:	9908      	ldr	r1, [sp, #32]
1a004a16:	f89a 6001 	ldrb.w	r6, [sl, #1]
1a004a1a:	680b      	ldr	r3, [r1, #0]
1a004a1c:	ea43 79e3 	orr.w	r9, r3, r3, asr #31
1a004a20:	1d0b      	adds	r3, r1, #4
1a004a22:	4692      	mov	sl, r2
1a004a24:	9308      	str	r3, [sp, #32]
1a004a26:	f7fe bb59 	b.w	1a0030dc <_vfprintf_r+0xfc>
1a004a2a:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
1a004a2e:	f7ff bb60 	b.w	1a0040f2 <_vfprintf_r+0x1112>
1a004a32:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a004a36:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a004a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004a3e:	f8a9 300c 	strh.w	r3, [r9, #12]
1a004a42:	f7ff b84c 	b.w	1a003ade <_vfprintf_r+0xafe>
1a004a46:	bf00      	nop
1a004a48:	1a008470 	.word	0x1a008470
1a004a4c:	1a008440 	.word	0x1a008440
1a004a50:	cccccccd 	.word	0xcccccccd
1a004a54:	1a008428 	.word	0x1a008428
1a004a58:	1a008424 	.word	0x1a008424

1a004a5c <__sbprintf>:
1a004a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004a60:	460c      	mov	r4, r1
1a004a62:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a004a66:	8989      	ldrh	r1, [r1, #12]
1a004a68:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a004a6a:	89e5      	ldrh	r5, [r4, #14]
1a004a6c:	9619      	str	r6, [sp, #100]	; 0x64
1a004a6e:	f021 0102 	bic.w	r1, r1, #2
1a004a72:	4606      	mov	r6, r0
1a004a74:	69e0      	ldr	r0, [r4, #28]
1a004a76:	f8ad 100c 	strh.w	r1, [sp, #12]
1a004a7a:	4617      	mov	r7, r2
1a004a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a004a80:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a004a82:	f8ad 500e 	strh.w	r5, [sp, #14]
1a004a86:	4698      	mov	r8, r3
1a004a88:	ad1a      	add	r5, sp, #104	; 0x68
1a004a8a:	2300      	movs	r3, #0
1a004a8c:	9007      	str	r0, [sp, #28]
1a004a8e:	a816      	add	r0, sp, #88	; 0x58
1a004a90:	9209      	str	r2, [sp, #36]	; 0x24
1a004a92:	9306      	str	r3, [sp, #24]
1a004a94:	9500      	str	r5, [sp, #0]
1a004a96:	9504      	str	r5, [sp, #16]
1a004a98:	9102      	str	r1, [sp, #8]
1a004a9a:	9105      	str	r1, [sp, #20]
1a004a9c:	f001 fc60 	bl	1a006360 <__retarget_lock_init_recursive>
1a004aa0:	4643      	mov	r3, r8
1a004aa2:	463a      	mov	r2, r7
1a004aa4:	4669      	mov	r1, sp
1a004aa6:	4630      	mov	r0, r6
1a004aa8:	f7fe fa9a 	bl	1a002fe0 <_vfprintf_r>
1a004aac:	1e05      	subs	r5, r0, #0
1a004aae:	db07      	blt.n	1a004ac0 <__sbprintf+0x64>
1a004ab0:	4630      	mov	r0, r6
1a004ab2:	4669      	mov	r1, sp
1a004ab4:	f001 f8c6 	bl	1a005c44 <_fflush_r>
1a004ab8:	2800      	cmp	r0, #0
1a004aba:	bf18      	it	ne
1a004abc:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a004ac0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a004ac4:	065b      	lsls	r3, r3, #25
1a004ac6:	d503      	bpl.n	1a004ad0 <__sbprintf+0x74>
1a004ac8:	89a3      	ldrh	r3, [r4, #12]
1a004aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004ace:	81a3      	strh	r3, [r4, #12]
1a004ad0:	9816      	ldr	r0, [sp, #88]	; 0x58
1a004ad2:	f001 fc47 	bl	1a006364 <__retarget_lock_close_recursive>
1a004ad6:	4628      	mov	r0, r5
1a004ad8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a004adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a004ae0 <__swsetup_r>:
1a004ae0:	b538      	push	{r3, r4, r5, lr}
1a004ae2:	4b31      	ldr	r3, [pc, #196]	; (1a004ba8 <__swsetup_r+0xc8>)
1a004ae4:	681b      	ldr	r3, [r3, #0]
1a004ae6:	4605      	mov	r5, r0
1a004ae8:	460c      	mov	r4, r1
1a004aea:	b113      	cbz	r3, 1a004af2 <__swsetup_r+0x12>
1a004aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a004aee:	2a00      	cmp	r2, #0
1a004af0:	d03a      	beq.n	1a004b68 <__swsetup_r+0x88>
1a004af2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a004af6:	b293      	uxth	r3, r2
1a004af8:	0718      	lsls	r0, r3, #28
1a004afa:	d50c      	bpl.n	1a004b16 <__swsetup_r+0x36>
1a004afc:	6920      	ldr	r0, [r4, #16]
1a004afe:	b1a8      	cbz	r0, 1a004b2c <__swsetup_r+0x4c>
1a004b00:	f013 0201 	ands.w	r2, r3, #1
1a004b04:	d020      	beq.n	1a004b48 <__swsetup_r+0x68>
1a004b06:	6963      	ldr	r3, [r4, #20]
1a004b08:	2200      	movs	r2, #0
1a004b0a:	425b      	negs	r3, r3
1a004b0c:	61a3      	str	r3, [r4, #24]
1a004b0e:	60a2      	str	r2, [r4, #8]
1a004b10:	b300      	cbz	r0, 1a004b54 <__swsetup_r+0x74>
1a004b12:	2000      	movs	r0, #0
1a004b14:	bd38      	pop	{r3, r4, r5, pc}
1a004b16:	06d9      	lsls	r1, r3, #27
1a004b18:	d53e      	bpl.n	1a004b98 <__swsetup_r+0xb8>
1a004b1a:	0758      	lsls	r0, r3, #29
1a004b1c:	d428      	bmi.n	1a004b70 <__swsetup_r+0x90>
1a004b1e:	6920      	ldr	r0, [r4, #16]
1a004b20:	f042 0308 	orr.w	r3, r2, #8
1a004b24:	81a3      	strh	r3, [r4, #12]
1a004b26:	b29b      	uxth	r3, r3
1a004b28:	2800      	cmp	r0, #0
1a004b2a:	d1e9      	bne.n	1a004b00 <__swsetup_r+0x20>
1a004b2c:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a004b30:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a004b34:	d0e4      	beq.n	1a004b00 <__swsetup_r+0x20>
1a004b36:	4628      	mov	r0, r5
1a004b38:	4621      	mov	r1, r4
1a004b3a:	f001 fc47 	bl	1a0063cc <__smakebuf_r>
1a004b3e:	89a3      	ldrh	r3, [r4, #12]
1a004b40:	6920      	ldr	r0, [r4, #16]
1a004b42:	f013 0201 	ands.w	r2, r3, #1
1a004b46:	d1de      	bne.n	1a004b06 <__swsetup_r+0x26>
1a004b48:	0799      	lsls	r1, r3, #30
1a004b4a:	bf58      	it	pl
1a004b4c:	6962      	ldrpl	r2, [r4, #20]
1a004b4e:	60a2      	str	r2, [r4, #8]
1a004b50:	2800      	cmp	r0, #0
1a004b52:	d1de      	bne.n	1a004b12 <__swsetup_r+0x32>
1a004b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004b58:	061a      	lsls	r2, r3, #24
1a004b5a:	d5db      	bpl.n	1a004b14 <__swsetup_r+0x34>
1a004b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004b60:	81a3      	strh	r3, [r4, #12]
1a004b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004b66:	bd38      	pop	{r3, r4, r5, pc}
1a004b68:	4618      	mov	r0, r3
1a004b6a:	f001 f8c7 	bl	1a005cfc <__sinit>
1a004b6e:	e7c0      	b.n	1a004af2 <__swsetup_r+0x12>
1a004b70:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a004b72:	b151      	cbz	r1, 1a004b8a <__swsetup_r+0xaa>
1a004b74:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a004b78:	4299      	cmp	r1, r3
1a004b7a:	d004      	beq.n	1a004b86 <__swsetup_r+0xa6>
1a004b7c:	4628      	mov	r0, r5
1a004b7e:	f001 f945 	bl	1a005e0c <_free_r>
1a004b82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a004b86:	2300      	movs	r3, #0
1a004b88:	6323      	str	r3, [r4, #48]	; 0x30
1a004b8a:	2300      	movs	r3, #0
1a004b8c:	6920      	ldr	r0, [r4, #16]
1a004b8e:	6063      	str	r3, [r4, #4]
1a004b90:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a004b94:	6020      	str	r0, [r4, #0]
1a004b96:	e7c3      	b.n	1a004b20 <__swsetup_r+0x40>
1a004b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a004b9c:	2309      	movs	r3, #9
1a004b9e:	602b      	str	r3, [r5, #0]
1a004ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004ba4:	81a2      	strh	r2, [r4, #12]
1a004ba6:	bd38      	pop	{r3, r4, r5, pc}
1a004ba8:	100000cc 	.word	0x100000cc

1a004bac <quorem>:
1a004bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004bb0:	6903      	ldr	r3, [r0, #16]
1a004bb2:	690f      	ldr	r7, [r1, #16]
1a004bb4:	42bb      	cmp	r3, r7
1a004bb6:	b083      	sub	sp, #12
1a004bb8:	f2c0 8086 	blt.w	1a004cc8 <quorem+0x11c>
1a004bbc:	3f01      	subs	r7, #1
1a004bbe:	f101 0914 	add.w	r9, r1, #20
1a004bc2:	f100 0a14 	add.w	sl, r0, #20
1a004bc6:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
1a004bca:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
1a004bce:	00bc      	lsls	r4, r7, #2
1a004bd0:	3201      	adds	r2, #1
1a004bd2:	fbb3 f8f2 	udiv	r8, r3, r2
1a004bd6:	eb0a 0304 	add.w	r3, sl, r4
1a004bda:	9400      	str	r4, [sp, #0]
1a004bdc:	eb09 0b04 	add.w	fp, r9, r4
1a004be0:	9301      	str	r3, [sp, #4]
1a004be2:	f1b8 0f00 	cmp.w	r8, #0
1a004be6:	d038      	beq.n	1a004c5a <quorem+0xae>
1a004be8:	2500      	movs	r5, #0
1a004bea:	462e      	mov	r6, r5
1a004bec:	46ce      	mov	lr, r9
1a004bee:	46d4      	mov	ip, sl
1a004bf0:	f85e 4b04 	ldr.w	r4, [lr], #4
1a004bf4:	f8dc 3000 	ldr.w	r3, [ip]
1a004bf8:	b2a2      	uxth	r2, r4
1a004bfa:	fb08 5502 	mla	r5, r8, r2, r5
1a004bfe:	0c22      	lsrs	r2, r4, #16
1a004c00:	0c2c      	lsrs	r4, r5, #16
1a004c02:	fb08 4202 	mla	r2, r8, r2, r4
1a004c06:	b2ad      	uxth	r5, r5
1a004c08:	1b75      	subs	r5, r6, r5
1a004c0a:	b296      	uxth	r6, r2
1a004c0c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
1a004c10:	fa15 f383 	uxtah	r3, r5, r3
1a004c14:	eb06 4623 	add.w	r6, r6, r3, asr #16
1a004c18:	b29b      	uxth	r3, r3
1a004c1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
1a004c1e:	45f3      	cmp	fp, lr
1a004c20:	ea4f 4512 	mov.w	r5, r2, lsr #16
1a004c24:	f84c 3b04 	str.w	r3, [ip], #4
1a004c28:	ea4f 4626 	mov.w	r6, r6, asr #16
1a004c2c:	d2e0      	bcs.n	1a004bf0 <quorem+0x44>
1a004c2e:	9b00      	ldr	r3, [sp, #0]
1a004c30:	f85a 3003 	ldr.w	r3, [sl, r3]
1a004c34:	b98b      	cbnz	r3, 1a004c5a <quorem+0xae>
1a004c36:	9a01      	ldr	r2, [sp, #4]
1a004c38:	1f13      	subs	r3, r2, #4
1a004c3a:	459a      	cmp	sl, r3
1a004c3c:	d20c      	bcs.n	1a004c58 <quorem+0xac>
1a004c3e:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a004c42:	b94b      	cbnz	r3, 1a004c58 <quorem+0xac>
1a004c44:	f1a2 0308 	sub.w	r3, r2, #8
1a004c48:	e002      	b.n	1a004c50 <quorem+0xa4>
1a004c4a:	681a      	ldr	r2, [r3, #0]
1a004c4c:	3b04      	subs	r3, #4
1a004c4e:	b91a      	cbnz	r2, 1a004c58 <quorem+0xac>
1a004c50:	459a      	cmp	sl, r3
1a004c52:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a004c56:	d3f8      	bcc.n	1a004c4a <quorem+0x9e>
1a004c58:	6107      	str	r7, [r0, #16]
1a004c5a:	4604      	mov	r4, r0
1a004c5c:	f002 f97e 	bl	1a006f5c <__mcmp>
1a004c60:	2800      	cmp	r0, #0
1a004c62:	db2d      	blt.n	1a004cc0 <quorem+0x114>
1a004c64:	f108 0801 	add.w	r8, r8, #1
1a004c68:	4655      	mov	r5, sl
1a004c6a:	2300      	movs	r3, #0
1a004c6c:	f859 1b04 	ldr.w	r1, [r9], #4
1a004c70:	6828      	ldr	r0, [r5, #0]
1a004c72:	b28a      	uxth	r2, r1
1a004c74:	1a9a      	subs	r2, r3, r2
1a004c76:	0c0b      	lsrs	r3, r1, #16
1a004c78:	fa12 f280 	uxtah	r2, r2, r0
1a004c7c:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
1a004c80:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a004c84:	b292      	uxth	r2, r2
1a004c86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a004c8a:	45cb      	cmp	fp, r9
1a004c8c:	f845 2b04 	str.w	r2, [r5], #4
1a004c90:	ea4f 4323 	mov.w	r3, r3, asr #16
1a004c94:	d2ea      	bcs.n	1a004c6c <quorem+0xc0>
1a004c96:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a004c9a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a004c9e:	b97a      	cbnz	r2, 1a004cc0 <quorem+0x114>
1a004ca0:	1f1a      	subs	r2, r3, #4
1a004ca2:	4592      	cmp	sl, r2
1a004ca4:	d20b      	bcs.n	1a004cbe <quorem+0x112>
1a004ca6:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a004caa:	b942      	cbnz	r2, 1a004cbe <quorem+0x112>
1a004cac:	3b08      	subs	r3, #8
1a004cae:	e002      	b.n	1a004cb6 <quorem+0x10a>
1a004cb0:	681a      	ldr	r2, [r3, #0]
1a004cb2:	3b04      	subs	r3, #4
1a004cb4:	b91a      	cbnz	r2, 1a004cbe <quorem+0x112>
1a004cb6:	459a      	cmp	sl, r3
1a004cb8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a004cbc:	d3f8      	bcc.n	1a004cb0 <quorem+0x104>
1a004cbe:	6127      	str	r7, [r4, #16]
1a004cc0:	4640      	mov	r0, r8
1a004cc2:	b003      	add	sp, #12
1a004cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004cc8:	2000      	movs	r0, #0
1a004cca:	b003      	add	sp, #12
1a004ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a004cd0 <_dtoa_r>:
1a004cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004cd4:	ec55 4b10 	vmov	r4, r5, d0
1a004cd8:	b09b      	sub	sp, #108	; 0x6c
1a004cda:	6c06      	ldr	r6, [r0, #64]	; 0x40
1a004cdc:	9102      	str	r1, [sp, #8]
1a004cde:	4681      	mov	r9, r0
1a004ce0:	9207      	str	r2, [sp, #28]
1a004ce2:	9305      	str	r3, [sp, #20]
1a004ce4:	e9cd 4500 	strd	r4, r5, [sp]
1a004ce8:	b156      	cbz	r6, 1a004d00 <_dtoa_r+0x30>
1a004cea:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a004cec:	6072      	str	r2, [r6, #4]
1a004cee:	2301      	movs	r3, #1
1a004cf0:	4093      	lsls	r3, r2
1a004cf2:	60b3      	str	r3, [r6, #8]
1a004cf4:	4631      	mov	r1, r6
1a004cf6:	f001 ff41 	bl	1a006b7c <_Bfree>
1a004cfa:	2300      	movs	r3, #0
1a004cfc:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
1a004d00:	f1b5 0800 	subs.w	r8, r5, #0
1a004d04:	9a24      	ldr	r2, [sp, #144]	; 0x90
1a004d06:	bfb4      	ite	lt
1a004d08:	2301      	movlt	r3, #1
1a004d0a:	2300      	movge	r3, #0
1a004d0c:	6013      	str	r3, [r2, #0]
1a004d0e:	4b76      	ldr	r3, [pc, #472]	; (1a004ee8 <_dtoa_r+0x218>)
1a004d10:	bfbc      	itt	lt
1a004d12:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
1a004d16:	f8cd 8004 	strlt.w	r8, [sp, #4]
1a004d1a:	ea33 0308 	bics.w	r3, r3, r8
1a004d1e:	f000 80a6 	beq.w	1a004e6e <_dtoa_r+0x19e>
1a004d22:	e9dd 6700 	ldrd	r6, r7, [sp]
1a004d26:	2200      	movs	r2, #0
1a004d28:	2300      	movs	r3, #0
1a004d2a:	4630      	mov	r0, r6
1a004d2c:	4639      	mov	r1, r7
1a004d2e:	f003 f8df 	bl	1a007ef0 <__aeabi_dcmpeq>
1a004d32:	4605      	mov	r5, r0
1a004d34:	b178      	cbz	r0, 1a004d56 <_dtoa_r+0x86>
1a004d36:	9a05      	ldr	r2, [sp, #20]
1a004d38:	2301      	movs	r3, #1
1a004d3a:	6013      	str	r3, [r2, #0]
1a004d3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a004d3e:	2b00      	cmp	r3, #0
1a004d40:	f000 80c0 	beq.w	1a004ec4 <_dtoa_r+0x1f4>
1a004d44:	4b69      	ldr	r3, [pc, #420]	; (1a004eec <_dtoa_r+0x21c>)
1a004d46:	9a25      	ldr	r2, [sp, #148]	; 0x94
1a004d48:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
1a004d4c:	6013      	str	r3, [r2, #0]
1a004d4e:	4658      	mov	r0, fp
1a004d50:	b01b      	add	sp, #108	; 0x6c
1a004d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004d56:	aa18      	add	r2, sp, #96	; 0x60
1a004d58:	a919      	add	r1, sp, #100	; 0x64
1a004d5a:	ec47 6b10 	vmov	d0, r6, r7
1a004d5e:	4648      	mov	r0, r9
1a004d60:	f002 f98e 	bl	1a007080 <__d2b>
1a004d64:	ea5f 5418 	movs.w	r4, r8, lsr #20
1a004d68:	4682      	mov	sl, r0
1a004d6a:	f040 80a0 	bne.w	1a004eae <_dtoa_r+0x1de>
1a004d6e:	e9dd 5418 	ldrd	r5, r4, [sp, #96]	; 0x60
1a004d72:	442c      	add	r4, r5
1a004d74:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a004d78:	2b20      	cmp	r3, #32
1a004d7a:	f340 842c 	ble.w	1a0055d6 <_dtoa_r+0x906>
1a004d7e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a004d82:	fa08 f803 	lsl.w	r8, r8, r3
1a004d86:	9b00      	ldr	r3, [sp, #0]
1a004d88:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a004d8c:	fa23 f000 	lsr.w	r0, r3, r0
1a004d90:	ea48 0000 	orr.w	r0, r8, r0
1a004d94:	f7fd fce8 	bl	1a002768 <__aeabi_ui2d>
1a004d98:	2301      	movs	r3, #1
1a004d9a:	4606      	mov	r6, r0
1a004d9c:	3c01      	subs	r4, #1
1a004d9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
1a004da2:	930f      	str	r3, [sp, #60]	; 0x3c
1a004da4:	4630      	mov	r0, r6
1a004da6:	4639      	mov	r1, r7
1a004da8:	2200      	movs	r2, #0
1a004daa:	4b51      	ldr	r3, [pc, #324]	; (1a004ef0 <_dtoa_r+0x220>)
1a004dac:	f7fd fb9e 	bl	1a0024ec <__aeabi_dsub>
1a004db0:	a347      	add	r3, pc, #284	; (adr r3, 1a004ed0 <_dtoa_r+0x200>)
1a004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004db6:	f002 fe33 	bl	1a007a20 <__aeabi_dmul>
1a004dba:	a347      	add	r3, pc, #284	; (adr r3, 1a004ed8 <_dtoa_r+0x208>)
1a004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004dc0:	f7fd fb96 	bl	1a0024f0 <__adddf3>
1a004dc4:	4606      	mov	r6, r0
1a004dc6:	4620      	mov	r0, r4
1a004dc8:	460f      	mov	r7, r1
1a004dca:	f7fd fcdd 	bl	1a002788 <__aeabi_i2d>
1a004dce:	a344      	add	r3, pc, #272	; (adr r3, 1a004ee0 <_dtoa_r+0x210>)
1a004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004dd4:	f002 fe24 	bl	1a007a20 <__aeabi_dmul>
1a004dd8:	4602      	mov	r2, r0
1a004dda:	460b      	mov	r3, r1
1a004ddc:	4630      	mov	r0, r6
1a004dde:	4639      	mov	r1, r7
1a004de0:	f7fd fb86 	bl	1a0024f0 <__adddf3>
1a004de4:	4606      	mov	r6, r0
1a004de6:	460f      	mov	r7, r1
1a004de8:	f003 f8ca 	bl	1a007f80 <__aeabi_d2iz>
1a004dec:	2200      	movs	r2, #0
1a004dee:	9006      	str	r0, [sp, #24]
1a004df0:	2300      	movs	r3, #0
1a004df2:	4630      	mov	r0, r6
1a004df4:	4639      	mov	r1, r7
1a004df6:	f003 f885 	bl	1a007f04 <__aeabi_dcmplt>
1a004dfa:	2800      	cmp	r0, #0
1a004dfc:	f040 8273 	bne.w	1a0052e6 <_dtoa_r+0x616>
1a004e00:	9e06      	ldr	r6, [sp, #24]
1a004e02:	2e16      	cmp	r6, #22
1a004e04:	f200 825d 	bhi.w	1a0052c2 <_dtoa_r+0x5f2>
1a004e08:	4b3a      	ldr	r3, [pc, #232]	; (1a004ef4 <_dtoa_r+0x224>)
1a004e0a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1a004e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a004e12:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004e16:	f003 f893 	bl	1a007f40 <__aeabi_dcmpgt>
1a004e1a:	2800      	cmp	r0, #0
1a004e1c:	f000 83d7 	beq.w	1a0055ce <_dtoa_r+0x8fe>
1a004e20:	1e73      	subs	r3, r6, #1
1a004e22:	9306      	str	r3, [sp, #24]
1a004e24:	2300      	movs	r3, #0
1a004e26:	930d      	str	r3, [sp, #52]	; 0x34
1a004e28:	1b2c      	subs	r4, r5, r4
1a004e2a:	f1b4 0801 	subs.w	r8, r4, #1
1a004e2e:	f100 8254 	bmi.w	1a0052da <_dtoa_r+0x60a>
1a004e32:	2300      	movs	r3, #0
1a004e34:	9308      	str	r3, [sp, #32]
1a004e36:	9b06      	ldr	r3, [sp, #24]
1a004e38:	2b00      	cmp	r3, #0
1a004e3a:	f2c0 8245 	blt.w	1a0052c8 <_dtoa_r+0x5f8>
1a004e3e:	4498      	add	r8, r3
1a004e40:	930c      	str	r3, [sp, #48]	; 0x30
1a004e42:	2300      	movs	r3, #0
1a004e44:	930b      	str	r3, [sp, #44]	; 0x2c
1a004e46:	9b02      	ldr	r3, [sp, #8]
1a004e48:	2b09      	cmp	r3, #9
1a004e4a:	d85b      	bhi.n	1a004f04 <_dtoa_r+0x234>
1a004e4c:	2b05      	cmp	r3, #5
1a004e4e:	f340 83c0 	ble.w	1a0055d2 <_dtoa_r+0x902>
1a004e52:	3b04      	subs	r3, #4
1a004e54:	9302      	str	r3, [sp, #8]
1a004e56:	2500      	movs	r5, #0
1a004e58:	9b02      	ldr	r3, [sp, #8]
1a004e5a:	3b02      	subs	r3, #2
1a004e5c:	2b03      	cmp	r3, #3
1a004e5e:	f200 8498 	bhi.w	1a005792 <_dtoa_r+0xac2>
1a004e62:	e8df f013 	tbh	[pc, r3, lsl #1]
1a004e66:	03df      	.short	0x03df
1a004e68:	03e803bf 	.word	0x03e803bf
1a004e6c:	04f5      	.short	0x04f5
1a004e6e:	9a05      	ldr	r2, [sp, #20]
1a004e70:	f242 730f 	movw	r3, #9999	; 0x270f
1a004e74:	6013      	str	r3, [r2, #0]
1a004e76:	9b00      	ldr	r3, [sp, #0]
1a004e78:	b983      	cbnz	r3, 1a004e9c <_dtoa_r+0x1cc>
1a004e7a:	f3c8 0313 	ubfx	r3, r8, #0, #20
1a004e7e:	b96b      	cbnz	r3, 1a004e9c <_dtoa_r+0x1cc>
1a004e80:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a004e82:	f8df b074 	ldr.w	fp, [pc, #116]	; 1a004ef8 <_dtoa_r+0x228>
1a004e86:	2b00      	cmp	r3, #0
1a004e88:	f43f af61 	beq.w	1a004d4e <_dtoa_r+0x7e>
1a004e8c:	f10b 0308 	add.w	r3, fp, #8
1a004e90:	9a25      	ldr	r2, [sp, #148]	; 0x94
1a004e92:	4658      	mov	r0, fp
1a004e94:	6013      	str	r3, [r2, #0]
1a004e96:	b01b      	add	sp, #108	; 0x6c
1a004e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004e9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a004e9e:	f8df b05c 	ldr.w	fp, [pc, #92]	; 1a004efc <_dtoa_r+0x22c>
1a004ea2:	2b00      	cmp	r3, #0
1a004ea4:	f43f af53 	beq.w	1a004d4e <_dtoa_r+0x7e>
1a004ea8:	f10b 0303 	add.w	r3, fp, #3
1a004eac:	e7f0      	b.n	1a004e90 <_dtoa_r+0x1c0>
1a004eae:	f3c7 0313 	ubfx	r3, r7, #0, #20
1a004eb2:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
1a004eb6:	950f      	str	r5, [sp, #60]	; 0x3c
1a004eb8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a004ebc:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
1a004ec0:	9d18      	ldr	r5, [sp, #96]	; 0x60
1a004ec2:	e76f      	b.n	1a004da4 <_dtoa_r+0xd4>
1a004ec4:	f8df b038 	ldr.w	fp, [pc, #56]	; 1a004f00 <_dtoa_r+0x230>
1a004ec8:	4658      	mov	r0, fp
1a004eca:	b01b      	add	sp, #108	; 0x6c
1a004ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004ed0:	636f4361 	.word	0x636f4361
1a004ed4:	3fd287a7 	.word	0x3fd287a7
1a004ed8:	8b60c8b3 	.word	0x8b60c8b3
1a004edc:	3fc68a28 	.word	0x3fc68a28
1a004ee0:	509f79fb 	.word	0x509f79fb
1a004ee4:	3fd34413 	.word	0x3fd34413
1a004ee8:	7ff00000 	.word	0x7ff00000
1a004eec:	1a00845d 	.word	0x1a00845d
1a004ef0:	3ff80000 	.word	0x3ff80000
1a004ef4:	1a0084b8 	.word	0x1a0084b8
1a004ef8:	1a008480 	.word	0x1a008480
1a004efc:	1a00848c 	.word	0x1a00848c
1a004f00:	1a00845c 	.word	0x1a00845c
1a004f04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1a004f08:	2501      	movs	r5, #1
1a004f0a:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
1a004f0e:	2300      	movs	r3, #0
1a004f10:	9302      	str	r3, [sp, #8]
1a004f12:	9307      	str	r3, [sp, #28]
1a004f14:	2100      	movs	r1, #0
1a004f16:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a004f1a:	940e      	str	r4, [sp, #56]	; 0x38
1a004f1c:	4648      	mov	r0, r9
1a004f1e:	f001 fe07 	bl	1a006b30 <_Balloc>
1a004f22:	2c0e      	cmp	r4, #14
1a004f24:	4683      	mov	fp, r0
1a004f26:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
1a004f2a:	f200 80fb 	bhi.w	1a005124 <_dtoa_r+0x454>
1a004f2e:	2d00      	cmp	r5, #0
1a004f30:	f000 80f8 	beq.w	1a005124 <_dtoa_r+0x454>
1a004f34:	ed9d 7b00 	vldr	d7, [sp]
1a004f38:	9906      	ldr	r1, [sp, #24]
1a004f3a:	2900      	cmp	r1, #0
1a004f3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a004f40:	f340 83e5 	ble.w	1a00570e <_dtoa_r+0xa3e>
1a004f44:	4b9d      	ldr	r3, [pc, #628]	; (1a0051bc <_dtoa_r+0x4ec>)
1a004f46:	f001 020f 	and.w	r2, r1, #15
1a004f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a004f4e:	ed93 7b00 	vldr	d7, [r3]
1a004f52:	110c      	asrs	r4, r1, #4
1a004f54:	06e2      	lsls	r2, r4, #27
1a004f56:	ed8d 7b00 	vstr	d7, [sp]
1a004f5a:	f140 849e 	bpl.w	1a00589a <_dtoa_r+0xbca>
1a004f5e:	4b98      	ldr	r3, [pc, #608]	; (1a0051c0 <_dtoa_r+0x4f0>)
1a004f60:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004f64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a004f68:	f002 fe84 	bl	1a007c74 <__aeabi_ddiv>
1a004f6c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a004f70:	f004 040f 	and.w	r4, r4, #15
1a004f74:	2603      	movs	r6, #3
1a004f76:	b17c      	cbz	r4, 1a004f98 <_dtoa_r+0x2c8>
1a004f78:	e9dd 0100 	ldrd	r0, r1, [sp]
1a004f7c:	4d90      	ldr	r5, [pc, #576]	; (1a0051c0 <_dtoa_r+0x4f0>)
1a004f7e:	07e3      	lsls	r3, r4, #31
1a004f80:	d504      	bpl.n	1a004f8c <_dtoa_r+0x2bc>
1a004f82:	e9d5 2300 	ldrd	r2, r3, [r5]
1a004f86:	f002 fd4b 	bl	1a007a20 <__aeabi_dmul>
1a004f8a:	3601      	adds	r6, #1
1a004f8c:	1064      	asrs	r4, r4, #1
1a004f8e:	f105 0508 	add.w	r5, r5, #8
1a004f92:	d1f4      	bne.n	1a004f7e <_dtoa_r+0x2ae>
1a004f94:	e9cd 0100 	strd	r0, r1, [sp]
1a004f98:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004f9c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a004fa0:	f002 fe68 	bl	1a007c74 <__aeabi_ddiv>
1a004fa4:	e9cd 0100 	strd	r0, r1, [sp]
1a004fa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a004faa:	b143      	cbz	r3, 1a004fbe <_dtoa_r+0x2ee>
1a004fac:	2200      	movs	r2, #0
1a004fae:	4b85      	ldr	r3, [pc, #532]	; (1a0051c4 <_dtoa_r+0x4f4>)
1a004fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a004fb4:	f002 ffa6 	bl	1a007f04 <__aeabi_dcmplt>
1a004fb8:	2800      	cmp	r0, #0
1a004fba:	f040 84ff 	bne.w	1a0059bc <_dtoa_r+0xcec>
1a004fbe:	4630      	mov	r0, r6
1a004fc0:	f7fd fbe2 	bl	1a002788 <__aeabi_i2d>
1a004fc4:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004fc8:	f002 fd2a 	bl	1a007a20 <__aeabi_dmul>
1a004fcc:	4b7e      	ldr	r3, [pc, #504]	; (1a0051c8 <_dtoa_r+0x4f8>)
1a004fce:	2200      	movs	r2, #0
1a004fd0:	f7fd fa8e 	bl	1a0024f0 <__adddf3>
1a004fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004fd6:	4606      	mov	r6, r0
1a004fd8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a004fdc:	2b00      	cmp	r3, #0
1a004fde:	f000 841c 	beq.w	1a00581a <_dtoa_r+0xb4a>
1a004fe2:	9b06      	ldr	r3, [sp, #24]
1a004fe4:	9316      	str	r3, [sp, #88]	; 0x58
1a004fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004fe8:	9312      	str	r3, [sp, #72]	; 0x48
1a004fea:	e9dd 0100 	ldrd	r0, r1, [sp]
1a004fee:	f002 ffc7 	bl	1a007f80 <__aeabi_d2iz>
1a004ff2:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004ff4:	4b71      	ldr	r3, [pc, #452]	; (1a0051bc <_dtoa_r+0x4ec>)
1a004ff6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a004ffa:	ed13 7b02 	vldr	d7, [r3, #-8]
1a004ffe:	f100 0530 	add.w	r5, r0, #48	; 0x30
1a005002:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
1a005006:	f7fd fbbf 	bl	1a002788 <__aeabi_i2d>
1a00500a:	460b      	mov	r3, r1
1a00500c:	4602      	mov	r2, r0
1a00500e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005012:	e9cd 6700 	strd	r6, r7, [sp]
1a005016:	f7fd fa69 	bl	1a0024ec <__aeabi_dsub>
1a00501a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00501c:	b2ed      	uxtb	r5, r5
1a00501e:	4606      	mov	r6, r0
1a005020:	460f      	mov	r7, r1
1a005022:	f10b 0401 	add.w	r4, fp, #1
1a005026:	2b00      	cmp	r3, #0
1a005028:	f000 8458 	beq.w	1a0058dc <_dtoa_r+0xc0c>
1a00502c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a005030:	2000      	movs	r0, #0
1a005032:	4966      	ldr	r1, [pc, #408]	; (1a0051cc <_dtoa_r+0x4fc>)
1a005034:	f002 fe1e 	bl	1a007c74 <__aeabi_ddiv>
1a005038:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00503c:	f7fd fa56 	bl	1a0024ec <__aeabi_dsub>
1a005040:	f88b 5000 	strb.w	r5, [fp]
1a005044:	4632      	mov	r2, r6
1a005046:	463b      	mov	r3, r7
1a005048:	e9cd 0100 	strd	r0, r1, [sp]
1a00504c:	f002 ff78 	bl	1a007f40 <__aeabi_dcmpgt>
1a005050:	2800      	cmp	r0, #0
1a005052:	f040 8502 	bne.w	1a005a5a <_dtoa_r+0xd8a>
1a005056:	4632      	mov	r2, r6
1a005058:	463b      	mov	r3, r7
1a00505a:	2000      	movs	r0, #0
1a00505c:	4959      	ldr	r1, [pc, #356]	; (1a0051c4 <_dtoa_r+0x4f4>)
1a00505e:	f7fd fa45 	bl	1a0024ec <__aeabi_dsub>
1a005062:	4602      	mov	r2, r0
1a005064:	460b      	mov	r3, r1
1a005066:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00506a:	f002 ff69 	bl	1a007f40 <__aeabi_dcmpgt>
1a00506e:	2800      	cmp	r0, #0
1a005070:	f040 84fb 	bne.w	1a005a6a <_dtoa_r+0xd9a>
1a005074:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005076:	2a01      	cmp	r2, #1
1a005078:	d050      	beq.n	1a00511c <_dtoa_r+0x44c>
1a00507a:	445a      	add	r2, fp
1a00507c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
1a005080:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a005084:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
1a005088:	4692      	mov	sl, r2
1a00508a:	46cb      	mov	fp, r9
1a00508c:	e9dd 8900 	ldrd	r8, r9, [sp]
1a005090:	e00c      	b.n	1a0050ac <_dtoa_r+0x3dc>
1a005092:	2000      	movs	r0, #0
1a005094:	494b      	ldr	r1, [pc, #300]	; (1a0051c4 <_dtoa_r+0x4f4>)
1a005096:	f7fd fa29 	bl	1a0024ec <__aeabi_dsub>
1a00509a:	4642      	mov	r2, r8
1a00509c:	464b      	mov	r3, r9
1a00509e:	f002 ff31 	bl	1a007f04 <__aeabi_dcmplt>
1a0050a2:	2800      	cmp	r0, #0
1a0050a4:	f040 84dc 	bne.w	1a005a60 <_dtoa_r+0xd90>
1a0050a8:	4554      	cmp	r4, sl
1a0050aa:	d030      	beq.n	1a00510e <_dtoa_r+0x43e>
1a0050ac:	4640      	mov	r0, r8
1a0050ae:	4649      	mov	r1, r9
1a0050b0:	2200      	movs	r2, #0
1a0050b2:	4b47      	ldr	r3, [pc, #284]	; (1a0051d0 <_dtoa_r+0x500>)
1a0050b4:	f002 fcb4 	bl	1a007a20 <__aeabi_dmul>
1a0050b8:	2200      	movs	r2, #0
1a0050ba:	4b45      	ldr	r3, [pc, #276]	; (1a0051d0 <_dtoa_r+0x500>)
1a0050bc:	4680      	mov	r8, r0
1a0050be:	4689      	mov	r9, r1
1a0050c0:	4630      	mov	r0, r6
1a0050c2:	4639      	mov	r1, r7
1a0050c4:	f002 fcac 	bl	1a007a20 <__aeabi_dmul>
1a0050c8:	460f      	mov	r7, r1
1a0050ca:	4606      	mov	r6, r0
1a0050cc:	f002 ff58 	bl	1a007f80 <__aeabi_d2iz>
1a0050d0:	4605      	mov	r5, r0
1a0050d2:	f7fd fb59 	bl	1a002788 <__aeabi_i2d>
1a0050d6:	4602      	mov	r2, r0
1a0050d8:	460b      	mov	r3, r1
1a0050da:	4630      	mov	r0, r6
1a0050dc:	4639      	mov	r1, r7
1a0050de:	f7fd fa05 	bl	1a0024ec <__aeabi_dsub>
1a0050e2:	3530      	adds	r5, #48	; 0x30
1a0050e4:	b2ed      	uxtb	r5, r5
1a0050e6:	4642      	mov	r2, r8
1a0050e8:	464b      	mov	r3, r9
1a0050ea:	f804 5b01 	strb.w	r5, [r4], #1
1a0050ee:	4606      	mov	r6, r0
1a0050f0:	460f      	mov	r7, r1
1a0050f2:	f002 ff07 	bl	1a007f04 <__aeabi_dcmplt>
1a0050f6:	4632      	mov	r2, r6
1a0050f8:	463b      	mov	r3, r7
1a0050fa:	2800      	cmp	r0, #0
1a0050fc:	d0c9      	beq.n	1a005092 <_dtoa_r+0x3c2>
1a0050fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005100:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a005104:	9306      	str	r3, [sp, #24]
1a005106:	46d9      	mov	r9, fp
1a005108:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a00510c:	e236      	b.n	1a00557c <_dtoa_r+0x8ac>
1a00510e:	46d9      	mov	r9, fp
1a005110:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
1a005114:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a005118:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a00511c:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
1a005120:	e9cd 3400 	strd	r3, r4, [sp]
1a005124:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a005126:	2b00      	cmp	r3, #0
1a005128:	f2c0 80ae 	blt.w	1a005288 <_dtoa_r+0x5b8>
1a00512c:	9a06      	ldr	r2, [sp, #24]
1a00512e:	2a0e      	cmp	r2, #14
1a005130:	f300 80aa 	bgt.w	1a005288 <_dtoa_r+0x5b8>
1a005134:	4b21      	ldr	r3, [pc, #132]	; (1a0051bc <_dtoa_r+0x4ec>)
1a005136:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a00513a:	ed93 7b00 	vldr	d7, [r3]
1a00513e:	9b07      	ldr	r3, [sp, #28]
1a005140:	2b00      	cmp	r3, #0
1a005142:	ed8d 7b02 	vstr	d7, [sp, #8]
1a005146:	f2c0 82be 	blt.w	1a0056c6 <_dtoa_r+0x9f6>
1a00514a:	e9dd 6700 	ldrd	r6, r7, [sp]
1a00514e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005152:	4630      	mov	r0, r6
1a005154:	4639      	mov	r1, r7
1a005156:	f002 fd8d 	bl	1a007c74 <__aeabi_ddiv>
1a00515a:	f002 ff11 	bl	1a007f80 <__aeabi_d2iz>
1a00515e:	4605      	mov	r5, r0
1a005160:	f7fd fb12 	bl	1a002788 <__aeabi_i2d>
1a005164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005168:	f002 fc5a 	bl	1a007a20 <__aeabi_dmul>
1a00516c:	460b      	mov	r3, r1
1a00516e:	4602      	mov	r2, r0
1a005170:	4639      	mov	r1, r7
1a005172:	4630      	mov	r0, r6
1a005174:	f7fd f9ba 	bl	1a0024ec <__aeabi_dsub>
1a005178:	f105 0330 	add.w	r3, r5, #48	; 0x30
1a00517c:	f88b 3000 	strb.w	r3, [fp]
1a005180:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005182:	2b01      	cmp	r3, #1
1a005184:	4606      	mov	r6, r0
1a005186:	460f      	mov	r7, r1
1a005188:	f10b 0401 	add.w	r4, fp, #1
1a00518c:	d053      	beq.n	1a005236 <_dtoa_r+0x566>
1a00518e:	2200      	movs	r2, #0
1a005190:	4b0f      	ldr	r3, [pc, #60]	; (1a0051d0 <_dtoa_r+0x500>)
1a005192:	f002 fc45 	bl	1a007a20 <__aeabi_dmul>
1a005196:	2200      	movs	r2, #0
1a005198:	2300      	movs	r3, #0
1a00519a:	4606      	mov	r6, r0
1a00519c:	460f      	mov	r7, r1
1a00519e:	f002 fea7 	bl	1a007ef0 <__aeabi_dcmpeq>
1a0051a2:	2800      	cmp	r0, #0
1a0051a4:	f040 81ea 	bne.w	1a00557c <_dtoa_r+0x8ac>
1a0051a8:	f8cd a000 	str.w	sl, [sp]
1a0051ac:	f8cd 901c 	str.w	r9, [sp, #28]
1a0051b0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0051b4:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
1a0051b8:	e017      	b.n	1a0051ea <_dtoa_r+0x51a>
1a0051ba:	bf00      	nop
1a0051bc:	1a0084b8 	.word	0x1a0084b8
1a0051c0:	1a008490 	.word	0x1a008490
1a0051c4:	3ff00000 	.word	0x3ff00000
1a0051c8:	401c0000 	.word	0x401c0000
1a0051cc:	3fe00000 	.word	0x3fe00000
1a0051d0:	40240000 	.word	0x40240000
1a0051d4:	f002 fc24 	bl	1a007a20 <__aeabi_dmul>
1a0051d8:	2200      	movs	r2, #0
1a0051da:	2300      	movs	r3, #0
1a0051dc:	4606      	mov	r6, r0
1a0051de:	460f      	mov	r7, r1
1a0051e0:	f002 fe86 	bl	1a007ef0 <__aeabi_dcmpeq>
1a0051e4:	2800      	cmp	r0, #0
1a0051e6:	f040 833d 	bne.w	1a005864 <_dtoa_r+0xb94>
1a0051ea:	464a      	mov	r2, r9
1a0051ec:	4653      	mov	r3, sl
1a0051ee:	4630      	mov	r0, r6
1a0051f0:	4639      	mov	r1, r7
1a0051f2:	f002 fd3f 	bl	1a007c74 <__aeabi_ddiv>
1a0051f6:	f002 fec3 	bl	1a007f80 <__aeabi_d2iz>
1a0051fa:	4605      	mov	r5, r0
1a0051fc:	f7fd fac4 	bl	1a002788 <__aeabi_i2d>
1a005200:	464a      	mov	r2, r9
1a005202:	4653      	mov	r3, sl
1a005204:	f002 fc0c 	bl	1a007a20 <__aeabi_dmul>
1a005208:	4602      	mov	r2, r0
1a00520a:	460b      	mov	r3, r1
1a00520c:	4630      	mov	r0, r6
1a00520e:	4639      	mov	r1, r7
1a005210:	f7fd f96c 	bl	1a0024ec <__aeabi_dsub>
1a005214:	f105 0c30 	add.w	ip, r5, #48	; 0x30
1a005218:	f804 cb01 	strb.w	ip, [r4], #1
1a00521c:	eba4 0c0b 	sub.w	ip, r4, fp
1a005220:	45e0      	cmp	r8, ip
1a005222:	4606      	mov	r6, r0
1a005224:	460f      	mov	r7, r1
1a005226:	f04f 0200 	mov.w	r2, #0
1a00522a:	4bc1      	ldr	r3, [pc, #772]	; (1a005530 <_dtoa_r+0x860>)
1a00522c:	d1d2      	bne.n	1a0051d4 <_dtoa_r+0x504>
1a00522e:	f8dd a000 	ldr.w	sl, [sp]
1a005232:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005236:	4632      	mov	r2, r6
1a005238:	463b      	mov	r3, r7
1a00523a:	4630      	mov	r0, r6
1a00523c:	4639      	mov	r1, r7
1a00523e:	f7fd f957 	bl	1a0024f0 <__adddf3>
1a005242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005246:	4606      	mov	r6, r0
1a005248:	460f      	mov	r7, r1
1a00524a:	f002 fe79 	bl	1a007f40 <__aeabi_dcmpgt>
1a00524e:	b958      	cbnz	r0, 1a005268 <_dtoa_r+0x598>
1a005250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005254:	4630      	mov	r0, r6
1a005256:	4639      	mov	r1, r7
1a005258:	f002 fe4a 	bl	1a007ef0 <__aeabi_dcmpeq>
1a00525c:	2800      	cmp	r0, #0
1a00525e:	f000 818d 	beq.w	1a00557c <_dtoa_r+0x8ac>
1a005262:	07e9      	lsls	r1, r5, #31
1a005264:	f140 818a 	bpl.w	1a00557c <_dtoa_r+0x8ac>
1a005268:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a00526c:	e005      	b.n	1a00527a <_dtoa_r+0x5aa>
1a00526e:	459b      	cmp	fp, r3
1a005270:	f000 8373 	beq.w	1a00595a <_dtoa_r+0xc8a>
1a005274:	f813 5c01 	ldrb.w	r5, [r3, #-1]
1a005278:	461c      	mov	r4, r3
1a00527a:	2d39      	cmp	r5, #57	; 0x39
1a00527c:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a005280:	d0f5      	beq.n	1a00526e <_dtoa_r+0x59e>
1a005282:	3501      	adds	r5, #1
1a005284:	701d      	strb	r5, [r3, #0]
1a005286:	e179      	b.n	1a00557c <_dtoa_r+0x8ac>
1a005288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00528a:	2a00      	cmp	r2, #0
1a00528c:	d03b      	beq.n	1a005306 <_dtoa_r+0x636>
1a00528e:	9a02      	ldr	r2, [sp, #8]
1a005290:	2a01      	cmp	r2, #1
1a005292:	f340 820b 	ble.w	1a0056ac <_dtoa_r+0x9dc>
1a005296:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005298:	1e5f      	subs	r7, r3, #1
1a00529a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00529c:	42bb      	cmp	r3, r7
1a00529e:	f2c0 82e6 	blt.w	1a00586e <_dtoa_r+0xb9e>
1a0052a2:	1bdf      	subs	r7, r3, r7
1a0052a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0052a6:	2b00      	cmp	r3, #0
1a0052a8:	f2c0 830b 	blt.w	1a0058c2 <_dtoa_r+0xbf2>
1a0052ac:	9a08      	ldr	r2, [sp, #32]
1a0052ae:	4614      	mov	r4, r2
1a0052b0:	441a      	add	r2, r3
1a0052b2:	4498      	add	r8, r3
1a0052b4:	9208      	str	r2, [sp, #32]
1a0052b6:	2101      	movs	r1, #1
1a0052b8:	4648      	mov	r0, r9
1a0052ba:	f001 fcf9 	bl	1a006cb0 <__i2b>
1a0052be:	4605      	mov	r5, r0
1a0052c0:	e024      	b.n	1a00530c <_dtoa_r+0x63c>
1a0052c2:	2301      	movs	r3, #1
1a0052c4:	930d      	str	r3, [sp, #52]	; 0x34
1a0052c6:	e5af      	b.n	1a004e28 <_dtoa_r+0x158>
1a0052c8:	9a08      	ldr	r2, [sp, #32]
1a0052ca:	9b06      	ldr	r3, [sp, #24]
1a0052cc:	1ad2      	subs	r2, r2, r3
1a0052ce:	425b      	negs	r3, r3
1a0052d0:	930b      	str	r3, [sp, #44]	; 0x2c
1a0052d2:	2300      	movs	r3, #0
1a0052d4:	9208      	str	r2, [sp, #32]
1a0052d6:	930c      	str	r3, [sp, #48]	; 0x30
1a0052d8:	e5b5      	b.n	1a004e46 <_dtoa_r+0x176>
1a0052da:	f1c4 0301 	rsb	r3, r4, #1
1a0052de:	9308      	str	r3, [sp, #32]
1a0052e0:	f04f 0800 	mov.w	r8, #0
1a0052e4:	e5a7      	b.n	1a004e36 <_dtoa_r+0x166>
1a0052e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
1a0052ea:	4640      	mov	r0, r8
1a0052ec:	f7fd fa4c 	bl	1a002788 <__aeabi_i2d>
1a0052f0:	4632      	mov	r2, r6
1a0052f2:	463b      	mov	r3, r7
1a0052f4:	f002 fdfc 	bl	1a007ef0 <__aeabi_dcmpeq>
1a0052f8:	2800      	cmp	r0, #0
1a0052fa:	f47f ad81 	bne.w	1a004e00 <_dtoa_r+0x130>
1a0052fe:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a005302:	9306      	str	r3, [sp, #24]
1a005304:	e57c      	b.n	1a004e00 <_dtoa_r+0x130>
1a005306:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1a005308:	9c08      	ldr	r4, [sp, #32]
1a00530a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00530c:	2c00      	cmp	r4, #0
1a00530e:	dd0c      	ble.n	1a00532a <_dtoa_r+0x65a>
1a005310:	f1b8 0f00 	cmp.w	r8, #0
1a005314:	dd09      	ble.n	1a00532a <_dtoa_r+0x65a>
1a005316:	4544      	cmp	r4, r8
1a005318:	9a08      	ldr	r2, [sp, #32]
1a00531a:	4623      	mov	r3, r4
1a00531c:	bfa8      	it	ge
1a00531e:	4643      	movge	r3, r8
1a005320:	1ad2      	subs	r2, r2, r3
1a005322:	9208      	str	r2, [sp, #32]
1a005324:	1ae4      	subs	r4, r4, r3
1a005326:	eba8 0803 	sub.w	r8, r8, r3
1a00532a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00532c:	b16b      	cbz	r3, 1a00534a <_dtoa_r+0x67a>
1a00532e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005330:	2a00      	cmp	r2, #0
1a005332:	f000 8290 	beq.w	1a005856 <_dtoa_r+0xb86>
1a005336:	1bde      	subs	r6, r3, r7
1a005338:	2f00      	cmp	r7, #0
1a00533a:	f040 819b 	bne.w	1a005674 <_dtoa_r+0x9a4>
1a00533e:	4651      	mov	r1, sl
1a005340:	4632      	mov	r2, r6
1a005342:	4648      	mov	r0, r9
1a005344:	f001 fd64 	bl	1a006e10 <__pow5mult>
1a005348:	4682      	mov	sl, r0
1a00534a:	2101      	movs	r1, #1
1a00534c:	4648      	mov	r0, r9
1a00534e:	f001 fcaf 	bl	1a006cb0 <__i2b>
1a005352:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005354:	4606      	mov	r6, r0
1a005356:	2a00      	cmp	r2, #0
1a005358:	f040 8125 	bne.w	1a0055a6 <_dtoa_r+0x8d6>
1a00535c:	9b02      	ldr	r3, [sp, #8]
1a00535e:	2b01      	cmp	r3, #1
1a005360:	f340 816c 	ble.w	1a00563c <_dtoa_r+0x96c>
1a005364:	2001      	movs	r0, #1
1a005366:	4440      	add	r0, r8
1a005368:	f010 001f 	ands.w	r0, r0, #31
1a00536c:	f000 8119 	beq.w	1a0055a2 <_dtoa_r+0x8d2>
1a005370:	f1c0 0320 	rsb	r3, r0, #32
1a005374:	2b04      	cmp	r3, #4
1a005376:	f340 83ac 	ble.w	1a005ad2 <_dtoa_r+0xe02>
1a00537a:	f1c0 001c 	rsb	r0, r0, #28
1a00537e:	9b08      	ldr	r3, [sp, #32]
1a005380:	4403      	add	r3, r0
1a005382:	9308      	str	r3, [sp, #32]
1a005384:	4404      	add	r4, r0
1a005386:	4480      	add	r8, r0
1a005388:	9b08      	ldr	r3, [sp, #32]
1a00538a:	2b00      	cmp	r3, #0
1a00538c:	dd05      	ble.n	1a00539a <_dtoa_r+0x6ca>
1a00538e:	4651      	mov	r1, sl
1a005390:	461a      	mov	r2, r3
1a005392:	4648      	mov	r0, r9
1a005394:	f001 fd8c 	bl	1a006eb0 <__lshift>
1a005398:	4682      	mov	sl, r0
1a00539a:	f1b8 0f00 	cmp.w	r8, #0
1a00539e:	dd05      	ble.n	1a0053ac <_dtoa_r+0x6dc>
1a0053a0:	4631      	mov	r1, r6
1a0053a2:	4642      	mov	r2, r8
1a0053a4:	4648      	mov	r0, r9
1a0053a6:	f001 fd83 	bl	1a006eb0 <__lshift>
1a0053aa:	4606      	mov	r6, r0
1a0053ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0053ae:	2b00      	cmp	r3, #0
1a0053b0:	d177      	bne.n	1a0054a2 <_dtoa_r+0x7d2>
1a0053b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0053b4:	2b00      	cmp	r3, #0
1a0053b6:	f340 8209 	ble.w	1a0057cc <_dtoa_r+0xafc>
1a0053ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0053bc:	2b00      	cmp	r3, #0
1a0053be:	f000 8089 	beq.w	1a0054d4 <_dtoa_r+0x804>
1a0053c2:	2c00      	cmp	r4, #0
1a0053c4:	f300 816b 	bgt.w	1a00569e <_dtoa_r+0x9ce>
1a0053c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0053ca:	2b00      	cmp	r3, #0
1a0053cc:	f040 81cd 	bne.w	1a00576a <_dtoa_r+0xa9a>
1a0053d0:	46a8      	mov	r8, r5
1a0053d2:	9a00      	ldr	r2, [sp, #0]
1a0053d4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a0053d8:	f002 0201 	and.w	r2, r2, #1
1a0053dc:	920a      	str	r2, [sp, #40]	; 0x28
1a0053de:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0053e0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
1a0053e4:	441a      	add	r2, r3
1a0053e6:	465f      	mov	r7, fp
1a0053e8:	9209      	str	r2, [sp, #36]	; 0x24
1a0053ea:	46b3      	mov	fp, r6
1a0053ec:	4659      	mov	r1, fp
1a0053ee:	4650      	mov	r0, sl
1a0053f0:	f7ff fbdc 	bl	1a004bac <quorem>
1a0053f4:	4629      	mov	r1, r5
1a0053f6:	4604      	mov	r4, r0
1a0053f8:	4650      	mov	r0, sl
1a0053fa:	f001 fdaf 	bl	1a006f5c <__mcmp>
1a0053fe:	4659      	mov	r1, fp
1a005400:	4606      	mov	r6, r0
1a005402:	4642      	mov	r2, r8
1a005404:	4648      	mov	r0, r9
1a005406:	f001 fdc5 	bl	1a006f94 <__mdiff>
1a00540a:	f104 0330 	add.w	r3, r4, #48	; 0x30
1a00540e:	9300      	str	r3, [sp, #0]
1a005410:	68c3      	ldr	r3, [r0, #12]
1a005412:	4601      	mov	r1, r0
1a005414:	2b00      	cmp	r3, #0
1a005416:	f040 81d4 	bne.w	1a0057c2 <_dtoa_r+0xaf2>
1a00541a:	9008      	str	r0, [sp, #32]
1a00541c:	4650      	mov	r0, sl
1a00541e:	f001 fd9d 	bl	1a006f5c <__mcmp>
1a005422:	9a08      	ldr	r2, [sp, #32]
1a005424:	9007      	str	r0, [sp, #28]
1a005426:	4611      	mov	r1, r2
1a005428:	4648      	mov	r0, r9
1a00542a:	f001 fba7 	bl	1a006b7c <_Bfree>
1a00542e:	9b07      	ldr	r3, [sp, #28]
1a005430:	b933      	cbnz	r3, 1a005440 <_dtoa_r+0x770>
1a005432:	9a02      	ldr	r2, [sp, #8]
1a005434:	b922      	cbnz	r2, 1a005440 <_dtoa_r+0x770>
1a005436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005438:	2b00      	cmp	r3, #0
1a00543a:	f000 8319 	beq.w	1a005a70 <_dtoa_r+0xda0>
1a00543e:	9b02      	ldr	r3, [sp, #8]
1a005440:	2e00      	cmp	r6, #0
1a005442:	f2c0 821c 	blt.w	1a00587e <_dtoa_r+0xbae>
1a005446:	d105      	bne.n	1a005454 <_dtoa_r+0x784>
1a005448:	9a02      	ldr	r2, [sp, #8]
1a00544a:	b91a      	cbnz	r2, 1a005454 <_dtoa_r+0x784>
1a00544c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00544e:	2a00      	cmp	r2, #0
1a005450:	f000 8215 	beq.w	1a00587e <_dtoa_r+0xbae>
1a005454:	2b00      	cmp	r3, #0
1a005456:	f107 0401 	add.w	r4, r7, #1
1a00545a:	f300 8225 	bgt.w	1a0058a8 <_dtoa_r+0xbd8>
1a00545e:	9b00      	ldr	r3, [sp, #0]
1a005460:	703b      	strb	r3, [r7, #0]
1a005462:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005464:	42bb      	cmp	r3, r7
1a005466:	f000 8230 	beq.w	1a0058ca <_dtoa_r+0xbfa>
1a00546a:	4651      	mov	r1, sl
1a00546c:	2300      	movs	r3, #0
1a00546e:	220a      	movs	r2, #10
1a005470:	4648      	mov	r0, r9
1a005472:	f001 fb8d 	bl	1a006b90 <__multadd>
1a005476:	4545      	cmp	r5, r8
1a005478:	4682      	mov	sl, r0
1a00547a:	4629      	mov	r1, r5
1a00547c:	f04f 0300 	mov.w	r3, #0
1a005480:	f04f 020a 	mov.w	r2, #10
1a005484:	4648      	mov	r0, r9
1a005486:	f000 8196 	beq.w	1a0057b6 <_dtoa_r+0xae6>
1a00548a:	f001 fb81 	bl	1a006b90 <__multadd>
1a00548e:	4641      	mov	r1, r8
1a005490:	4605      	mov	r5, r0
1a005492:	2300      	movs	r3, #0
1a005494:	220a      	movs	r2, #10
1a005496:	4648      	mov	r0, r9
1a005498:	f001 fb7a 	bl	1a006b90 <__multadd>
1a00549c:	4627      	mov	r7, r4
1a00549e:	4680      	mov	r8, r0
1a0054a0:	e7a4      	b.n	1a0053ec <_dtoa_r+0x71c>
1a0054a2:	4631      	mov	r1, r6
1a0054a4:	4650      	mov	r0, sl
1a0054a6:	f001 fd59 	bl	1a006f5c <__mcmp>
1a0054aa:	2800      	cmp	r0, #0
1a0054ac:	da81      	bge.n	1a0053b2 <_dtoa_r+0x6e2>
1a0054ae:	9f06      	ldr	r7, [sp, #24]
1a0054b0:	4651      	mov	r1, sl
1a0054b2:	2300      	movs	r3, #0
1a0054b4:	220a      	movs	r2, #10
1a0054b6:	4648      	mov	r0, r9
1a0054b8:	3f01      	subs	r7, #1
1a0054ba:	9706      	str	r7, [sp, #24]
1a0054bc:	f001 fb68 	bl	1a006b90 <__multadd>
1a0054c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0054c2:	4682      	mov	sl, r0
1a0054c4:	2b00      	cmp	r3, #0
1a0054c6:	f040 82eb 	bne.w	1a005aa0 <_dtoa_r+0xdd0>
1a0054ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0054cc:	2b00      	cmp	r3, #0
1a0054ce:	f340 82f3 	ble.w	1a005ab8 <_dtoa_r+0xde8>
1a0054d2:	9309      	str	r3, [sp, #36]	; 0x24
1a0054d4:	465c      	mov	r4, fp
1a0054d6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0054da:	e002      	b.n	1a0054e2 <_dtoa_r+0x812>
1a0054dc:	f001 fb58 	bl	1a006b90 <__multadd>
1a0054e0:	4682      	mov	sl, r0
1a0054e2:	4631      	mov	r1, r6
1a0054e4:	4650      	mov	r0, sl
1a0054e6:	f7ff fb61 	bl	1a004bac <quorem>
1a0054ea:	f100 0730 	add.w	r7, r0, #48	; 0x30
1a0054ee:	f804 7b01 	strb.w	r7, [r4], #1
1a0054f2:	eba4 030b 	sub.w	r3, r4, fp
1a0054f6:	4598      	cmp	r8, r3
1a0054f8:	f04f 020a 	mov.w	r2, #10
1a0054fc:	f04f 0300 	mov.w	r3, #0
1a005500:	4651      	mov	r1, sl
1a005502:	4648      	mov	r0, r9
1a005504:	dcea      	bgt.n	1a0054dc <_dtoa_r+0x80c>
1a005506:	2300      	movs	r3, #0
1a005508:	9700      	str	r7, [sp, #0]
1a00550a:	9302      	str	r3, [sp, #8]
1a00550c:	4651      	mov	r1, sl
1a00550e:	2201      	movs	r2, #1
1a005510:	4648      	mov	r0, r9
1a005512:	f001 fccd 	bl	1a006eb0 <__lshift>
1a005516:	4631      	mov	r1, r6
1a005518:	4682      	mov	sl, r0
1a00551a:	f001 fd1f 	bl	1a006f5c <__mcmp>
1a00551e:	2800      	cmp	r0, #0
1a005520:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a005524:	dc14      	bgt.n	1a005550 <_dtoa_r+0x880>
1a005526:	d108      	bne.n	1a00553a <_dtoa_r+0x86a>
1a005528:	9b00      	ldr	r3, [sp, #0]
1a00552a:	07db      	lsls	r3, r3, #31
1a00552c:	d410      	bmi.n	1a005550 <_dtoa_r+0x880>
1a00552e:	e004      	b.n	1a00553a <_dtoa_r+0x86a>
1a005530:	40240000 	.word	0x40240000
1a005534:	f814 2c02 	ldrb.w	r2, [r4, #-2]
1a005538:	461c      	mov	r4, r3
1a00553a:	2a30      	cmp	r2, #48	; 0x30
1a00553c:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a005540:	d0f8      	beq.n	1a005534 <_dtoa_r+0x864>
1a005542:	e00b      	b.n	1a00555c <_dtoa_r+0x88c>
1a005544:	459b      	cmp	fp, r3
1a005546:	f000 814e 	beq.w	1a0057e6 <_dtoa_r+0xb16>
1a00554a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a00554e:	461c      	mov	r4, r3
1a005550:	2a39      	cmp	r2, #57	; 0x39
1a005552:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a005556:	d0f5      	beq.n	1a005544 <_dtoa_r+0x874>
1a005558:	3201      	adds	r2, #1
1a00555a:	701a      	strb	r2, [r3, #0]
1a00555c:	4631      	mov	r1, r6
1a00555e:	4648      	mov	r0, r9
1a005560:	f001 fb0c 	bl	1a006b7c <_Bfree>
1a005564:	b155      	cbz	r5, 1a00557c <_dtoa_r+0x8ac>
1a005566:	9902      	ldr	r1, [sp, #8]
1a005568:	b121      	cbz	r1, 1a005574 <_dtoa_r+0x8a4>
1a00556a:	42a9      	cmp	r1, r5
1a00556c:	d002      	beq.n	1a005574 <_dtoa_r+0x8a4>
1a00556e:	4648      	mov	r0, r9
1a005570:	f001 fb04 	bl	1a006b7c <_Bfree>
1a005574:	4629      	mov	r1, r5
1a005576:	4648      	mov	r0, r9
1a005578:	f001 fb00 	bl	1a006b7c <_Bfree>
1a00557c:	4651      	mov	r1, sl
1a00557e:	4648      	mov	r0, r9
1a005580:	f001 fafc 	bl	1a006b7c <_Bfree>
1a005584:	2200      	movs	r2, #0
1a005586:	9b06      	ldr	r3, [sp, #24]
1a005588:	7022      	strb	r2, [r4, #0]
1a00558a:	9a05      	ldr	r2, [sp, #20]
1a00558c:	3301      	adds	r3, #1
1a00558e:	6013      	str	r3, [r2, #0]
1a005590:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a005592:	2b00      	cmp	r3, #0
1a005594:	f43f abdb 	beq.w	1a004d4e <_dtoa_r+0x7e>
1a005598:	4658      	mov	r0, fp
1a00559a:	601c      	str	r4, [r3, #0]
1a00559c:	b01b      	add	sp, #108	; 0x6c
1a00559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0055a2:	201c      	movs	r0, #28
1a0055a4:	e6eb      	b.n	1a00537e <_dtoa_r+0x6ae>
1a0055a6:	4601      	mov	r1, r0
1a0055a8:	4648      	mov	r0, r9
1a0055aa:	f001 fc31 	bl	1a006e10 <__pow5mult>
1a0055ae:	9b02      	ldr	r3, [sp, #8]
1a0055b0:	2b01      	cmp	r3, #1
1a0055b2:	4606      	mov	r6, r0
1a0055b4:	f340 80d4 	ble.w	1a005760 <_dtoa_r+0xa90>
1a0055b8:	2300      	movs	r3, #0
1a0055ba:	930c      	str	r3, [sp, #48]	; 0x30
1a0055bc:	6933      	ldr	r3, [r6, #16]
1a0055be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a0055c2:	6918      	ldr	r0, [r3, #16]
1a0055c4:	f001 fb24 	bl	1a006c10 <__hi0bits>
1a0055c8:	f1c0 0020 	rsb	r0, r0, #32
1a0055cc:	e6cb      	b.n	1a005366 <_dtoa_r+0x696>
1a0055ce:	900d      	str	r0, [sp, #52]	; 0x34
1a0055d0:	e42a      	b.n	1a004e28 <_dtoa_r+0x158>
1a0055d2:	2501      	movs	r5, #1
1a0055d4:	e440      	b.n	1a004e58 <_dtoa_r+0x188>
1a0055d6:	f1c3 0820 	rsb	r8, r3, #32
1a0055da:	9b00      	ldr	r3, [sp, #0]
1a0055dc:	fa03 f008 	lsl.w	r0, r3, r8
1a0055e0:	f7ff bbd8 	b.w	1a004d94 <_dtoa_r+0xc4>
1a0055e4:	2300      	movs	r3, #0
1a0055e6:	930a      	str	r3, [sp, #40]	; 0x28
1a0055e8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
1a0055ec:	4413      	add	r3, r2
1a0055ee:	930e      	str	r3, [sp, #56]	; 0x38
1a0055f0:	3301      	adds	r3, #1
1a0055f2:	2b01      	cmp	r3, #1
1a0055f4:	461e      	mov	r6, r3
1a0055f6:	9309      	str	r3, [sp, #36]	; 0x24
1a0055f8:	bfb8      	it	lt
1a0055fa:	2601      	movlt	r6, #1
1a0055fc:	2100      	movs	r1, #0
1a0055fe:	2e17      	cmp	r6, #23
1a005600:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a005604:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a005606:	f77f ac89 	ble.w	1a004f1c <_dtoa_r+0x24c>
1a00560a:	2201      	movs	r2, #1
1a00560c:	2304      	movs	r3, #4
1a00560e:	005b      	lsls	r3, r3, #1
1a005610:	f103 0014 	add.w	r0, r3, #20
1a005614:	42b0      	cmp	r0, r6
1a005616:	4611      	mov	r1, r2
1a005618:	f102 0201 	add.w	r2, r2, #1
1a00561c:	d9f7      	bls.n	1a00560e <_dtoa_r+0x93e>
1a00561e:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a005622:	e47b      	b.n	1a004f1c <_dtoa_r+0x24c>
1a005624:	2300      	movs	r3, #0
1a005626:	930a      	str	r3, [sp, #40]	; 0x28
1a005628:	9e07      	ldr	r6, [sp, #28]
1a00562a:	2e00      	cmp	r6, #0
1a00562c:	f340 80e2 	ble.w	1a0057f4 <_dtoa_r+0xb24>
1a005630:	960e      	str	r6, [sp, #56]	; 0x38
1a005632:	9609      	str	r6, [sp, #36]	; 0x24
1a005634:	e7e2      	b.n	1a0055fc <_dtoa_r+0x92c>
1a005636:	2301      	movs	r3, #1
1a005638:	930a      	str	r3, [sp, #40]	; 0x28
1a00563a:	e7f5      	b.n	1a005628 <_dtoa_r+0x958>
1a00563c:	9b00      	ldr	r3, [sp, #0]
1a00563e:	2b00      	cmp	r3, #0
1a005640:	f47f ae90 	bne.w	1a005364 <_dtoa_r+0x694>
1a005644:	e9dd 1200 	ldrd	r1, r2, [sp]
1a005648:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a00564c:	2b00      	cmp	r3, #0
1a00564e:	f040 8192 	bne.w	1a005976 <_dtoa_r+0xca6>
1a005652:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
1a005656:	0d1b      	lsrs	r3, r3, #20
1a005658:	051b      	lsls	r3, r3, #20
1a00565a:	b12b      	cbz	r3, 1a005668 <_dtoa_r+0x998>
1a00565c:	9b08      	ldr	r3, [sp, #32]
1a00565e:	3301      	adds	r3, #1
1a005660:	9308      	str	r3, [sp, #32]
1a005662:	f108 0801 	add.w	r8, r8, #1
1a005666:	2301      	movs	r3, #1
1a005668:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00566a:	930c      	str	r3, [sp, #48]	; 0x30
1a00566c:	2a00      	cmp	r2, #0
1a00566e:	f43f ae79 	beq.w	1a005364 <_dtoa_r+0x694>
1a005672:	e7a3      	b.n	1a0055bc <_dtoa_r+0x8ec>
1a005674:	463a      	mov	r2, r7
1a005676:	4629      	mov	r1, r5
1a005678:	4648      	mov	r0, r9
1a00567a:	f001 fbc9 	bl	1a006e10 <__pow5mult>
1a00567e:	4652      	mov	r2, sl
1a005680:	4601      	mov	r1, r0
1a005682:	4605      	mov	r5, r0
1a005684:	4648      	mov	r0, r9
1a005686:	f001 fb1d 	bl	1a006cc4 <__multiply>
1a00568a:	4651      	mov	r1, sl
1a00568c:	4607      	mov	r7, r0
1a00568e:	4648      	mov	r0, r9
1a005690:	f001 fa74 	bl	1a006b7c <_Bfree>
1a005694:	46ba      	mov	sl, r7
1a005696:	2e00      	cmp	r6, #0
1a005698:	f43f ae57 	beq.w	1a00534a <_dtoa_r+0x67a>
1a00569c:	e64f      	b.n	1a00533e <_dtoa_r+0x66e>
1a00569e:	4629      	mov	r1, r5
1a0056a0:	4622      	mov	r2, r4
1a0056a2:	4648      	mov	r0, r9
1a0056a4:	f001 fc04 	bl	1a006eb0 <__lshift>
1a0056a8:	4605      	mov	r5, r0
1a0056aa:	e68d      	b.n	1a0053c8 <_dtoa_r+0x6f8>
1a0056ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a0056ae:	2a00      	cmp	r2, #0
1a0056b0:	f000 815d 	beq.w	1a00596e <_dtoa_r+0xc9e>
1a0056b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a0056b8:	9a08      	ldr	r2, [sp, #32]
1a0056ba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1a0056bc:	4614      	mov	r4, r2
1a0056be:	441a      	add	r2, r3
1a0056c0:	4498      	add	r8, r3
1a0056c2:	9208      	str	r2, [sp, #32]
1a0056c4:	e5f7      	b.n	1a0052b6 <_dtoa_r+0x5e6>
1a0056c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0056c8:	2b00      	cmp	r3, #0
1a0056ca:	f73f ad3e 	bgt.w	1a00514a <_dtoa_r+0x47a>
1a0056ce:	f040 80bc 	bne.w	1a00584a <_dtoa_r+0xb7a>
1a0056d2:	ec51 0b17 	vmov	r0, r1, d7
1a0056d6:	2200      	movs	r2, #0
1a0056d8:	4bb2      	ldr	r3, [pc, #712]	; (1a0059a4 <_dtoa_r+0xcd4>)
1a0056da:	f002 f9a1 	bl	1a007a20 <__aeabi_dmul>
1a0056de:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0056e2:	f002 fc23 	bl	1a007f2c <__aeabi_dcmpge>
1a0056e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
1a0056e8:	4635      	mov	r5, r6
1a0056ea:	2800      	cmp	r0, #0
1a0056ec:	d176      	bne.n	1a0057dc <_dtoa_r+0xb0c>
1a0056ee:	9a06      	ldr	r2, [sp, #24]
1a0056f0:	2331      	movs	r3, #49	; 0x31
1a0056f2:	3201      	adds	r2, #1
1a0056f4:	9206      	str	r2, [sp, #24]
1a0056f6:	f88b 3000 	strb.w	r3, [fp]
1a0056fa:	f10b 0401 	add.w	r4, fp, #1
1a0056fe:	4631      	mov	r1, r6
1a005700:	4648      	mov	r0, r9
1a005702:	f001 fa3b 	bl	1a006b7c <_Bfree>
1a005706:	2d00      	cmp	r5, #0
1a005708:	f47f af34 	bne.w	1a005574 <_dtoa_r+0x8a4>
1a00570c:	e736      	b.n	1a00557c <_dtoa_r+0x8ac>
1a00570e:	f000 8142 	beq.w	1a005996 <_dtoa_r+0xcc6>
1a005712:	9b06      	ldr	r3, [sp, #24]
1a005714:	425c      	negs	r4, r3
1a005716:	4ba4      	ldr	r3, [pc, #656]	; (1a0059a8 <_dtoa_r+0xcd8>)
1a005718:	f004 020f 	and.w	r2, r4, #15
1a00571c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005720:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005724:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005728:	f002 f97a 	bl	1a007a20 <__aeabi_dmul>
1a00572c:	1124      	asrs	r4, r4, #4
1a00572e:	e9cd 0100 	strd	r0, r1, [sp]
1a005732:	f000 81c6 	beq.w	1a005ac2 <_dtoa_r+0xdf2>
1a005736:	4d9d      	ldr	r5, [pc, #628]	; (1a0059ac <_dtoa_r+0xcdc>)
1a005738:	2300      	movs	r3, #0
1a00573a:	2602      	movs	r6, #2
1a00573c:	07e7      	lsls	r7, r4, #31
1a00573e:	d505      	bpl.n	1a00574c <_dtoa_r+0xa7c>
1a005740:	e9d5 2300 	ldrd	r2, r3, [r5]
1a005744:	f002 f96c 	bl	1a007a20 <__aeabi_dmul>
1a005748:	3601      	adds	r6, #1
1a00574a:	2301      	movs	r3, #1
1a00574c:	1064      	asrs	r4, r4, #1
1a00574e:	f105 0508 	add.w	r5, r5, #8
1a005752:	d1f3      	bne.n	1a00573c <_dtoa_r+0xa6c>
1a005754:	2b00      	cmp	r3, #0
1a005756:	f43f ac27 	beq.w	1a004fa8 <_dtoa_r+0x2d8>
1a00575a:	e9cd 0100 	strd	r0, r1, [sp]
1a00575e:	e423      	b.n	1a004fa8 <_dtoa_r+0x2d8>
1a005760:	9b00      	ldr	r3, [sp, #0]
1a005762:	2b00      	cmp	r3, #0
1a005764:	f43f af6e 	beq.w	1a005644 <_dtoa_r+0x974>
1a005768:	e726      	b.n	1a0055b8 <_dtoa_r+0x8e8>
1a00576a:	6869      	ldr	r1, [r5, #4]
1a00576c:	4648      	mov	r0, r9
1a00576e:	f001 f9df 	bl	1a006b30 <_Balloc>
1a005772:	692b      	ldr	r3, [r5, #16]
1a005774:	3302      	adds	r3, #2
1a005776:	009a      	lsls	r2, r3, #2
1a005778:	4604      	mov	r4, r0
1a00577a:	f105 010c 	add.w	r1, r5, #12
1a00577e:	300c      	adds	r0, #12
1a005780:	f7fd fa60 	bl	1a002c44 <memcpy>
1a005784:	4621      	mov	r1, r4
1a005786:	2201      	movs	r2, #1
1a005788:	4648      	mov	r0, r9
1a00578a:	f001 fb91 	bl	1a006eb0 <__lshift>
1a00578e:	4680      	mov	r8, r0
1a005790:	e61f      	b.n	1a0053d2 <_dtoa_r+0x702>
1a005792:	2400      	movs	r4, #0
1a005794:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
1a005798:	4621      	mov	r1, r4
1a00579a:	4648      	mov	r0, r9
1a00579c:	f001 f9c8 	bl	1a006b30 <_Balloc>
1a0057a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0057a4:	930e      	str	r3, [sp, #56]	; 0x38
1a0057a6:	9309      	str	r3, [sp, #36]	; 0x24
1a0057a8:	2301      	movs	r3, #1
1a0057aa:	4683      	mov	fp, r0
1a0057ac:	9407      	str	r4, [sp, #28]
1a0057ae:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
1a0057b2:	930a      	str	r3, [sp, #40]	; 0x28
1a0057b4:	e4b6      	b.n	1a005124 <_dtoa_r+0x454>
1a0057b6:	f001 f9eb 	bl	1a006b90 <__multadd>
1a0057ba:	4627      	mov	r7, r4
1a0057bc:	4605      	mov	r5, r0
1a0057be:	4680      	mov	r8, r0
1a0057c0:	e614      	b.n	1a0053ec <_dtoa_r+0x71c>
1a0057c2:	4648      	mov	r0, r9
1a0057c4:	f001 f9da 	bl	1a006b7c <_Bfree>
1a0057c8:	2301      	movs	r3, #1
1a0057ca:	e639      	b.n	1a005440 <_dtoa_r+0x770>
1a0057cc:	9b02      	ldr	r3, [sp, #8]
1a0057ce:	2b02      	cmp	r3, #2
1a0057d0:	f77f adf3 	ble.w	1a0053ba <_dtoa_r+0x6ea>
1a0057d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0057d6:	2b00      	cmp	r3, #0
1a0057d8:	f000 80cf 	beq.w	1a00597a <_dtoa_r+0xcaa>
1a0057dc:	9b07      	ldr	r3, [sp, #28]
1a0057de:	43db      	mvns	r3, r3
1a0057e0:	9306      	str	r3, [sp, #24]
1a0057e2:	465c      	mov	r4, fp
1a0057e4:	e78b      	b.n	1a0056fe <_dtoa_r+0xa2e>
1a0057e6:	9a06      	ldr	r2, [sp, #24]
1a0057e8:	2331      	movs	r3, #49	; 0x31
1a0057ea:	3201      	adds	r2, #1
1a0057ec:	9206      	str	r2, [sp, #24]
1a0057ee:	f88b 3000 	strb.w	r3, [fp]
1a0057f2:	e6b3      	b.n	1a00555c <_dtoa_r+0x88c>
1a0057f4:	2401      	movs	r4, #1
1a0057f6:	9409      	str	r4, [sp, #36]	; 0x24
1a0057f8:	9407      	str	r4, [sp, #28]
1a0057fa:	f7ff bb8b 	b.w	1a004f14 <_dtoa_r+0x244>
1a0057fe:	4630      	mov	r0, r6
1a005800:	f7fc ffc2 	bl	1a002788 <__aeabi_i2d>
1a005804:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005808:	f002 f90a 	bl	1a007a20 <__aeabi_dmul>
1a00580c:	2200      	movs	r2, #0
1a00580e:	4b68      	ldr	r3, [pc, #416]	; (1a0059b0 <_dtoa_r+0xce0>)
1a005810:	f7fc fe6e 	bl	1a0024f0 <__adddf3>
1a005814:	4606      	mov	r6, r0
1a005816:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a00581a:	2200      	movs	r2, #0
1a00581c:	4b61      	ldr	r3, [pc, #388]	; (1a0059a4 <_dtoa_r+0xcd4>)
1a00581e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005822:	f7fc fe63 	bl	1a0024ec <__aeabi_dsub>
1a005826:	4632      	mov	r2, r6
1a005828:	463b      	mov	r3, r7
1a00582a:	4604      	mov	r4, r0
1a00582c:	460d      	mov	r5, r1
1a00582e:	f002 fb87 	bl	1a007f40 <__aeabi_dcmpgt>
1a005832:	2800      	cmp	r0, #0
1a005834:	d14f      	bne.n	1a0058d6 <_dtoa_r+0xc06>
1a005836:	4632      	mov	r2, r6
1a005838:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
1a00583c:	4620      	mov	r0, r4
1a00583e:	4629      	mov	r1, r5
1a005840:	f002 fb60 	bl	1a007f04 <__aeabi_dcmplt>
1a005844:	2800      	cmp	r0, #0
1a005846:	f43f ac69 	beq.w	1a00511c <_dtoa_r+0x44c>
1a00584a:	2600      	movs	r6, #0
1a00584c:	4635      	mov	r5, r6
1a00584e:	e7c5      	b.n	1a0057dc <_dtoa_r+0xb0c>
1a005850:	2301      	movs	r3, #1
1a005852:	930a      	str	r3, [sp, #40]	; 0x28
1a005854:	e6c8      	b.n	1a0055e8 <_dtoa_r+0x918>
1a005856:	4651      	mov	r1, sl
1a005858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00585a:	4648      	mov	r0, r9
1a00585c:	f001 fad8 	bl	1a006e10 <__pow5mult>
1a005860:	4682      	mov	sl, r0
1a005862:	e572      	b.n	1a00534a <_dtoa_r+0x67a>
1a005864:	f8dd a000 	ldr.w	sl, [sp]
1a005868:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00586c:	e686      	b.n	1a00557c <_dtoa_r+0x8ac>
1a00586e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005872:	1afb      	subs	r3, r7, r3
1a005874:	441a      	add	r2, r3
1a005876:	e9cd 720b 	strd	r7, r2, [sp, #44]	; 0x2c
1a00587a:	2700      	movs	r7, #0
1a00587c:	e512      	b.n	1a0052a4 <_dtoa_r+0x5d4>
1a00587e:	2b00      	cmp	r3, #0
1a005880:	9402      	str	r4, [sp, #8]
1a005882:	465e      	mov	r6, fp
1a005884:	f107 0401 	add.w	r4, r7, #1
1a005888:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a00588c:	f300 80ba 	bgt.w	1a005a04 <_dtoa_r+0xd34>
1a005890:	9b00      	ldr	r3, [sp, #0]
1a005892:	9502      	str	r5, [sp, #8]
1a005894:	703b      	strb	r3, [r7, #0]
1a005896:	4645      	mov	r5, r8
1a005898:	e660      	b.n	1a00555c <_dtoa_r+0x88c>
1a00589a:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a00589e:	2602      	movs	r6, #2
1a0058a0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a0058a4:	f7ff bb67 	b.w	1a004f76 <_dtoa_r+0x2a6>
1a0058a8:	9b00      	ldr	r3, [sp, #0]
1a0058aa:	2b39      	cmp	r3, #57	; 0x39
1a0058ac:	465e      	mov	r6, fp
1a0058ae:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a0058b2:	f000 80b9 	beq.w	1a005a28 <_dtoa_r+0xd58>
1a0058b6:	9b00      	ldr	r3, [sp, #0]
1a0058b8:	9502      	str	r5, [sp, #8]
1a0058ba:	3301      	adds	r3, #1
1a0058bc:	703b      	strb	r3, [r7, #0]
1a0058be:	4645      	mov	r5, r8
1a0058c0:	e64c      	b.n	1a00555c <_dtoa_r+0x88c>
1a0058c2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a0058c6:	1a9c      	subs	r4, r3, r2
1a0058c8:	e4f5      	b.n	1a0052b6 <_dtoa_r+0x5e6>
1a0058ca:	465e      	mov	r6, fp
1a0058cc:	9502      	str	r5, [sp, #8]
1a0058ce:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a0058d2:	4645      	mov	r5, r8
1a0058d4:	e61a      	b.n	1a00550c <_dtoa_r+0x83c>
1a0058d6:	2600      	movs	r6, #0
1a0058d8:	4635      	mov	r5, r6
1a0058da:	e708      	b.n	1a0056ee <_dtoa_r+0xa1e>
1a0058dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a0058e0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0058e4:	f002 f89c 	bl	1a007a20 <__aeabi_dmul>
1a0058e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0058ea:	f88b 5000 	strb.w	r5, [fp]
1a0058ee:	2b01      	cmp	r3, #1
1a0058f0:	e9cd 0100 	strd	r0, r1, [sp]
1a0058f4:	d020      	beq.n	1a005938 <_dtoa_r+0xc68>
1a0058f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0058f8:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
1a0058fc:	445b      	add	r3, fp
1a0058fe:	4698      	mov	r8, r3
1a005900:	2200      	movs	r2, #0
1a005902:	4b2c      	ldr	r3, [pc, #176]	; (1a0059b4 <_dtoa_r+0xce4>)
1a005904:	4630      	mov	r0, r6
1a005906:	4639      	mov	r1, r7
1a005908:	f002 f88a 	bl	1a007a20 <__aeabi_dmul>
1a00590c:	460f      	mov	r7, r1
1a00590e:	4606      	mov	r6, r0
1a005910:	f002 fb36 	bl	1a007f80 <__aeabi_d2iz>
1a005914:	4605      	mov	r5, r0
1a005916:	f7fc ff37 	bl	1a002788 <__aeabi_i2d>
1a00591a:	3530      	adds	r5, #48	; 0x30
1a00591c:	4602      	mov	r2, r0
1a00591e:	460b      	mov	r3, r1
1a005920:	4630      	mov	r0, r6
1a005922:	4639      	mov	r1, r7
1a005924:	f7fc fde2 	bl	1a0024ec <__aeabi_dsub>
1a005928:	f804 5b01 	strb.w	r5, [r4], #1
1a00592c:	4544      	cmp	r4, r8
1a00592e:	4606      	mov	r6, r0
1a005930:	460f      	mov	r7, r1
1a005932:	d1e5      	bne.n	1a005900 <_dtoa_r+0xc30>
1a005934:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
1a005938:	4b1f      	ldr	r3, [pc, #124]	; (1a0059b8 <_dtoa_r+0xce8>)
1a00593a:	2200      	movs	r2, #0
1a00593c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005940:	f7fc fdd6 	bl	1a0024f0 <__adddf3>
1a005944:	4632      	mov	r2, r6
1a005946:	463b      	mov	r3, r7
1a005948:	f002 fadc 	bl	1a007f04 <__aeabi_dcmplt>
1a00594c:	2800      	cmp	r0, #0
1a00594e:	d070      	beq.n	1a005a32 <_dtoa_r+0xd62>
1a005950:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005952:	9306      	str	r3, [sp, #24]
1a005954:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a005958:	e48f      	b.n	1a00527a <_dtoa_r+0x5aa>
1a00595a:	2330      	movs	r3, #48	; 0x30
1a00595c:	f88b 3000 	strb.w	r3, [fp]
1a005960:	9b06      	ldr	r3, [sp, #24]
1a005962:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a005966:	3301      	adds	r3, #1
1a005968:	9306      	str	r3, [sp, #24]
1a00596a:	465b      	mov	r3, fp
1a00596c:	e489      	b.n	1a005282 <_dtoa_r+0x5b2>
1a00596e:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a005970:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a005974:	e6a0      	b.n	1a0056b8 <_dtoa_r+0x9e8>
1a005976:	2300      	movs	r3, #0
1a005978:	e676      	b.n	1a005668 <_dtoa_r+0x998>
1a00597a:	4631      	mov	r1, r6
1a00597c:	2205      	movs	r2, #5
1a00597e:	4648      	mov	r0, r9
1a005980:	f001 f906 	bl	1a006b90 <__multadd>
1a005984:	4601      	mov	r1, r0
1a005986:	4606      	mov	r6, r0
1a005988:	4650      	mov	r0, sl
1a00598a:	f001 fae7 	bl	1a006f5c <__mcmp>
1a00598e:	2800      	cmp	r0, #0
1a005990:	f73f aead 	bgt.w	1a0056ee <_dtoa_r+0xa1e>
1a005994:	e722      	b.n	1a0057dc <_dtoa_r+0xb0c>
1a005996:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a00599a:	2602      	movs	r6, #2
1a00599c:	ed8d 7b00 	vstr	d7, [sp]
1a0059a0:	f7ff bb02 	b.w	1a004fa8 <_dtoa_r+0x2d8>
1a0059a4:	40140000 	.word	0x40140000
1a0059a8:	1a0084b8 	.word	0x1a0084b8
1a0059ac:	1a008490 	.word	0x1a008490
1a0059b0:	401c0000 	.word	0x401c0000
1a0059b4:	40240000 	.word	0x40240000
1a0059b8:	3fe00000 	.word	0x3fe00000
1a0059bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0059be:	2b00      	cmp	r3, #0
1a0059c0:	f43f af1d 	beq.w	1a0057fe <_dtoa_r+0xb2e>
1a0059c4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1a0059c6:	2c00      	cmp	r4, #0
1a0059c8:	f77f aba8 	ble.w	1a00511c <_dtoa_r+0x44c>
1a0059cc:	2200      	movs	r2, #0
1a0059ce:	4b45      	ldr	r3, [pc, #276]	; (1a005ae4 <_dtoa_r+0xe14>)
1a0059d0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0059d4:	f002 f824 	bl	1a007a20 <__aeabi_dmul>
1a0059d8:	e9cd 0100 	strd	r0, r1, [sp]
1a0059dc:	1c70      	adds	r0, r6, #1
1a0059de:	f7fc fed3 	bl	1a002788 <__aeabi_i2d>
1a0059e2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0059e6:	f002 f81b 	bl	1a007a20 <__aeabi_dmul>
1a0059ea:	4b3f      	ldr	r3, [pc, #252]	; (1a005ae8 <_dtoa_r+0xe18>)
1a0059ec:	2200      	movs	r2, #0
1a0059ee:	f7fc fd7f 	bl	1a0024f0 <__adddf3>
1a0059f2:	9b06      	ldr	r3, [sp, #24]
1a0059f4:	9412      	str	r4, [sp, #72]	; 0x48
1a0059f6:	3b01      	subs	r3, #1
1a0059f8:	4606      	mov	r6, r0
1a0059fa:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a0059fe:	9316      	str	r3, [sp, #88]	; 0x58
1a005a00:	f7ff baf3 	b.w	1a004fea <_dtoa_r+0x31a>
1a005a04:	4651      	mov	r1, sl
1a005a06:	2201      	movs	r2, #1
1a005a08:	4648      	mov	r0, r9
1a005a0a:	f001 fa51 	bl	1a006eb0 <__lshift>
1a005a0e:	4631      	mov	r1, r6
1a005a10:	4682      	mov	sl, r0
1a005a12:	f001 faa3 	bl	1a006f5c <__mcmp>
1a005a16:	2800      	cmp	r0, #0
1a005a18:	dd3b      	ble.n	1a005a92 <_dtoa_r+0xdc2>
1a005a1a:	9b00      	ldr	r3, [sp, #0]
1a005a1c:	2b39      	cmp	r3, #57	; 0x39
1a005a1e:	d003      	beq.n	1a005a28 <_dtoa_r+0xd58>
1a005a20:	9b02      	ldr	r3, [sp, #8]
1a005a22:	3331      	adds	r3, #49	; 0x31
1a005a24:	9300      	str	r3, [sp, #0]
1a005a26:	e733      	b.n	1a005890 <_dtoa_r+0xbc0>
1a005a28:	2239      	movs	r2, #57	; 0x39
1a005a2a:	9502      	str	r5, [sp, #8]
1a005a2c:	703a      	strb	r2, [r7, #0]
1a005a2e:	4645      	mov	r5, r8
1a005a30:	e58e      	b.n	1a005550 <_dtoa_r+0x880>
1a005a32:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005a36:	2000      	movs	r0, #0
1a005a38:	492c      	ldr	r1, [pc, #176]	; (1a005aec <_dtoa_r+0xe1c>)
1a005a3a:	f7fc fd57 	bl	1a0024ec <__aeabi_dsub>
1a005a3e:	4632      	mov	r2, r6
1a005a40:	463b      	mov	r3, r7
1a005a42:	f002 fa7d 	bl	1a007f40 <__aeabi_dcmpgt>
1a005a46:	b910      	cbnz	r0, 1a005a4e <_dtoa_r+0xd7e>
1a005a48:	f7ff bb68 	b.w	1a00511c <_dtoa_r+0x44c>
1a005a4c:	4614      	mov	r4, r2
1a005a4e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a005a52:	2b30      	cmp	r3, #48	; 0x30
1a005a54:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a005a58:	d0f8      	beq.n	1a005a4c <_dtoa_r+0xd7c>
1a005a5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005a5c:	9306      	str	r3, [sp, #24]
1a005a5e:	e58d      	b.n	1a00557c <_dtoa_r+0x8ac>
1a005a60:	46d9      	mov	r9, fp
1a005a62:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a005a66:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a005a6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005a6c:	9306      	str	r3, [sp, #24]
1a005a6e:	e404      	b.n	1a00527a <_dtoa_r+0x5aa>
1a005a70:	9b00      	ldr	r3, [sp, #0]
1a005a72:	2b39      	cmp	r3, #57	; 0x39
1a005a74:	4621      	mov	r1, r4
1a005a76:	4632      	mov	r2, r6
1a005a78:	f107 0401 	add.w	r4, r7, #1
1a005a7c:	465e      	mov	r6, fp
1a005a7e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a005a82:	d0d1      	beq.n	1a005a28 <_dtoa_r+0xd58>
1a005a84:	2a00      	cmp	r2, #0
1a005a86:	f77f af03 	ble.w	1a005890 <_dtoa_r+0xbc0>
1a005a8a:	460b      	mov	r3, r1
1a005a8c:	3331      	adds	r3, #49	; 0x31
1a005a8e:	9300      	str	r3, [sp, #0]
1a005a90:	e6fe      	b.n	1a005890 <_dtoa_r+0xbc0>
1a005a92:	f47f aefd 	bne.w	1a005890 <_dtoa_r+0xbc0>
1a005a96:	9b00      	ldr	r3, [sp, #0]
1a005a98:	07da      	lsls	r2, r3, #31
1a005a9a:	f57f aef9 	bpl.w	1a005890 <_dtoa_r+0xbc0>
1a005a9e:	e7bc      	b.n	1a005a1a <_dtoa_r+0xd4a>
1a005aa0:	4629      	mov	r1, r5
1a005aa2:	2300      	movs	r3, #0
1a005aa4:	220a      	movs	r2, #10
1a005aa6:	4648      	mov	r0, r9
1a005aa8:	f001 f872 	bl	1a006b90 <__multadd>
1a005aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005aae:	2b00      	cmp	r3, #0
1a005ab0:	4605      	mov	r5, r0
1a005ab2:	dd09      	ble.n	1a005ac8 <_dtoa_r+0xdf8>
1a005ab4:	9309      	str	r3, [sp, #36]	; 0x24
1a005ab6:	e484      	b.n	1a0053c2 <_dtoa_r+0x6f2>
1a005ab8:	9b02      	ldr	r3, [sp, #8]
1a005aba:	2b02      	cmp	r3, #2
1a005abc:	dc0e      	bgt.n	1a005adc <_dtoa_r+0xe0c>
1a005abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005ac0:	e507      	b.n	1a0054d2 <_dtoa_r+0x802>
1a005ac2:	2602      	movs	r6, #2
1a005ac4:	f7ff ba70 	b.w	1a004fa8 <_dtoa_r+0x2d8>
1a005ac8:	9b02      	ldr	r3, [sp, #8]
1a005aca:	2b02      	cmp	r3, #2
1a005acc:	dc06      	bgt.n	1a005adc <_dtoa_r+0xe0c>
1a005ace:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005ad0:	e7f0      	b.n	1a005ab4 <_dtoa_r+0xde4>
1a005ad2:	f43f ac59 	beq.w	1a005388 <_dtoa_r+0x6b8>
1a005ad6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a005ada:	e450      	b.n	1a00537e <_dtoa_r+0x6ae>
1a005adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005ade:	9309      	str	r3, [sp, #36]	; 0x24
1a005ae0:	e678      	b.n	1a0057d4 <_dtoa_r+0xb04>
1a005ae2:	bf00      	nop
1a005ae4:	40240000 	.word	0x40240000
1a005ae8:	401c0000 	.word	0x401c0000
1a005aec:	3fe00000 	.word	0x3fe00000

1a005af0 <__sflush_r>:
1a005af0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a005af4:	b29a      	uxth	r2, r3
1a005af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005afa:	460c      	mov	r4, r1
1a005afc:	0711      	lsls	r1, r2, #28
1a005afe:	4680      	mov	r8, r0
1a005b00:	d444      	bmi.n	1a005b8c <__sflush_r+0x9c>
1a005b02:	6862      	ldr	r2, [r4, #4]
1a005b04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a005b08:	2a00      	cmp	r2, #0
1a005b0a:	81a3      	strh	r3, [r4, #12]
1a005b0c:	dd59      	ble.n	1a005bc2 <__sflush_r+0xd2>
1a005b0e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a005b10:	2d00      	cmp	r5, #0
1a005b12:	d053      	beq.n	1a005bbc <__sflush_r+0xcc>
1a005b14:	2200      	movs	r2, #0
1a005b16:	b29b      	uxth	r3, r3
1a005b18:	f8d8 6000 	ldr.w	r6, [r8]
1a005b1c:	69e1      	ldr	r1, [r4, #28]
1a005b1e:	f8c8 2000 	str.w	r2, [r8]
1a005b22:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a005b26:	f040 8083 	bne.w	1a005c30 <__sflush_r+0x140>
1a005b2a:	2301      	movs	r3, #1
1a005b2c:	4640      	mov	r0, r8
1a005b2e:	47a8      	blx	r5
1a005b30:	1c42      	adds	r2, r0, #1
1a005b32:	d04a      	beq.n	1a005bca <__sflush_r+0xda>
1a005b34:	89a3      	ldrh	r3, [r4, #12]
1a005b36:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a005b38:	69e1      	ldr	r1, [r4, #28]
1a005b3a:	075b      	lsls	r3, r3, #29
1a005b3c:	d505      	bpl.n	1a005b4a <__sflush_r+0x5a>
1a005b3e:	6862      	ldr	r2, [r4, #4]
1a005b40:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a005b42:	1a80      	subs	r0, r0, r2
1a005b44:	b10b      	cbz	r3, 1a005b4a <__sflush_r+0x5a>
1a005b46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a005b48:	1ac0      	subs	r0, r0, r3
1a005b4a:	4602      	mov	r2, r0
1a005b4c:	2300      	movs	r3, #0
1a005b4e:	4640      	mov	r0, r8
1a005b50:	47a8      	blx	r5
1a005b52:	1c47      	adds	r7, r0, #1
1a005b54:	d045      	beq.n	1a005be2 <__sflush_r+0xf2>
1a005b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005b5a:	6922      	ldr	r2, [r4, #16]
1a005b5c:	6022      	str	r2, [r4, #0]
1a005b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a005b62:	2200      	movs	r2, #0
1a005b64:	81a3      	strh	r3, [r4, #12]
1a005b66:	04db      	lsls	r3, r3, #19
1a005b68:	6062      	str	r2, [r4, #4]
1a005b6a:	d500      	bpl.n	1a005b6e <__sflush_r+0x7e>
1a005b6c:	6520      	str	r0, [r4, #80]	; 0x50
1a005b6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a005b70:	f8c8 6000 	str.w	r6, [r8]
1a005b74:	b311      	cbz	r1, 1a005bbc <__sflush_r+0xcc>
1a005b76:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a005b7a:	4299      	cmp	r1, r3
1a005b7c:	d002      	beq.n	1a005b84 <__sflush_r+0x94>
1a005b7e:	4640      	mov	r0, r8
1a005b80:	f000 f944 	bl	1a005e0c <_free_r>
1a005b84:	2000      	movs	r0, #0
1a005b86:	6320      	str	r0, [r4, #48]	; 0x30
1a005b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005b8c:	6926      	ldr	r6, [r4, #16]
1a005b8e:	b1ae      	cbz	r6, 1a005bbc <__sflush_r+0xcc>
1a005b90:	6825      	ldr	r5, [r4, #0]
1a005b92:	6026      	str	r6, [r4, #0]
1a005b94:	0792      	lsls	r2, r2, #30
1a005b96:	bf0c      	ite	eq
1a005b98:	6963      	ldreq	r3, [r4, #20]
1a005b9a:	2300      	movne	r3, #0
1a005b9c:	1bad      	subs	r5, r5, r6
1a005b9e:	60a3      	str	r3, [r4, #8]
1a005ba0:	e00a      	b.n	1a005bb8 <__sflush_r+0xc8>
1a005ba2:	462b      	mov	r3, r5
1a005ba4:	4632      	mov	r2, r6
1a005ba6:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a005ba8:	69e1      	ldr	r1, [r4, #28]
1a005baa:	4640      	mov	r0, r8
1a005bac:	47b8      	blx	r7
1a005bae:	2800      	cmp	r0, #0
1a005bb0:	eba5 0500 	sub.w	r5, r5, r0
1a005bb4:	4406      	add	r6, r0
1a005bb6:	dd2b      	ble.n	1a005c10 <__sflush_r+0x120>
1a005bb8:	2d00      	cmp	r5, #0
1a005bba:	dcf2      	bgt.n	1a005ba2 <__sflush_r+0xb2>
1a005bbc:	2000      	movs	r0, #0
1a005bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005bc2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a005bc4:	2a00      	cmp	r2, #0
1a005bc6:	dca2      	bgt.n	1a005b0e <__sflush_r+0x1e>
1a005bc8:	e7f8      	b.n	1a005bbc <__sflush_r+0xcc>
1a005bca:	f8d8 3000 	ldr.w	r3, [r8]
1a005bce:	2b00      	cmp	r3, #0
1a005bd0:	d0b0      	beq.n	1a005b34 <__sflush_r+0x44>
1a005bd2:	2b1d      	cmp	r3, #29
1a005bd4:	d001      	beq.n	1a005bda <__sflush_r+0xea>
1a005bd6:	2b16      	cmp	r3, #22
1a005bd8:	d12c      	bne.n	1a005c34 <__sflush_r+0x144>
1a005bda:	f8c8 6000 	str.w	r6, [r8]
1a005bde:	2000      	movs	r0, #0
1a005be0:	e7ed      	b.n	1a005bbe <__sflush_r+0xce>
1a005be2:	f8d8 1000 	ldr.w	r1, [r8]
1a005be6:	291d      	cmp	r1, #29
1a005be8:	d81a      	bhi.n	1a005c20 <__sflush_r+0x130>
1a005bea:	4b15      	ldr	r3, [pc, #84]	; (1a005c40 <__sflush_r+0x150>)
1a005bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005bf0:	40cb      	lsrs	r3, r1
1a005bf2:	43db      	mvns	r3, r3
1a005bf4:	f013 0301 	ands.w	r3, r3, #1
1a005bf8:	d114      	bne.n	1a005c24 <__sflush_r+0x134>
1a005bfa:	6925      	ldr	r5, [r4, #16]
1a005bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
1a005c00:	e9c4 5300 	strd	r5, r3, [r4]
1a005c04:	04d5      	lsls	r5, r2, #19
1a005c06:	81a2      	strh	r2, [r4, #12]
1a005c08:	d5b1      	bpl.n	1a005b6e <__sflush_r+0x7e>
1a005c0a:	2900      	cmp	r1, #0
1a005c0c:	d1af      	bne.n	1a005b6e <__sflush_r+0x7e>
1a005c0e:	e7ad      	b.n	1a005b6c <__sflush_r+0x7c>
1a005c10:	89a3      	ldrh	r3, [r4, #12]
1a005c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005c16:	81a3      	strh	r3, [r4, #12]
1a005c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a005c28:	81a2      	strh	r2, [r4, #12]
1a005c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005c2e:	e7c6      	b.n	1a005bbe <__sflush_r+0xce>
1a005c30:	6d20      	ldr	r0, [r4, #80]	; 0x50
1a005c32:	e782      	b.n	1a005b3a <__sflush_r+0x4a>
1a005c34:	89a3      	ldrh	r3, [r4, #12]
1a005c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005c3a:	81a3      	strh	r3, [r4, #12]
1a005c3c:	e7bf      	b.n	1a005bbe <__sflush_r+0xce>
1a005c3e:	bf00      	nop
1a005c40:	20400001 	.word	0x20400001

1a005c44 <_fflush_r>:
1a005c44:	b538      	push	{r3, r4, r5, lr}
1a005c46:	460d      	mov	r5, r1
1a005c48:	4604      	mov	r4, r0
1a005c4a:	b108      	cbz	r0, 1a005c50 <_fflush_r+0xc>
1a005c4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a005c4e:	b1a3      	cbz	r3, 1a005c7a <_fflush_r+0x36>
1a005c50:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a005c54:	b1b8      	cbz	r0, 1a005c86 <_fflush_r+0x42>
1a005c56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a005c58:	07db      	lsls	r3, r3, #31
1a005c5a:	d401      	bmi.n	1a005c60 <_fflush_r+0x1c>
1a005c5c:	0581      	lsls	r1, r0, #22
1a005c5e:	d51a      	bpl.n	1a005c96 <_fflush_r+0x52>
1a005c60:	4620      	mov	r0, r4
1a005c62:	4629      	mov	r1, r5
1a005c64:	f7ff ff44 	bl	1a005af0 <__sflush_r>
1a005c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a005c6a:	07da      	lsls	r2, r3, #31
1a005c6c:	4604      	mov	r4, r0
1a005c6e:	d402      	bmi.n	1a005c76 <_fflush_r+0x32>
1a005c70:	89ab      	ldrh	r3, [r5, #12]
1a005c72:	059b      	lsls	r3, r3, #22
1a005c74:	d50a      	bpl.n	1a005c8c <_fflush_r+0x48>
1a005c76:	4620      	mov	r0, r4
1a005c78:	bd38      	pop	{r3, r4, r5, pc}
1a005c7a:	f000 f83f 	bl	1a005cfc <__sinit>
1a005c7e:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a005c82:	2800      	cmp	r0, #0
1a005c84:	d1e7      	bne.n	1a005c56 <_fflush_r+0x12>
1a005c86:	4604      	mov	r4, r0
1a005c88:	4620      	mov	r0, r4
1a005c8a:	bd38      	pop	{r3, r4, r5, pc}
1a005c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a005c8e:	f000 fb6d 	bl	1a00636c <__retarget_lock_release_recursive>
1a005c92:	4620      	mov	r0, r4
1a005c94:	bd38      	pop	{r3, r4, r5, pc}
1a005c96:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a005c98:	f000 fb66 	bl	1a006368 <__retarget_lock_acquire_recursive>
1a005c9c:	e7e0      	b.n	1a005c60 <_fflush_r+0x1c>
1a005c9e:	bf00      	nop

1a005ca0 <std>:
1a005ca0:	b510      	push	{r4, lr}
1a005ca2:	2300      	movs	r3, #0
1a005ca4:	4604      	mov	r4, r0
1a005ca6:	8181      	strh	r1, [r0, #12]
1a005ca8:	81c2      	strh	r2, [r0, #14]
1a005caa:	e9c0 3300 	strd	r3, r3, [r0]
1a005cae:	6083      	str	r3, [r0, #8]
1a005cb0:	6643      	str	r3, [r0, #100]	; 0x64
1a005cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a005cb6:	6183      	str	r3, [r0, #24]
1a005cb8:	4619      	mov	r1, r3
1a005cba:	2208      	movs	r2, #8
1a005cbc:	305c      	adds	r0, #92	; 0x5c
1a005cbe:	f7fd f85b 	bl	1a002d78 <memset>
1a005cc2:	4807      	ldr	r0, [pc, #28]	; (1a005ce0 <std+0x40>)
1a005cc4:	4907      	ldr	r1, [pc, #28]	; (1a005ce4 <std+0x44>)
1a005cc6:	4a08      	ldr	r2, [pc, #32]	; (1a005ce8 <std+0x48>)
1a005cc8:	4b08      	ldr	r3, [pc, #32]	; (1a005cec <std+0x4c>)
1a005cca:	62e3      	str	r3, [r4, #44]	; 0x2c
1a005ccc:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a005cd0:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a005cd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a005cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005cdc:	f000 bb40 	b.w	1a006360 <__retarget_lock_init_recursive>
1a005ce0:	1a007509 	.word	0x1a007509
1a005ce4:	1a00752d 	.word	0x1a00752d
1a005ce8:	1a007569 	.word	0x1a007569
1a005cec:	1a007589 	.word	0x1a007589

1a005cf0 <_cleanup_r>:
1a005cf0:	4901      	ldr	r1, [pc, #4]	; (1a005cf8 <_cleanup_r+0x8>)
1a005cf2:	f000 bafd 	b.w	1a0062f0 <_fwalk_reent>
1a005cf6:	bf00      	nop
1a005cf8:	1a0076e9 	.word	0x1a0076e9

1a005cfc <__sinit>:
1a005cfc:	b510      	push	{r4, lr}
1a005cfe:	4604      	mov	r4, r0
1a005d00:	4812      	ldr	r0, [pc, #72]	; (1a005d4c <__sinit+0x50>)
1a005d02:	f000 fb31 	bl	1a006368 <__retarget_lock_acquire_recursive>
1a005d06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a005d08:	b9d2      	cbnz	r2, 1a005d40 <__sinit+0x44>
1a005d0a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a005d0e:	4810      	ldr	r0, [pc, #64]	; (1a005d50 <__sinit+0x54>)
1a005d10:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
1a005d14:	2103      	movs	r1, #3
1a005d16:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a005d1a:	63e0      	str	r0, [r4, #60]	; 0x3c
1a005d1c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
1a005d20:	6860      	ldr	r0, [r4, #4]
1a005d22:	2104      	movs	r1, #4
1a005d24:	f7ff ffbc 	bl	1a005ca0 <std>
1a005d28:	2201      	movs	r2, #1
1a005d2a:	2109      	movs	r1, #9
1a005d2c:	68a0      	ldr	r0, [r4, #8]
1a005d2e:	f7ff ffb7 	bl	1a005ca0 <std>
1a005d32:	2202      	movs	r2, #2
1a005d34:	2112      	movs	r1, #18
1a005d36:	68e0      	ldr	r0, [r4, #12]
1a005d38:	f7ff ffb2 	bl	1a005ca0 <std>
1a005d3c:	2301      	movs	r3, #1
1a005d3e:	63a3      	str	r3, [r4, #56]	; 0x38
1a005d40:	4802      	ldr	r0, [pc, #8]	; (1a005d4c <__sinit+0x50>)
1a005d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005d46:	f000 bb11 	b.w	1a00636c <__retarget_lock_release_recursive>
1a005d4a:	bf00      	nop
1a005d4c:	10000c40 	.word	0x10000c40
1a005d50:	1a005cf1 	.word	0x1a005cf1

1a005d54 <__sfp_lock_acquire>:
1a005d54:	4801      	ldr	r0, [pc, #4]	; (1a005d5c <__sfp_lock_acquire+0x8>)
1a005d56:	f000 bb07 	b.w	1a006368 <__retarget_lock_acquire_recursive>
1a005d5a:	bf00      	nop
1a005d5c:	10000c54 	.word	0x10000c54

1a005d60 <__sfp_lock_release>:
1a005d60:	4801      	ldr	r0, [pc, #4]	; (1a005d68 <__sfp_lock_release+0x8>)
1a005d62:	f000 bb03 	b.w	1a00636c <__retarget_lock_release_recursive>
1a005d66:	bf00      	nop
1a005d68:	10000c54 	.word	0x10000c54

1a005d6c <_malloc_trim_r>:
1a005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005d6e:	4f24      	ldr	r7, [pc, #144]	; (1a005e00 <_malloc_trim_r+0x94>)
1a005d70:	460c      	mov	r4, r1
1a005d72:	4606      	mov	r6, r0
1a005d74:	f000 fed0 	bl	1a006b18 <__malloc_lock>
1a005d78:	68bb      	ldr	r3, [r7, #8]
1a005d7a:	685d      	ldr	r5, [r3, #4]
1a005d7c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a005d80:	310f      	adds	r1, #15
1a005d82:	f025 0503 	bic.w	r5, r5, #3
1a005d86:	4429      	add	r1, r5
1a005d88:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a005d8c:	f021 010f 	bic.w	r1, r1, #15
1a005d90:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a005d94:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a005d98:	db07      	blt.n	1a005daa <_malloc_trim_r+0x3e>
1a005d9a:	2100      	movs	r1, #0
1a005d9c:	4630      	mov	r0, r6
1a005d9e:	f7fa fbeb 	bl	1a000578 <_sbrk_r>
1a005da2:	68bb      	ldr	r3, [r7, #8]
1a005da4:	442b      	add	r3, r5
1a005da6:	4298      	cmp	r0, r3
1a005da8:	d004      	beq.n	1a005db4 <_malloc_trim_r+0x48>
1a005daa:	4630      	mov	r0, r6
1a005dac:	f000 feba 	bl	1a006b24 <__malloc_unlock>
1a005db0:	2000      	movs	r0, #0
1a005db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005db4:	4261      	negs	r1, r4
1a005db6:	4630      	mov	r0, r6
1a005db8:	f7fa fbde 	bl	1a000578 <_sbrk_r>
1a005dbc:	3001      	adds	r0, #1
1a005dbe:	d00d      	beq.n	1a005ddc <_malloc_trim_r+0x70>
1a005dc0:	4b10      	ldr	r3, [pc, #64]	; (1a005e04 <_malloc_trim_r+0x98>)
1a005dc2:	68ba      	ldr	r2, [r7, #8]
1a005dc4:	6819      	ldr	r1, [r3, #0]
1a005dc6:	1b2d      	subs	r5, r5, r4
1a005dc8:	f045 0501 	orr.w	r5, r5, #1
1a005dcc:	4630      	mov	r0, r6
1a005dce:	1b09      	subs	r1, r1, r4
1a005dd0:	6055      	str	r5, [r2, #4]
1a005dd2:	6019      	str	r1, [r3, #0]
1a005dd4:	f000 fea6 	bl	1a006b24 <__malloc_unlock>
1a005dd8:	2001      	movs	r0, #1
1a005dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005ddc:	2100      	movs	r1, #0
1a005dde:	4630      	mov	r0, r6
1a005de0:	f7fa fbca 	bl	1a000578 <_sbrk_r>
1a005de4:	68ba      	ldr	r2, [r7, #8]
1a005de6:	1a83      	subs	r3, r0, r2
1a005de8:	2b0f      	cmp	r3, #15
1a005dea:	ddde      	ble.n	1a005daa <_malloc_trim_r+0x3e>
1a005dec:	4c06      	ldr	r4, [pc, #24]	; (1a005e08 <_malloc_trim_r+0x9c>)
1a005dee:	4905      	ldr	r1, [pc, #20]	; (1a005e04 <_malloc_trim_r+0x98>)
1a005df0:	6824      	ldr	r4, [r4, #0]
1a005df2:	f043 0301 	orr.w	r3, r3, #1
1a005df6:	1b00      	subs	r0, r0, r4
1a005df8:	6053      	str	r3, [r2, #4]
1a005dfa:	6008      	str	r0, [r1, #0]
1a005dfc:	e7d5      	b.n	1a005daa <_malloc_trim_r+0x3e>
1a005dfe:	bf00      	nop
1a005e00:	100004f8 	.word	0x100004f8
1a005e04:	10000bf0 	.word	0x10000bf0
1a005e08:	10000900 	.word	0x10000900

1a005e0c <_free_r>:
1a005e0c:	2900      	cmp	r1, #0
1a005e0e:	d053      	beq.n	1a005eb8 <_free_r+0xac>
1a005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005e12:	460c      	mov	r4, r1
1a005e14:	4606      	mov	r6, r0
1a005e16:	f000 fe7f 	bl	1a006b18 <__malloc_lock>
1a005e1a:	f854 cc04 	ldr.w	ip, [r4, #-4]
1a005e1e:	4f71      	ldr	r7, [pc, #452]	; (1a005fe4 <_free_r+0x1d8>)
1a005e20:	f02c 0101 	bic.w	r1, ip, #1
1a005e24:	f1a4 0508 	sub.w	r5, r4, #8
1a005e28:	186b      	adds	r3, r5, r1
1a005e2a:	68b8      	ldr	r0, [r7, #8]
1a005e2c:	685a      	ldr	r2, [r3, #4]
1a005e2e:	4298      	cmp	r0, r3
1a005e30:	f022 0203 	bic.w	r2, r2, #3
1a005e34:	d053      	beq.n	1a005ede <_free_r+0xd2>
1a005e36:	f01c 0f01 	tst.w	ip, #1
1a005e3a:	605a      	str	r2, [r3, #4]
1a005e3c:	eb03 0002 	add.w	r0, r3, r2
1a005e40:	d13b      	bne.n	1a005eba <_free_r+0xae>
1a005e42:	f854 cc08 	ldr.w	ip, [r4, #-8]
1a005e46:	6840      	ldr	r0, [r0, #4]
1a005e48:	eba5 050c 	sub.w	r5, r5, ip
1a005e4c:	f107 0e08 	add.w	lr, r7, #8
1a005e50:	68ac      	ldr	r4, [r5, #8]
1a005e52:	4574      	cmp	r4, lr
1a005e54:	4461      	add	r1, ip
1a005e56:	f000 0001 	and.w	r0, r0, #1
1a005e5a:	d075      	beq.n	1a005f48 <_free_r+0x13c>
1a005e5c:	f8d5 c00c 	ldr.w	ip, [r5, #12]
1a005e60:	f8c4 c00c 	str.w	ip, [r4, #12]
1a005e64:	f8cc 4008 	str.w	r4, [ip, #8]
1a005e68:	b360      	cbz	r0, 1a005ec4 <_free_r+0xb8>
1a005e6a:	f041 0301 	orr.w	r3, r1, #1
1a005e6e:	606b      	str	r3, [r5, #4]
1a005e70:	5069      	str	r1, [r5, r1]
1a005e72:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
1a005e76:	d350      	bcc.n	1a005f1a <_free_r+0x10e>
1a005e78:	0a4b      	lsrs	r3, r1, #9
1a005e7a:	2b04      	cmp	r3, #4
1a005e7c:	d870      	bhi.n	1a005f60 <_free_r+0x154>
1a005e7e:	098b      	lsrs	r3, r1, #6
1a005e80:	f103 0439 	add.w	r4, r3, #57	; 0x39
1a005e84:	00e4      	lsls	r4, r4, #3
1a005e86:	f103 0238 	add.w	r2, r3, #56	; 0x38
1a005e8a:	1938      	adds	r0, r7, r4
1a005e8c:	593b      	ldr	r3, [r7, r4]
1a005e8e:	3808      	subs	r0, #8
1a005e90:	4298      	cmp	r0, r3
1a005e92:	d078      	beq.n	1a005f86 <_free_r+0x17a>
1a005e94:	685a      	ldr	r2, [r3, #4]
1a005e96:	f022 0203 	bic.w	r2, r2, #3
1a005e9a:	428a      	cmp	r2, r1
1a005e9c:	d971      	bls.n	1a005f82 <_free_r+0x176>
1a005e9e:	689b      	ldr	r3, [r3, #8]
1a005ea0:	4298      	cmp	r0, r3
1a005ea2:	d1f7      	bne.n	1a005e94 <_free_r+0x88>
1a005ea4:	68c3      	ldr	r3, [r0, #12]
1a005ea6:	e9c5 0302 	strd	r0, r3, [r5, #8]
1a005eaa:	609d      	str	r5, [r3, #8]
1a005eac:	60c5      	str	r5, [r0, #12]
1a005eae:	4630      	mov	r0, r6
1a005eb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a005eb4:	f000 be36 	b.w	1a006b24 <__malloc_unlock>
1a005eb8:	4770      	bx	lr
1a005eba:	6840      	ldr	r0, [r0, #4]
1a005ebc:	f000 0001 	and.w	r0, r0, #1
1a005ec0:	2800      	cmp	r0, #0
1a005ec2:	d1d2      	bne.n	1a005e6a <_free_r+0x5e>
1a005ec4:	6898      	ldr	r0, [r3, #8]
1a005ec6:	4c48      	ldr	r4, [pc, #288]	; (1a005fe8 <_free_r+0x1dc>)
1a005ec8:	4411      	add	r1, r2
1a005eca:	42a0      	cmp	r0, r4
1a005ecc:	f041 0201 	orr.w	r2, r1, #1
1a005ed0:	d062      	beq.n	1a005f98 <_free_r+0x18c>
1a005ed2:	68db      	ldr	r3, [r3, #12]
1a005ed4:	60c3      	str	r3, [r0, #12]
1a005ed6:	6098      	str	r0, [r3, #8]
1a005ed8:	606a      	str	r2, [r5, #4]
1a005eda:	5069      	str	r1, [r5, r1]
1a005edc:	e7c9      	b.n	1a005e72 <_free_r+0x66>
1a005ede:	f01c 0f01 	tst.w	ip, #1
1a005ee2:	440a      	add	r2, r1
1a005ee4:	d107      	bne.n	1a005ef6 <_free_r+0xea>
1a005ee6:	f854 3c08 	ldr.w	r3, [r4, #-8]
1a005eea:	1aed      	subs	r5, r5, r3
1a005eec:	441a      	add	r2, r3
1a005eee:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
1a005ef2:	60cb      	str	r3, [r1, #12]
1a005ef4:	6099      	str	r1, [r3, #8]
1a005ef6:	4b3d      	ldr	r3, [pc, #244]	; (1a005fec <_free_r+0x1e0>)
1a005ef8:	681b      	ldr	r3, [r3, #0]
1a005efa:	f042 0101 	orr.w	r1, r2, #1
1a005efe:	4293      	cmp	r3, r2
1a005f00:	6069      	str	r1, [r5, #4]
1a005f02:	60bd      	str	r5, [r7, #8]
1a005f04:	d804      	bhi.n	1a005f10 <_free_r+0x104>
1a005f06:	4b3a      	ldr	r3, [pc, #232]	; (1a005ff0 <_free_r+0x1e4>)
1a005f08:	4630      	mov	r0, r6
1a005f0a:	6819      	ldr	r1, [r3, #0]
1a005f0c:	f7ff ff2e 	bl	1a005d6c <_malloc_trim_r>
1a005f10:	4630      	mov	r0, r6
1a005f12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a005f16:	f000 be05 	b.w	1a006b24 <__malloc_unlock>
1a005f1a:	08c9      	lsrs	r1, r1, #3
1a005f1c:	6878      	ldr	r0, [r7, #4]
1a005f1e:	1c4a      	adds	r2, r1, #1
1a005f20:	2301      	movs	r3, #1
1a005f22:	1089      	asrs	r1, r1, #2
1a005f24:	408b      	lsls	r3, r1
1a005f26:	4303      	orrs	r3, r0
1a005f28:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
1a005f2c:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
1a005f30:	607b      	str	r3, [r7, #4]
1a005f32:	3908      	subs	r1, #8
1a005f34:	e9c5 0102 	strd	r0, r1, [r5, #8]
1a005f38:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
1a005f3c:	60c5      	str	r5, [r0, #12]
1a005f3e:	4630      	mov	r0, r6
1a005f40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a005f44:	f000 bdee 	b.w	1a006b24 <__malloc_unlock>
1a005f48:	2800      	cmp	r0, #0
1a005f4a:	d145      	bne.n	1a005fd8 <_free_r+0x1cc>
1a005f4c:	440a      	add	r2, r1
1a005f4e:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
1a005f52:	f042 0001 	orr.w	r0, r2, #1
1a005f56:	60cb      	str	r3, [r1, #12]
1a005f58:	6099      	str	r1, [r3, #8]
1a005f5a:	6068      	str	r0, [r5, #4]
1a005f5c:	50aa      	str	r2, [r5, r2]
1a005f5e:	e7d7      	b.n	1a005f10 <_free_r+0x104>
1a005f60:	2b14      	cmp	r3, #20
1a005f62:	d908      	bls.n	1a005f76 <_free_r+0x16a>
1a005f64:	2b54      	cmp	r3, #84	; 0x54
1a005f66:	d81e      	bhi.n	1a005fa6 <_free_r+0x19a>
1a005f68:	0b0b      	lsrs	r3, r1, #12
1a005f6a:	f103 046f 	add.w	r4, r3, #111	; 0x6f
1a005f6e:	00e4      	lsls	r4, r4, #3
1a005f70:	f103 026e 	add.w	r2, r3, #110	; 0x6e
1a005f74:	e789      	b.n	1a005e8a <_free_r+0x7e>
1a005f76:	f103 045c 	add.w	r4, r3, #92	; 0x5c
1a005f7a:	00e4      	lsls	r4, r4, #3
1a005f7c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
1a005f80:	e783      	b.n	1a005e8a <_free_r+0x7e>
1a005f82:	4618      	mov	r0, r3
1a005f84:	e78e      	b.n	1a005ea4 <_free_r+0x98>
1a005f86:	1093      	asrs	r3, r2, #2
1a005f88:	6879      	ldr	r1, [r7, #4]
1a005f8a:	2201      	movs	r2, #1
1a005f8c:	fa02 f303 	lsl.w	r3, r2, r3
1a005f90:	430b      	orrs	r3, r1
1a005f92:	607b      	str	r3, [r7, #4]
1a005f94:	4603      	mov	r3, r0
1a005f96:	e786      	b.n	1a005ea6 <_free_r+0x9a>
1a005f98:	e9c7 5504 	strd	r5, r5, [r7, #16]
1a005f9c:	e9c5 0002 	strd	r0, r0, [r5, #8]
1a005fa0:	606a      	str	r2, [r5, #4]
1a005fa2:	5069      	str	r1, [r5, r1]
1a005fa4:	e7b4      	b.n	1a005f10 <_free_r+0x104>
1a005fa6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a005faa:	d806      	bhi.n	1a005fba <_free_r+0x1ae>
1a005fac:	0bcb      	lsrs	r3, r1, #15
1a005fae:	f103 0478 	add.w	r4, r3, #120	; 0x78
1a005fb2:	00e4      	lsls	r4, r4, #3
1a005fb4:	f103 0277 	add.w	r2, r3, #119	; 0x77
1a005fb8:	e767      	b.n	1a005e8a <_free_r+0x7e>
1a005fba:	f240 5254 	movw	r2, #1364	; 0x554
1a005fbe:	4293      	cmp	r3, r2
1a005fc0:	d806      	bhi.n	1a005fd0 <_free_r+0x1c4>
1a005fc2:	0c8b      	lsrs	r3, r1, #18
1a005fc4:	f103 047d 	add.w	r4, r3, #125	; 0x7d
1a005fc8:	00e4      	lsls	r4, r4, #3
1a005fca:	f103 027c 	add.w	r2, r3, #124	; 0x7c
1a005fce:	e75c      	b.n	1a005e8a <_free_r+0x7e>
1a005fd0:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
1a005fd4:	227e      	movs	r2, #126	; 0x7e
1a005fd6:	e758      	b.n	1a005e8a <_free_r+0x7e>
1a005fd8:	f041 0201 	orr.w	r2, r1, #1
1a005fdc:	606a      	str	r2, [r5, #4]
1a005fde:	6019      	str	r1, [r3, #0]
1a005fe0:	e796      	b.n	1a005f10 <_free_r+0x104>
1a005fe2:	bf00      	nop
1a005fe4:	100004f8 	.word	0x100004f8
1a005fe8:	10000500 	.word	0x10000500
1a005fec:	10000904 	.word	0x10000904
1a005ff0:	10000c20 	.word	0x10000c20

1a005ff4 <__sfvwrite_r>:
1a005ff4:	6893      	ldr	r3, [r2, #8]
1a005ff6:	2b00      	cmp	r3, #0
1a005ff8:	f000 80e4 	beq.w	1a0061c4 <__sfvwrite_r+0x1d0>
1a005ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006000:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a006004:	b29b      	uxth	r3, r3
1a006006:	460c      	mov	r4, r1
1a006008:	0719      	lsls	r1, r3, #28
1a00600a:	b083      	sub	sp, #12
1a00600c:	4682      	mov	sl, r0
1a00600e:	4690      	mov	r8, r2
1a006010:	d535      	bpl.n	1a00607e <__sfvwrite_r+0x8a>
1a006012:	6922      	ldr	r2, [r4, #16]
1a006014:	b39a      	cbz	r2, 1a00607e <__sfvwrite_r+0x8a>
1a006016:	f013 0202 	ands.w	r2, r3, #2
1a00601a:	f8d8 6000 	ldr.w	r6, [r8]
1a00601e:	d03d      	beq.n	1a00609c <__sfvwrite_r+0xa8>
1a006020:	2700      	movs	r7, #0
1a006022:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a006026:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a00602a:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 1a0062ec <__sfvwrite_r+0x2f8>
1a00602e:	463d      	mov	r5, r7
1a006030:	454d      	cmp	r5, r9
1a006032:	462b      	mov	r3, r5
1a006034:	463a      	mov	r2, r7
1a006036:	bf28      	it	cs
1a006038:	464b      	movcs	r3, r9
1a00603a:	4661      	mov	r1, ip
1a00603c:	4650      	mov	r0, sl
1a00603e:	b1d5      	cbz	r5, 1a006076 <__sfvwrite_r+0x82>
1a006040:	47d8      	blx	fp
1a006042:	2800      	cmp	r0, #0
1a006044:	f340 80c6 	ble.w	1a0061d4 <__sfvwrite_r+0x1e0>
1a006048:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00604c:	1a1b      	subs	r3, r3, r0
1a00604e:	4407      	add	r7, r0
1a006050:	1a2d      	subs	r5, r5, r0
1a006052:	f8c8 3008 	str.w	r3, [r8, #8]
1a006056:	2b00      	cmp	r3, #0
1a006058:	f000 80b0 	beq.w	1a0061bc <__sfvwrite_r+0x1c8>
1a00605c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a006060:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a006064:	454d      	cmp	r5, r9
1a006066:	462b      	mov	r3, r5
1a006068:	463a      	mov	r2, r7
1a00606a:	bf28      	it	cs
1a00606c:	464b      	movcs	r3, r9
1a00606e:	4661      	mov	r1, ip
1a006070:	4650      	mov	r0, sl
1a006072:	2d00      	cmp	r5, #0
1a006074:	d1e4      	bne.n	1a006040 <__sfvwrite_r+0x4c>
1a006076:	e9d6 7500 	ldrd	r7, r5, [r6]
1a00607a:	3608      	adds	r6, #8
1a00607c:	e7d8      	b.n	1a006030 <__sfvwrite_r+0x3c>
1a00607e:	4621      	mov	r1, r4
1a006080:	4650      	mov	r0, sl
1a006082:	f7fe fd2d 	bl	1a004ae0 <__swsetup_r>
1a006086:	2800      	cmp	r0, #0
1a006088:	f040 812a 	bne.w	1a0062e0 <__sfvwrite_r+0x2ec>
1a00608c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006090:	f8d8 6000 	ldr.w	r6, [r8]
1a006094:	b29b      	uxth	r3, r3
1a006096:	f013 0202 	ands.w	r2, r3, #2
1a00609a:	d1c1      	bne.n	1a006020 <__sfvwrite_r+0x2c>
1a00609c:	f013 0901 	ands.w	r9, r3, #1
1a0060a0:	d15d      	bne.n	1a00615e <__sfvwrite_r+0x16a>
1a0060a2:	68a7      	ldr	r7, [r4, #8]
1a0060a4:	6820      	ldr	r0, [r4, #0]
1a0060a6:	464d      	mov	r5, r9
1a0060a8:	2d00      	cmp	r5, #0
1a0060aa:	d054      	beq.n	1a006156 <__sfvwrite_r+0x162>
1a0060ac:	059a      	lsls	r2, r3, #22
1a0060ae:	f140 809b 	bpl.w	1a0061e8 <__sfvwrite_r+0x1f4>
1a0060b2:	42af      	cmp	r7, r5
1a0060b4:	46bb      	mov	fp, r7
1a0060b6:	f200 80d8 	bhi.w	1a00626a <__sfvwrite_r+0x276>
1a0060ba:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a0060be:	d02f      	beq.n	1a006120 <__sfvwrite_r+0x12c>
1a0060c0:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a0060c4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a0060c8:	eba0 0b01 	sub.w	fp, r0, r1
1a0060cc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a0060d0:	1c68      	adds	r0, r5, #1
1a0060d2:	107f      	asrs	r7, r7, #1
1a0060d4:	4458      	add	r0, fp
1a0060d6:	42b8      	cmp	r0, r7
1a0060d8:	463a      	mov	r2, r7
1a0060da:	bf84      	itt	hi
1a0060dc:	4607      	movhi	r7, r0
1a0060de:	463a      	movhi	r2, r7
1a0060e0:	055b      	lsls	r3, r3, #21
1a0060e2:	f140 80d3 	bpl.w	1a00628c <__sfvwrite_r+0x298>
1a0060e6:	4611      	mov	r1, r2
1a0060e8:	4650      	mov	r0, sl
1a0060ea:	f000 f9b9 	bl	1a006460 <_malloc_r>
1a0060ee:	2800      	cmp	r0, #0
1a0060f0:	f000 80f0 	beq.w	1a0062d4 <__sfvwrite_r+0x2e0>
1a0060f4:	465a      	mov	r2, fp
1a0060f6:	6921      	ldr	r1, [r4, #16]
1a0060f8:	9001      	str	r0, [sp, #4]
1a0060fa:	f7fc fda3 	bl	1a002c44 <memcpy>
1a0060fe:	89a2      	ldrh	r2, [r4, #12]
1a006100:	9b01      	ldr	r3, [sp, #4]
1a006102:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a006106:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00610a:	81a2      	strh	r2, [r4, #12]
1a00610c:	eba7 020b 	sub.w	r2, r7, fp
1a006110:	eb03 000b 	add.w	r0, r3, fp
1a006114:	6167      	str	r7, [r4, #20]
1a006116:	6123      	str	r3, [r4, #16]
1a006118:	6020      	str	r0, [r4, #0]
1a00611a:	60a2      	str	r2, [r4, #8]
1a00611c:	462f      	mov	r7, r5
1a00611e:	46ab      	mov	fp, r5
1a006120:	465a      	mov	r2, fp
1a006122:	4649      	mov	r1, r9
1a006124:	f000 fc94 	bl	1a006a50 <memmove>
1a006128:	68a2      	ldr	r2, [r4, #8]
1a00612a:	6823      	ldr	r3, [r4, #0]
1a00612c:	1bd2      	subs	r2, r2, r7
1a00612e:	445b      	add	r3, fp
1a006130:	462f      	mov	r7, r5
1a006132:	60a2      	str	r2, [r4, #8]
1a006134:	6023      	str	r3, [r4, #0]
1a006136:	2500      	movs	r5, #0
1a006138:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00613c:	1bdb      	subs	r3, r3, r7
1a00613e:	44b9      	add	r9, r7
1a006140:	f8c8 3008 	str.w	r3, [r8, #8]
1a006144:	2b00      	cmp	r3, #0
1a006146:	d039      	beq.n	1a0061bc <__sfvwrite_r+0x1c8>
1a006148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00614c:	68a7      	ldr	r7, [r4, #8]
1a00614e:	6820      	ldr	r0, [r4, #0]
1a006150:	b29b      	uxth	r3, r3
1a006152:	2d00      	cmp	r5, #0
1a006154:	d1aa      	bne.n	1a0060ac <__sfvwrite_r+0xb8>
1a006156:	e9d6 9500 	ldrd	r9, r5, [r6]
1a00615a:	3608      	adds	r6, #8
1a00615c:	e7a4      	b.n	1a0060a8 <__sfvwrite_r+0xb4>
1a00615e:	4633      	mov	r3, r6
1a006160:	4691      	mov	r9, r2
1a006162:	4610      	mov	r0, r2
1a006164:	4617      	mov	r7, r2
1a006166:	464e      	mov	r6, r9
1a006168:	469b      	mov	fp, r3
1a00616a:	2f00      	cmp	r7, #0
1a00616c:	d06b      	beq.n	1a006246 <__sfvwrite_r+0x252>
1a00616e:	2800      	cmp	r0, #0
1a006170:	d071      	beq.n	1a006256 <__sfvwrite_r+0x262>
1a006172:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a006176:	6820      	ldr	r0, [r4, #0]
1a006178:	45b9      	cmp	r9, r7
1a00617a:	464b      	mov	r3, r9
1a00617c:	bf28      	it	cs
1a00617e:	463b      	movcs	r3, r7
1a006180:	4288      	cmp	r0, r1
1a006182:	d903      	bls.n	1a00618c <__sfvwrite_r+0x198>
1a006184:	68a5      	ldr	r5, [r4, #8]
1a006186:	4415      	add	r5, r2
1a006188:	42ab      	cmp	r3, r5
1a00618a:	dc71      	bgt.n	1a006270 <__sfvwrite_r+0x27c>
1a00618c:	429a      	cmp	r2, r3
1a00618e:	f300 8093 	bgt.w	1a0062b8 <__sfvwrite_r+0x2c4>
1a006192:	4613      	mov	r3, r2
1a006194:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a006196:	69e1      	ldr	r1, [r4, #28]
1a006198:	4632      	mov	r2, r6
1a00619a:	4650      	mov	r0, sl
1a00619c:	47a8      	blx	r5
1a00619e:	1e05      	subs	r5, r0, #0
1a0061a0:	dd18      	ble.n	1a0061d4 <__sfvwrite_r+0x1e0>
1a0061a2:	ebb9 0905 	subs.w	r9, r9, r5
1a0061a6:	d00f      	beq.n	1a0061c8 <__sfvwrite_r+0x1d4>
1a0061a8:	2001      	movs	r0, #1
1a0061aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a0061ae:	1b5b      	subs	r3, r3, r5
1a0061b0:	442e      	add	r6, r5
1a0061b2:	1b7f      	subs	r7, r7, r5
1a0061b4:	f8c8 3008 	str.w	r3, [r8, #8]
1a0061b8:	2b00      	cmp	r3, #0
1a0061ba:	d1d6      	bne.n	1a00616a <__sfvwrite_r+0x176>
1a0061bc:	2000      	movs	r0, #0
1a0061be:	b003      	add	sp, #12
1a0061c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0061c4:	2000      	movs	r0, #0
1a0061c6:	4770      	bx	lr
1a0061c8:	4621      	mov	r1, r4
1a0061ca:	4650      	mov	r0, sl
1a0061cc:	f7ff fd3a 	bl	1a005c44 <_fflush_r>
1a0061d0:	2800      	cmp	r0, #0
1a0061d2:	d0ea      	beq.n	1a0061aa <__sfvwrite_r+0x1b6>
1a0061d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0061d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0061dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0061e0:	81a3      	strh	r3, [r4, #12]
1a0061e2:	b003      	add	sp, #12
1a0061e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0061e8:	6923      	ldr	r3, [r4, #16]
1a0061ea:	4283      	cmp	r3, r0
1a0061ec:	d315      	bcc.n	1a00621a <__sfvwrite_r+0x226>
1a0061ee:	6961      	ldr	r1, [r4, #20]
1a0061f0:	42a9      	cmp	r1, r5
1a0061f2:	d812      	bhi.n	1a00621a <__sfvwrite_r+0x226>
1a0061f4:	4b3c      	ldr	r3, [pc, #240]	; (1a0062e8 <__sfvwrite_r+0x2f4>)
1a0061f6:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0061f8:	429d      	cmp	r5, r3
1a0061fa:	bf94      	ite	ls
1a0061fc:	462b      	movls	r3, r5
1a0061fe:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a006202:	464a      	mov	r2, r9
1a006204:	fb93 f3f1 	sdiv	r3, r3, r1
1a006208:	4650      	mov	r0, sl
1a00620a:	fb01 f303 	mul.w	r3, r1, r3
1a00620e:	69e1      	ldr	r1, [r4, #28]
1a006210:	47b8      	blx	r7
1a006212:	1e07      	subs	r7, r0, #0
1a006214:	ddde      	ble.n	1a0061d4 <__sfvwrite_r+0x1e0>
1a006216:	1bed      	subs	r5, r5, r7
1a006218:	e78e      	b.n	1a006138 <__sfvwrite_r+0x144>
1a00621a:	42af      	cmp	r7, r5
1a00621c:	bf28      	it	cs
1a00621e:	462f      	movcs	r7, r5
1a006220:	463a      	mov	r2, r7
1a006222:	4649      	mov	r1, r9
1a006224:	f000 fc14 	bl	1a006a50 <memmove>
1a006228:	68a3      	ldr	r3, [r4, #8]
1a00622a:	6822      	ldr	r2, [r4, #0]
1a00622c:	1bdb      	subs	r3, r3, r7
1a00622e:	443a      	add	r2, r7
1a006230:	60a3      	str	r3, [r4, #8]
1a006232:	6022      	str	r2, [r4, #0]
1a006234:	2b00      	cmp	r3, #0
1a006236:	d1ee      	bne.n	1a006216 <__sfvwrite_r+0x222>
1a006238:	4621      	mov	r1, r4
1a00623a:	4650      	mov	r0, sl
1a00623c:	f7ff fd02 	bl	1a005c44 <_fflush_r>
1a006240:	2800      	cmp	r0, #0
1a006242:	d0e8      	beq.n	1a006216 <__sfvwrite_r+0x222>
1a006244:	e7c6      	b.n	1a0061d4 <__sfvwrite_r+0x1e0>
1a006246:	f10b 0308 	add.w	r3, fp, #8
1a00624a:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a00624e:	469b      	mov	fp, r3
1a006250:	3308      	adds	r3, #8
1a006252:	2f00      	cmp	r7, #0
1a006254:	d0f9      	beq.n	1a00624a <__sfvwrite_r+0x256>
1a006256:	463a      	mov	r2, r7
1a006258:	210a      	movs	r1, #10
1a00625a:	4630      	mov	r0, r6
1a00625c:	f000 fba8 	bl	1a0069b0 <memchr>
1a006260:	b338      	cbz	r0, 1a0062b2 <__sfvwrite_r+0x2be>
1a006262:	3001      	adds	r0, #1
1a006264:	eba0 0906 	sub.w	r9, r0, r6
1a006268:	e783      	b.n	1a006172 <__sfvwrite_r+0x17e>
1a00626a:	462f      	mov	r7, r5
1a00626c:	46ab      	mov	fp, r5
1a00626e:	e757      	b.n	1a006120 <__sfvwrite_r+0x12c>
1a006270:	4631      	mov	r1, r6
1a006272:	462a      	mov	r2, r5
1a006274:	f000 fbec 	bl	1a006a50 <memmove>
1a006278:	6823      	ldr	r3, [r4, #0]
1a00627a:	442b      	add	r3, r5
1a00627c:	6023      	str	r3, [r4, #0]
1a00627e:	4621      	mov	r1, r4
1a006280:	4650      	mov	r0, sl
1a006282:	f7ff fcdf 	bl	1a005c44 <_fflush_r>
1a006286:	2800      	cmp	r0, #0
1a006288:	d08b      	beq.n	1a0061a2 <__sfvwrite_r+0x1ae>
1a00628a:	e7a3      	b.n	1a0061d4 <__sfvwrite_r+0x1e0>
1a00628c:	4650      	mov	r0, sl
1a00628e:	f000 ff59 	bl	1a007144 <_realloc_r>
1a006292:	4603      	mov	r3, r0
1a006294:	2800      	cmp	r0, #0
1a006296:	f47f af39 	bne.w	1a00610c <__sfvwrite_r+0x118>
1a00629a:	6921      	ldr	r1, [r4, #16]
1a00629c:	4650      	mov	r0, sl
1a00629e:	f7ff fdb5 	bl	1a005e0c <_free_r>
1a0062a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0062a6:	220c      	movs	r2, #12
1a0062a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0062ac:	f8ca 2000 	str.w	r2, [sl]
1a0062b0:	e792      	b.n	1a0061d8 <__sfvwrite_r+0x1e4>
1a0062b2:	f107 0901 	add.w	r9, r7, #1
1a0062b6:	e75c      	b.n	1a006172 <__sfvwrite_r+0x17e>
1a0062b8:	461a      	mov	r2, r3
1a0062ba:	4631      	mov	r1, r6
1a0062bc:	9301      	str	r3, [sp, #4]
1a0062be:	f000 fbc7 	bl	1a006a50 <memmove>
1a0062c2:	9b01      	ldr	r3, [sp, #4]
1a0062c4:	68a1      	ldr	r1, [r4, #8]
1a0062c6:	6822      	ldr	r2, [r4, #0]
1a0062c8:	1ac9      	subs	r1, r1, r3
1a0062ca:	441a      	add	r2, r3
1a0062cc:	60a1      	str	r1, [r4, #8]
1a0062ce:	6022      	str	r2, [r4, #0]
1a0062d0:	461d      	mov	r5, r3
1a0062d2:	e766      	b.n	1a0061a2 <__sfvwrite_r+0x1ae>
1a0062d4:	230c      	movs	r3, #12
1a0062d6:	f8ca 3000 	str.w	r3, [sl]
1a0062da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0062de:	e77b      	b.n	1a0061d8 <__sfvwrite_r+0x1e4>
1a0062e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0062e4:	e76b      	b.n	1a0061be <__sfvwrite_r+0x1ca>
1a0062e6:	bf00      	nop
1a0062e8:	7ffffffe 	.word	0x7ffffffe
1a0062ec:	7ffffc00 	.word	0x7ffffc00

1a0062f0 <_fwalk_reent>:
1a0062f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0062f4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a0062f8:	d01f      	beq.n	1a00633a <_fwalk_reent+0x4a>
1a0062fa:	4688      	mov	r8, r1
1a0062fc:	4606      	mov	r6, r0
1a0062fe:	f04f 0900 	mov.w	r9, #0
1a006302:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a006306:	3d01      	subs	r5, #1
1a006308:	d411      	bmi.n	1a00632e <_fwalk_reent+0x3e>
1a00630a:	89a3      	ldrh	r3, [r4, #12]
1a00630c:	2b01      	cmp	r3, #1
1a00630e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a006312:	4621      	mov	r1, r4
1a006314:	4630      	mov	r0, r6
1a006316:	d906      	bls.n	1a006326 <_fwalk_reent+0x36>
1a006318:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a00631c:	3301      	adds	r3, #1
1a00631e:	d002      	beq.n	1a006326 <_fwalk_reent+0x36>
1a006320:	47c0      	blx	r8
1a006322:	ea49 0900 	orr.w	r9, r9, r0
1a006326:	1c6b      	adds	r3, r5, #1
1a006328:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a00632c:	d1ed      	bne.n	1a00630a <_fwalk_reent+0x1a>
1a00632e:	683f      	ldr	r7, [r7, #0]
1a006330:	2f00      	cmp	r7, #0
1a006332:	d1e6      	bne.n	1a006302 <_fwalk_reent+0x12>
1a006334:	4648      	mov	r0, r9
1a006336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00633a:	46b9      	mov	r9, r7
1a00633c:	4648      	mov	r0, r9
1a00633e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a006342:	bf00      	nop

1a006344 <_localeconv_r>:
1a006344:	4a04      	ldr	r2, [pc, #16]	; (1a006358 <_localeconv_r+0x14>)
1a006346:	4b05      	ldr	r3, [pc, #20]	; (1a00635c <_localeconv_r+0x18>)
1a006348:	6812      	ldr	r2, [r2, #0]
1a00634a:	6b50      	ldr	r0, [r2, #52]	; 0x34
1a00634c:	2800      	cmp	r0, #0
1a00634e:	bf08      	it	eq
1a006350:	4618      	moveq	r0, r3
1a006352:	30f0      	adds	r0, #240	; 0xf0
1a006354:	4770      	bx	lr
1a006356:	bf00      	nop
1a006358:	100000cc 	.word	0x100000cc
1a00635c:	10000908 	.word	0x10000908

1a006360 <__retarget_lock_init_recursive>:
1a006360:	4770      	bx	lr
1a006362:	bf00      	nop

1a006364 <__retarget_lock_close_recursive>:
1a006364:	4770      	bx	lr
1a006366:	bf00      	nop

1a006368 <__retarget_lock_acquire_recursive>:
1a006368:	4770      	bx	lr
1a00636a:	bf00      	nop

1a00636c <__retarget_lock_release_recursive>:
1a00636c:	4770      	bx	lr
1a00636e:	bf00      	nop

1a006370 <__swhatbuf_r>:
1a006370:	b570      	push	{r4, r5, r6, lr}
1a006372:	460c      	mov	r4, r1
1a006374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006378:	2900      	cmp	r1, #0
1a00637a:	b096      	sub	sp, #88	; 0x58
1a00637c:	4615      	mov	r5, r2
1a00637e:	461e      	mov	r6, r3
1a006380:	da0f      	bge.n	1a0063a2 <__swhatbuf_r+0x32>
1a006382:	89a2      	ldrh	r2, [r4, #12]
1a006384:	2300      	movs	r3, #0
1a006386:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a00638a:	6033      	str	r3, [r6, #0]
1a00638c:	d104      	bne.n	1a006398 <__swhatbuf_r+0x28>
1a00638e:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a006392:	602b      	str	r3, [r5, #0]
1a006394:	b016      	add	sp, #88	; 0x58
1a006396:	bd70      	pop	{r4, r5, r6, pc}
1a006398:	2240      	movs	r2, #64	; 0x40
1a00639a:	4618      	mov	r0, r3
1a00639c:	602a      	str	r2, [r5, #0]
1a00639e:	b016      	add	sp, #88	; 0x58
1a0063a0:	bd70      	pop	{r4, r5, r6, pc}
1a0063a2:	466a      	mov	r2, sp
1a0063a4:	f7fa f8ae 	bl	1a000504 <_fstat_r>
1a0063a8:	2800      	cmp	r0, #0
1a0063aa:	dbea      	blt.n	1a006382 <__swhatbuf_r+0x12>
1a0063ac:	9b01      	ldr	r3, [sp, #4]
1a0063ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
1a0063b2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
1a0063b6:	fab3 f383 	clz	r3, r3
1a0063ba:	095b      	lsrs	r3, r3, #5
1a0063bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a0063c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a0063c4:	6033      	str	r3, [r6, #0]
1a0063c6:	602a      	str	r2, [r5, #0]
1a0063c8:	b016      	add	sp, #88	; 0x58
1a0063ca:	bd70      	pop	{r4, r5, r6, pc}

1a0063cc <__smakebuf_r>:
1a0063cc:	898a      	ldrh	r2, [r1, #12]
1a0063ce:	0792      	lsls	r2, r2, #30
1a0063d0:	460b      	mov	r3, r1
1a0063d2:	d506      	bpl.n	1a0063e2 <__smakebuf_r+0x16>
1a0063d4:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a0063d8:	2101      	movs	r1, #1
1a0063da:	601a      	str	r2, [r3, #0]
1a0063dc:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a0063e0:	4770      	bx	lr
1a0063e2:	b570      	push	{r4, r5, r6, lr}
1a0063e4:	b082      	sub	sp, #8
1a0063e6:	ab01      	add	r3, sp, #4
1a0063e8:	466a      	mov	r2, sp
1a0063ea:	460c      	mov	r4, r1
1a0063ec:	4605      	mov	r5, r0
1a0063ee:	f7ff ffbf 	bl	1a006370 <__swhatbuf_r>
1a0063f2:	9900      	ldr	r1, [sp, #0]
1a0063f4:	4606      	mov	r6, r0
1a0063f6:	4628      	mov	r0, r5
1a0063f8:	f000 f832 	bl	1a006460 <_malloc_r>
1a0063fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006400:	b1d8      	cbz	r0, 1a00643a <__smakebuf_r+0x6e>
1a006402:	4916      	ldr	r1, [pc, #88]	; (1a00645c <__smakebuf_r+0x90>)
1a006404:	63e9      	str	r1, [r5, #60]	; 0x3c
1a006406:	9a01      	ldr	r2, [sp, #4]
1a006408:	9900      	ldr	r1, [sp, #0]
1a00640a:	6020      	str	r0, [r4, #0]
1a00640c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a006410:	81a3      	strh	r3, [r4, #12]
1a006412:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a006416:	b91a      	cbnz	r2, 1a006420 <__smakebuf_r+0x54>
1a006418:	4333      	orrs	r3, r6
1a00641a:	81a3      	strh	r3, [r4, #12]
1a00641c:	b002      	add	sp, #8
1a00641e:	bd70      	pop	{r4, r5, r6, pc}
1a006420:	4628      	mov	r0, r5
1a006422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006426:	f7fa f872 	bl	1a00050e <_isatty_r>
1a00642a:	b1a0      	cbz	r0, 1a006456 <__smakebuf_r+0x8a>
1a00642c:	89a3      	ldrh	r3, [r4, #12]
1a00642e:	f023 0303 	bic.w	r3, r3, #3
1a006432:	f043 0301 	orr.w	r3, r3, #1
1a006436:	b21b      	sxth	r3, r3
1a006438:	e7ee      	b.n	1a006418 <__smakebuf_r+0x4c>
1a00643a:	059a      	lsls	r2, r3, #22
1a00643c:	d4ee      	bmi.n	1a00641c <__smakebuf_r+0x50>
1a00643e:	f023 0303 	bic.w	r3, r3, #3
1a006442:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a006446:	f043 0302 	orr.w	r3, r3, #2
1a00644a:	2101      	movs	r1, #1
1a00644c:	81a3      	strh	r3, [r4, #12]
1a00644e:	6022      	str	r2, [r4, #0]
1a006450:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a006454:	e7e2      	b.n	1a00641c <__smakebuf_r+0x50>
1a006456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00645a:	e7dd      	b.n	1a006418 <__smakebuf_r+0x4c>
1a00645c:	1a005cf1 	.word	0x1a005cf1

1a006460 <_malloc_r>:
1a006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006464:	f101 050b 	add.w	r5, r1, #11
1a006468:	2d16      	cmp	r5, #22
1a00646a:	b083      	sub	sp, #12
1a00646c:	4606      	mov	r6, r0
1a00646e:	d823      	bhi.n	1a0064b8 <_malloc_r+0x58>
1a006470:	2910      	cmp	r1, #16
1a006472:	f200 80b9 	bhi.w	1a0065e8 <_malloc_r+0x188>
1a006476:	f000 fb4f 	bl	1a006b18 <__malloc_lock>
1a00647a:	2510      	movs	r5, #16
1a00647c:	2318      	movs	r3, #24
1a00647e:	2002      	movs	r0, #2
1a006480:	4fc5      	ldr	r7, [pc, #788]	; (1a006798 <_malloc_r+0x338>)
1a006482:	443b      	add	r3, r7
1a006484:	f1a3 0208 	sub.w	r2, r3, #8
1a006488:	685c      	ldr	r4, [r3, #4]
1a00648a:	4294      	cmp	r4, r2
1a00648c:	f000 8166 	beq.w	1a00675c <_malloc_r+0x2fc>
1a006490:	6863      	ldr	r3, [r4, #4]
1a006492:	f023 0303 	bic.w	r3, r3, #3
1a006496:	4423      	add	r3, r4
1a006498:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a00649c:	685a      	ldr	r2, [r3, #4]
1a00649e:	60e9      	str	r1, [r5, #12]
1a0064a0:	f042 0201 	orr.w	r2, r2, #1
1a0064a4:	608d      	str	r5, [r1, #8]
1a0064a6:	4630      	mov	r0, r6
1a0064a8:	605a      	str	r2, [r3, #4]
1a0064aa:	f000 fb3b 	bl	1a006b24 <__malloc_unlock>
1a0064ae:	3408      	adds	r4, #8
1a0064b0:	4620      	mov	r0, r4
1a0064b2:	b003      	add	sp, #12
1a0064b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0064b8:	f035 0507 	bics.w	r5, r5, #7
1a0064bc:	f100 8094 	bmi.w	1a0065e8 <_malloc_r+0x188>
1a0064c0:	42a9      	cmp	r1, r5
1a0064c2:	f200 8091 	bhi.w	1a0065e8 <_malloc_r+0x188>
1a0064c6:	f000 fb27 	bl	1a006b18 <__malloc_lock>
1a0064ca:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a0064ce:	f0c0 8183 	bcc.w	1a0067d8 <_malloc_r+0x378>
1a0064d2:	0a6b      	lsrs	r3, r5, #9
1a0064d4:	f000 808f 	beq.w	1a0065f6 <_malloc_r+0x196>
1a0064d8:	2b04      	cmp	r3, #4
1a0064da:	f200 8146 	bhi.w	1a00676a <_malloc_r+0x30a>
1a0064de:	09ab      	lsrs	r3, r5, #6
1a0064e0:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a0064e4:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a0064e8:	00c3      	lsls	r3, r0, #3
1a0064ea:	4fab      	ldr	r7, [pc, #684]	; (1a006798 <_malloc_r+0x338>)
1a0064ec:	443b      	add	r3, r7
1a0064ee:	f1a3 0108 	sub.w	r1, r3, #8
1a0064f2:	685c      	ldr	r4, [r3, #4]
1a0064f4:	42a1      	cmp	r1, r4
1a0064f6:	d106      	bne.n	1a006506 <_malloc_r+0xa6>
1a0064f8:	e00c      	b.n	1a006514 <_malloc_r+0xb4>
1a0064fa:	2a00      	cmp	r2, #0
1a0064fc:	f280 811d 	bge.w	1a00673a <_malloc_r+0x2da>
1a006500:	68e4      	ldr	r4, [r4, #12]
1a006502:	42a1      	cmp	r1, r4
1a006504:	d006      	beq.n	1a006514 <_malloc_r+0xb4>
1a006506:	6863      	ldr	r3, [r4, #4]
1a006508:	f023 0303 	bic.w	r3, r3, #3
1a00650c:	1b5a      	subs	r2, r3, r5
1a00650e:	2a0f      	cmp	r2, #15
1a006510:	ddf3      	ble.n	1a0064fa <_malloc_r+0x9a>
1a006512:	4660      	mov	r0, ip
1a006514:	693c      	ldr	r4, [r7, #16]
1a006516:	f8df c294 	ldr.w	ip, [pc, #660]	; 1a0067ac <_malloc_r+0x34c>
1a00651a:	4564      	cmp	r4, ip
1a00651c:	d071      	beq.n	1a006602 <_malloc_r+0x1a2>
1a00651e:	6863      	ldr	r3, [r4, #4]
1a006520:	f023 0303 	bic.w	r3, r3, #3
1a006524:	1b5a      	subs	r2, r3, r5
1a006526:	2a0f      	cmp	r2, #15
1a006528:	f300 8144 	bgt.w	1a0067b4 <_malloc_r+0x354>
1a00652c:	2a00      	cmp	r2, #0
1a00652e:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a006532:	f280 8126 	bge.w	1a006782 <_malloc_r+0x322>
1a006536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00653a:	f080 8169 	bcs.w	1a006810 <_malloc_r+0x3b0>
1a00653e:	08db      	lsrs	r3, r3, #3
1a006540:	1c59      	adds	r1, r3, #1
1a006542:	687a      	ldr	r2, [r7, #4]
1a006544:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a006548:	f8c4 8008 	str.w	r8, [r4, #8]
1a00654c:	f04f 0e01 	mov.w	lr, #1
1a006550:	109b      	asrs	r3, r3, #2
1a006552:	fa0e f303 	lsl.w	r3, lr, r3
1a006556:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a00655a:	4313      	orrs	r3, r2
1a00655c:	f1ae 0208 	sub.w	r2, lr, #8
1a006560:	60e2      	str	r2, [r4, #12]
1a006562:	607b      	str	r3, [r7, #4]
1a006564:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a006568:	f8c8 400c 	str.w	r4, [r8, #12]
1a00656c:	1082      	asrs	r2, r0, #2
1a00656e:	2401      	movs	r4, #1
1a006570:	4094      	lsls	r4, r2
1a006572:	429c      	cmp	r4, r3
1a006574:	d84b      	bhi.n	1a00660e <_malloc_r+0x1ae>
1a006576:	421c      	tst	r4, r3
1a006578:	d106      	bne.n	1a006588 <_malloc_r+0x128>
1a00657a:	f020 0003 	bic.w	r0, r0, #3
1a00657e:	0064      	lsls	r4, r4, #1
1a006580:	421c      	tst	r4, r3
1a006582:	f100 0004 	add.w	r0, r0, #4
1a006586:	d0fa      	beq.n	1a00657e <_malloc_r+0x11e>
1a006588:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a00658c:	46ce      	mov	lr, r9
1a00658e:	4680      	mov	r8, r0
1a006590:	f8de 300c 	ldr.w	r3, [lr, #12]
1a006594:	459e      	cmp	lr, r3
1a006596:	d107      	bne.n	1a0065a8 <_malloc_r+0x148>
1a006598:	e122      	b.n	1a0067e0 <_malloc_r+0x380>
1a00659a:	2a00      	cmp	r2, #0
1a00659c:	f280 8129 	bge.w	1a0067f2 <_malloc_r+0x392>
1a0065a0:	68db      	ldr	r3, [r3, #12]
1a0065a2:	459e      	cmp	lr, r3
1a0065a4:	f000 811c 	beq.w	1a0067e0 <_malloc_r+0x380>
1a0065a8:	6859      	ldr	r1, [r3, #4]
1a0065aa:	f021 0103 	bic.w	r1, r1, #3
1a0065ae:	1b4a      	subs	r2, r1, r5
1a0065b0:	2a0f      	cmp	r2, #15
1a0065b2:	ddf2      	ble.n	1a00659a <_malloc_r+0x13a>
1a0065b4:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a0065b8:	195c      	adds	r4, r3, r5
1a0065ba:	f045 0501 	orr.w	r5, r5, #1
1a0065be:	605d      	str	r5, [r3, #4]
1a0065c0:	f042 0501 	orr.w	r5, r2, #1
1a0065c4:	f8c8 e00c 	str.w	lr, [r8, #12]
1a0065c8:	4630      	mov	r0, r6
1a0065ca:	f8ce 8008 	str.w	r8, [lr, #8]
1a0065ce:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a0065d2:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a0065d6:	6065      	str	r5, [r4, #4]
1a0065d8:	505a      	str	r2, [r3, r1]
1a0065da:	9301      	str	r3, [sp, #4]
1a0065dc:	f000 faa2 	bl	1a006b24 <__malloc_unlock>
1a0065e0:	9b01      	ldr	r3, [sp, #4]
1a0065e2:	f103 0408 	add.w	r4, r3, #8
1a0065e6:	e763      	b.n	1a0064b0 <_malloc_r+0x50>
1a0065e8:	2400      	movs	r4, #0
1a0065ea:	230c      	movs	r3, #12
1a0065ec:	4620      	mov	r0, r4
1a0065ee:	6033      	str	r3, [r6, #0]
1a0065f0:	b003      	add	sp, #12
1a0065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0065f6:	f44f 7300 	mov.w	r3, #512	; 0x200
1a0065fa:	2040      	movs	r0, #64	; 0x40
1a0065fc:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a006600:	e773      	b.n	1a0064ea <_malloc_r+0x8a>
1a006602:	687b      	ldr	r3, [r7, #4]
1a006604:	1082      	asrs	r2, r0, #2
1a006606:	2401      	movs	r4, #1
1a006608:	4094      	lsls	r4, r2
1a00660a:	429c      	cmp	r4, r3
1a00660c:	d9b3      	bls.n	1a006576 <_malloc_r+0x116>
1a00660e:	68bc      	ldr	r4, [r7, #8]
1a006610:	6863      	ldr	r3, [r4, #4]
1a006612:	f023 0903 	bic.w	r9, r3, #3
1a006616:	45a9      	cmp	r9, r5
1a006618:	d303      	bcc.n	1a006622 <_malloc_r+0x1c2>
1a00661a:	eba9 0305 	sub.w	r3, r9, r5
1a00661e:	2b0f      	cmp	r3, #15
1a006620:	dc7b      	bgt.n	1a00671a <_malloc_r+0x2ba>
1a006622:	4b5e      	ldr	r3, [pc, #376]	; (1a00679c <_malloc_r+0x33c>)
1a006624:	f8df a188 	ldr.w	sl, [pc, #392]	; 1a0067b0 <_malloc_r+0x350>
1a006628:	681a      	ldr	r2, [r3, #0]
1a00662a:	f8da 3000 	ldr.w	r3, [sl]
1a00662e:	3301      	adds	r3, #1
1a006630:	eb05 0802 	add.w	r8, r5, r2
1a006634:	f000 8148 	beq.w	1a0068c8 <_malloc_r+0x468>
1a006638:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
1a00663c:	f108 080f 	add.w	r8, r8, #15
1a006640:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
1a006644:	f028 080f 	bic.w	r8, r8, #15
1a006648:	4641      	mov	r1, r8
1a00664a:	4630      	mov	r0, r6
1a00664c:	f7f9 ff94 	bl	1a000578 <_sbrk_r>
1a006650:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a006654:	4683      	mov	fp, r0
1a006656:	f000 8104 	beq.w	1a006862 <_malloc_r+0x402>
1a00665a:	eb04 0009 	add.w	r0, r4, r9
1a00665e:	4558      	cmp	r0, fp
1a006660:	f200 80fd 	bhi.w	1a00685e <_malloc_r+0x3fe>
1a006664:	4a4e      	ldr	r2, [pc, #312]	; (1a0067a0 <_malloc_r+0x340>)
1a006666:	6813      	ldr	r3, [r2, #0]
1a006668:	4443      	add	r3, r8
1a00666a:	6013      	str	r3, [r2, #0]
1a00666c:	f000 814d 	beq.w	1a00690a <_malloc_r+0x4aa>
1a006670:	f8da 1000 	ldr.w	r1, [sl]
1a006674:	3101      	adds	r1, #1
1a006676:	bf1b      	ittet	ne
1a006678:	ebab 0000 	subne.w	r0, fp, r0
1a00667c:	181b      	addne	r3, r3, r0
1a00667e:	f8ca b000 	streq.w	fp, [sl]
1a006682:	6013      	strne	r3, [r2, #0]
1a006684:	f01b 0307 	ands.w	r3, fp, #7
1a006688:	f000 8134 	beq.w	1a0068f4 <_malloc_r+0x494>
1a00668c:	f1c3 0108 	rsb	r1, r3, #8
1a006690:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
1a006694:	448b      	add	fp, r1
1a006696:	3308      	adds	r3, #8
1a006698:	44d8      	add	r8, fp
1a00669a:	f3c8 080b 	ubfx	r8, r8, #0, #12
1a00669e:	eba3 0808 	sub.w	r8, r3, r8
1a0066a2:	4641      	mov	r1, r8
1a0066a4:	4630      	mov	r0, r6
1a0066a6:	9201      	str	r2, [sp, #4]
1a0066a8:	f7f9 ff66 	bl	1a000578 <_sbrk_r>
1a0066ac:	1c43      	adds	r3, r0, #1
1a0066ae:	9a01      	ldr	r2, [sp, #4]
1a0066b0:	f000 8146 	beq.w	1a006940 <_malloc_r+0x4e0>
1a0066b4:	eba0 010b 	sub.w	r1, r0, fp
1a0066b8:	4441      	add	r1, r8
1a0066ba:	f041 0101 	orr.w	r1, r1, #1
1a0066be:	6813      	ldr	r3, [r2, #0]
1a0066c0:	f8c7 b008 	str.w	fp, [r7, #8]
1a0066c4:	4443      	add	r3, r8
1a0066c6:	42bc      	cmp	r4, r7
1a0066c8:	f8cb 1004 	str.w	r1, [fp, #4]
1a0066cc:	6013      	str	r3, [r2, #0]
1a0066ce:	d015      	beq.n	1a0066fc <_malloc_r+0x29c>
1a0066d0:	f1b9 0f0f 	cmp.w	r9, #15
1a0066d4:	f240 8130 	bls.w	1a006938 <_malloc_r+0x4d8>
1a0066d8:	6860      	ldr	r0, [r4, #4]
1a0066da:	f1a9 010c 	sub.w	r1, r9, #12
1a0066de:	f021 0107 	bic.w	r1, r1, #7
1a0066e2:	f000 0001 	and.w	r0, r0, #1
1a0066e6:	eb04 0c01 	add.w	ip, r4, r1
1a0066ea:	4308      	orrs	r0, r1
1a0066ec:	f04f 0e05 	mov.w	lr, #5
1a0066f0:	290f      	cmp	r1, #15
1a0066f2:	6060      	str	r0, [r4, #4]
1a0066f4:	e9cc ee01 	strd	lr, lr, [ip, #4]
1a0066f8:	f200 813a 	bhi.w	1a006970 <_malloc_r+0x510>
1a0066fc:	4a29      	ldr	r2, [pc, #164]	; (1a0067a4 <_malloc_r+0x344>)
1a0066fe:	482a      	ldr	r0, [pc, #168]	; (1a0067a8 <_malloc_r+0x348>)
1a006700:	6811      	ldr	r1, [r2, #0]
1a006702:	68bc      	ldr	r4, [r7, #8]
1a006704:	428b      	cmp	r3, r1
1a006706:	6801      	ldr	r1, [r0, #0]
1a006708:	bf88      	it	hi
1a00670a:	6013      	strhi	r3, [r2, #0]
1a00670c:	6862      	ldr	r2, [r4, #4]
1a00670e:	428b      	cmp	r3, r1
1a006710:	f022 0203 	bic.w	r2, r2, #3
1a006714:	bf88      	it	hi
1a006716:	6003      	strhi	r3, [r0, #0]
1a006718:	e0a7      	b.n	1a00686a <_malloc_r+0x40a>
1a00671a:	1962      	adds	r2, r4, r5
1a00671c:	f043 0301 	orr.w	r3, r3, #1
1a006720:	f045 0501 	orr.w	r5, r5, #1
1a006724:	6065      	str	r5, [r4, #4]
1a006726:	4630      	mov	r0, r6
1a006728:	60ba      	str	r2, [r7, #8]
1a00672a:	6053      	str	r3, [r2, #4]
1a00672c:	f000 f9fa 	bl	1a006b24 <__malloc_unlock>
1a006730:	3408      	adds	r4, #8
1a006732:	4620      	mov	r0, r4
1a006734:	b003      	add	sp, #12
1a006736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00673a:	4423      	add	r3, r4
1a00673c:	68e1      	ldr	r1, [r4, #12]
1a00673e:	685a      	ldr	r2, [r3, #4]
1a006740:	68a5      	ldr	r5, [r4, #8]
1a006742:	f042 0201 	orr.w	r2, r2, #1
1a006746:	60e9      	str	r1, [r5, #12]
1a006748:	4630      	mov	r0, r6
1a00674a:	608d      	str	r5, [r1, #8]
1a00674c:	605a      	str	r2, [r3, #4]
1a00674e:	f000 f9e9 	bl	1a006b24 <__malloc_unlock>
1a006752:	3408      	adds	r4, #8
1a006754:	4620      	mov	r0, r4
1a006756:	b003      	add	sp, #12
1a006758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00675c:	68dc      	ldr	r4, [r3, #12]
1a00675e:	42a3      	cmp	r3, r4
1a006760:	bf08      	it	eq
1a006762:	3002      	addeq	r0, #2
1a006764:	f43f aed6 	beq.w	1a006514 <_malloc_r+0xb4>
1a006768:	e692      	b.n	1a006490 <_malloc_r+0x30>
1a00676a:	2b14      	cmp	r3, #20
1a00676c:	d971      	bls.n	1a006852 <_malloc_r+0x3f2>
1a00676e:	2b54      	cmp	r3, #84	; 0x54
1a006770:	f200 80ad 	bhi.w	1a0068ce <_malloc_r+0x46e>
1a006774:	0b2b      	lsrs	r3, r5, #12
1a006776:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a00677a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a00677e:	00c3      	lsls	r3, r0, #3
1a006780:	e6b3      	b.n	1a0064ea <_malloc_r+0x8a>
1a006782:	4423      	add	r3, r4
1a006784:	4630      	mov	r0, r6
1a006786:	685a      	ldr	r2, [r3, #4]
1a006788:	f042 0201 	orr.w	r2, r2, #1
1a00678c:	605a      	str	r2, [r3, #4]
1a00678e:	3408      	adds	r4, #8
1a006790:	f000 f9c8 	bl	1a006b24 <__malloc_unlock>
1a006794:	e68c      	b.n	1a0064b0 <_malloc_r+0x50>
1a006796:	bf00      	nop
1a006798:	100004f8 	.word	0x100004f8
1a00679c:	10000c20 	.word	0x10000c20
1a0067a0:	10000bf0 	.word	0x10000bf0
1a0067a4:	10000c18 	.word	0x10000c18
1a0067a8:	10000c1c 	.word	0x10000c1c
1a0067ac:	10000500 	.word	0x10000500
1a0067b0:	10000900 	.word	0x10000900
1a0067b4:	1961      	adds	r1, r4, r5
1a0067b6:	f045 0e01 	orr.w	lr, r5, #1
1a0067ba:	f042 0501 	orr.w	r5, r2, #1
1a0067be:	f8c4 e004 	str.w	lr, [r4, #4]
1a0067c2:	4630      	mov	r0, r6
1a0067c4:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a0067c8:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a0067cc:	604d      	str	r5, [r1, #4]
1a0067ce:	50e2      	str	r2, [r4, r3]
1a0067d0:	f000 f9a8 	bl	1a006b24 <__malloc_unlock>
1a0067d4:	3408      	adds	r4, #8
1a0067d6:	e66b      	b.n	1a0064b0 <_malloc_r+0x50>
1a0067d8:	08e8      	lsrs	r0, r5, #3
1a0067da:	f105 0308 	add.w	r3, r5, #8
1a0067de:	e64f      	b.n	1a006480 <_malloc_r+0x20>
1a0067e0:	f108 0801 	add.w	r8, r8, #1
1a0067e4:	f018 0f03 	tst.w	r8, #3
1a0067e8:	f10e 0e08 	add.w	lr, lr, #8
1a0067ec:	f47f aed0 	bne.w	1a006590 <_malloc_r+0x130>
1a0067f0:	e052      	b.n	1a006898 <_malloc_r+0x438>
1a0067f2:	4419      	add	r1, r3
1a0067f4:	461c      	mov	r4, r3
1a0067f6:	684a      	ldr	r2, [r1, #4]
1a0067f8:	68db      	ldr	r3, [r3, #12]
1a0067fa:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a0067fe:	f042 0201 	orr.w	r2, r2, #1
1a006802:	604a      	str	r2, [r1, #4]
1a006804:	4630      	mov	r0, r6
1a006806:	60eb      	str	r3, [r5, #12]
1a006808:	609d      	str	r5, [r3, #8]
1a00680a:	f000 f98b 	bl	1a006b24 <__malloc_unlock>
1a00680e:	e64f      	b.n	1a0064b0 <_malloc_r+0x50>
1a006810:	0a5a      	lsrs	r2, r3, #9
1a006812:	2a04      	cmp	r2, #4
1a006814:	d935      	bls.n	1a006882 <_malloc_r+0x422>
1a006816:	2a14      	cmp	r2, #20
1a006818:	d86f      	bhi.n	1a0068fa <_malloc_r+0x49a>
1a00681a:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a00681e:	00c9      	lsls	r1, r1, #3
1a006820:	325b      	adds	r2, #91	; 0x5b
1a006822:	eb07 0e01 	add.w	lr, r7, r1
1a006826:	5879      	ldr	r1, [r7, r1]
1a006828:	f1ae 0e08 	sub.w	lr, lr, #8
1a00682c:	458e      	cmp	lr, r1
1a00682e:	d058      	beq.n	1a0068e2 <_malloc_r+0x482>
1a006830:	684a      	ldr	r2, [r1, #4]
1a006832:	f022 0203 	bic.w	r2, r2, #3
1a006836:	429a      	cmp	r2, r3
1a006838:	d902      	bls.n	1a006840 <_malloc_r+0x3e0>
1a00683a:	6889      	ldr	r1, [r1, #8]
1a00683c:	458e      	cmp	lr, r1
1a00683e:	d1f7      	bne.n	1a006830 <_malloc_r+0x3d0>
1a006840:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a006844:	687b      	ldr	r3, [r7, #4]
1a006846:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a00684a:	f8ce 4008 	str.w	r4, [lr, #8]
1a00684e:	60cc      	str	r4, [r1, #12]
1a006850:	e68c      	b.n	1a00656c <_malloc_r+0x10c>
1a006852:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a006856:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a00685a:	00c3      	lsls	r3, r0, #3
1a00685c:	e645      	b.n	1a0064ea <_malloc_r+0x8a>
1a00685e:	42bc      	cmp	r4, r7
1a006860:	d072      	beq.n	1a006948 <_malloc_r+0x4e8>
1a006862:	68bc      	ldr	r4, [r7, #8]
1a006864:	6862      	ldr	r2, [r4, #4]
1a006866:	f022 0203 	bic.w	r2, r2, #3
1a00686a:	4295      	cmp	r5, r2
1a00686c:	eba2 0305 	sub.w	r3, r2, r5
1a006870:	d802      	bhi.n	1a006878 <_malloc_r+0x418>
1a006872:	2b0f      	cmp	r3, #15
1a006874:	f73f af51 	bgt.w	1a00671a <_malloc_r+0x2ba>
1a006878:	4630      	mov	r0, r6
1a00687a:	f000 f953 	bl	1a006b24 <__malloc_unlock>
1a00687e:	2400      	movs	r4, #0
1a006880:	e616      	b.n	1a0064b0 <_malloc_r+0x50>
1a006882:	099a      	lsrs	r2, r3, #6
1a006884:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a006888:	00c9      	lsls	r1, r1, #3
1a00688a:	3238      	adds	r2, #56	; 0x38
1a00688c:	e7c9      	b.n	1a006822 <_malloc_r+0x3c2>
1a00688e:	f8d9 9000 	ldr.w	r9, [r9]
1a006892:	4599      	cmp	r9, r3
1a006894:	f040 8083 	bne.w	1a00699e <_malloc_r+0x53e>
1a006898:	f010 0f03 	tst.w	r0, #3
1a00689c:	f1a9 0308 	sub.w	r3, r9, #8
1a0068a0:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a0068a4:	d1f3      	bne.n	1a00688e <_malloc_r+0x42e>
1a0068a6:	687b      	ldr	r3, [r7, #4]
1a0068a8:	ea23 0304 	bic.w	r3, r3, r4
1a0068ac:	607b      	str	r3, [r7, #4]
1a0068ae:	0064      	lsls	r4, r4, #1
1a0068b0:	429c      	cmp	r4, r3
1a0068b2:	f63f aeac 	bhi.w	1a00660e <_malloc_r+0x1ae>
1a0068b6:	b91c      	cbnz	r4, 1a0068c0 <_malloc_r+0x460>
1a0068b8:	e6a9      	b.n	1a00660e <_malloc_r+0x1ae>
1a0068ba:	0064      	lsls	r4, r4, #1
1a0068bc:	f108 0804 	add.w	r8, r8, #4
1a0068c0:	421c      	tst	r4, r3
1a0068c2:	d0fa      	beq.n	1a0068ba <_malloc_r+0x45a>
1a0068c4:	4640      	mov	r0, r8
1a0068c6:	e65f      	b.n	1a006588 <_malloc_r+0x128>
1a0068c8:	f108 0810 	add.w	r8, r8, #16
1a0068cc:	e6bc      	b.n	1a006648 <_malloc_r+0x1e8>
1a0068ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a0068d2:	d826      	bhi.n	1a006922 <_malloc_r+0x4c2>
1a0068d4:	0beb      	lsrs	r3, r5, #15
1a0068d6:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a0068da:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a0068de:	00c3      	lsls	r3, r0, #3
1a0068e0:	e603      	b.n	1a0064ea <_malloc_r+0x8a>
1a0068e2:	687b      	ldr	r3, [r7, #4]
1a0068e4:	1092      	asrs	r2, r2, #2
1a0068e6:	f04f 0801 	mov.w	r8, #1
1a0068ea:	fa08 f202 	lsl.w	r2, r8, r2
1a0068ee:	4313      	orrs	r3, r2
1a0068f0:	607b      	str	r3, [r7, #4]
1a0068f2:	e7a8      	b.n	1a006846 <_malloc_r+0x3e6>
1a0068f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
1a0068f8:	e6ce      	b.n	1a006698 <_malloc_r+0x238>
1a0068fa:	2a54      	cmp	r2, #84	; 0x54
1a0068fc:	d829      	bhi.n	1a006952 <_malloc_r+0x4f2>
1a0068fe:	0b1a      	lsrs	r2, r3, #12
1a006900:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a006904:	00c9      	lsls	r1, r1, #3
1a006906:	326e      	adds	r2, #110	; 0x6e
1a006908:	e78b      	b.n	1a006822 <_malloc_r+0x3c2>
1a00690a:	f3c0 010b 	ubfx	r1, r0, #0, #12
1a00690e:	2900      	cmp	r1, #0
1a006910:	f47f aeae 	bne.w	1a006670 <_malloc_r+0x210>
1a006914:	eb09 0208 	add.w	r2, r9, r8
1a006918:	68b9      	ldr	r1, [r7, #8]
1a00691a:	f042 0201 	orr.w	r2, r2, #1
1a00691e:	604a      	str	r2, [r1, #4]
1a006920:	e6ec      	b.n	1a0066fc <_malloc_r+0x29c>
1a006922:	f240 5254 	movw	r2, #1364	; 0x554
1a006926:	4293      	cmp	r3, r2
1a006928:	d81c      	bhi.n	1a006964 <_malloc_r+0x504>
1a00692a:	0cab      	lsrs	r3, r5, #18
1a00692c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a006930:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a006934:	00c3      	lsls	r3, r0, #3
1a006936:	e5d8      	b.n	1a0064ea <_malloc_r+0x8a>
1a006938:	2301      	movs	r3, #1
1a00693a:	f8cb 3004 	str.w	r3, [fp, #4]
1a00693e:	e79b      	b.n	1a006878 <_malloc_r+0x418>
1a006940:	2101      	movs	r1, #1
1a006942:	f04f 0800 	mov.w	r8, #0
1a006946:	e6ba      	b.n	1a0066be <_malloc_r+0x25e>
1a006948:	4a16      	ldr	r2, [pc, #88]	; (1a0069a4 <_malloc_r+0x544>)
1a00694a:	6813      	ldr	r3, [r2, #0]
1a00694c:	4443      	add	r3, r8
1a00694e:	6013      	str	r3, [r2, #0]
1a006950:	e68e      	b.n	1a006670 <_malloc_r+0x210>
1a006952:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a006956:	d814      	bhi.n	1a006982 <_malloc_r+0x522>
1a006958:	0bda      	lsrs	r2, r3, #15
1a00695a:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a00695e:	00c9      	lsls	r1, r1, #3
1a006960:	3277      	adds	r2, #119	; 0x77
1a006962:	e75e      	b.n	1a006822 <_malloc_r+0x3c2>
1a006964:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a006968:	207f      	movs	r0, #127	; 0x7f
1a00696a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a00696e:	e5bc      	b.n	1a0064ea <_malloc_r+0x8a>
1a006970:	f104 0108 	add.w	r1, r4, #8
1a006974:	4630      	mov	r0, r6
1a006976:	9201      	str	r2, [sp, #4]
1a006978:	f7ff fa48 	bl	1a005e0c <_free_r>
1a00697c:	9a01      	ldr	r2, [sp, #4]
1a00697e:	6813      	ldr	r3, [r2, #0]
1a006980:	e6bc      	b.n	1a0066fc <_malloc_r+0x29c>
1a006982:	f240 5154 	movw	r1, #1364	; 0x554
1a006986:	428a      	cmp	r2, r1
1a006988:	d805      	bhi.n	1a006996 <_malloc_r+0x536>
1a00698a:	0c9a      	lsrs	r2, r3, #18
1a00698c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a006990:	00c9      	lsls	r1, r1, #3
1a006992:	327c      	adds	r2, #124	; 0x7c
1a006994:	e745      	b.n	1a006822 <_malloc_r+0x3c2>
1a006996:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a00699a:	227e      	movs	r2, #126	; 0x7e
1a00699c:	e741      	b.n	1a006822 <_malloc_r+0x3c2>
1a00699e:	687b      	ldr	r3, [r7, #4]
1a0069a0:	e785      	b.n	1a0068ae <_malloc_r+0x44e>
1a0069a2:	bf00      	nop
1a0069a4:	10000bf0 	.word	0x10000bf0
1a0069a8:	ffffffff 	.word	0xffffffff
1a0069ac:	ffffffff 	.word	0xffffffff

1a0069b0 <memchr>:
1a0069b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0069b4:	2a10      	cmp	r2, #16
1a0069b6:	db2b      	blt.n	1a006a10 <memchr+0x60>
1a0069b8:	f010 0f07 	tst.w	r0, #7
1a0069bc:	d008      	beq.n	1a0069d0 <memchr+0x20>
1a0069be:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0069c2:	3a01      	subs	r2, #1
1a0069c4:	428b      	cmp	r3, r1
1a0069c6:	d02d      	beq.n	1a006a24 <memchr+0x74>
1a0069c8:	f010 0f07 	tst.w	r0, #7
1a0069cc:	b342      	cbz	r2, 1a006a20 <memchr+0x70>
1a0069ce:	d1f6      	bne.n	1a0069be <memchr+0xe>
1a0069d0:	b4f0      	push	{r4, r5, r6, r7}
1a0069d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0069d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0069da:	f022 0407 	bic.w	r4, r2, #7
1a0069de:	f07f 0700 	mvns.w	r7, #0
1a0069e2:	2300      	movs	r3, #0
1a0069e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0069e8:	3c08      	subs	r4, #8
1a0069ea:	ea85 0501 	eor.w	r5, r5, r1
1a0069ee:	ea86 0601 	eor.w	r6, r6, r1
1a0069f2:	fa85 f547 	uadd8	r5, r5, r7
1a0069f6:	faa3 f587 	sel	r5, r3, r7
1a0069fa:	fa86 f647 	uadd8	r6, r6, r7
1a0069fe:	faa5 f687 	sel	r6, r5, r7
1a006a02:	b98e      	cbnz	r6, 1a006a28 <memchr+0x78>
1a006a04:	d1ee      	bne.n	1a0069e4 <memchr+0x34>
1a006a06:	bcf0      	pop	{r4, r5, r6, r7}
1a006a08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a006a0c:	f002 0207 	and.w	r2, r2, #7
1a006a10:	b132      	cbz	r2, 1a006a20 <memchr+0x70>
1a006a12:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006a16:	3a01      	subs	r2, #1
1a006a18:	ea83 0301 	eor.w	r3, r3, r1
1a006a1c:	b113      	cbz	r3, 1a006a24 <memchr+0x74>
1a006a1e:	d1f8      	bne.n	1a006a12 <memchr+0x62>
1a006a20:	2000      	movs	r0, #0
1a006a22:	4770      	bx	lr
1a006a24:	3801      	subs	r0, #1
1a006a26:	4770      	bx	lr
1a006a28:	2d00      	cmp	r5, #0
1a006a2a:	bf06      	itte	eq
1a006a2c:	4635      	moveq	r5, r6
1a006a2e:	3803      	subeq	r0, #3
1a006a30:	3807      	subne	r0, #7
1a006a32:	f015 0f01 	tst.w	r5, #1
1a006a36:	d107      	bne.n	1a006a48 <memchr+0x98>
1a006a38:	3001      	adds	r0, #1
1a006a3a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a006a3e:	bf02      	ittt	eq
1a006a40:	3001      	addeq	r0, #1
1a006a42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a006a46:	3001      	addeq	r0, #1
1a006a48:	bcf0      	pop	{r4, r5, r6, r7}
1a006a4a:	3801      	subs	r0, #1
1a006a4c:	4770      	bx	lr
1a006a4e:	bf00      	nop

1a006a50 <memmove>:
1a006a50:	4288      	cmp	r0, r1
1a006a52:	b4f0      	push	{r4, r5, r6, r7}
1a006a54:	d90d      	bls.n	1a006a72 <memmove+0x22>
1a006a56:	188b      	adds	r3, r1, r2
1a006a58:	4283      	cmp	r3, r0
1a006a5a:	d90a      	bls.n	1a006a72 <memmove+0x22>
1a006a5c:	1884      	adds	r4, r0, r2
1a006a5e:	b132      	cbz	r2, 1a006a6e <memmove+0x1e>
1a006a60:	4622      	mov	r2, r4
1a006a62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a006a66:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a006a6a:	4299      	cmp	r1, r3
1a006a6c:	d1f9      	bne.n	1a006a62 <memmove+0x12>
1a006a6e:	bcf0      	pop	{r4, r5, r6, r7}
1a006a70:	4770      	bx	lr
1a006a72:	2a0f      	cmp	r2, #15
1a006a74:	d949      	bls.n	1a006b0a <memmove+0xba>
1a006a76:	ea40 0301 	orr.w	r3, r0, r1
1a006a7a:	079b      	lsls	r3, r3, #30
1a006a7c:	d147      	bne.n	1a006b0e <memmove+0xbe>
1a006a7e:	f1a2 0310 	sub.w	r3, r2, #16
1a006a82:	091b      	lsrs	r3, r3, #4
1a006a84:	f101 0720 	add.w	r7, r1, #32
1a006a88:	eb07 1703 	add.w	r7, r7, r3, lsl #4
1a006a8c:	f101 0410 	add.w	r4, r1, #16
1a006a90:	f100 0510 	add.w	r5, r0, #16
1a006a94:	f854 6c10 	ldr.w	r6, [r4, #-16]
1a006a98:	f845 6c10 	str.w	r6, [r5, #-16]
1a006a9c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
1a006aa0:	f845 6c0c 	str.w	r6, [r5, #-12]
1a006aa4:	f854 6c08 	ldr.w	r6, [r4, #-8]
1a006aa8:	f845 6c08 	str.w	r6, [r5, #-8]
1a006aac:	f854 6c04 	ldr.w	r6, [r4, #-4]
1a006ab0:	f845 6c04 	str.w	r6, [r5, #-4]
1a006ab4:	3410      	adds	r4, #16
1a006ab6:	42bc      	cmp	r4, r7
1a006ab8:	f105 0510 	add.w	r5, r5, #16
1a006abc:	d1ea      	bne.n	1a006a94 <memmove+0x44>
1a006abe:	3301      	adds	r3, #1
1a006ac0:	f002 050f 	and.w	r5, r2, #15
1a006ac4:	011b      	lsls	r3, r3, #4
1a006ac6:	2d03      	cmp	r5, #3
1a006ac8:	4419      	add	r1, r3
1a006aca:	4403      	add	r3, r0
1a006acc:	d921      	bls.n	1a006b12 <memmove+0xc2>
1a006ace:	1f1f      	subs	r7, r3, #4
1a006ad0:	460e      	mov	r6, r1
1a006ad2:	462c      	mov	r4, r5
1a006ad4:	3c04      	subs	r4, #4
1a006ad6:	f856 cb04 	ldr.w	ip, [r6], #4
1a006ada:	f847 cf04 	str.w	ip, [r7, #4]!
1a006ade:	2c03      	cmp	r4, #3
1a006ae0:	d8f8      	bhi.n	1a006ad4 <memmove+0x84>
1a006ae2:	1f2c      	subs	r4, r5, #4
1a006ae4:	f024 0403 	bic.w	r4, r4, #3
1a006ae8:	3404      	adds	r4, #4
1a006aea:	4423      	add	r3, r4
1a006aec:	4421      	add	r1, r4
1a006aee:	f002 0203 	and.w	r2, r2, #3
1a006af2:	2a00      	cmp	r2, #0
1a006af4:	d0bb      	beq.n	1a006a6e <memmove+0x1e>
1a006af6:	3b01      	subs	r3, #1
1a006af8:	440a      	add	r2, r1
1a006afa:	f811 4b01 	ldrb.w	r4, [r1], #1
1a006afe:	f803 4f01 	strb.w	r4, [r3, #1]!
1a006b02:	4291      	cmp	r1, r2
1a006b04:	d1f9      	bne.n	1a006afa <memmove+0xaa>
1a006b06:	bcf0      	pop	{r4, r5, r6, r7}
1a006b08:	4770      	bx	lr
1a006b0a:	4603      	mov	r3, r0
1a006b0c:	e7f1      	b.n	1a006af2 <memmove+0xa2>
1a006b0e:	4603      	mov	r3, r0
1a006b10:	e7f1      	b.n	1a006af6 <memmove+0xa6>
1a006b12:	462a      	mov	r2, r5
1a006b14:	e7ed      	b.n	1a006af2 <memmove+0xa2>
1a006b16:	bf00      	nop

1a006b18 <__malloc_lock>:
1a006b18:	4801      	ldr	r0, [pc, #4]	; (1a006b20 <__malloc_lock+0x8>)
1a006b1a:	f7ff bc25 	b.w	1a006368 <__retarget_lock_acquire_recursive>
1a006b1e:	bf00      	nop
1a006b20:	10000c44 	.word	0x10000c44

1a006b24 <__malloc_unlock>:
1a006b24:	4801      	ldr	r0, [pc, #4]	; (1a006b2c <__malloc_unlock+0x8>)
1a006b26:	f7ff bc21 	b.w	1a00636c <__retarget_lock_release_recursive>
1a006b2a:	bf00      	nop
1a006b2c:	10000c44 	.word	0x10000c44

1a006b30 <_Balloc>:
1a006b30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006b32:	b570      	push	{r4, r5, r6, lr}
1a006b34:	4605      	mov	r5, r0
1a006b36:	460c      	mov	r4, r1
1a006b38:	b14b      	cbz	r3, 1a006b4e <_Balloc+0x1e>
1a006b3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a006b3e:	b180      	cbz	r0, 1a006b62 <_Balloc+0x32>
1a006b40:	6802      	ldr	r2, [r0, #0]
1a006b42:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a006b46:	2300      	movs	r3, #0
1a006b48:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a006b4c:	bd70      	pop	{r4, r5, r6, pc}
1a006b4e:	2221      	movs	r2, #33	; 0x21
1a006b50:	2104      	movs	r1, #4
1a006b52:	f000 fd95 	bl	1a007680 <_calloc_r>
1a006b56:	4603      	mov	r3, r0
1a006b58:	64e8      	str	r0, [r5, #76]	; 0x4c
1a006b5a:	2800      	cmp	r0, #0
1a006b5c:	d1ed      	bne.n	1a006b3a <_Balloc+0xa>
1a006b5e:	2000      	movs	r0, #0
1a006b60:	bd70      	pop	{r4, r5, r6, pc}
1a006b62:	2101      	movs	r1, #1
1a006b64:	fa01 f604 	lsl.w	r6, r1, r4
1a006b68:	1d72      	adds	r2, r6, #5
1a006b6a:	4628      	mov	r0, r5
1a006b6c:	0092      	lsls	r2, r2, #2
1a006b6e:	f000 fd87 	bl	1a007680 <_calloc_r>
1a006b72:	2800      	cmp	r0, #0
1a006b74:	d0f3      	beq.n	1a006b5e <_Balloc+0x2e>
1a006b76:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a006b7a:	e7e4      	b.n	1a006b46 <_Balloc+0x16>

1a006b7c <_Bfree>:
1a006b7c:	b131      	cbz	r1, 1a006b8c <_Bfree+0x10>
1a006b7e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006b80:	684a      	ldr	r2, [r1, #4]
1a006b82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a006b86:	6008      	str	r0, [r1, #0]
1a006b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a006b8c:	4770      	bx	lr
1a006b8e:	bf00      	nop

1a006b90 <__multadd>:
1a006b90:	b5f0      	push	{r4, r5, r6, r7, lr}
1a006b92:	690c      	ldr	r4, [r1, #16]
1a006b94:	b083      	sub	sp, #12
1a006b96:	460d      	mov	r5, r1
1a006b98:	4606      	mov	r6, r0
1a006b9a:	f101 0c14 	add.w	ip, r1, #20
1a006b9e:	2700      	movs	r7, #0
1a006ba0:	f8dc 0000 	ldr.w	r0, [ip]
1a006ba4:	b281      	uxth	r1, r0
1a006ba6:	fb02 3301 	mla	r3, r2, r1, r3
1a006baa:	0c01      	lsrs	r1, r0, #16
1a006bac:	0c18      	lsrs	r0, r3, #16
1a006bae:	fb02 0101 	mla	r1, r2, r1, r0
1a006bb2:	b29b      	uxth	r3, r3
1a006bb4:	3701      	adds	r7, #1
1a006bb6:	eb03 4301 	add.w	r3, r3, r1, lsl #16
1a006bba:	42bc      	cmp	r4, r7
1a006bbc:	f84c 3b04 	str.w	r3, [ip], #4
1a006bc0:	ea4f 4311 	mov.w	r3, r1, lsr #16
1a006bc4:	dcec      	bgt.n	1a006ba0 <__multadd+0x10>
1a006bc6:	b13b      	cbz	r3, 1a006bd8 <__multadd+0x48>
1a006bc8:	68aa      	ldr	r2, [r5, #8]
1a006bca:	42a2      	cmp	r2, r4
1a006bcc:	dd07      	ble.n	1a006bde <__multadd+0x4e>
1a006bce:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a006bd2:	3401      	adds	r4, #1
1a006bd4:	6153      	str	r3, [r2, #20]
1a006bd6:	612c      	str	r4, [r5, #16]
1a006bd8:	4628      	mov	r0, r5
1a006bda:	b003      	add	sp, #12
1a006bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006bde:	6869      	ldr	r1, [r5, #4]
1a006be0:	9301      	str	r3, [sp, #4]
1a006be2:	3101      	adds	r1, #1
1a006be4:	4630      	mov	r0, r6
1a006be6:	f7ff ffa3 	bl	1a006b30 <_Balloc>
1a006bea:	692a      	ldr	r2, [r5, #16]
1a006bec:	3202      	adds	r2, #2
1a006bee:	f105 010c 	add.w	r1, r5, #12
1a006bf2:	4607      	mov	r7, r0
1a006bf4:	0092      	lsls	r2, r2, #2
1a006bf6:	300c      	adds	r0, #12
1a006bf8:	f7fc f824 	bl	1a002c44 <memcpy>
1a006bfc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a006bfe:	6869      	ldr	r1, [r5, #4]
1a006c00:	9b01      	ldr	r3, [sp, #4]
1a006c02:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a006c06:	6028      	str	r0, [r5, #0]
1a006c08:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a006c0c:	463d      	mov	r5, r7
1a006c0e:	e7de      	b.n	1a006bce <__multadd+0x3e>

1a006c10 <__hi0bits>:
1a006c10:	0c02      	lsrs	r2, r0, #16
1a006c12:	0412      	lsls	r2, r2, #16
1a006c14:	4603      	mov	r3, r0
1a006c16:	b9c2      	cbnz	r2, 1a006c4a <__hi0bits+0x3a>
1a006c18:	0403      	lsls	r3, r0, #16
1a006c1a:	2010      	movs	r0, #16
1a006c1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a006c20:	bf04      	itt	eq
1a006c22:	021b      	lsleq	r3, r3, #8
1a006c24:	3008      	addeq	r0, #8
1a006c26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a006c2a:	bf04      	itt	eq
1a006c2c:	011b      	lsleq	r3, r3, #4
1a006c2e:	3004      	addeq	r0, #4
1a006c30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a006c34:	bf04      	itt	eq
1a006c36:	009b      	lsleq	r3, r3, #2
1a006c38:	3002      	addeq	r0, #2
1a006c3a:	2b00      	cmp	r3, #0
1a006c3c:	db04      	blt.n	1a006c48 <__hi0bits+0x38>
1a006c3e:	005b      	lsls	r3, r3, #1
1a006c40:	d501      	bpl.n	1a006c46 <__hi0bits+0x36>
1a006c42:	3001      	adds	r0, #1
1a006c44:	4770      	bx	lr
1a006c46:	2020      	movs	r0, #32
1a006c48:	4770      	bx	lr
1a006c4a:	2000      	movs	r0, #0
1a006c4c:	e7e6      	b.n	1a006c1c <__hi0bits+0xc>
1a006c4e:	bf00      	nop

1a006c50 <__lo0bits>:
1a006c50:	6803      	ldr	r3, [r0, #0]
1a006c52:	f013 0207 	ands.w	r2, r3, #7
1a006c56:	4601      	mov	r1, r0
1a006c58:	d007      	beq.n	1a006c6a <__lo0bits+0x1a>
1a006c5a:	07da      	lsls	r2, r3, #31
1a006c5c:	d41f      	bmi.n	1a006c9e <__lo0bits+0x4e>
1a006c5e:	0798      	lsls	r0, r3, #30
1a006c60:	d51f      	bpl.n	1a006ca2 <__lo0bits+0x52>
1a006c62:	085b      	lsrs	r3, r3, #1
1a006c64:	600b      	str	r3, [r1, #0]
1a006c66:	2001      	movs	r0, #1
1a006c68:	4770      	bx	lr
1a006c6a:	b298      	uxth	r0, r3
1a006c6c:	b1a0      	cbz	r0, 1a006c98 <__lo0bits+0x48>
1a006c6e:	4610      	mov	r0, r2
1a006c70:	f013 0fff 	tst.w	r3, #255	; 0xff
1a006c74:	bf04      	itt	eq
1a006c76:	0a1b      	lsreq	r3, r3, #8
1a006c78:	3008      	addeq	r0, #8
1a006c7a:	071a      	lsls	r2, r3, #28
1a006c7c:	bf04      	itt	eq
1a006c7e:	091b      	lsreq	r3, r3, #4
1a006c80:	3004      	addeq	r0, #4
1a006c82:	079a      	lsls	r2, r3, #30
1a006c84:	bf04      	itt	eq
1a006c86:	089b      	lsreq	r3, r3, #2
1a006c88:	3002      	addeq	r0, #2
1a006c8a:	07da      	lsls	r2, r3, #31
1a006c8c:	d402      	bmi.n	1a006c94 <__lo0bits+0x44>
1a006c8e:	085b      	lsrs	r3, r3, #1
1a006c90:	d00b      	beq.n	1a006caa <__lo0bits+0x5a>
1a006c92:	3001      	adds	r0, #1
1a006c94:	600b      	str	r3, [r1, #0]
1a006c96:	4770      	bx	lr
1a006c98:	0c1b      	lsrs	r3, r3, #16
1a006c9a:	2010      	movs	r0, #16
1a006c9c:	e7e8      	b.n	1a006c70 <__lo0bits+0x20>
1a006c9e:	2000      	movs	r0, #0
1a006ca0:	4770      	bx	lr
1a006ca2:	089b      	lsrs	r3, r3, #2
1a006ca4:	600b      	str	r3, [r1, #0]
1a006ca6:	2002      	movs	r0, #2
1a006ca8:	4770      	bx	lr
1a006caa:	2020      	movs	r0, #32
1a006cac:	4770      	bx	lr
1a006cae:	bf00      	nop

1a006cb0 <__i2b>:
1a006cb0:	b510      	push	{r4, lr}
1a006cb2:	460c      	mov	r4, r1
1a006cb4:	2101      	movs	r1, #1
1a006cb6:	f7ff ff3b 	bl	1a006b30 <_Balloc>
1a006cba:	2201      	movs	r2, #1
1a006cbc:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a006cc0:	bd10      	pop	{r4, pc}
1a006cc2:	bf00      	nop

1a006cc4 <__multiply>:
1a006cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006cc8:	690e      	ldr	r6, [r1, #16]
1a006cca:	6914      	ldr	r4, [r2, #16]
1a006ccc:	42a6      	cmp	r6, r4
1a006cce:	b083      	sub	sp, #12
1a006cd0:	460f      	mov	r7, r1
1a006cd2:	4615      	mov	r5, r2
1a006cd4:	da04      	bge.n	1a006ce0 <__multiply+0x1c>
1a006cd6:	4632      	mov	r2, r6
1a006cd8:	462f      	mov	r7, r5
1a006cda:	4626      	mov	r6, r4
1a006cdc:	460d      	mov	r5, r1
1a006cde:	4614      	mov	r4, r2
1a006ce0:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
1a006ce4:	eb06 0804 	add.w	r8, r6, r4
1a006ce8:	4543      	cmp	r3, r8
1a006cea:	bfb8      	it	lt
1a006cec:	3101      	addlt	r1, #1
1a006cee:	f7ff ff1f 	bl	1a006b30 <_Balloc>
1a006cf2:	f100 0914 	add.w	r9, r0, #20
1a006cf6:	eb09 0e88 	add.w	lr, r9, r8, lsl #2
1a006cfa:	45f1      	cmp	r9, lr
1a006cfc:	9000      	str	r0, [sp, #0]
1a006cfe:	d205      	bcs.n	1a006d0c <__multiply+0x48>
1a006d00:	464b      	mov	r3, r9
1a006d02:	2200      	movs	r2, #0
1a006d04:	f843 2b04 	str.w	r2, [r3], #4
1a006d08:	459e      	cmp	lr, r3
1a006d0a:	d8fb      	bhi.n	1a006d04 <__multiply+0x40>
1a006d0c:	f105 0a14 	add.w	sl, r5, #20
1a006d10:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
1a006d14:	f107 0314 	add.w	r3, r7, #20
1a006d18:	45a2      	cmp	sl, r4
1a006d1a:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
1a006d1e:	d261      	bcs.n	1a006de4 <__multiply+0x120>
1a006d20:	1b64      	subs	r4, r4, r5
1a006d22:	3c15      	subs	r4, #21
1a006d24:	f024 0403 	bic.w	r4, r4, #3
1a006d28:	f8cd e004 	str.w	lr, [sp, #4]
1a006d2c:	44a2      	add	sl, r4
1a006d2e:	f105 0210 	add.w	r2, r5, #16
1a006d32:	469e      	mov	lr, r3
1a006d34:	e005      	b.n	1a006d42 <__multiply+0x7e>
1a006d36:	0c2d      	lsrs	r5, r5, #16
1a006d38:	d12b      	bne.n	1a006d92 <__multiply+0xce>
1a006d3a:	4592      	cmp	sl, r2
1a006d3c:	f109 0904 	add.w	r9, r9, #4
1a006d40:	d04e      	beq.n	1a006de0 <__multiply+0x11c>
1a006d42:	f852 5f04 	ldr.w	r5, [r2, #4]!
1a006d46:	fa1f fb85 	uxth.w	fp, r5
1a006d4a:	f1bb 0f00 	cmp.w	fp, #0
1a006d4e:	d0f2      	beq.n	1a006d36 <__multiply+0x72>
1a006d50:	4677      	mov	r7, lr
1a006d52:	464e      	mov	r6, r9
1a006d54:	2000      	movs	r0, #0
1a006d56:	e000      	b.n	1a006d5a <__multiply+0x96>
1a006d58:	4626      	mov	r6, r4
1a006d5a:	f857 1b04 	ldr.w	r1, [r7], #4
1a006d5e:	6834      	ldr	r4, [r6, #0]
1a006d60:	b28b      	uxth	r3, r1
1a006d62:	b2a5      	uxth	r5, r4
1a006d64:	0c09      	lsrs	r1, r1, #16
1a006d66:	0c24      	lsrs	r4, r4, #16
1a006d68:	fb0b 5303 	mla	r3, fp, r3, r5
1a006d6c:	4403      	add	r3, r0
1a006d6e:	fb0b 4001 	mla	r0, fp, r1, r4
1a006d72:	eb00 4013 	add.w	r0, r0, r3, lsr #16
1a006d76:	4634      	mov	r4, r6
1a006d78:	b29b      	uxth	r3, r3
1a006d7a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a006d7e:	45bc      	cmp	ip, r7
1a006d80:	ea4f 4010 	mov.w	r0, r0, lsr #16
1a006d84:	f844 3b04 	str.w	r3, [r4], #4
1a006d88:	d8e6      	bhi.n	1a006d58 <__multiply+0x94>
1a006d8a:	6070      	str	r0, [r6, #4]
1a006d8c:	6815      	ldr	r5, [r2, #0]
1a006d8e:	0c2d      	lsrs	r5, r5, #16
1a006d90:	d0d3      	beq.n	1a006d3a <__multiply+0x76>
1a006d92:	f8d9 3000 	ldr.w	r3, [r9]
1a006d96:	4676      	mov	r6, lr
1a006d98:	4618      	mov	r0, r3
1a006d9a:	46cb      	mov	fp, r9
1a006d9c:	2100      	movs	r1, #0
1a006d9e:	e000      	b.n	1a006da2 <__multiply+0xde>
1a006da0:	46a3      	mov	fp, r4
1a006da2:	8834      	ldrh	r4, [r6, #0]
1a006da4:	0c00      	lsrs	r0, r0, #16
1a006da6:	fb05 0004 	mla	r0, r5, r4, r0
1a006daa:	4401      	add	r1, r0
1a006dac:	b29b      	uxth	r3, r3
1a006dae:	465c      	mov	r4, fp
1a006db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a006db4:	f844 3b04 	str.w	r3, [r4], #4
1a006db8:	f856 3b04 	ldr.w	r3, [r6], #4
1a006dbc:	f8db 0004 	ldr.w	r0, [fp, #4]
1a006dc0:	0c1b      	lsrs	r3, r3, #16
1a006dc2:	b287      	uxth	r7, r0
1a006dc4:	fb05 7303 	mla	r3, r5, r3, r7
1a006dc8:	eb03 4311 	add.w	r3, r3, r1, lsr #16
1a006dcc:	45b4      	cmp	ip, r6
1a006dce:	ea4f 4113 	mov.w	r1, r3, lsr #16
1a006dd2:	d8e5      	bhi.n	1a006da0 <__multiply+0xdc>
1a006dd4:	4592      	cmp	sl, r2
1a006dd6:	f8cb 3004 	str.w	r3, [fp, #4]
1a006dda:	f109 0904 	add.w	r9, r9, #4
1a006dde:	d1b0      	bne.n	1a006d42 <__multiply+0x7e>
1a006de0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a006de4:	f1b8 0f00 	cmp.w	r8, #0
1a006de8:	dd0b      	ble.n	1a006e02 <__multiply+0x13e>
1a006dea:	f85e 3c04 	ldr.w	r3, [lr, #-4]
1a006dee:	f1ae 0e04 	sub.w	lr, lr, #4
1a006df2:	b11b      	cbz	r3, 1a006dfc <__multiply+0x138>
1a006df4:	e005      	b.n	1a006e02 <__multiply+0x13e>
1a006df6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
1a006dfa:	b913      	cbnz	r3, 1a006e02 <__multiply+0x13e>
1a006dfc:	f1b8 0801 	subs.w	r8, r8, #1
1a006e00:	d1f9      	bne.n	1a006df6 <__multiply+0x132>
1a006e02:	9800      	ldr	r0, [sp, #0]
1a006e04:	f8c0 8010 	str.w	r8, [r0, #16]
1a006e08:	b003      	add	sp, #12
1a006e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006e0e:	bf00      	nop

1a006e10 <__pow5mult>:
1a006e10:	f012 0303 	ands.w	r3, r2, #3
1a006e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006e18:	4614      	mov	r4, r2
1a006e1a:	4607      	mov	r7, r0
1a006e1c:	d12e      	bne.n	1a006e7c <__pow5mult+0x6c>
1a006e1e:	460d      	mov	r5, r1
1a006e20:	10a4      	asrs	r4, r4, #2
1a006e22:	d01c      	beq.n	1a006e5e <__pow5mult+0x4e>
1a006e24:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a006e26:	b396      	cbz	r6, 1a006e8e <__pow5mult+0x7e>
1a006e28:	07e3      	lsls	r3, r4, #31
1a006e2a:	f04f 0800 	mov.w	r8, #0
1a006e2e:	d406      	bmi.n	1a006e3e <__pow5mult+0x2e>
1a006e30:	1064      	asrs	r4, r4, #1
1a006e32:	d014      	beq.n	1a006e5e <__pow5mult+0x4e>
1a006e34:	6830      	ldr	r0, [r6, #0]
1a006e36:	b1a8      	cbz	r0, 1a006e64 <__pow5mult+0x54>
1a006e38:	4606      	mov	r6, r0
1a006e3a:	07e3      	lsls	r3, r4, #31
1a006e3c:	d5f8      	bpl.n	1a006e30 <__pow5mult+0x20>
1a006e3e:	4632      	mov	r2, r6
1a006e40:	4629      	mov	r1, r5
1a006e42:	4638      	mov	r0, r7
1a006e44:	f7ff ff3e 	bl	1a006cc4 <__multiply>
1a006e48:	b1b5      	cbz	r5, 1a006e78 <__pow5mult+0x68>
1a006e4a:	686a      	ldr	r2, [r5, #4]
1a006e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a006e4e:	1064      	asrs	r4, r4, #1
1a006e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006e54:	6029      	str	r1, [r5, #0]
1a006e56:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a006e5a:	4605      	mov	r5, r0
1a006e5c:	d1ea      	bne.n	1a006e34 <__pow5mult+0x24>
1a006e5e:	4628      	mov	r0, r5
1a006e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006e64:	4632      	mov	r2, r6
1a006e66:	4631      	mov	r1, r6
1a006e68:	4638      	mov	r0, r7
1a006e6a:	f7ff ff2b 	bl	1a006cc4 <__multiply>
1a006e6e:	6030      	str	r0, [r6, #0]
1a006e70:	f8c0 8000 	str.w	r8, [r0]
1a006e74:	4606      	mov	r6, r0
1a006e76:	e7e0      	b.n	1a006e3a <__pow5mult+0x2a>
1a006e78:	4605      	mov	r5, r0
1a006e7a:	e7d9      	b.n	1a006e30 <__pow5mult+0x20>
1a006e7c:	3b01      	subs	r3, #1
1a006e7e:	4a0b      	ldr	r2, [pc, #44]	; (1a006eac <__pow5mult+0x9c>)
1a006e80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a006e84:	2300      	movs	r3, #0
1a006e86:	f7ff fe83 	bl	1a006b90 <__multadd>
1a006e8a:	4605      	mov	r5, r0
1a006e8c:	e7c8      	b.n	1a006e20 <__pow5mult+0x10>
1a006e8e:	2101      	movs	r1, #1
1a006e90:	4638      	mov	r0, r7
1a006e92:	f7ff fe4d 	bl	1a006b30 <_Balloc>
1a006e96:	f240 2371 	movw	r3, #625	; 0x271
1a006e9a:	6143      	str	r3, [r0, #20]
1a006e9c:	2201      	movs	r2, #1
1a006e9e:	2300      	movs	r3, #0
1a006ea0:	6102      	str	r2, [r0, #16]
1a006ea2:	4606      	mov	r6, r0
1a006ea4:	64b8      	str	r0, [r7, #72]	; 0x48
1a006ea6:	6003      	str	r3, [r0, #0]
1a006ea8:	e7be      	b.n	1a006e28 <__pow5mult+0x18>
1a006eaa:	bf00      	nop
1a006eac:	1a008580 	.word	0x1a008580

1a006eb0 <__lshift>:
1a006eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a006eb4:	4691      	mov	r9, r2
1a006eb6:	690a      	ldr	r2, [r1, #16]
1a006eb8:	460e      	mov	r6, r1
1a006eba:	ea4f 1469 	mov.w	r4, r9, asr #5
1a006ebe:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a006ec2:	eb04 0802 	add.w	r8, r4, r2
1a006ec6:	f108 0501 	add.w	r5, r8, #1
1a006eca:	429d      	cmp	r5, r3
1a006ecc:	4607      	mov	r7, r0
1a006ece:	dd04      	ble.n	1a006eda <__lshift+0x2a>
1a006ed0:	005b      	lsls	r3, r3, #1
1a006ed2:	429d      	cmp	r5, r3
1a006ed4:	f101 0101 	add.w	r1, r1, #1
1a006ed8:	dcfa      	bgt.n	1a006ed0 <__lshift+0x20>
1a006eda:	4638      	mov	r0, r7
1a006edc:	f7ff fe28 	bl	1a006b30 <_Balloc>
1a006ee0:	2c00      	cmp	r4, #0
1a006ee2:	f100 0314 	add.w	r3, r0, #20
1a006ee6:	dd37      	ble.n	1a006f58 <__lshift+0xa8>
1a006ee8:	eb03 0184 	add.w	r1, r3, r4, lsl #2
1a006eec:	2200      	movs	r2, #0
1a006eee:	f843 2b04 	str.w	r2, [r3], #4
1a006ef2:	428b      	cmp	r3, r1
1a006ef4:	d1fb      	bne.n	1a006eee <__lshift+0x3e>
1a006ef6:	6934      	ldr	r4, [r6, #16]
1a006ef8:	f106 0314 	add.w	r3, r6, #20
1a006efc:	f019 091f 	ands.w	r9, r9, #31
1a006f00:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
1a006f04:	d020      	beq.n	1a006f48 <__lshift+0x98>
1a006f06:	f1c9 0e20 	rsb	lr, r9, #32
1a006f0a:	2200      	movs	r2, #0
1a006f0c:	e000      	b.n	1a006f10 <__lshift+0x60>
1a006f0e:	4651      	mov	r1, sl
1a006f10:	681c      	ldr	r4, [r3, #0]
1a006f12:	468a      	mov	sl, r1
1a006f14:	fa04 f409 	lsl.w	r4, r4, r9
1a006f18:	4314      	orrs	r4, r2
1a006f1a:	f84a 4b04 	str.w	r4, [sl], #4
1a006f1e:	f853 2b04 	ldr.w	r2, [r3], #4
1a006f22:	4563      	cmp	r3, ip
1a006f24:	fa22 f20e 	lsr.w	r2, r2, lr
1a006f28:	d3f1      	bcc.n	1a006f0e <__lshift+0x5e>
1a006f2a:	604a      	str	r2, [r1, #4]
1a006f2c:	b10a      	cbz	r2, 1a006f32 <__lshift+0x82>
1a006f2e:	f108 0502 	add.w	r5, r8, #2
1a006f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a006f34:	6872      	ldr	r2, [r6, #4]
1a006f36:	3d01      	subs	r5, #1
1a006f38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006f3c:	6105      	str	r5, [r0, #16]
1a006f3e:	6031      	str	r1, [r6, #0]
1a006f40:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a006f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a006f48:	3904      	subs	r1, #4
1a006f4a:	f853 2b04 	ldr.w	r2, [r3], #4
1a006f4e:	f841 2f04 	str.w	r2, [r1, #4]!
1a006f52:	459c      	cmp	ip, r3
1a006f54:	d8f9      	bhi.n	1a006f4a <__lshift+0x9a>
1a006f56:	e7ec      	b.n	1a006f32 <__lshift+0x82>
1a006f58:	4619      	mov	r1, r3
1a006f5a:	e7cc      	b.n	1a006ef6 <__lshift+0x46>

1a006f5c <__mcmp>:
1a006f5c:	b430      	push	{r4, r5}
1a006f5e:	690b      	ldr	r3, [r1, #16]
1a006f60:	4605      	mov	r5, r0
1a006f62:	6900      	ldr	r0, [r0, #16]
1a006f64:	1ac0      	subs	r0, r0, r3
1a006f66:	d10f      	bne.n	1a006f88 <__mcmp+0x2c>
1a006f68:	009b      	lsls	r3, r3, #2
1a006f6a:	3514      	adds	r5, #20
1a006f6c:	3114      	adds	r1, #20
1a006f6e:	4419      	add	r1, r3
1a006f70:	442b      	add	r3, r5
1a006f72:	e001      	b.n	1a006f78 <__mcmp+0x1c>
1a006f74:	429d      	cmp	r5, r3
1a006f76:	d207      	bcs.n	1a006f88 <__mcmp+0x2c>
1a006f78:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a006f7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a006f80:	4294      	cmp	r4, r2
1a006f82:	d0f7      	beq.n	1a006f74 <__mcmp+0x18>
1a006f84:	d302      	bcc.n	1a006f8c <__mcmp+0x30>
1a006f86:	2001      	movs	r0, #1
1a006f88:	bc30      	pop	{r4, r5}
1a006f8a:	4770      	bx	lr
1a006f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006f90:	e7fa      	b.n	1a006f88 <__mcmp+0x2c>
1a006f92:	bf00      	nop

1a006f94 <__mdiff>:
1a006f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006f98:	6913      	ldr	r3, [r2, #16]
1a006f9a:	690d      	ldr	r5, [r1, #16]
1a006f9c:	1aed      	subs	r5, r5, r3
1a006f9e:	2d00      	cmp	r5, #0
1a006fa0:	460e      	mov	r6, r1
1a006fa2:	4690      	mov	r8, r2
1a006fa4:	f101 0414 	add.w	r4, r1, #20
1a006fa8:	f102 0714 	add.w	r7, r2, #20
1a006fac:	d114      	bne.n	1a006fd8 <__mdiff+0x44>
1a006fae:	009b      	lsls	r3, r3, #2
1a006fb0:	18e2      	adds	r2, r4, r3
1a006fb2:	443b      	add	r3, r7
1a006fb4:	e001      	b.n	1a006fba <__mdiff+0x26>
1a006fb6:	42a2      	cmp	r2, r4
1a006fb8:	d959      	bls.n	1a00706e <__mdiff+0xda>
1a006fba:	f852 cd04 	ldr.w	ip, [r2, #-4]!
1a006fbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1a006fc2:	458c      	cmp	ip, r1
1a006fc4:	d0f7      	beq.n	1a006fb6 <__mdiff+0x22>
1a006fc6:	d209      	bcs.n	1a006fdc <__mdiff+0x48>
1a006fc8:	4622      	mov	r2, r4
1a006fca:	4633      	mov	r3, r6
1a006fcc:	463c      	mov	r4, r7
1a006fce:	4646      	mov	r6, r8
1a006fd0:	4617      	mov	r7, r2
1a006fd2:	4698      	mov	r8, r3
1a006fd4:	2501      	movs	r5, #1
1a006fd6:	e001      	b.n	1a006fdc <__mdiff+0x48>
1a006fd8:	dbf6      	blt.n	1a006fc8 <__mdiff+0x34>
1a006fda:	2500      	movs	r5, #0
1a006fdc:	6871      	ldr	r1, [r6, #4]
1a006fde:	f7ff fda7 	bl	1a006b30 <_Balloc>
1a006fe2:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a006fe6:	6936      	ldr	r6, [r6, #16]
1a006fe8:	60c5      	str	r5, [r0, #12]
1a006fea:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
1a006fee:	46bc      	mov	ip, r7
1a006ff0:	f100 0514 	add.w	r5, r0, #20
1a006ff4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
1a006ff8:	2300      	movs	r3, #0
1a006ffa:	f85c 1b04 	ldr.w	r1, [ip], #4
1a006ffe:	f854 8b04 	ldr.w	r8, [r4], #4
1a007002:	b28a      	uxth	r2, r1
1a007004:	fa13 f388 	uxtah	r3, r3, r8
1a007008:	0c09      	lsrs	r1, r1, #16
1a00700a:	1a9a      	subs	r2, r3, r2
1a00700c:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
1a007010:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a007014:	b292      	uxth	r2, r2
1a007016:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a00701a:	45e6      	cmp	lr, ip
1a00701c:	f845 2b04 	str.w	r2, [r5], #4
1a007020:	ea4f 4323 	mov.w	r3, r3, asr #16
1a007024:	d8e9      	bhi.n	1a006ffa <__mdiff+0x66>
1a007026:	42a7      	cmp	r7, r4
1a007028:	d917      	bls.n	1a00705a <__mdiff+0xc6>
1a00702a:	46ae      	mov	lr, r5
1a00702c:	46a4      	mov	ip, r4
1a00702e:	f85c 2b04 	ldr.w	r2, [ip], #4
1a007032:	fa13 f382 	uxtah	r3, r3, r2
1a007036:	1419      	asrs	r1, r3, #16
1a007038:	eb01 4112 	add.w	r1, r1, r2, lsr #16
1a00703c:	b29b      	uxth	r3, r3
1a00703e:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
1a007042:	4567      	cmp	r7, ip
1a007044:	f84e 2b04 	str.w	r2, [lr], #4
1a007048:	ea4f 4321 	mov.w	r3, r1, asr #16
1a00704c:	d8ef      	bhi.n	1a00702e <__mdiff+0x9a>
1a00704e:	43e4      	mvns	r4, r4
1a007050:	4427      	add	r7, r4
1a007052:	f027 0703 	bic.w	r7, r7, #3
1a007056:	3704      	adds	r7, #4
1a007058:	443d      	add	r5, r7
1a00705a:	3d04      	subs	r5, #4
1a00705c:	b922      	cbnz	r2, 1a007068 <__mdiff+0xd4>
1a00705e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a007062:	3e01      	subs	r6, #1
1a007064:	2b00      	cmp	r3, #0
1a007066:	d0fa      	beq.n	1a00705e <__mdiff+0xca>
1a007068:	6106      	str	r6, [r0, #16]
1a00706a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00706e:	2100      	movs	r1, #0
1a007070:	f7ff fd5e 	bl	1a006b30 <_Balloc>
1a007074:	2201      	movs	r2, #1
1a007076:	2300      	movs	r3, #0
1a007078:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a00707c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a007080 <__d2b>:
1a007080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a007084:	460f      	mov	r7, r1
1a007086:	b083      	sub	sp, #12
1a007088:	2101      	movs	r1, #1
1a00708a:	ec55 4b10 	vmov	r4, r5, d0
1a00708e:	4616      	mov	r6, r2
1a007090:	f7ff fd4e 	bl	1a006b30 <_Balloc>
1a007094:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a007098:	4681      	mov	r9, r0
1a00709a:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a00709e:	f1b8 0f00 	cmp.w	r8, #0
1a0070a2:	d001      	beq.n	1a0070a8 <__d2b+0x28>
1a0070a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0070a8:	2c00      	cmp	r4, #0
1a0070aa:	9301      	str	r3, [sp, #4]
1a0070ac:	d024      	beq.n	1a0070f8 <__d2b+0x78>
1a0070ae:	a802      	add	r0, sp, #8
1a0070b0:	f840 4d08 	str.w	r4, [r0, #-8]!
1a0070b4:	f7ff fdcc 	bl	1a006c50 <__lo0bits>
1a0070b8:	2800      	cmp	r0, #0
1a0070ba:	d136      	bne.n	1a00712a <__d2b+0xaa>
1a0070bc:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0070c0:	f8c9 2014 	str.w	r2, [r9, #20]
1a0070c4:	2b00      	cmp	r3, #0
1a0070c6:	bf0c      	ite	eq
1a0070c8:	2101      	moveq	r1, #1
1a0070ca:	2102      	movne	r1, #2
1a0070cc:	f8c9 3018 	str.w	r3, [r9, #24]
1a0070d0:	f8c9 1010 	str.w	r1, [r9, #16]
1a0070d4:	f1b8 0f00 	cmp.w	r8, #0
1a0070d8:	d11b      	bne.n	1a007112 <__d2b+0x92>
1a0070da:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a0070de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a0070e2:	6038      	str	r0, [r7, #0]
1a0070e4:	6918      	ldr	r0, [r3, #16]
1a0070e6:	f7ff fd93 	bl	1a006c10 <__hi0bits>
1a0070ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a0070ee:	6030      	str	r0, [r6, #0]
1a0070f0:	4648      	mov	r0, r9
1a0070f2:	b003      	add	sp, #12
1a0070f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0070f8:	a801      	add	r0, sp, #4
1a0070fa:	f7ff fda9 	bl	1a006c50 <__lo0bits>
1a0070fe:	9b01      	ldr	r3, [sp, #4]
1a007100:	f8c9 3014 	str.w	r3, [r9, #20]
1a007104:	2101      	movs	r1, #1
1a007106:	3020      	adds	r0, #32
1a007108:	f8c9 1010 	str.w	r1, [r9, #16]
1a00710c:	f1b8 0f00 	cmp.w	r8, #0
1a007110:	d0e3      	beq.n	1a0070da <__d2b+0x5a>
1a007112:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a007116:	eb08 0300 	add.w	r3, r8, r0
1a00711a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a00711e:	603b      	str	r3, [r7, #0]
1a007120:	6030      	str	r0, [r6, #0]
1a007122:	4648      	mov	r0, r9
1a007124:	b003      	add	sp, #12
1a007126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00712a:	e9dd 1300 	ldrd	r1, r3, [sp]
1a00712e:	f1c0 0220 	rsb	r2, r0, #32
1a007132:	fa03 f202 	lsl.w	r2, r3, r2
1a007136:	430a      	orrs	r2, r1
1a007138:	40c3      	lsrs	r3, r0
1a00713a:	9301      	str	r3, [sp, #4]
1a00713c:	f8c9 2014 	str.w	r2, [r9, #20]
1a007140:	e7c0      	b.n	1a0070c4 <__d2b+0x44>
1a007142:	bf00      	nop

1a007144 <_realloc_r>:
1a007144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007148:	4692      	mov	sl, r2
1a00714a:	b083      	sub	sp, #12
1a00714c:	2900      	cmp	r1, #0
1a00714e:	f000 80a1 	beq.w	1a007294 <_realloc_r+0x150>
1a007152:	460d      	mov	r5, r1
1a007154:	4680      	mov	r8, r0
1a007156:	f10a 040b 	add.w	r4, sl, #11
1a00715a:	f7ff fcdd 	bl	1a006b18 <__malloc_lock>
1a00715e:	f855 2c04 	ldr.w	r2, [r5, #-4]
1a007162:	2c16      	cmp	r4, #22
1a007164:	f022 0603 	bic.w	r6, r2, #3
1a007168:	f1a5 0708 	sub.w	r7, r5, #8
1a00716c:	d83e      	bhi.n	1a0071ec <_realloc_r+0xa8>
1a00716e:	2410      	movs	r4, #16
1a007170:	4621      	mov	r1, r4
1a007172:	45a2      	cmp	sl, r4
1a007174:	d83f      	bhi.n	1a0071f6 <_realloc_r+0xb2>
1a007176:	428e      	cmp	r6, r1
1a007178:	eb07 0906 	add.w	r9, r7, r6
1a00717c:	da74      	bge.n	1a007268 <_realloc_r+0x124>
1a00717e:	4bc7      	ldr	r3, [pc, #796]	; (1a00749c <_realloc_r+0x358>)
1a007180:	6898      	ldr	r0, [r3, #8]
1a007182:	4548      	cmp	r0, r9
1a007184:	f000 80aa 	beq.w	1a0072dc <_realloc_r+0x198>
1a007188:	f8d9 0004 	ldr.w	r0, [r9, #4]
1a00718c:	f020 0301 	bic.w	r3, r0, #1
1a007190:	444b      	add	r3, r9
1a007192:	685b      	ldr	r3, [r3, #4]
1a007194:	07db      	lsls	r3, r3, #31
1a007196:	f140 8083 	bpl.w	1a0072a0 <_realloc_r+0x15c>
1a00719a:	07d2      	lsls	r2, r2, #31
1a00719c:	d534      	bpl.n	1a007208 <_realloc_r+0xc4>
1a00719e:	4651      	mov	r1, sl
1a0071a0:	4640      	mov	r0, r8
1a0071a2:	f7ff f95d 	bl	1a006460 <_malloc_r>
1a0071a6:	4682      	mov	sl, r0
1a0071a8:	b1e0      	cbz	r0, 1a0071e4 <_realloc_r+0xa0>
1a0071aa:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0071ae:	f023 0301 	bic.w	r3, r3, #1
1a0071b2:	443b      	add	r3, r7
1a0071b4:	f1a0 0208 	sub.w	r2, r0, #8
1a0071b8:	4293      	cmp	r3, r2
1a0071ba:	f000 80f9 	beq.w	1a0073b0 <_realloc_r+0x26c>
1a0071be:	1f32      	subs	r2, r6, #4
1a0071c0:	2a24      	cmp	r2, #36	; 0x24
1a0071c2:	f200 8107 	bhi.w	1a0073d4 <_realloc_r+0x290>
1a0071c6:	2a13      	cmp	r2, #19
1a0071c8:	6829      	ldr	r1, [r5, #0]
1a0071ca:	f200 80e6 	bhi.w	1a00739a <_realloc_r+0x256>
1a0071ce:	4603      	mov	r3, r0
1a0071d0:	462a      	mov	r2, r5
1a0071d2:	6019      	str	r1, [r3, #0]
1a0071d4:	6851      	ldr	r1, [r2, #4]
1a0071d6:	6059      	str	r1, [r3, #4]
1a0071d8:	6892      	ldr	r2, [r2, #8]
1a0071da:	609a      	str	r2, [r3, #8]
1a0071dc:	4629      	mov	r1, r5
1a0071de:	4640      	mov	r0, r8
1a0071e0:	f7fe fe14 	bl	1a005e0c <_free_r>
1a0071e4:	4640      	mov	r0, r8
1a0071e6:	f7ff fc9d 	bl	1a006b24 <__malloc_unlock>
1a0071ea:	e04f      	b.n	1a00728c <_realloc_r+0x148>
1a0071ec:	f024 0407 	bic.w	r4, r4, #7
1a0071f0:	2c00      	cmp	r4, #0
1a0071f2:	4621      	mov	r1, r4
1a0071f4:	dabd      	bge.n	1a007172 <_realloc_r+0x2e>
1a0071f6:	f04f 0a00 	mov.w	sl, #0
1a0071fa:	230c      	movs	r3, #12
1a0071fc:	4650      	mov	r0, sl
1a0071fe:	f8c8 3000 	str.w	r3, [r8]
1a007202:	b003      	add	sp, #12
1a007204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007208:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00720c:	eba7 0b03 	sub.w	fp, r7, r3
1a007210:	f8db 2004 	ldr.w	r2, [fp, #4]
1a007214:	f022 0203 	bic.w	r2, r2, #3
1a007218:	18b3      	adds	r3, r6, r2
1a00721a:	428b      	cmp	r3, r1
1a00721c:	dbbf      	blt.n	1a00719e <_realloc_r+0x5a>
1a00721e:	46da      	mov	sl, fp
1a007220:	f8db 100c 	ldr.w	r1, [fp, #12]
1a007224:	f85a 0f08 	ldr.w	r0, [sl, #8]!
1a007228:	1f32      	subs	r2, r6, #4
1a00722a:	2a24      	cmp	r2, #36	; 0x24
1a00722c:	60c1      	str	r1, [r0, #12]
1a00722e:	eb0b 0903 	add.w	r9, fp, r3
1a007232:	6088      	str	r0, [r1, #8]
1a007234:	f200 80c6 	bhi.w	1a0073c4 <_realloc_r+0x280>
1a007238:	2a13      	cmp	r2, #19
1a00723a:	6829      	ldr	r1, [r5, #0]
1a00723c:	f240 80c0 	bls.w	1a0073c0 <_realloc_r+0x27c>
1a007240:	f8cb 1008 	str.w	r1, [fp, #8]
1a007244:	6869      	ldr	r1, [r5, #4]
1a007246:	f8cb 100c 	str.w	r1, [fp, #12]
1a00724a:	2a1b      	cmp	r2, #27
1a00724c:	68a9      	ldr	r1, [r5, #8]
1a00724e:	f200 80d8 	bhi.w	1a007402 <_realloc_r+0x2be>
1a007252:	f10b 0210 	add.w	r2, fp, #16
1a007256:	3508      	adds	r5, #8
1a007258:	6011      	str	r1, [r2, #0]
1a00725a:	6869      	ldr	r1, [r5, #4]
1a00725c:	6051      	str	r1, [r2, #4]
1a00725e:	68a9      	ldr	r1, [r5, #8]
1a007260:	6091      	str	r1, [r2, #8]
1a007262:	461e      	mov	r6, r3
1a007264:	465f      	mov	r7, fp
1a007266:	4655      	mov	r5, sl
1a007268:	687b      	ldr	r3, [r7, #4]
1a00726a:	1b32      	subs	r2, r6, r4
1a00726c:	2a0f      	cmp	r2, #15
1a00726e:	f003 0301 	and.w	r3, r3, #1
1a007272:	d822      	bhi.n	1a0072ba <_realloc_r+0x176>
1a007274:	4333      	orrs	r3, r6
1a007276:	607b      	str	r3, [r7, #4]
1a007278:	f8d9 3004 	ldr.w	r3, [r9, #4]
1a00727c:	f043 0301 	orr.w	r3, r3, #1
1a007280:	f8c9 3004 	str.w	r3, [r9, #4]
1a007284:	4640      	mov	r0, r8
1a007286:	f7ff fc4d 	bl	1a006b24 <__malloc_unlock>
1a00728a:	46aa      	mov	sl, r5
1a00728c:	4650      	mov	r0, sl
1a00728e:	b003      	add	sp, #12
1a007290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007294:	4611      	mov	r1, r2
1a007296:	b003      	add	sp, #12
1a007298:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00729c:	f7ff b8e0 	b.w	1a006460 <_malloc_r>
1a0072a0:	f020 0003 	bic.w	r0, r0, #3
1a0072a4:	1833      	adds	r3, r6, r0
1a0072a6:	428b      	cmp	r3, r1
1a0072a8:	db61      	blt.n	1a00736e <_realloc_r+0x22a>
1a0072aa:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
1a0072ae:	461e      	mov	r6, r3
1a0072b0:	60ca      	str	r2, [r1, #12]
1a0072b2:	eb07 0903 	add.w	r9, r7, r3
1a0072b6:	6091      	str	r1, [r2, #8]
1a0072b8:	e7d6      	b.n	1a007268 <_realloc_r+0x124>
1a0072ba:	1939      	adds	r1, r7, r4
1a0072bc:	4323      	orrs	r3, r4
1a0072be:	f042 0201 	orr.w	r2, r2, #1
1a0072c2:	607b      	str	r3, [r7, #4]
1a0072c4:	604a      	str	r2, [r1, #4]
1a0072c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
1a0072ca:	f043 0301 	orr.w	r3, r3, #1
1a0072ce:	3108      	adds	r1, #8
1a0072d0:	f8c9 3004 	str.w	r3, [r9, #4]
1a0072d4:	4640      	mov	r0, r8
1a0072d6:	f7fe fd99 	bl	1a005e0c <_free_r>
1a0072da:	e7d3      	b.n	1a007284 <_realloc_r+0x140>
1a0072dc:	6840      	ldr	r0, [r0, #4]
1a0072de:	f020 0903 	bic.w	r9, r0, #3
1a0072e2:	44b1      	add	r9, r6
1a0072e4:	f104 0010 	add.w	r0, r4, #16
1a0072e8:	4581      	cmp	r9, r0
1a0072ea:	da77      	bge.n	1a0073dc <_realloc_r+0x298>
1a0072ec:	07d2      	lsls	r2, r2, #31
1a0072ee:	f53f af56 	bmi.w	1a00719e <_realloc_r+0x5a>
1a0072f2:	f855 2c08 	ldr.w	r2, [r5, #-8]
1a0072f6:	eba7 0b02 	sub.w	fp, r7, r2
1a0072fa:	f8db 2004 	ldr.w	r2, [fp, #4]
1a0072fe:	f022 0203 	bic.w	r2, r2, #3
1a007302:	4491      	add	r9, r2
1a007304:	4548      	cmp	r0, r9
1a007306:	dc87      	bgt.n	1a007218 <_realloc_r+0xd4>
1a007308:	46da      	mov	sl, fp
1a00730a:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00730e:	f85a 0f08 	ldr.w	r0, [sl, #8]!
1a007312:	1f32      	subs	r2, r6, #4
1a007314:	2a24      	cmp	r2, #36	; 0x24
1a007316:	60c1      	str	r1, [r0, #12]
1a007318:	6088      	str	r0, [r1, #8]
1a00731a:	f200 80a1 	bhi.w	1a007460 <_realloc_r+0x31c>
1a00731e:	2a13      	cmp	r2, #19
1a007320:	6829      	ldr	r1, [r5, #0]
1a007322:	f240 809b 	bls.w	1a00745c <_realloc_r+0x318>
1a007326:	f8cb 1008 	str.w	r1, [fp, #8]
1a00732a:	6869      	ldr	r1, [r5, #4]
1a00732c:	f8cb 100c 	str.w	r1, [fp, #12]
1a007330:	2a1b      	cmp	r2, #27
1a007332:	68a9      	ldr	r1, [r5, #8]
1a007334:	f200 809b 	bhi.w	1a00746e <_realloc_r+0x32a>
1a007338:	f10b 0210 	add.w	r2, fp, #16
1a00733c:	3508      	adds	r5, #8
1a00733e:	6011      	str	r1, [r2, #0]
1a007340:	6869      	ldr	r1, [r5, #4]
1a007342:	6051      	str	r1, [r2, #4]
1a007344:	68a9      	ldr	r1, [r5, #8]
1a007346:	6091      	str	r1, [r2, #8]
1a007348:	eb0b 0104 	add.w	r1, fp, r4
1a00734c:	eba9 0204 	sub.w	r2, r9, r4
1a007350:	f042 0201 	orr.w	r2, r2, #1
1a007354:	6099      	str	r1, [r3, #8]
1a007356:	604a      	str	r2, [r1, #4]
1a007358:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00735c:	f003 0301 	and.w	r3, r3, #1
1a007360:	431c      	orrs	r4, r3
1a007362:	4640      	mov	r0, r8
1a007364:	f8cb 4004 	str.w	r4, [fp, #4]
1a007368:	f7ff fbdc 	bl	1a006b24 <__malloc_unlock>
1a00736c:	e78e      	b.n	1a00728c <_realloc_r+0x148>
1a00736e:	07d3      	lsls	r3, r2, #31
1a007370:	f53f af15 	bmi.w	1a00719e <_realloc_r+0x5a>
1a007374:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a007378:	eba7 0b03 	sub.w	fp, r7, r3
1a00737c:	f8db 2004 	ldr.w	r2, [fp, #4]
1a007380:	f022 0203 	bic.w	r2, r2, #3
1a007384:	4410      	add	r0, r2
1a007386:	1983      	adds	r3, r0, r6
1a007388:	428b      	cmp	r3, r1
1a00738a:	f6ff af45 	blt.w	1a007218 <_realloc_r+0xd4>
1a00738e:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
1a007392:	46da      	mov	sl, fp
1a007394:	60ca      	str	r2, [r1, #12]
1a007396:	6091      	str	r1, [r2, #8]
1a007398:	e742      	b.n	1a007220 <_realloc_r+0xdc>
1a00739a:	6001      	str	r1, [r0, #0]
1a00739c:	686b      	ldr	r3, [r5, #4]
1a00739e:	6043      	str	r3, [r0, #4]
1a0073a0:	2a1b      	cmp	r2, #27
1a0073a2:	d83a      	bhi.n	1a00741a <_realloc_r+0x2d6>
1a0073a4:	f105 0208 	add.w	r2, r5, #8
1a0073a8:	f100 0308 	add.w	r3, r0, #8
1a0073ac:	68a9      	ldr	r1, [r5, #8]
1a0073ae:	e710      	b.n	1a0071d2 <_realloc_r+0x8e>
1a0073b0:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a0073b4:	f023 0303 	bic.w	r3, r3, #3
1a0073b8:	441e      	add	r6, r3
1a0073ba:	eb07 0906 	add.w	r9, r7, r6
1a0073be:	e753      	b.n	1a007268 <_realloc_r+0x124>
1a0073c0:	4652      	mov	r2, sl
1a0073c2:	e749      	b.n	1a007258 <_realloc_r+0x114>
1a0073c4:	4629      	mov	r1, r5
1a0073c6:	4650      	mov	r0, sl
1a0073c8:	461e      	mov	r6, r3
1a0073ca:	465f      	mov	r7, fp
1a0073cc:	f7ff fb40 	bl	1a006a50 <memmove>
1a0073d0:	4655      	mov	r5, sl
1a0073d2:	e749      	b.n	1a007268 <_realloc_r+0x124>
1a0073d4:	4629      	mov	r1, r5
1a0073d6:	f7ff fb3b 	bl	1a006a50 <memmove>
1a0073da:	e6ff      	b.n	1a0071dc <_realloc_r+0x98>
1a0073dc:	4427      	add	r7, r4
1a0073de:	eba9 0904 	sub.w	r9, r9, r4
1a0073e2:	f049 0201 	orr.w	r2, r9, #1
1a0073e6:	609f      	str	r7, [r3, #8]
1a0073e8:	607a      	str	r2, [r7, #4]
1a0073ea:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0073ee:	f003 0301 	and.w	r3, r3, #1
1a0073f2:	431c      	orrs	r4, r3
1a0073f4:	4640      	mov	r0, r8
1a0073f6:	f845 4c04 	str.w	r4, [r5, #-4]
1a0073fa:	f7ff fb93 	bl	1a006b24 <__malloc_unlock>
1a0073fe:	46aa      	mov	sl, r5
1a007400:	e744      	b.n	1a00728c <_realloc_r+0x148>
1a007402:	f8cb 1010 	str.w	r1, [fp, #16]
1a007406:	68e9      	ldr	r1, [r5, #12]
1a007408:	f8cb 1014 	str.w	r1, [fp, #20]
1a00740c:	2a24      	cmp	r2, #36	; 0x24
1a00740e:	d010      	beq.n	1a007432 <_realloc_r+0x2ee>
1a007410:	6929      	ldr	r1, [r5, #16]
1a007412:	f10b 0218 	add.w	r2, fp, #24
1a007416:	3510      	adds	r5, #16
1a007418:	e71e      	b.n	1a007258 <_realloc_r+0x114>
1a00741a:	68ab      	ldr	r3, [r5, #8]
1a00741c:	6083      	str	r3, [r0, #8]
1a00741e:	68eb      	ldr	r3, [r5, #12]
1a007420:	60c3      	str	r3, [r0, #12]
1a007422:	2a24      	cmp	r2, #36	; 0x24
1a007424:	d010      	beq.n	1a007448 <_realloc_r+0x304>
1a007426:	f105 0210 	add.w	r2, r5, #16
1a00742a:	f100 0310 	add.w	r3, r0, #16
1a00742e:	6929      	ldr	r1, [r5, #16]
1a007430:	e6cf      	b.n	1a0071d2 <_realloc_r+0x8e>
1a007432:	692a      	ldr	r2, [r5, #16]
1a007434:	f8cb 2018 	str.w	r2, [fp, #24]
1a007438:	696a      	ldr	r2, [r5, #20]
1a00743a:	f8cb 201c 	str.w	r2, [fp, #28]
1a00743e:	69a9      	ldr	r1, [r5, #24]
1a007440:	f10b 0220 	add.w	r2, fp, #32
1a007444:	3518      	adds	r5, #24
1a007446:	e707      	b.n	1a007258 <_realloc_r+0x114>
1a007448:	692b      	ldr	r3, [r5, #16]
1a00744a:	6103      	str	r3, [r0, #16]
1a00744c:	696b      	ldr	r3, [r5, #20]
1a00744e:	6143      	str	r3, [r0, #20]
1a007450:	69a9      	ldr	r1, [r5, #24]
1a007452:	f105 0218 	add.w	r2, r5, #24
1a007456:	f100 0318 	add.w	r3, r0, #24
1a00745a:	e6ba      	b.n	1a0071d2 <_realloc_r+0x8e>
1a00745c:	4652      	mov	r2, sl
1a00745e:	e76e      	b.n	1a00733e <_realloc_r+0x1fa>
1a007460:	4629      	mov	r1, r5
1a007462:	4650      	mov	r0, sl
1a007464:	9301      	str	r3, [sp, #4]
1a007466:	f7ff faf3 	bl	1a006a50 <memmove>
1a00746a:	9b01      	ldr	r3, [sp, #4]
1a00746c:	e76c      	b.n	1a007348 <_realloc_r+0x204>
1a00746e:	f8cb 1010 	str.w	r1, [fp, #16]
1a007472:	68e9      	ldr	r1, [r5, #12]
1a007474:	f8cb 1014 	str.w	r1, [fp, #20]
1a007478:	2a24      	cmp	r2, #36	; 0x24
1a00747a:	d004      	beq.n	1a007486 <_realloc_r+0x342>
1a00747c:	6929      	ldr	r1, [r5, #16]
1a00747e:	f10b 0218 	add.w	r2, fp, #24
1a007482:	3510      	adds	r5, #16
1a007484:	e75b      	b.n	1a00733e <_realloc_r+0x1fa>
1a007486:	692a      	ldr	r2, [r5, #16]
1a007488:	f8cb 2018 	str.w	r2, [fp, #24]
1a00748c:	696a      	ldr	r2, [r5, #20]
1a00748e:	f8cb 201c 	str.w	r2, [fp, #28]
1a007492:	69a9      	ldr	r1, [r5, #24]
1a007494:	f10b 0220 	add.w	r2, fp, #32
1a007498:	3518      	adds	r5, #24
1a00749a:	e750      	b.n	1a00733e <_realloc_r+0x1fa>
1a00749c:	100004f8 	.word	0x100004f8

1a0074a0 <frexp>:
1a0074a0:	ec53 2b10 	vmov	r2, r3, d0
1a0074a4:	b570      	push	{r4, r5, r6, lr}
1a0074a6:	4e16      	ldr	r6, [pc, #88]	; (1a007500 <frexp+0x60>)
1a0074a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a0074ac:	2500      	movs	r5, #0
1a0074ae:	42b1      	cmp	r1, r6
1a0074b0:	4604      	mov	r4, r0
1a0074b2:	6005      	str	r5, [r0, #0]
1a0074b4:	dc21      	bgt.n	1a0074fa <frexp+0x5a>
1a0074b6:	ee10 6a10 	vmov	r6, s0
1a0074ba:	430e      	orrs	r6, r1
1a0074bc:	d01d      	beq.n	1a0074fa <frexp+0x5a>
1a0074be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0074c2:	4618      	mov	r0, r3
1a0074c4:	da0c      	bge.n	1a0074e0 <frexp+0x40>
1a0074c6:	4619      	mov	r1, r3
1a0074c8:	2200      	movs	r2, #0
1a0074ca:	ee10 0a10 	vmov	r0, s0
1a0074ce:	4b0d      	ldr	r3, [pc, #52]	; (1a007504 <frexp+0x64>)
1a0074d0:	f000 faa6 	bl	1a007a20 <__aeabi_dmul>
1a0074d4:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a0074d8:	4602      	mov	r2, r0
1a0074da:	4608      	mov	r0, r1
1a0074dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0074e0:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a0074e4:	1509      	asrs	r1, r1, #20
1a0074e6:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a0074ea:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a0074ee:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a0074f2:	4429      	add	r1, r5
1a0074f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a0074f8:	6021      	str	r1, [r4, #0]
1a0074fa:	ec43 2b10 	vmov	d0, r2, r3
1a0074fe:	bd70      	pop	{r4, r5, r6, pc}
1a007500:	7fefffff 	.word	0x7fefffff
1a007504:	43500000 	.word	0x43500000

1a007508 <__sread>:
1a007508:	b510      	push	{r4, lr}
1a00750a:	460c      	mov	r4, r1
1a00750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007510:	f7f9 f80b 	bl	1a00052a <_read_r>
1a007514:	2800      	cmp	r0, #0
1a007516:	db03      	blt.n	1a007520 <__sread+0x18>
1a007518:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00751a:	4403      	add	r3, r0
1a00751c:	6523      	str	r3, [r4, #80]	; 0x50
1a00751e:	bd10      	pop	{r4, pc}
1a007520:	89a3      	ldrh	r3, [r4, #12]
1a007522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a007526:	81a3      	strh	r3, [r4, #12]
1a007528:	bd10      	pop	{r4, pc}
1a00752a:	bf00      	nop

1a00752c <__swrite>:
1a00752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007530:	4616      	mov	r6, r2
1a007532:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a007536:	461f      	mov	r7, r3
1a007538:	05d3      	lsls	r3, r2, #23
1a00753a:	460c      	mov	r4, r1
1a00753c:	4605      	mov	r5, r0
1a00753e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007542:	d507      	bpl.n	1a007554 <__swrite+0x28>
1a007544:	2200      	movs	r2, #0
1a007546:	2302      	movs	r3, #2
1a007548:	f7f8 ffea 	bl	1a000520 <_lseek_r>
1a00754c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a007554:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a007558:	81a2      	strh	r2, [r4, #12]
1a00755a:	463b      	mov	r3, r7
1a00755c:	4632      	mov	r2, r6
1a00755e:	4628      	mov	r0, r5
1a007560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a007564:	f7f9 b818 	b.w	1a000598 <_write_r>

1a007568 <__sseek>:
1a007568:	b510      	push	{r4, lr}
1a00756a:	460c      	mov	r4, r1
1a00756c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007570:	f7f8 ffd6 	bl	1a000520 <_lseek_r>
1a007574:	89a3      	ldrh	r3, [r4, #12]
1a007576:	1c42      	adds	r2, r0, #1
1a007578:	bf0e      	itee	eq
1a00757a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00757e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a007582:	6520      	strne	r0, [r4, #80]	; 0x50
1a007584:	81a3      	strh	r3, [r4, #12]
1a007586:	bd10      	pop	{r4, pc}

1a007588 <__sclose>:
1a007588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00758c:	f7f8 bfb5 	b.w	1a0004fa <_close_r>

1a007590 <strncpy>:
1a007590:	ea40 0301 	orr.w	r3, r0, r1
1a007594:	079b      	lsls	r3, r3, #30
1a007596:	b470      	push	{r4, r5, r6}
1a007598:	d12a      	bne.n	1a0075f0 <strncpy+0x60>
1a00759a:	2a03      	cmp	r2, #3
1a00759c:	d928      	bls.n	1a0075f0 <strncpy+0x60>
1a00759e:	460c      	mov	r4, r1
1a0075a0:	4603      	mov	r3, r0
1a0075a2:	4621      	mov	r1, r4
1a0075a4:	f854 6b04 	ldr.w	r6, [r4], #4
1a0075a8:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
1a0075ac:	ea25 0506 	bic.w	r5, r5, r6
1a0075b0:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
1a0075b4:	d106      	bne.n	1a0075c4 <strncpy+0x34>
1a0075b6:	3a04      	subs	r2, #4
1a0075b8:	2a03      	cmp	r2, #3
1a0075ba:	f843 6b04 	str.w	r6, [r3], #4
1a0075be:	4621      	mov	r1, r4
1a0075c0:	d8ef      	bhi.n	1a0075a2 <strncpy+0x12>
1a0075c2:	b19a      	cbz	r2, 1a0075ec <strncpy+0x5c>
1a0075c4:	780c      	ldrb	r4, [r1, #0]
1a0075c6:	701c      	strb	r4, [r3, #0]
1a0075c8:	3a01      	subs	r2, #1
1a0075ca:	3301      	adds	r3, #1
1a0075cc:	b13c      	cbz	r4, 1a0075de <strncpy+0x4e>
1a0075ce:	b16a      	cbz	r2, 1a0075ec <strncpy+0x5c>
1a0075d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a0075d4:	f803 4b01 	strb.w	r4, [r3], #1
1a0075d8:	3a01      	subs	r2, #1
1a0075da:	2c00      	cmp	r4, #0
1a0075dc:	d1f7      	bne.n	1a0075ce <strncpy+0x3e>
1a0075de:	b12a      	cbz	r2, 1a0075ec <strncpy+0x5c>
1a0075e0:	441a      	add	r2, r3
1a0075e2:	2100      	movs	r1, #0
1a0075e4:	f803 1b01 	strb.w	r1, [r3], #1
1a0075e8:	4293      	cmp	r3, r2
1a0075ea:	d1fb      	bne.n	1a0075e4 <strncpy+0x54>
1a0075ec:	bc70      	pop	{r4, r5, r6}
1a0075ee:	4770      	bx	lr
1a0075f0:	4603      	mov	r3, r0
1a0075f2:	e7e6      	b.n	1a0075c2 <strncpy+0x32>

1a0075f4 <__sprint_r.part.0>:
1a0075f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0075f8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a0075fa:	049c      	lsls	r4, r3, #18
1a0075fc:	4692      	mov	sl, r2
1a0075fe:	d52d      	bpl.n	1a00765c <__sprint_r.part.0+0x68>
1a007600:	6893      	ldr	r3, [r2, #8]
1a007602:	6812      	ldr	r2, [r2, #0]
1a007604:	b343      	cbz	r3, 1a007658 <__sprint_r.part.0+0x64>
1a007606:	460e      	mov	r6, r1
1a007608:	4607      	mov	r7, r0
1a00760a:	f102 0908 	add.w	r9, r2, #8
1a00760e:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
1a007612:	ea5f 089b 	movs.w	r8, fp, lsr #2
1a007616:	d015      	beq.n	1a007644 <__sprint_r.part.0+0x50>
1a007618:	3d04      	subs	r5, #4
1a00761a:	2400      	movs	r4, #0
1a00761c:	e001      	b.n	1a007622 <__sprint_r.part.0+0x2e>
1a00761e:	45a0      	cmp	r8, r4
1a007620:	d00e      	beq.n	1a007640 <__sprint_r.part.0+0x4c>
1a007622:	4632      	mov	r2, r6
1a007624:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a007628:	4638      	mov	r0, r7
1a00762a:	f000 f915 	bl	1a007858 <_fputwc_r>
1a00762e:	1c43      	adds	r3, r0, #1
1a007630:	f104 0401 	add.w	r4, r4, #1
1a007634:	d1f3      	bne.n	1a00761e <__sprint_r.part.0+0x2a>
1a007636:	2300      	movs	r3, #0
1a007638:	e9ca 3301 	strd	r3, r3, [sl, #4]
1a00763c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007640:	f8da 3008 	ldr.w	r3, [sl, #8]
1a007644:	f02b 0b03 	bic.w	fp, fp, #3
1a007648:	eba3 030b 	sub.w	r3, r3, fp
1a00764c:	f8ca 3008 	str.w	r3, [sl, #8]
1a007650:	f109 0908 	add.w	r9, r9, #8
1a007654:	2b00      	cmp	r3, #0
1a007656:	d1da      	bne.n	1a00760e <__sprint_r.part.0+0x1a>
1a007658:	2000      	movs	r0, #0
1a00765a:	e7ec      	b.n	1a007636 <__sprint_r.part.0+0x42>
1a00765c:	f7fe fcca 	bl	1a005ff4 <__sfvwrite_r>
1a007660:	2300      	movs	r3, #0
1a007662:	e9ca 3301 	strd	r3, r3, [sl, #4]
1a007666:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00766a:	bf00      	nop

1a00766c <__sprint_r>:
1a00766c:	6893      	ldr	r3, [r2, #8]
1a00766e:	b10b      	cbz	r3, 1a007674 <__sprint_r+0x8>
1a007670:	f7ff bfc0 	b.w	1a0075f4 <__sprint_r.part.0>
1a007674:	b410      	push	{r4}
1a007676:	4618      	mov	r0, r3
1a007678:	6053      	str	r3, [r2, #4]
1a00767a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00767e:	4770      	bx	lr

1a007680 <_calloc_r>:
1a007680:	b510      	push	{r4, lr}
1a007682:	fb02 f101 	mul.w	r1, r2, r1
1a007686:	f7fe feeb 	bl	1a006460 <_malloc_r>
1a00768a:	4604      	mov	r4, r0
1a00768c:	b1d8      	cbz	r0, 1a0076c6 <_calloc_r+0x46>
1a00768e:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a007692:	f022 0203 	bic.w	r2, r2, #3
1a007696:	3a04      	subs	r2, #4
1a007698:	2a24      	cmp	r2, #36	; 0x24
1a00769a:	d81d      	bhi.n	1a0076d8 <_calloc_r+0x58>
1a00769c:	2a13      	cmp	r2, #19
1a00769e:	d914      	bls.n	1a0076ca <_calloc_r+0x4a>
1a0076a0:	2300      	movs	r3, #0
1a0076a2:	2a1b      	cmp	r2, #27
1a0076a4:	e9c0 3300 	strd	r3, r3, [r0]
1a0076a8:	d91b      	bls.n	1a0076e2 <_calloc_r+0x62>
1a0076aa:	2a24      	cmp	r2, #36	; 0x24
1a0076ac:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a0076b0:	bf0a      	itet	eq
1a0076b2:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a0076b6:	f100 0210 	addne.w	r2, r0, #16
1a0076ba:	f100 0218 	addeq.w	r2, r0, #24
1a0076be:	2300      	movs	r3, #0
1a0076c0:	e9c2 3300 	strd	r3, r3, [r2]
1a0076c4:	6093      	str	r3, [r2, #8]
1a0076c6:	4620      	mov	r0, r4
1a0076c8:	bd10      	pop	{r4, pc}
1a0076ca:	4602      	mov	r2, r0
1a0076cc:	2300      	movs	r3, #0
1a0076ce:	e9c2 3300 	strd	r3, r3, [r2]
1a0076d2:	6093      	str	r3, [r2, #8]
1a0076d4:	4620      	mov	r0, r4
1a0076d6:	bd10      	pop	{r4, pc}
1a0076d8:	2100      	movs	r1, #0
1a0076da:	f7fb fb4d 	bl	1a002d78 <memset>
1a0076de:	4620      	mov	r0, r4
1a0076e0:	bd10      	pop	{r4, pc}
1a0076e2:	f100 0208 	add.w	r2, r0, #8
1a0076e6:	e7f1      	b.n	1a0076cc <_calloc_r+0x4c>

1a0076e8 <_fclose_r>:
1a0076e8:	b570      	push	{r4, r5, r6, lr}
1a0076ea:	2900      	cmp	r1, #0
1a0076ec:	d048      	beq.n	1a007780 <_fclose_r+0x98>
1a0076ee:	4605      	mov	r5, r0
1a0076f0:	460c      	mov	r4, r1
1a0076f2:	b110      	cbz	r0, 1a0076fa <_fclose_r+0x12>
1a0076f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a0076f6:	2b00      	cmp	r3, #0
1a0076f8:	d048      	beq.n	1a00778c <_fclose_r+0xa4>
1a0076fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a0076fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007700:	07d0      	lsls	r0, r2, #31
1a007702:	d440      	bmi.n	1a007786 <_fclose_r+0x9e>
1a007704:	0599      	lsls	r1, r3, #22
1a007706:	d530      	bpl.n	1a00776a <_fclose_r+0x82>
1a007708:	4621      	mov	r1, r4
1a00770a:	4628      	mov	r0, r5
1a00770c:	f7fe f9f0 	bl	1a005af0 <__sflush_r>
1a007710:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a007712:	4606      	mov	r6, r0
1a007714:	b133      	cbz	r3, 1a007724 <_fclose_r+0x3c>
1a007716:	69e1      	ldr	r1, [r4, #28]
1a007718:	4628      	mov	r0, r5
1a00771a:	4798      	blx	r3
1a00771c:	2800      	cmp	r0, #0
1a00771e:	bfb8      	it	lt
1a007720:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a007724:	89a3      	ldrh	r3, [r4, #12]
1a007726:	061a      	lsls	r2, r3, #24
1a007728:	d43c      	bmi.n	1a0077a4 <_fclose_r+0xbc>
1a00772a:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a00772c:	b141      	cbz	r1, 1a007740 <_fclose_r+0x58>
1a00772e:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a007732:	4299      	cmp	r1, r3
1a007734:	d002      	beq.n	1a00773c <_fclose_r+0x54>
1a007736:	4628      	mov	r0, r5
1a007738:	f7fe fb68 	bl	1a005e0c <_free_r>
1a00773c:	2300      	movs	r3, #0
1a00773e:	6323      	str	r3, [r4, #48]	; 0x30
1a007740:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a007742:	b121      	cbz	r1, 1a00774e <_fclose_r+0x66>
1a007744:	4628      	mov	r0, r5
1a007746:	f7fe fb61 	bl	1a005e0c <_free_r>
1a00774a:	2300      	movs	r3, #0
1a00774c:	6463      	str	r3, [r4, #68]	; 0x44
1a00774e:	f7fe fb01 	bl	1a005d54 <__sfp_lock_acquire>
1a007752:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a007754:	2200      	movs	r2, #0
1a007756:	07db      	lsls	r3, r3, #31
1a007758:	81a2      	strh	r2, [r4, #12]
1a00775a:	d51f      	bpl.n	1a00779c <_fclose_r+0xb4>
1a00775c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00775e:	f7fe fe01 	bl	1a006364 <__retarget_lock_close_recursive>
1a007762:	f7fe fafd 	bl	1a005d60 <__sfp_lock_release>
1a007766:	4630      	mov	r0, r6
1a007768:	bd70      	pop	{r4, r5, r6, pc}
1a00776a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00776c:	f7fe fdfc 	bl	1a006368 <__retarget_lock_acquire_recursive>
1a007770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007774:	2b00      	cmp	r3, #0
1a007776:	d1c7      	bne.n	1a007708 <_fclose_r+0x20>
1a007778:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a00777a:	f016 0601 	ands.w	r6, r6, #1
1a00777e:	d016      	beq.n	1a0077ae <_fclose_r+0xc6>
1a007780:	2600      	movs	r6, #0
1a007782:	4630      	mov	r0, r6
1a007784:	bd70      	pop	{r4, r5, r6, pc}
1a007786:	2b00      	cmp	r3, #0
1a007788:	d0fa      	beq.n	1a007780 <_fclose_r+0x98>
1a00778a:	e7bd      	b.n	1a007708 <_fclose_r+0x20>
1a00778c:	f7fe fab6 	bl	1a005cfc <__sinit>
1a007790:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a007792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007796:	07d0      	lsls	r0, r2, #31
1a007798:	d4f5      	bmi.n	1a007786 <_fclose_r+0x9e>
1a00779a:	e7b3      	b.n	1a007704 <_fclose_r+0x1c>
1a00779c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00779e:	f7fe fde5 	bl	1a00636c <__retarget_lock_release_recursive>
1a0077a2:	e7db      	b.n	1a00775c <_fclose_r+0x74>
1a0077a4:	6921      	ldr	r1, [r4, #16]
1a0077a6:	4628      	mov	r0, r5
1a0077a8:	f7fe fb30 	bl	1a005e0c <_free_r>
1a0077ac:	e7bd      	b.n	1a00772a <_fclose_r+0x42>
1a0077ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0077b0:	f7fe fddc 	bl	1a00636c <__retarget_lock_release_recursive>
1a0077b4:	4630      	mov	r0, r6
1a0077b6:	bd70      	pop	{r4, r5, r6, pc}

1a0077b8 <__fputwc>:
1a0077b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0077bc:	b082      	sub	sp, #8
1a0077be:	4681      	mov	r9, r0
1a0077c0:	4688      	mov	r8, r1
1a0077c2:	4614      	mov	r4, r2
1a0077c4:	f000 f87a 	bl	1a0078bc <__locale_mb_cur_max>
1a0077c8:	2801      	cmp	r0, #1
1a0077ca:	d103      	bne.n	1a0077d4 <__fputwc+0x1c>
1a0077cc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a0077d0:	2bfe      	cmp	r3, #254	; 0xfe
1a0077d2:	d933      	bls.n	1a00783c <__fputwc+0x84>
1a0077d4:	4642      	mov	r2, r8
1a0077d6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a0077da:	a901      	add	r1, sp, #4
1a0077dc:	4648      	mov	r0, r9
1a0077de:	f000 f8e9 	bl	1a0079b4 <_wcrtomb_r>
1a0077e2:	1c42      	adds	r2, r0, #1
1a0077e4:	4606      	mov	r6, r0
1a0077e6:	d02f      	beq.n	1a007848 <__fputwc+0x90>
1a0077e8:	b320      	cbz	r0, 1a007834 <__fputwc+0x7c>
1a0077ea:	f89d c004 	ldrb.w	ip, [sp, #4]
1a0077ee:	2500      	movs	r5, #0
1a0077f0:	f10d 0a04 	add.w	sl, sp, #4
1a0077f4:	e009      	b.n	1a00780a <__fputwc+0x52>
1a0077f6:	6823      	ldr	r3, [r4, #0]
1a0077f8:	1c5a      	adds	r2, r3, #1
1a0077fa:	6022      	str	r2, [r4, #0]
1a0077fc:	f883 c000 	strb.w	ip, [r3]
1a007800:	3501      	adds	r5, #1
1a007802:	42b5      	cmp	r5, r6
1a007804:	d216      	bcs.n	1a007834 <__fputwc+0x7c>
1a007806:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a00780a:	68a3      	ldr	r3, [r4, #8]
1a00780c:	3b01      	subs	r3, #1
1a00780e:	2b00      	cmp	r3, #0
1a007810:	60a3      	str	r3, [r4, #8]
1a007812:	daf0      	bge.n	1a0077f6 <__fputwc+0x3e>
1a007814:	69a7      	ldr	r7, [r4, #24]
1a007816:	42bb      	cmp	r3, r7
1a007818:	4661      	mov	r1, ip
1a00781a:	4622      	mov	r2, r4
1a00781c:	4648      	mov	r0, r9
1a00781e:	db02      	blt.n	1a007826 <__fputwc+0x6e>
1a007820:	f1bc 0f0a 	cmp.w	ip, #10
1a007824:	d1e7      	bne.n	1a0077f6 <__fputwc+0x3e>
1a007826:	f000 f86d 	bl	1a007904 <__swbuf_r>
1a00782a:	1c43      	adds	r3, r0, #1
1a00782c:	d1e8      	bne.n	1a007800 <__fputwc+0x48>
1a00782e:	b002      	add	sp, #8
1a007830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007834:	4640      	mov	r0, r8
1a007836:	b002      	add	sp, #8
1a007838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00783c:	fa5f fc88 	uxtb.w	ip, r8
1a007840:	4606      	mov	r6, r0
1a007842:	f88d c004 	strb.w	ip, [sp, #4]
1a007846:	e7d2      	b.n	1a0077ee <__fputwc+0x36>
1a007848:	89a3      	ldrh	r3, [r4, #12]
1a00784a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00784e:	81a3      	strh	r3, [r4, #12]
1a007850:	b002      	add	sp, #8
1a007852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007856:	bf00      	nop

1a007858 <_fputwc_r>:
1a007858:	b530      	push	{r4, r5, lr}
1a00785a:	4605      	mov	r5, r0
1a00785c:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a00785e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a007862:	07c0      	lsls	r0, r0, #31
1a007864:	4614      	mov	r4, r2
1a007866:	b083      	sub	sp, #12
1a007868:	b29a      	uxth	r2, r3
1a00786a:	d401      	bmi.n	1a007870 <_fputwc_r+0x18>
1a00786c:	0590      	lsls	r0, r2, #22
1a00786e:	d51c      	bpl.n	1a0078aa <_fputwc_r+0x52>
1a007870:	0490      	lsls	r0, r2, #18
1a007872:	d406      	bmi.n	1a007882 <_fputwc_r+0x2a>
1a007874:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a007876:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00787a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00787e:	81a3      	strh	r3, [r4, #12]
1a007880:	6662      	str	r2, [r4, #100]	; 0x64
1a007882:	4628      	mov	r0, r5
1a007884:	4622      	mov	r2, r4
1a007886:	f7ff ff97 	bl	1a0077b8 <__fputwc>
1a00788a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00788c:	07da      	lsls	r2, r3, #31
1a00788e:	4605      	mov	r5, r0
1a007890:	d402      	bmi.n	1a007898 <_fputwc_r+0x40>
1a007892:	89a3      	ldrh	r3, [r4, #12]
1a007894:	059b      	lsls	r3, r3, #22
1a007896:	d502      	bpl.n	1a00789e <_fputwc_r+0x46>
1a007898:	4628      	mov	r0, r5
1a00789a:	b003      	add	sp, #12
1a00789c:	bd30      	pop	{r4, r5, pc}
1a00789e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0078a0:	f7fe fd64 	bl	1a00636c <__retarget_lock_release_recursive>
1a0078a4:	4628      	mov	r0, r5
1a0078a6:	b003      	add	sp, #12
1a0078a8:	bd30      	pop	{r4, r5, pc}
1a0078aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0078ac:	9101      	str	r1, [sp, #4]
1a0078ae:	f7fe fd5b 	bl	1a006368 <__retarget_lock_acquire_recursive>
1a0078b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0078b6:	9901      	ldr	r1, [sp, #4]
1a0078b8:	b29a      	uxth	r2, r3
1a0078ba:	e7d9      	b.n	1a007870 <_fputwc_r+0x18>

1a0078bc <__locale_mb_cur_max>:
1a0078bc:	4b04      	ldr	r3, [pc, #16]	; (1a0078d0 <__locale_mb_cur_max+0x14>)
1a0078be:	4a05      	ldr	r2, [pc, #20]	; (1a0078d4 <__locale_mb_cur_max+0x18>)
1a0078c0:	681b      	ldr	r3, [r3, #0]
1a0078c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a0078c4:	2b00      	cmp	r3, #0
1a0078c6:	bf08      	it	eq
1a0078c8:	4613      	moveq	r3, r2
1a0078ca:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a0078ce:	4770      	bx	lr
1a0078d0:	100000cc 	.word	0x100000cc
1a0078d4:	10000908 	.word	0x10000908

1a0078d8 <__ascii_mbtowc>:
1a0078d8:	b082      	sub	sp, #8
1a0078da:	b149      	cbz	r1, 1a0078f0 <__ascii_mbtowc+0x18>
1a0078dc:	b15a      	cbz	r2, 1a0078f6 <__ascii_mbtowc+0x1e>
1a0078de:	b16b      	cbz	r3, 1a0078fc <__ascii_mbtowc+0x24>
1a0078e0:	7813      	ldrb	r3, [r2, #0]
1a0078e2:	600b      	str	r3, [r1, #0]
1a0078e4:	7812      	ldrb	r2, [r2, #0]
1a0078e6:	1c10      	adds	r0, r2, #0
1a0078e8:	bf18      	it	ne
1a0078ea:	2001      	movne	r0, #1
1a0078ec:	b002      	add	sp, #8
1a0078ee:	4770      	bx	lr
1a0078f0:	a901      	add	r1, sp, #4
1a0078f2:	2a00      	cmp	r2, #0
1a0078f4:	d1f3      	bne.n	1a0078de <__ascii_mbtowc+0x6>
1a0078f6:	4610      	mov	r0, r2
1a0078f8:	b002      	add	sp, #8
1a0078fa:	4770      	bx	lr
1a0078fc:	f06f 0001 	mvn.w	r0, #1
1a007900:	e7f4      	b.n	1a0078ec <__ascii_mbtowc+0x14>
1a007902:	bf00      	nop

1a007904 <__swbuf_r>:
1a007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a007906:	460d      	mov	r5, r1
1a007908:	4614      	mov	r4, r2
1a00790a:	4606      	mov	r6, r0
1a00790c:	b110      	cbz	r0, 1a007914 <__swbuf_r+0x10>
1a00790e:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a007910:	2b00      	cmp	r3, #0
1a007912:	d043      	beq.n	1a00799c <__swbuf_r+0x98>
1a007914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007918:	69a3      	ldr	r3, [r4, #24]
1a00791a:	60a3      	str	r3, [r4, #8]
1a00791c:	b291      	uxth	r1, r2
1a00791e:	0708      	lsls	r0, r1, #28
1a007920:	d51b      	bpl.n	1a00795a <__swbuf_r+0x56>
1a007922:	6923      	ldr	r3, [r4, #16]
1a007924:	b1cb      	cbz	r3, 1a00795a <__swbuf_r+0x56>
1a007926:	b2ed      	uxtb	r5, r5
1a007928:	0489      	lsls	r1, r1, #18
1a00792a:	462f      	mov	r7, r5
1a00792c:	d522      	bpl.n	1a007974 <__swbuf_r+0x70>
1a00792e:	6822      	ldr	r2, [r4, #0]
1a007930:	6961      	ldr	r1, [r4, #20]
1a007932:	1ad3      	subs	r3, r2, r3
1a007934:	4299      	cmp	r1, r3
1a007936:	dd29      	ble.n	1a00798c <__swbuf_r+0x88>
1a007938:	3301      	adds	r3, #1
1a00793a:	68a1      	ldr	r1, [r4, #8]
1a00793c:	1c50      	adds	r0, r2, #1
1a00793e:	3901      	subs	r1, #1
1a007940:	60a1      	str	r1, [r4, #8]
1a007942:	6020      	str	r0, [r4, #0]
1a007944:	7015      	strb	r5, [r2, #0]
1a007946:	6962      	ldr	r2, [r4, #20]
1a007948:	429a      	cmp	r2, r3
1a00794a:	d02a      	beq.n	1a0079a2 <__swbuf_r+0x9e>
1a00794c:	89a3      	ldrh	r3, [r4, #12]
1a00794e:	07db      	lsls	r3, r3, #31
1a007950:	d501      	bpl.n	1a007956 <__swbuf_r+0x52>
1a007952:	2d0a      	cmp	r5, #10
1a007954:	d025      	beq.n	1a0079a2 <__swbuf_r+0x9e>
1a007956:	4638      	mov	r0, r7
1a007958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00795a:	4621      	mov	r1, r4
1a00795c:	4630      	mov	r0, r6
1a00795e:	f7fd f8bf 	bl	1a004ae0 <__swsetup_r>
1a007962:	bb20      	cbnz	r0, 1a0079ae <__swbuf_r+0xaa>
1a007964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007968:	6923      	ldr	r3, [r4, #16]
1a00796a:	b291      	uxth	r1, r2
1a00796c:	b2ed      	uxtb	r5, r5
1a00796e:	0489      	lsls	r1, r1, #18
1a007970:	462f      	mov	r7, r5
1a007972:	d4dc      	bmi.n	1a00792e <__swbuf_r+0x2a>
1a007974:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a007976:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00797a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a00797e:	81a2      	strh	r2, [r4, #12]
1a007980:	6822      	ldr	r2, [r4, #0]
1a007982:	6661      	str	r1, [r4, #100]	; 0x64
1a007984:	6961      	ldr	r1, [r4, #20]
1a007986:	1ad3      	subs	r3, r2, r3
1a007988:	4299      	cmp	r1, r3
1a00798a:	dcd5      	bgt.n	1a007938 <__swbuf_r+0x34>
1a00798c:	4621      	mov	r1, r4
1a00798e:	4630      	mov	r0, r6
1a007990:	f7fe f958 	bl	1a005c44 <_fflush_r>
1a007994:	b958      	cbnz	r0, 1a0079ae <__swbuf_r+0xaa>
1a007996:	6822      	ldr	r2, [r4, #0]
1a007998:	2301      	movs	r3, #1
1a00799a:	e7ce      	b.n	1a00793a <__swbuf_r+0x36>
1a00799c:	f7fe f9ae 	bl	1a005cfc <__sinit>
1a0079a0:	e7b8      	b.n	1a007914 <__swbuf_r+0x10>
1a0079a2:	4621      	mov	r1, r4
1a0079a4:	4630      	mov	r0, r6
1a0079a6:	f7fe f94d 	bl	1a005c44 <_fflush_r>
1a0079aa:	2800      	cmp	r0, #0
1a0079ac:	d0d3      	beq.n	1a007956 <__swbuf_r+0x52>
1a0079ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0079b2:	e7d0      	b.n	1a007956 <__swbuf_r+0x52>

1a0079b4 <_wcrtomb_r>:
1a0079b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0079b6:	4c11      	ldr	r4, [pc, #68]	; (1a0079fc <_wcrtomb_r+0x48>)
1a0079b8:	6824      	ldr	r4, [r4, #0]
1a0079ba:	b085      	sub	sp, #20
1a0079bc:	4606      	mov	r6, r0
1a0079be:	6b64      	ldr	r4, [r4, #52]	; 0x34
1a0079c0:	461f      	mov	r7, r3
1a0079c2:	b151      	cbz	r1, 1a0079da <_wcrtomb_r+0x26>
1a0079c4:	4d0e      	ldr	r5, [pc, #56]	; (1a007a00 <_wcrtomb_r+0x4c>)
1a0079c6:	2c00      	cmp	r4, #0
1a0079c8:	bf08      	it	eq
1a0079ca:	462c      	moveq	r4, r5
1a0079cc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a0079d0:	47a0      	blx	r4
1a0079d2:	1c43      	adds	r3, r0, #1
1a0079d4:	d00c      	beq.n	1a0079f0 <_wcrtomb_r+0x3c>
1a0079d6:	b005      	add	sp, #20
1a0079d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0079da:	4a09      	ldr	r2, [pc, #36]	; (1a007a00 <_wcrtomb_r+0x4c>)
1a0079dc:	2c00      	cmp	r4, #0
1a0079de:	bf08      	it	eq
1a0079e0:	4614      	moveq	r4, r2
1a0079e2:	460a      	mov	r2, r1
1a0079e4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a0079e8:	a901      	add	r1, sp, #4
1a0079ea:	47a0      	blx	r4
1a0079ec:	1c43      	adds	r3, r0, #1
1a0079ee:	d1f2      	bne.n	1a0079d6 <_wcrtomb_r+0x22>
1a0079f0:	2200      	movs	r2, #0
1a0079f2:	238a      	movs	r3, #138	; 0x8a
1a0079f4:	603a      	str	r2, [r7, #0]
1a0079f6:	6033      	str	r3, [r6, #0]
1a0079f8:	b005      	add	sp, #20
1a0079fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0079fc:	100000cc 	.word	0x100000cc
1a007a00:	10000908 	.word	0x10000908

1a007a04 <__ascii_wctomb>:
1a007a04:	b121      	cbz	r1, 1a007a10 <__ascii_wctomb+0xc>
1a007a06:	2aff      	cmp	r2, #255	; 0xff
1a007a08:	d804      	bhi.n	1a007a14 <__ascii_wctomb+0x10>
1a007a0a:	700a      	strb	r2, [r1, #0]
1a007a0c:	2001      	movs	r0, #1
1a007a0e:	4770      	bx	lr
1a007a10:	4608      	mov	r0, r1
1a007a12:	4770      	bx	lr
1a007a14:	238a      	movs	r3, #138	; 0x8a
1a007a16:	6003      	str	r3, [r0, #0]
1a007a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007a1c:	4770      	bx	lr
1a007a1e:	bf00      	nop

1a007a20 <__aeabi_dmul>:
1a007a20:	b570      	push	{r4, r5, r6, lr}
1a007a22:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a007a26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a007a2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a007a2e:	bf1d      	ittte	ne
1a007a30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a007a34:	ea94 0f0c 	teqne	r4, ip
1a007a38:	ea95 0f0c 	teqne	r5, ip
1a007a3c:	f000 f8de 	bleq	1a007bfc <__aeabi_dmul+0x1dc>
1a007a40:	442c      	add	r4, r5
1a007a42:	ea81 0603 	eor.w	r6, r1, r3
1a007a46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a007a4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a007a4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a007a52:	bf18      	it	ne
1a007a54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a007a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a007a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a007a60:	d038      	beq.n	1a007ad4 <__aeabi_dmul+0xb4>
1a007a62:	fba0 ce02 	umull	ip, lr, r0, r2
1a007a66:	f04f 0500 	mov.w	r5, #0
1a007a6a:	fbe1 e502 	umlal	lr, r5, r1, r2
1a007a6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a007a72:	fbe0 e503 	umlal	lr, r5, r0, r3
1a007a76:	f04f 0600 	mov.w	r6, #0
1a007a7a:	fbe1 5603 	umlal	r5, r6, r1, r3
1a007a7e:	f09c 0f00 	teq	ip, #0
1a007a82:	bf18      	it	ne
1a007a84:	f04e 0e01 	orrne.w	lr, lr, #1
1a007a88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a007a8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a007a90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a007a94:	d204      	bcs.n	1a007aa0 <__aeabi_dmul+0x80>
1a007a96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a007a9a:	416d      	adcs	r5, r5
1a007a9c:	eb46 0606 	adc.w	r6, r6, r6
1a007aa0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a007aa4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a007aa8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a007aac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a007ab0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a007ab4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a007ab8:	bf88      	it	hi
1a007aba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a007abe:	d81e      	bhi.n	1a007afe <__aeabi_dmul+0xde>
1a007ac0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a007ac4:	bf08      	it	eq
1a007ac6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a007aca:	f150 0000 	adcs.w	r0, r0, #0
1a007ace:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a007ad2:	bd70      	pop	{r4, r5, r6, pc}
1a007ad4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a007ad8:	ea46 0101 	orr.w	r1, r6, r1
1a007adc:	ea40 0002 	orr.w	r0, r0, r2
1a007ae0:	ea81 0103 	eor.w	r1, r1, r3
1a007ae4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a007ae8:	bfc2      	ittt	gt
1a007aea:	ebd4 050c 	rsbsgt	r5, r4, ip
1a007aee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a007af2:	bd70      	popgt	{r4, r5, r6, pc}
1a007af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a007af8:	f04f 0e00 	mov.w	lr, #0
1a007afc:	3c01      	subs	r4, #1
1a007afe:	f300 80ab 	bgt.w	1a007c58 <__aeabi_dmul+0x238>
1a007b02:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a007b06:	bfde      	ittt	le
1a007b08:	2000      	movle	r0, #0
1a007b0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a007b0e:	bd70      	pople	{r4, r5, r6, pc}
1a007b10:	f1c4 0400 	rsb	r4, r4, #0
1a007b14:	3c20      	subs	r4, #32
1a007b16:	da35      	bge.n	1a007b84 <__aeabi_dmul+0x164>
1a007b18:	340c      	adds	r4, #12
1a007b1a:	dc1b      	bgt.n	1a007b54 <__aeabi_dmul+0x134>
1a007b1c:	f104 0414 	add.w	r4, r4, #20
1a007b20:	f1c4 0520 	rsb	r5, r4, #32
1a007b24:	fa00 f305 	lsl.w	r3, r0, r5
1a007b28:	fa20 f004 	lsr.w	r0, r0, r4
1a007b2c:	fa01 f205 	lsl.w	r2, r1, r5
1a007b30:	ea40 0002 	orr.w	r0, r0, r2
1a007b34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a007b38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a007b3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a007b40:	fa21 f604 	lsr.w	r6, r1, r4
1a007b44:	eb42 0106 	adc.w	r1, r2, r6
1a007b48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a007b4c:	bf08      	it	eq
1a007b4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a007b52:	bd70      	pop	{r4, r5, r6, pc}
1a007b54:	f1c4 040c 	rsb	r4, r4, #12
1a007b58:	f1c4 0520 	rsb	r5, r4, #32
1a007b5c:	fa00 f304 	lsl.w	r3, r0, r4
1a007b60:	fa20 f005 	lsr.w	r0, r0, r5
1a007b64:	fa01 f204 	lsl.w	r2, r1, r4
1a007b68:	ea40 0002 	orr.w	r0, r0, r2
1a007b6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a007b70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a007b74:	f141 0100 	adc.w	r1, r1, #0
1a007b78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a007b7c:	bf08      	it	eq
1a007b7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a007b82:	bd70      	pop	{r4, r5, r6, pc}
1a007b84:	f1c4 0520 	rsb	r5, r4, #32
1a007b88:	fa00 f205 	lsl.w	r2, r0, r5
1a007b8c:	ea4e 0e02 	orr.w	lr, lr, r2
1a007b90:	fa20 f304 	lsr.w	r3, r0, r4
1a007b94:	fa01 f205 	lsl.w	r2, r1, r5
1a007b98:	ea43 0302 	orr.w	r3, r3, r2
1a007b9c:	fa21 f004 	lsr.w	r0, r1, r4
1a007ba0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a007ba4:	fa21 f204 	lsr.w	r2, r1, r4
1a007ba8:	ea20 0002 	bic.w	r0, r0, r2
1a007bac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a007bb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a007bb4:	bf08      	it	eq
1a007bb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a007bba:	bd70      	pop	{r4, r5, r6, pc}
1a007bbc:	f094 0f00 	teq	r4, #0
1a007bc0:	d10f      	bne.n	1a007be2 <__aeabi_dmul+0x1c2>
1a007bc2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a007bc6:	0040      	lsls	r0, r0, #1
1a007bc8:	eb41 0101 	adc.w	r1, r1, r1
1a007bcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a007bd0:	bf08      	it	eq
1a007bd2:	3c01      	subeq	r4, #1
1a007bd4:	d0f7      	beq.n	1a007bc6 <__aeabi_dmul+0x1a6>
1a007bd6:	ea41 0106 	orr.w	r1, r1, r6
1a007bda:	f095 0f00 	teq	r5, #0
1a007bde:	bf18      	it	ne
1a007be0:	4770      	bxne	lr
1a007be2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a007be6:	0052      	lsls	r2, r2, #1
1a007be8:	eb43 0303 	adc.w	r3, r3, r3
1a007bec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a007bf0:	bf08      	it	eq
1a007bf2:	3d01      	subeq	r5, #1
1a007bf4:	d0f7      	beq.n	1a007be6 <__aeabi_dmul+0x1c6>
1a007bf6:	ea43 0306 	orr.w	r3, r3, r6
1a007bfa:	4770      	bx	lr
1a007bfc:	ea94 0f0c 	teq	r4, ip
1a007c00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a007c04:	bf18      	it	ne
1a007c06:	ea95 0f0c 	teqne	r5, ip
1a007c0a:	d00c      	beq.n	1a007c26 <__aeabi_dmul+0x206>
1a007c0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a007c10:	bf18      	it	ne
1a007c12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a007c16:	d1d1      	bne.n	1a007bbc <__aeabi_dmul+0x19c>
1a007c18:	ea81 0103 	eor.w	r1, r1, r3
1a007c1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a007c20:	f04f 0000 	mov.w	r0, #0
1a007c24:	bd70      	pop	{r4, r5, r6, pc}
1a007c26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a007c2a:	bf06      	itte	eq
1a007c2c:	4610      	moveq	r0, r2
1a007c2e:	4619      	moveq	r1, r3
1a007c30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a007c34:	d019      	beq.n	1a007c6a <__aeabi_dmul+0x24a>
1a007c36:	ea94 0f0c 	teq	r4, ip
1a007c3a:	d102      	bne.n	1a007c42 <__aeabi_dmul+0x222>
1a007c3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a007c40:	d113      	bne.n	1a007c6a <__aeabi_dmul+0x24a>
1a007c42:	ea95 0f0c 	teq	r5, ip
1a007c46:	d105      	bne.n	1a007c54 <__aeabi_dmul+0x234>
1a007c48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a007c4c:	bf1c      	itt	ne
1a007c4e:	4610      	movne	r0, r2
1a007c50:	4619      	movne	r1, r3
1a007c52:	d10a      	bne.n	1a007c6a <__aeabi_dmul+0x24a>
1a007c54:	ea81 0103 	eor.w	r1, r1, r3
1a007c58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a007c5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a007c60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a007c64:	f04f 0000 	mov.w	r0, #0
1a007c68:	bd70      	pop	{r4, r5, r6, pc}
1a007c6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a007c6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a007c72:	bd70      	pop	{r4, r5, r6, pc}

1a007c74 <__aeabi_ddiv>:
1a007c74:	b570      	push	{r4, r5, r6, lr}
1a007c76:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a007c7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a007c7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a007c82:	bf1d      	ittte	ne
1a007c84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a007c88:	ea94 0f0c 	teqne	r4, ip
1a007c8c:	ea95 0f0c 	teqne	r5, ip
1a007c90:	f000 f8a7 	bleq	1a007de2 <__aeabi_ddiv+0x16e>
1a007c94:	eba4 0405 	sub.w	r4, r4, r5
1a007c98:	ea81 0e03 	eor.w	lr, r1, r3
1a007c9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a007ca0:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a007ca4:	f000 8088 	beq.w	1a007db8 <__aeabi_ddiv+0x144>
1a007ca8:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a007cac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a007cb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a007cb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a007cb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a007cbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a007cc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a007cc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a007cc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a007ccc:	429d      	cmp	r5, r3
1a007cce:	bf08      	it	eq
1a007cd0:	4296      	cmpeq	r6, r2
1a007cd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a007cd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a007cda:	d202      	bcs.n	1a007ce2 <__aeabi_ddiv+0x6e>
1a007cdc:	085b      	lsrs	r3, r3, #1
1a007cde:	ea4f 0232 	mov.w	r2, r2, rrx
1a007ce2:	1ab6      	subs	r6, r6, r2
1a007ce4:	eb65 0503 	sbc.w	r5, r5, r3
1a007ce8:	085b      	lsrs	r3, r3, #1
1a007cea:	ea4f 0232 	mov.w	r2, r2, rrx
1a007cee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a007cf2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a007cf6:	ebb6 0e02 	subs.w	lr, r6, r2
1a007cfa:	eb75 0e03 	sbcs.w	lr, r5, r3
1a007cfe:	bf22      	ittt	cs
1a007d00:	1ab6      	subcs	r6, r6, r2
1a007d02:	4675      	movcs	r5, lr
1a007d04:	ea40 000c 	orrcs.w	r0, r0, ip
1a007d08:	085b      	lsrs	r3, r3, #1
1a007d0a:	ea4f 0232 	mov.w	r2, r2, rrx
1a007d0e:	ebb6 0e02 	subs.w	lr, r6, r2
1a007d12:	eb75 0e03 	sbcs.w	lr, r5, r3
1a007d16:	bf22      	ittt	cs
1a007d18:	1ab6      	subcs	r6, r6, r2
1a007d1a:	4675      	movcs	r5, lr
1a007d1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a007d20:	085b      	lsrs	r3, r3, #1
1a007d22:	ea4f 0232 	mov.w	r2, r2, rrx
1a007d26:	ebb6 0e02 	subs.w	lr, r6, r2
1a007d2a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a007d2e:	bf22      	ittt	cs
1a007d30:	1ab6      	subcs	r6, r6, r2
1a007d32:	4675      	movcs	r5, lr
1a007d34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a007d38:	085b      	lsrs	r3, r3, #1
1a007d3a:	ea4f 0232 	mov.w	r2, r2, rrx
1a007d3e:	ebb6 0e02 	subs.w	lr, r6, r2
1a007d42:	eb75 0e03 	sbcs.w	lr, r5, r3
1a007d46:	bf22      	ittt	cs
1a007d48:	1ab6      	subcs	r6, r6, r2
1a007d4a:	4675      	movcs	r5, lr
1a007d4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a007d50:	ea55 0e06 	orrs.w	lr, r5, r6
1a007d54:	d018      	beq.n	1a007d88 <__aeabi_ddiv+0x114>
1a007d56:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a007d5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a007d5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a007d62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a007d66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a007d6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a007d6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a007d72:	d1c0      	bne.n	1a007cf6 <__aeabi_ddiv+0x82>
1a007d74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a007d78:	d10b      	bne.n	1a007d92 <__aeabi_ddiv+0x11e>
1a007d7a:	ea41 0100 	orr.w	r1, r1, r0
1a007d7e:	f04f 0000 	mov.w	r0, #0
1a007d82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a007d86:	e7b6      	b.n	1a007cf6 <__aeabi_ddiv+0x82>
1a007d88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a007d8c:	bf04      	itt	eq
1a007d8e:	4301      	orreq	r1, r0
1a007d90:	2000      	moveq	r0, #0
1a007d92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a007d96:	bf88      	it	hi
1a007d98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a007d9c:	f63f aeaf 	bhi.w	1a007afe <__aeabi_dmul+0xde>
1a007da0:	ebb5 0c03 	subs.w	ip, r5, r3
1a007da4:	bf04      	itt	eq
1a007da6:	ebb6 0c02 	subseq.w	ip, r6, r2
1a007daa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a007dae:	f150 0000 	adcs.w	r0, r0, #0
1a007db2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a007db6:	bd70      	pop	{r4, r5, r6, pc}
1a007db8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a007dbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a007dc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a007dc4:	bfc2      	ittt	gt
1a007dc6:	ebd4 050c 	rsbsgt	r5, r4, ip
1a007dca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a007dce:	bd70      	popgt	{r4, r5, r6, pc}
1a007dd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a007dd4:	f04f 0e00 	mov.w	lr, #0
1a007dd8:	3c01      	subs	r4, #1
1a007dda:	e690      	b.n	1a007afe <__aeabi_dmul+0xde>
1a007ddc:	ea45 0e06 	orr.w	lr, r5, r6
1a007de0:	e68d      	b.n	1a007afe <__aeabi_dmul+0xde>
1a007de2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a007de6:	ea94 0f0c 	teq	r4, ip
1a007dea:	bf08      	it	eq
1a007dec:	ea95 0f0c 	teqeq	r5, ip
1a007df0:	f43f af3b 	beq.w	1a007c6a <__aeabi_dmul+0x24a>
1a007df4:	ea94 0f0c 	teq	r4, ip
1a007df8:	d10a      	bne.n	1a007e10 <__aeabi_ddiv+0x19c>
1a007dfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a007dfe:	f47f af34 	bne.w	1a007c6a <__aeabi_dmul+0x24a>
1a007e02:	ea95 0f0c 	teq	r5, ip
1a007e06:	f47f af25 	bne.w	1a007c54 <__aeabi_dmul+0x234>
1a007e0a:	4610      	mov	r0, r2
1a007e0c:	4619      	mov	r1, r3
1a007e0e:	e72c      	b.n	1a007c6a <__aeabi_dmul+0x24a>
1a007e10:	ea95 0f0c 	teq	r5, ip
1a007e14:	d106      	bne.n	1a007e24 <__aeabi_ddiv+0x1b0>
1a007e16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a007e1a:	f43f aefd 	beq.w	1a007c18 <__aeabi_dmul+0x1f8>
1a007e1e:	4610      	mov	r0, r2
1a007e20:	4619      	mov	r1, r3
1a007e22:	e722      	b.n	1a007c6a <__aeabi_dmul+0x24a>
1a007e24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a007e28:	bf18      	it	ne
1a007e2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a007e2e:	f47f aec5 	bne.w	1a007bbc <__aeabi_dmul+0x19c>
1a007e32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a007e36:	f47f af0d 	bne.w	1a007c54 <__aeabi_dmul+0x234>
1a007e3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a007e3e:	f47f aeeb 	bne.w	1a007c18 <__aeabi_dmul+0x1f8>
1a007e42:	e712      	b.n	1a007c6a <__aeabi_dmul+0x24a>

1a007e44 <__gedf2>:
1a007e44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a007e48:	e006      	b.n	1a007e58 <__cmpdf2+0x4>
1a007e4a:	bf00      	nop

1a007e4c <__ledf2>:
1a007e4c:	f04f 0c01 	mov.w	ip, #1
1a007e50:	e002      	b.n	1a007e58 <__cmpdf2+0x4>
1a007e52:	bf00      	nop

1a007e54 <__cmpdf2>:
1a007e54:	f04f 0c01 	mov.w	ip, #1
1a007e58:	f84d cd04 	str.w	ip, [sp, #-4]!
1a007e5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a007e60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007e64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a007e68:	bf18      	it	ne
1a007e6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a007e6e:	d01b      	beq.n	1a007ea8 <__cmpdf2+0x54>
1a007e70:	b001      	add	sp, #4
1a007e72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a007e76:	bf0c      	ite	eq
1a007e78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a007e7c:	ea91 0f03 	teqne	r1, r3
1a007e80:	bf02      	ittt	eq
1a007e82:	ea90 0f02 	teqeq	r0, r2
1a007e86:	2000      	moveq	r0, #0
1a007e88:	4770      	bxeq	lr
1a007e8a:	f110 0f00 	cmn.w	r0, #0
1a007e8e:	ea91 0f03 	teq	r1, r3
1a007e92:	bf58      	it	pl
1a007e94:	4299      	cmppl	r1, r3
1a007e96:	bf08      	it	eq
1a007e98:	4290      	cmpeq	r0, r2
1a007e9a:	bf2c      	ite	cs
1a007e9c:	17d8      	asrcs	r0, r3, #31
1a007e9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a007ea2:	f040 0001 	orr.w	r0, r0, #1
1a007ea6:	4770      	bx	lr
1a007ea8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a007eac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007eb0:	d102      	bne.n	1a007eb8 <__cmpdf2+0x64>
1a007eb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a007eb6:	d107      	bne.n	1a007ec8 <__cmpdf2+0x74>
1a007eb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a007ebc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007ec0:	d1d6      	bne.n	1a007e70 <__cmpdf2+0x1c>
1a007ec2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a007ec6:	d0d3      	beq.n	1a007e70 <__cmpdf2+0x1c>
1a007ec8:	f85d 0b04 	ldr.w	r0, [sp], #4
1a007ecc:	4770      	bx	lr
1a007ece:	bf00      	nop

1a007ed0 <__aeabi_cdrcmple>:
1a007ed0:	4684      	mov	ip, r0
1a007ed2:	4610      	mov	r0, r2
1a007ed4:	4662      	mov	r2, ip
1a007ed6:	468c      	mov	ip, r1
1a007ed8:	4619      	mov	r1, r3
1a007eda:	4663      	mov	r3, ip
1a007edc:	e000      	b.n	1a007ee0 <__aeabi_cdcmpeq>
1a007ede:	bf00      	nop

1a007ee0 <__aeabi_cdcmpeq>:
1a007ee0:	b501      	push	{r0, lr}
1a007ee2:	f7ff ffb7 	bl	1a007e54 <__cmpdf2>
1a007ee6:	2800      	cmp	r0, #0
1a007ee8:	bf48      	it	mi
1a007eea:	f110 0f00 	cmnmi.w	r0, #0
1a007eee:	bd01      	pop	{r0, pc}

1a007ef0 <__aeabi_dcmpeq>:
1a007ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007ef4:	f7ff fff4 	bl	1a007ee0 <__aeabi_cdcmpeq>
1a007ef8:	bf0c      	ite	eq
1a007efa:	2001      	moveq	r0, #1
1a007efc:	2000      	movne	r0, #0
1a007efe:	f85d fb08 	ldr.w	pc, [sp], #8
1a007f02:	bf00      	nop

1a007f04 <__aeabi_dcmplt>:
1a007f04:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007f08:	f7ff ffea 	bl	1a007ee0 <__aeabi_cdcmpeq>
1a007f0c:	bf34      	ite	cc
1a007f0e:	2001      	movcc	r0, #1
1a007f10:	2000      	movcs	r0, #0
1a007f12:	f85d fb08 	ldr.w	pc, [sp], #8
1a007f16:	bf00      	nop

1a007f18 <__aeabi_dcmple>:
1a007f18:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007f1c:	f7ff ffe0 	bl	1a007ee0 <__aeabi_cdcmpeq>
1a007f20:	bf94      	ite	ls
1a007f22:	2001      	movls	r0, #1
1a007f24:	2000      	movhi	r0, #0
1a007f26:	f85d fb08 	ldr.w	pc, [sp], #8
1a007f2a:	bf00      	nop

1a007f2c <__aeabi_dcmpge>:
1a007f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007f30:	f7ff ffce 	bl	1a007ed0 <__aeabi_cdrcmple>
1a007f34:	bf94      	ite	ls
1a007f36:	2001      	movls	r0, #1
1a007f38:	2000      	movhi	r0, #0
1a007f3a:	f85d fb08 	ldr.w	pc, [sp], #8
1a007f3e:	bf00      	nop

1a007f40 <__aeabi_dcmpgt>:
1a007f40:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007f44:	f7ff ffc4 	bl	1a007ed0 <__aeabi_cdrcmple>
1a007f48:	bf34      	ite	cc
1a007f4a:	2001      	movcc	r0, #1
1a007f4c:	2000      	movcs	r0, #0
1a007f4e:	f85d fb08 	ldr.w	pc, [sp], #8
1a007f52:	bf00      	nop

1a007f54 <__aeabi_dcmpun>:
1a007f54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a007f58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007f5c:	d102      	bne.n	1a007f64 <__aeabi_dcmpun+0x10>
1a007f5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a007f62:	d10a      	bne.n	1a007f7a <__aeabi_dcmpun+0x26>
1a007f64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a007f68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007f6c:	d102      	bne.n	1a007f74 <__aeabi_dcmpun+0x20>
1a007f6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a007f72:	d102      	bne.n	1a007f7a <__aeabi_dcmpun+0x26>
1a007f74:	f04f 0000 	mov.w	r0, #0
1a007f78:	4770      	bx	lr
1a007f7a:	f04f 0001 	mov.w	r0, #1
1a007f7e:	4770      	bx	lr

1a007f80 <__aeabi_d2iz>:
1a007f80:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a007f84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a007f88:	d215      	bcs.n	1a007fb6 <__aeabi_d2iz+0x36>
1a007f8a:	d511      	bpl.n	1a007fb0 <__aeabi_d2iz+0x30>
1a007f8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a007f90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a007f94:	d912      	bls.n	1a007fbc <__aeabi_d2iz+0x3c>
1a007f96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a007f9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a007f9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a007fa2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a007fa6:	fa23 f002 	lsr.w	r0, r3, r2
1a007faa:	bf18      	it	ne
1a007fac:	4240      	negne	r0, r0
1a007fae:	4770      	bx	lr
1a007fb0:	f04f 0000 	mov.w	r0, #0
1a007fb4:	4770      	bx	lr
1a007fb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a007fba:	d105      	bne.n	1a007fc8 <__aeabi_d2iz+0x48>
1a007fbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a007fc0:	bf08      	it	eq
1a007fc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a007fc6:	4770      	bx	lr
1a007fc8:	f04f 0000 	mov.w	r0, #0
1a007fcc:	4770      	bx	lr
1a007fce:	bf00      	nop
1a007fd0:	63696e49 	.word	0x63696e49
1a007fd4:	696c6169 	.word	0x696c6169
1a007fd8:	646e617a 	.word	0x646e617a
1a007fdc:	4d49206f 	.word	0x4d49206f
1a007fe0:	504d2055 	.word	0x504d2055
1a007fe4:	35323955 	.word	0x35323955
1a007fe8:	2e2e2e30 	.word	0x2e2e2e30
1a007fec:	0000000d 	.word	0x0000000d
1a007ff0:	20554d49 	.word	0x20554d49
1a007ff4:	3955504d 	.word	0x3955504d
1a007ff8:	20303532 	.word	0x20303532
1a007ffc:	69206f6e 	.word	0x69206f6e
1a008000:	6963696e 	.word	0x6963696e
1a008004:	7a696c61 	.word	0x7a696c61
1a008008:	2c6f6461 	.word	0x2c6f6461
1a00800c:	65686320 	.word	0x65686320
1a008010:	65657571 	.word	0x65657571
1a008014:	73616c20 	.word	0x73616c20
1a008018:	6e6f6320 	.word	0x6e6f6320
1a00801c:	6f697865 	.word	0x6f697865
1a008020:	3a73656e 	.word	0x3a73656e
1a008024:	000d0a0d 	.word	0x000d0a0d
1a008028:	3955504d 	.word	0x3955504d
1a00802c:	20303532 	.word	0x20303532
1a008030:	2d2d2d2d 	.word	0x2d2d2d2d
1a008034:	55444520 	.word	0x55444520
1a008038:	4149432d 	.word	0x4149432d
1a00803c:	584e2d41 	.word	0x584e2d41
1a008040:	0d0a0d50 	.word	0x0d0a0d50
1a008044:	00000000 	.word	0x00000000
1a008048:	20202020 	.word	0x20202020
1a00804c:	20434356 	.word	0x20434356
1a008050:	2d2d2d2d 	.word	0x2d2d2d2d
1a008054:	332e3320 	.word	0x332e3320
1a008058:	00000d56 	.word	0x00000d56
1a00805c:	20202020 	.word	0x20202020
1a008060:	20444e47 	.word	0x20444e47
1a008064:	2d2d2d2d 	.word	0x2d2d2d2d
1a008068:	444e4720 	.word	0x444e4720
1a00806c:	0000000d 	.word	0x0000000d
1a008070:	20202020 	.word	0x20202020
1a008074:	204c4353 	.word	0x204c4353
1a008078:	2d2d2d2d 	.word	0x2d2d2d2d
1a00807c:	4c435320 	.word	0x4c435320
1a008080:	0000000d 	.word	0x0000000d
1a008084:	20202020 	.word	0x20202020
1a008088:	20414453 	.word	0x20414453
1a00808c:	2d2d2d2d 	.word	0x2d2d2d2d
1a008090:	41445320 	.word	0x41445320
1a008094:	0000000d 	.word	0x0000000d
1a008098:	20202020 	.word	0x20202020
1a00809c:	20304441 	.word	0x20304441
1a0080a0:	2d2d2d2d 	.word	0x2d2d2d2d
1a0080a4:	444e4720 	.word	0x444e4720
1a0080a8:	000d0a0d 	.word	0x000d0a0d
1a0080ac:	64206553 	.word	0x64206553
1a0080b0:	65697465 	.word	0x65697465
1a0080b4:	6520656e 	.word	0x6520656e
1a0080b8:	7270206c 	.word	0x7270206c
1a0080bc:	6172676f 	.word	0x6172676f
1a0080c0:	0d2e616d 	.word	0x0d2e616d
1a0080c4:	00000000 	.word	0x00000000
1a0080c8:	20554d49 	.word	0x20554d49
1a0080cc:	3955504d 	.word	0x3955504d
1a0080d0:	20303532 	.word	0x20303532
1a0080d4:	63696e69 	.word	0x63696e69
1a0080d8:	696c6169 	.word	0x696c6169
1a0080dc:	6f64617a 	.word	0x6f64617a
1a0080e0:	726f6320 	.word	0x726f6320
1a0080e4:	74636572 	.word	0x74636572
1a0080e8:	6e656d61 	.word	0x6e656d61
1a0080ec:	0d2e6574 	.word	0x0d2e6574
1a0080f0:	00000d0a 	.word	0x00000d0a
1a0080f4:	6f726947 	.word	0x6f726947
1a0080f8:	706f6373 	.word	0x706f6373
1a0080fc:	20203a6f 	.word	0x20203a6f
1a008100:	20202020 	.word	0x20202020
1a008104:	2c662528 	.word	0x2c662528
1a008108:	2c662520 	.word	0x2c662520
1a00810c:	29662520 	.word	0x29662520
1a008110:	5b202020 	.word	0x5b202020
1a008114:	2f646172 	.word	0x2f646172
1a008118:	0a0d5d73 	.word	0x0a0d5d73
1a00811c:	00000000 	.word	0x00000000
1a008120:	6c656341 	.word	0x6c656341
1a008124:	6d6f7265 	.word	0x6d6f7265
1a008128:	6f727465 	.word	0x6f727465
1a00812c:	2020203a 	.word	0x2020203a
1a008130:	2c662528 	.word	0x2c662528
1a008134:	2c662520 	.word	0x2c662520
1a008138:	29662520 	.word	0x29662520
1a00813c:	5b202020 	.word	0x5b202020
1a008140:	32732f6d 	.word	0x32732f6d
1a008144:	000a0d5d 	.word	0x000a0d5d
1a008148:	6e67614d 	.word	0x6e67614d
1a00814c:	6d6f7465 	.word	0x6d6f7465
1a008150:	6f727465 	.word	0x6f727465
1a008154:	2020203a 	.word	0x2020203a
1a008158:	2c662528 	.word	0x2c662528
1a00815c:	2c662520 	.word	0x2c662520
1a008160:	29662520 	.word	0x29662520
1a008164:	5b202020 	.word	0x5b202020
1a008168:	0d5d5475 	.word	0x0d5d5475
1a00816c:	0000000a 	.word	0x0000000a
1a008170:	706d6554 	.word	0x706d6554
1a008174:	74617265 	.word	0x74617265
1a008178:	3a617275 	.word	0x3a617275
1a00817c:	20202020 	.word	0x20202020
1a008180:	20206625 	.word	0x20206625
1a008184:	5d435b20 	.word	0x5d435b20
1a008188:	0a0d0a0d 	.word	0x0a0d0a0d
1a00818c:	ffffff00 	.word	0xffffff00

1a008190 <ExtRateIn>:
1a008190:	00000000                                ....

1a008194 <OscRateIn>:
1a008194:	00b71b00                                ....

1a008198 <InitClkStates>:
1a008198:	01010f01                                ....

1a00819c <pinmuxing>:
1a00819c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0081ac:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0081bc:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0081cc:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0081dc:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0081ec:	00d50301 00d50401 00160107 00560207     ..............V.
1a0081fc:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00820c:	00570206                                ..W.

1a008210 <UART_BClock>:
1a008210:	01a201c2 01620182                       ......b.

1a008218 <UART_PClock>:
1a008218:	00820081 00a200a1 08040201 0f0f0f03     ................
1a008228:	ffff00ff                                ....

1a00822c <periph_to_base>:
1a00822c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00823c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00824c:	000100e0 01000100 01200003 00060120     .......... . ...
1a00825c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00826c:	01820013 00120182 01a201a2 01c20011     ................
1a00827c:	001001c2 01e201e2 0202000f 000e0202     ................
1a00828c:	02220222 0223000d 001c0223              "."...#.#...

1a008298 <InitClkStates>:
1a008298:	00010100 00010909 0001090a 01010701     ................
1a0082a8:	00010902 00010906 0101090c 0001090d     ................
1a0082b8:	0001090e 0001090f 00010910 00010911     ................
1a0082c8:	00010912 00010913 00011114 00011119     ................
1a0082d8:	0001111a 0001111b                       ........

1a0082e0 <gpioPinsInit>:
1a0082e0:	02000104 00050701 05010d03 04080100     ................
1a0082f0:	02020002 02000304 00000403 04070002     ................
1a008300:	030c0300 09050402 05040103 04030208     ................
1a008310:	04020305 06040504 0802000c 03000b06     ................
1a008320:	00090607 07060503 060f0504 03030004     ................
1a008330:	02000404 00050404 06040502 04060200     ................
1a008340:	0c050408 05040a04 0003010e 14010a00     ................
1a008350:	010f0000 0d000012 00001101 0010010c     ................
1a008360:	07070300 000f0300 01000001 00000000     ................
1a008370:	000a0600 08060603 06100504 04030005     ................
1a008380:	03000106 04090400 04010d05 010b0000     ................
1a008390:	0200000f 00000001 00010104 02010800     ................
1a0083a0:	01090000 09010006 05040002 04010200     ................
1a0083b0:	02020105 02020504 0e00000a 01000b02     ................
1a0083c0:	000c020b 00040c01 04000200 01020001     ................
1a0083d0:	02000204 00030402 03070302 070b0300     ................
1a0083e0:	0c030004 03000507 0006070d 01020e03     ................
1a0083f0:	04010504 06020006 02000504 00040405     ................
1a008400:	08040402 040c0504 0d050409 05040a04     ................
1a008410:	0005010e ffff0801                       ........

1a008418 <ultrasonicSensorsIrqMap>:
1a008418:	ff020100 00464e49 00666e69 004e414e     ....INF.inf.NAN.
1a008428:	006e616e 33323130 37363534 62613938     nan.0123456789ab
1a008438:	66656463 00000000 33323130 37363534     cdef....01234567
1a008448:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
1a008458:	0000296c ffff0030                       l)..0...

1a008460 <blanks.8605>:
1a008460:	20202020 20202020 20202020 20202020                     

1a008470 <zeroes.8606>:
1a008470:	30303030 30303030 30303030 30303030     0000000000000000
1a008480:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

1a008490 <__mprec_bigtens>:
1a008490:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a0084a0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a0084b0:	7f73bf3c 75154fdd                       <.s..O.u

1a0084b8 <__mprec_tens>:
1a0084b8:	00000000 3ff00000 00000000 40240000     .......?......$@
1a0084c8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a0084d8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a0084e8:	00000000 412e8480 00000000 416312d0     .......A......cA
1a0084f8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a008508:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a008518:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a008528:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a008538:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a008548:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a008558:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a008568:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a008578:	79d99db4 44ea7843                       ...yCx.D

1a008580 <p05.7367>:
1a008580:	00000005 00000019 0000007d 00000043     ........}...C...
1a008590:	49534f50 ffff0058 0000002e              POSIX.......

1a00859c <_ctype_>:
1a00859c:	20202000 20202020 28282020 20282828     .         ((((( 
1a0085ac:	20202020 20202020 20202020 20202020                     
1a0085bc:	10108820 10101010 10101010 10101010      ...............
1a0085cc:	04040410 04040404 10040404 10101010     ................
1a0085dc:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a0085ec:	01010101 01010101 01010101 10101010     ................
1a0085fc:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a00860c:	02020202 02020202 02020202 10101010     ................
1a00861c:	00000020 00000000 00000000 00000000      ...............
	...
1a00869c:	ffffff00                                ....
