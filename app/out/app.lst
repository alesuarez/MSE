
app/out/app.elf:     file format elf32-littlearm
app/out/app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000415

Program Header:
0x70000001 off    0x00011b38 vaddr 0x1a001b38 paddr 0x1a001b38 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010090 vaddr 0x10000090 paddr 0x10000090 align 2**16
         filesz 0x00000000 memsz 0x00000074 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001b40 memsz 0x00001b40 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001b40 align 2**16
         filesz 0x00000090 memsz 0x00000090 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b34  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  10000000  1a001b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020090  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020090  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020090  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020090  2**2
                  CONTENTS
  6 .bss          00000074  10000090  10000090  00010090  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020090  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020090  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020090  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020090  2**2
                  CONTENTS
 11 .init_array   00000004  1a001b34  1a001b34  00011b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a001b38  1a001b38  00011b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020090  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020090  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020090  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020090  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020090  2**2
                  CONTENTS
 18 .noinit       00000000  10000104  10000104  00020090  2**2
                  CONTENTS
 19 .debug_info   00020ada  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000041cd  00000000  00000000  00040b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00005372  00000000  00000000  00044d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000008d0  00000000  00000000  0004a0a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000858  00000000  00000000  0004a979  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00006ad2  00000000  00000000  0004b1d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000dcfe  00000000  00000000  00051ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002624f  00000000  00000000  0005f9a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  00085bf0  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  00085c6f  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000014dc  00000000  00000000  00085ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000090 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001b34 l    d  .init_array	00000000 .init_array
1a001b38 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000104 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 key_service.c
00000000 l    df *ABS*	00000000 led_service.c
00000000 l    df *ABS*	00000000 app.c
00000000 l    df *ABS*	00000000 debounce_fsm.c
00000000 l    df *ABS*	00000000 board.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001868 l     O .text	00000004 InitClkStates
1a00186c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000578 l     F .text	0000002c Chip_UART_GetIndex
1a0018e0 l     O .text	00000008 UART_BClock
1a0018e8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000720 l     F .text	000000a4 pll_calc_divs
1a0007c4 l     F .text	0000010c pll_get_frac
1a0008d0 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000b44 l     F .text	00000022 Chip_Clock_GetDivRate
10000090 l     O .bss	00000008 audio_usb_pll_freq
1a0018fc l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001968 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000000 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0019b0 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10000098 l     O .bss	00000004 callBackFuncParams
100000a0 l     O .bss	00000008 tickCounter
100000a8 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_timer.c
1a000f88 l     F .text	00000002 errorOcurred
1a000f8a l     F .text	00000002 doNothing
10000008 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001094 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100000ac l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a00147c l     F .text	00000010 clearInterrupt
1a00148c l     F .text	0000005c serveInterrupt
10000048 l     O .data	00000048 ultrasonicSensors
1a001b30 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a001b38 l       .init_array	00000000 __init_array_end
1a001b34 l       .bss_RAM5	00000000 __preinit_array_end
1a001b34 l       .init_array	00000000 __init_array_start
1a001b34 l       .bss_RAM5	00000000 __preinit_array_start
1a000968 g     F .text	0000001c Chip_Clock_GetDividerSource
1a00032e g     F .text	00000002 buttonReleased
1a00100c g     F .text	00000044 TIMER2_IRQHandler
100000b0 g     O .bss	00000020 keyOne
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0004c0 g     F .text	00000008 __stdio_init
1a001438 g     F .text	00000042 delayRead
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000f54 g     F .text	00000034 SysTick_Handler
1a0005f8 g     F .text	00000040 Chip_UART_SetBaud
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a001b40 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff747a g       *ABS*	00000000 __valid_user_code_checksum
1a001b40 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001050 g     F .text	00000044 TIMER3_IRQHandler
1a000be6 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001508 g     F .text	00000000 .hidden __aeabi_uldivmod
10000104 g       .noinit	00000000 _noinit
100000f0 g     O .bss	00000004 SystemCoreClock
1a0005a4 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000c30 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000500 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001538 g     F .text	000002cc .hidden __udivmoddi4
1a001860 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00030e g     F .text	00000008 notPress
1a0014f2 g     F .text	0000000a GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001b38 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a001808 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0003ac g     F .text	00000068 updateDebounceFsm
1a000498 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000104 g       .bss	00000000 _ebss
1a000f8c g     F .text	00000040 TIMER0_IRQHandler
1a000414 g     F .text	00000084 Reset_Handler
1a000ed8 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a00091c g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
100000d0 g     O .bss	00000020 keyTwo
1a000fcc g     F .text	00000040 TIMER1_IRQHandler
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000ad8 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0019f8 g     O .text	00000136 gpioPinsInit
1a0014fc g     F .text	0000000a GPIO2_IRQHandler
1a000bc0 g     F .text	00000026 Chip_Clock_GetBaseClock
10000090 g       .bss	00000000 _bss
1a001418 g     F .text	00000020 delayInit
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000c90 g     F .text	00000002 Chip_GPIO_Init
1a001864 g     O .text	00000004 OscRateIn
1a000e38 g     F .text	0000007c uartInit
10000104 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000316 g     F .text	00000018 buttonPressed
1a0010c8 g     F .text	00000194 gpioInit
1a00034c g     F .text	0000000c redOff
1a001804  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001308 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a000300 g     F .text	0000000e isPress
1a000984 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001850 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000358 g     F .text	0000004c main
1a0003a4 g     F .text	00000008 initDebounceFsm
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
10000004 g     O .data	00000004 DWT_CTRL
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a000bf4 g     F .text	0000003c Chip_Clock_EnableOpts
1a0009a0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000a58 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000de8 g     F .text	00000034 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00125c g     F .text	00000056 gpioWrite
10000100 g     O .bss	00000004 g_pUsbApi
1a0004c8 g     F .text	00000038 Board_SetupMuxing
1a000638 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000eb4 g     F .text	0000000c tickRead
100000f8 g     O .bss	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000104 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a00049c g     F .text	00000024 Board_Debug_Init
1a000330 g     F .text	0000001c redOn
10000090 g       .data	00000000 _edata
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a000c94 g     F .text	00000154 Chip_SetupCoreClock
1a0014e8 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000c7c g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001804  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0012b2 g     F .text	00000054 gpioRead
1a001324 g     F .text	000000f4 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000ec0 g     F .text	00000018 tickPowerSet
1a000b68 g     F .text	00000058 Chip_Clock_SetBaseClock
1a000e1c g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a00056c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 15 04 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 7a 74 ff 53     }...........zt.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	55 0f 00 1a                                         U...

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	09 13 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	8d 0f 00 1a cd 0f 00 1a 0d 10 00 1a 51 10 00 1a     ............Q...
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	e9 14 00 1a f3 14 00 1a fd 14 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a001b40 	.word	0x1a001b40
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000090 	.word	0x00000090
1a000120:	1a001b40 	.word	0x1a001b40
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001b40 	.word	0x1a001b40
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001b40 	.word	0x1a001b40
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001b40 	.word	0x1a001b40
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000090 	.word	0x10000090
1a000154:	00000074 	.word	0x00000074
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __WFI();
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <isPress>:
#include "key_service.h"
#include "led_service.h"

bool_t isPress(gpioMap_t key) {
1a000300:	b508      	push	{r3, lr}
	return !gpioRead(key);
1a000302:	f000 ffd6 	bl	1a0012b2 <gpioRead>
}
1a000306:	fab0 f080 	clz	r0, r0
1a00030a:	0940      	lsrs	r0, r0, #5
1a00030c:	bd08      	pop	{r3, pc}

1a00030e <notPress>:

bool_t notPress(gpioMap_t key) {
1a00030e:	b508      	push	{r3, lr}
	return gpioRead(key);
1a000310:	f000 ffcf 	bl	1a0012b2 <gpioRead>
}
1a000314:	bd08      	pop	{r3, pc}

1a000316 <buttonPressed>:

// down flag
void buttonPressed(gpioMap_t tecla) {
1a000316:	b508      	push	{r3, lr}
	switch(tecla){
1a000318:	2824      	cmp	r0, #36	; 0x24
1a00031a:	d002      	beq.n	1a000322 <buttonPressed+0xc>
1a00031c:	2825      	cmp	r0, #37	; 0x25
1a00031e:	d003      	beq.n	1a000328 <buttonPressed+0x12>
		break;
	default:
		break;
	}
	return;
}
1a000320:	bd08      	pop	{r3, pc}
		redOn();
1a000322:	f000 f805 	bl	1a000330 <redOn>
		break;
1a000326:	e7fb      	b.n	1a000320 <buttonPressed+0xa>
		redOff();
1a000328:	f000 f810 	bl	1a00034c <redOff>
	return;
1a00032c:	e7f8      	b.n	1a000320 <buttonPressed+0xa>

1a00032e <buttonReleased>:
		break;
	default:
		break;
	}
	return;
}
1a00032e:	4770      	bx	lr

1a000330 <redOn>:

#define RED_LED LED1
#define YELLOW_LED LED2
#define GREEN_LED LED3

void redOn() {
1a000330:	b508      	push	{r3, lr}
	gpioWrite(RED_LED, TRUE);
1a000332:	2101      	movs	r1, #1
1a000334:	202b      	movs	r0, #43	; 0x2b
1a000336:	f000 ff91 	bl	1a00125c <gpioWrite>
	gpioWrite(YELLOW_LED, FALSE);
1a00033a:	2100      	movs	r1, #0
1a00033c:	202c      	movs	r0, #44	; 0x2c
1a00033e:	f000 ff8d 	bl	1a00125c <gpioWrite>
	gpioWrite(GREEN_LED, FALSE);
1a000342:	2100      	movs	r1, #0
1a000344:	202d      	movs	r0, #45	; 0x2d
1a000346:	f000 ff89 	bl	1a00125c <gpioWrite>
}
1a00034a:	bd08      	pop	{r3, pc}

1a00034c <redOff>:

void redOff() {
1a00034c:	b508      	push	{r3, lr}
	gpioWrite(RED_LED, FALSE);
1a00034e:	2100      	movs	r1, #0
1a000350:	202b      	movs	r0, #43	; 0x2b
1a000352:	f000 ff83 	bl	1a00125c <gpioWrite>
}
1a000356:	bd08      	pop	{r3, pc}

1a000358 <main>:
#include "debounce_fsm.h"
#include "sapi.h"

debounceData_t keyOne, keyTwo;

int main(void) {
1a000358:	b500      	push	{lr}
1a00035a:	b087      	sub	sp, #28


	boardConfig();
1a00035c:	f000 ffe2 	bl	1a001324 <boardInit>
	delay_t keyDelay;
	delayConfig( &keyDelay, 40 );
1a000360:	2228      	movs	r2, #40	; 0x28
1a000362:	2300      	movs	r3, #0
1a000364:	4668      	mov	r0, sp
1a000366:	f001 f857 	bl	1a001418 <delayInit>

	uartConfig(UART_USB, 115200);
1a00036a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00036e:	2003      	movs	r0, #3
1a000370:	f000 fd62 	bl	1a000e38 <uartInit>

	initDebounceFsm(&keyOne, TEC1);
1a000374:	2124      	movs	r1, #36	; 0x24
1a000376:	4809      	ldr	r0, [pc, #36]	; (1a00039c <main+0x44>)
1a000378:	f000 f814 	bl	1a0003a4 <initDebounceFsm>
	initDebounceFsm(&keyTwo, TEC2);
1a00037c:	2125      	movs	r1, #37	; 0x25
1a00037e:	4808      	ldr	r0, [pc, #32]	; (1a0003a0 <main+0x48>)
1a000380:	f000 f810 	bl	1a0003a4 <initDebounceFsm>

	while (TRUE) {


		if(delayRead( &keyDelay )) {
1a000384:	4668      	mov	r0, sp
1a000386:	f001 f857 	bl	1a001438 <delayRead>
1a00038a:	2800      	cmp	r0, #0
1a00038c:	d0fa      	beq.n	1a000384 <main+0x2c>
			updateDebounceFsm(&keyOne);
1a00038e:	4803      	ldr	r0, [pc, #12]	; (1a00039c <main+0x44>)
1a000390:	f000 f80c 	bl	1a0003ac <updateDebounceFsm>
			updateDebounceFsm(&keyTwo);
1a000394:	4802      	ldr	r0, [pc, #8]	; (1a0003a0 <main+0x48>)
1a000396:	f000 f809 	bl	1a0003ac <updateDebounceFsm>
1a00039a:	e7f3      	b.n	1a000384 <main+0x2c>
1a00039c:	100000b0 	.word	0x100000b0
1a0003a0:	100000d0 	.word	0x100000d0

1a0003a4 <initDebounceFsm>:
#include "led_service.h"

#define DEBOUNCE_DEFAULT_TIME 40

void initDebounceFsm(debounceData_t * dataStruct, gpioMap_t key) {
	dataStruct->key = key;
1a0003a4:	7001      	strb	r1, [r0, #0]
	dataStruct->state = BUTTON_UP_STATE;
1a0003a6:	2300      	movs	r3, #0
1a0003a8:	7043      	strb	r3, [r0, #1]
	return;
}
1a0003aa:	4770      	bx	lr

1a0003ac <updateDebounceFsm>:

void updateDebounceFsm(debounceData_t * ptrDataStruct) {
1a0003ac:	b510      	push	{r4, lr}
1a0003ae:	4604      	mov	r4, r0

	switch (ptrDataStruct->state) {
1a0003b0:	7843      	ldrb	r3, [r0, #1]
1a0003b2:	2b03      	cmp	r3, #3
1a0003b4:	d82b      	bhi.n	1a00040e <updateDebounceFsm+0x62>
1a0003b6:	e8df f003 	tbb	[pc, r3]
1a0003ba:	0902      	.short	0x0902
1a0003bc:	1d16      	.short	0x1d16

	case BUTTON_UP_STATE:
		if (isPress(ptrDataStruct->key)) {
1a0003be:	7800      	ldrb	r0, [r0, #0]
1a0003c0:	f7ff ff9e 	bl	1a000300 <isPress>
1a0003c4:	b328      	cbz	r0, 1a000412 <updateDebounceFsm+0x66>
			ptrDataStruct->state = BUTTON_FALLING_STATE;
1a0003c6:	2301      	movs	r3, #1
1a0003c8:	7063      	strb	r3, [r4, #1]
1a0003ca:	e022      	b.n	1a000412 <updateDebounceFsm+0x66>
		}
		break;

	case BUTTON_FALLING_STATE:
		if (isPress(ptrDataStruct->key)) {
1a0003cc:	7800      	ldrb	r0, [r0, #0]
1a0003ce:	f7ff ff97 	bl	1a000300 <isPress>
1a0003d2:	b910      	cbnz	r0, 1a0003da <updateDebounceFsm+0x2e>
				buttonPressed(ptrDataStruct->key);
				ptrDataStruct->state = BUTTON_DOWN_STATE;
			} else {
				ptrDataStruct->state = BUTTON_UP_STATE;
1a0003d4:	2300      	movs	r3, #0
1a0003d6:	7063      	strb	r3, [r4, #1]
1a0003d8:	e01b      	b.n	1a000412 <updateDebounceFsm+0x66>
				buttonPressed(ptrDataStruct->key);
1a0003da:	7820      	ldrb	r0, [r4, #0]
1a0003dc:	f7ff ff9b 	bl	1a000316 <buttonPressed>
				ptrDataStruct->state = BUTTON_DOWN_STATE;
1a0003e0:	2302      	movs	r3, #2
1a0003e2:	7063      	strb	r3, [r4, #1]
1a0003e4:	e015      	b.n	1a000412 <updateDebounceFsm+0x66>
			}
		break;

	case BUTTON_DOWN_STATE:
		if (notPress(ptrDataStruct->key)) {
1a0003e6:	7800      	ldrb	r0, [r0, #0]
1a0003e8:	f7ff ff91 	bl	1a00030e <notPress>
1a0003ec:	b188      	cbz	r0, 1a000412 <updateDebounceFsm+0x66>
			ptrDataStruct->state = BUTTON_RISING_STATE;
1a0003ee:	2303      	movs	r3, #3
1a0003f0:	7063      	strb	r3, [r4, #1]
1a0003f2:	e00e      	b.n	1a000412 <updateDebounceFsm+0x66>
		}
		break;

	case BUTTON_RISING_STATE:
		if (notPress(ptrDataStruct->key)) {
1a0003f4:	7800      	ldrb	r0, [r0, #0]
1a0003f6:	f7ff ff8a 	bl	1a00030e <notPress>
1a0003fa:	b910      	cbnz	r0, 1a000402 <updateDebounceFsm+0x56>
				buttonReleased(ptrDataStruct->key);
				ptrDataStruct->state = BUTTON_UP_STATE;
			} else {
				ptrDataStruct->state = BUTTON_DOWN_STATE;
1a0003fc:	2302      	movs	r3, #2
1a0003fe:	7063      	strb	r3, [r4, #1]
1a000400:	e007      	b.n	1a000412 <updateDebounceFsm+0x66>
				buttonReleased(ptrDataStruct->key);
1a000402:	7820      	ldrb	r0, [r4, #0]
1a000404:	f7ff ff93 	bl	1a00032e <buttonReleased>
				ptrDataStruct->state = BUTTON_UP_STATE;
1a000408:	2300      	movs	r3, #0
1a00040a:	7063      	strb	r3, [r4, #1]
1a00040c:	e001      	b.n	1a000412 <updateDebounceFsm+0x66>
			}
		break;

	default:
		ptrDataStruct->state = BUTTON_UP_STATE;
1a00040e:	2300      	movs	r3, #0
1a000410:	7043      	strb	r3, [r0, #1]
		break;
	}
	return;
}
1a000412:	bd10      	pop	{r4, pc}

1a000414 <Reset_Handler>:
void Reset_Handler(void) {
1a000414:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1a000416:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000418:	4b18      	ldr	r3, [pc, #96]	; (1a00047c <Reset_Handler+0x68>)
1a00041a:	4a19      	ldr	r2, [pc, #100]	; (1a000480 <Reset_Handler+0x6c>)
1a00041c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00041e:	3304      	adds	r3, #4
1a000420:	4a18      	ldr	r2, [pc, #96]	; (1a000484 <Reset_Handler+0x70>)
1a000422:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000424:	2300      	movs	r3, #0
1a000426:	e005      	b.n	1a000434 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000428:	4a17      	ldr	r2, [pc, #92]	; (1a000488 <Reset_Handler+0x74>)
1a00042a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00042e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000432:	3301      	adds	r3, #1
1a000434:	2b07      	cmp	r3, #7
1a000436:	d9f7      	bls.n	1a000428 <Reset_Handler+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
1a000438:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00043a:	4b14      	ldr	r3, [pc, #80]	; (1a00048c <Reset_Handler+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a00043c:	e007      	b.n	1a00044e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00043e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000442:	689a      	ldr	r2, [r3, #8]
1a000444:	6859      	ldr	r1, [r3, #4]
1a000446:	6818      	ldr	r0, [r3, #0]
1a000448:	f7ff fe9f 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a00044c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00044e:	4a10      	ldr	r2, [pc, #64]	; (1a000490 <Reset_Handler+0x7c>)
1a000450:	4293      	cmp	r3, r2
1a000452:	d3f4      	bcc.n	1a00043e <Reset_Handler+0x2a>
1a000454:	e006      	b.n	1a000464 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000456:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000458:	6859      	ldr	r1, [r3, #4]
1a00045a:	f854 0b08 	ldr.w	r0, [r4], #8
1a00045e:	f7ff fea3 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000462:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000464:	4a0b      	ldr	r2, [pc, #44]	; (1a000494 <Reset_Handler+0x80>)
1a000466:	4293      	cmp	r3, r2
1a000468:	d3f5      	bcc.n	1a000456 <Reset_Handler+0x42>
    SystemInit();
1a00046a:	f000 fcbd 	bl	1a000de8 <SystemInit>
    __libc_init_array();
1a00046e:	f001 f9cb 	bl	1a001808 <__libc_init_array>
    main();
1a000472:	f7ff ff71 	bl	1a000358 <main>
        __WFI();
1a000476:	bf30      	wfi
1a000478:	e7fd      	b.n	1a000476 <Reset_Handler+0x62>
1a00047a:	bf00      	nop
1a00047c:	40053100 	.word	0x40053100
1a000480:	10df1000 	.word	0x10df1000
1a000484:	01dff7ff 	.word	0x01dff7ff
1a000488:	e000e280 	.word	0xe000e280
1a00048c:	1a000114 	.word	0x1a000114
1a000490:	1a000150 	.word	0x1a000150
1a000494:	1a000178 	.word	0x1a000178

1a000498 <_init>:
void _init(void) {}
1a000498:	4770      	bx	lr
1a00049a:	Address 0x000000001a00049a is out of bounds.


1a00049c <Board_Debug_Init>:
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
}


void Board_Debug_Init(void)
{
1a00049c:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a00049e:	4c07      	ldr	r4, [pc, #28]	; (1a0004bc <Board_Debug_Init+0x20>)
1a0004a0:	4620      	mov	r0, r4
1a0004a2:	f000 f87f 	bl	1a0005a4 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0004a6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0004aa:	4620      	mov	r0, r4
1a0004ac:	f000 f8c4 	bl	1a000638 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0004b0:	2303      	movs	r3, #3
1a0004b2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0004b4:	2301      	movs	r3, #1
1a0004b6:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a0004b8:	bd10      	pop	{r4, pc}
1a0004ba:	bf00      	nop
1a0004bc:	400c1000 	.word	0x400c1000

1a0004c0 <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a0004c0:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0004c2:	f7ff ffeb 	bl	1a00049c <Board_Debug_Init>
1a0004c6:	bd08      	pop	{r3, pc}

1a0004c8 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0004c8:	2300      	movs	r3, #0
1a0004ca:	2b1c      	cmp	r3, #28
1a0004cc:	d812      	bhi.n	1a0004f4 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0004ce:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0004d0:	4a09      	ldr	r2, [pc, #36]	; (1a0004f8 <Board_SetupMuxing+0x30>)
1a0004d2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0004d6:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0004da:	784a      	ldrb	r2, [r1, #1]
1a0004dc:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0004de:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0004e2:	4906      	ldr	r1, [pc, #24]	; (1a0004fc <Board_SetupMuxing+0x34>)
1a0004e4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0004e8:	3301      	adds	r3, #1
1a0004ea:	2b1c      	cmp	r3, #28
1a0004ec:	d9f0      	bls.n	1a0004d0 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0004ee:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0004f2:	4770      	bx	lr
1a0004f4:	4770      	bx	lr
1a0004f6:	bf00      	nop
1a0004f8:	1a00186c 	.word	0x1a00186c
1a0004fc:	40086000 	.word	0x40086000

1a000500 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000500:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000502:	4a17      	ldr	r2, [pc, #92]	; (1a000560 <Board_SetupClocking+0x60>)
1a000504:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000508:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00050c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000510:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000514:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00051c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000520:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000524:	2201      	movs	r2, #1
1a000526:	490f      	ldr	r1, [pc, #60]	; (1a000564 <Board_SetupClocking+0x64>)
1a000528:	2006      	movs	r0, #6
1a00052a:	f000 fbb3 	bl	1a000c94 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00052e:	2400      	movs	r4, #0
1a000530:	b14c      	cbz	r4, 1a000546 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000532:	4b0b      	ldr	r3, [pc, #44]	; (1a000560 <Board_SetupClocking+0x60>)
1a000534:	685a      	ldr	r2, [r3, #4]
1a000536:	f022 020c 	bic.w	r2, r2, #12
1a00053a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00053c:	685a      	ldr	r2, [r3, #4]
1a00053e:	f042 0203 	orr.w	r2, r2, #3
1a000542:	605a      	str	r2, [r3, #4]
}
1a000544:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000546:	4808      	ldr	r0, [pc, #32]	; (1a000568 <Board_SetupClocking+0x68>)
1a000548:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00054c:	2301      	movs	r3, #1
1a00054e:	788a      	ldrb	r2, [r1, #2]
1a000550:	7849      	ldrb	r1, [r1, #1]
1a000552:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000556:	f000 fb07 	bl	1a000b68 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00055a:	3401      	adds	r4, #1
1a00055c:	e7e8      	b.n	1a000530 <Board_SetupClocking+0x30>
1a00055e:	bf00      	nop
1a000560:	40043000 	.word	0x40043000
1a000564:	0c28cb00 	.word	0x0c28cb00
1a000568:	1a001868 	.word	0x1a001868

1a00056c <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a00056c:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00056e:	f7ff ffab 	bl	1a0004c8 <Board_SetupMuxing>
    Board_SetupClocking();
1a000572:	f7ff ffc5 	bl	1a000500 <Board_SetupClocking>
}
1a000576:	bd08      	pop	{r3, pc}

1a000578 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000578:	4b09      	ldr	r3, [pc, #36]	; (1a0005a0 <Chip_UART_GetIndex+0x28>)
1a00057a:	4298      	cmp	r0, r3
1a00057c:	d009      	beq.n	1a000592 <Chip_UART_GetIndex+0x1a>
1a00057e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000582:	4298      	cmp	r0, r3
1a000584:	d007      	beq.n	1a000596 <Chip_UART_GetIndex+0x1e>
1a000586:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00058a:	4298      	cmp	r0, r3
1a00058c:	d005      	beq.n	1a00059a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00058e:	2000      	movs	r0, #0
1a000590:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000592:	2002      	movs	r0, #2
1a000594:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000596:	2003      	movs	r0, #3
1a000598:	4770      	bx	lr
			return 1;
1a00059a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a00059c:	4770      	bx	lr
1a00059e:	bf00      	nop
1a0005a0:	400c1000 	.word	0x400c1000

1a0005a4 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0005a4:	b530      	push	{r4, r5, lr}
1a0005a6:	b083      	sub	sp, #12
1a0005a8:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0005aa:	f7ff ffe5 	bl	1a000578 <Chip_UART_GetIndex>
1a0005ae:	2301      	movs	r3, #1
1a0005b0:	461a      	mov	r2, r3
1a0005b2:	4619      	mov	r1, r3
1a0005b4:	4d0e      	ldr	r5, [pc, #56]	; (1a0005f0 <Chip_UART_Init+0x4c>)
1a0005b6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0005ba:	f000 fb1b 	bl	1a000bf4 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0005be:	2307      	movs	r3, #7
1a0005c0:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0005c2:	2300      	movs	r3, #0
1a0005c4:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0005c6:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0005c8:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0005ca:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0005cc:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0005ce:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0005d0:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0005d2:	4b08      	ldr	r3, [pc, #32]	; (1a0005f4 <Chip_UART_Init+0x50>)
1a0005d4:	429c      	cmp	r4, r3
1a0005d6:	d006      	beq.n	1a0005e6 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0005d8:	2303      	movs	r3, #3
1a0005da:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0005dc:	2310      	movs	r3, #16
1a0005de:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0005e0:	9b01      	ldr	r3, [sp, #4]
}
1a0005e2:	b003      	add	sp, #12
1a0005e4:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0005e6:	2300      	movs	r3, #0
1a0005e8:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0005ea:	69a3      	ldr	r3, [r4, #24]
1a0005ec:	9301      	str	r3, [sp, #4]
1a0005ee:	e7f3      	b.n	1a0005d8 <Chip_UART_Init+0x34>
1a0005f0:	1a0018e8 	.word	0x1a0018e8
1a0005f4:	40082000 	.word	0x40082000

1a0005f8 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0005f8:	b538      	push	{r3, r4, r5, lr}
1a0005fa:	4605      	mov	r5, r0
1a0005fc:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0005fe:	f7ff ffbb 	bl	1a000578 <Chip_UART_GetIndex>
1a000602:	4b0c      	ldr	r3, [pc, #48]	; (1a000634 <Chip_UART_SetBaud+0x3c>)
1a000604:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000608:	f000 fb12 	bl	1a000c30 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a00060c:	0123      	lsls	r3, r4, #4
1a00060e:	fbb0 f3f3 	udiv	r3, r0, r3
1a000612:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000614:	68ea      	ldr	r2, [r5, #12]
1a000616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00061a:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a00061c:	6029      	str	r1, [r5, #0]
1a00061e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000622:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000624:	68ea      	ldr	r2, [r5, #12]
1a000626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a00062a:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a00062c:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a000630:	0900      	lsrs	r0, r0, #4
1a000632:	bd38      	pop	{r3, r4, r5, pc}
1a000634:	1a0018e0 	.word	0x1a0018e0

1a000638 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00063c:	b083      	sub	sp, #12
1a00063e:	4683      	mov	fp, r0
1a000640:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000642:	f7ff ff99 	bl	1a000578 <Chip_UART_GetIndex>
1a000646:	4b35      	ldr	r3, [pc, #212]	; (1a00071c <Chip_UART_SetBaudFDR+0xe4>)
1a000648:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00064c:	f000 faf0 	bl	1a000c30 <Chip_Clock_GetRate>
1a000650:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000652:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000656:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000658:	2300      	movs	r3, #0
1a00065a:	9301      	str	r3, [sp, #4]
1a00065c:	46a2      	mov	sl, r4
1a00065e:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000660:	e02a      	b.n	1a0006b8 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000662:	4242      	negs	r2, r0
				div ++;
1a000664:	1c4b      	adds	r3, r1, #1
1a000666:	e017      	b.n	1a000698 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000668:	b30a      	cbz	r2, 1a0006ae <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00066a:	4617      	mov	r7, r2
			sd = d;
1a00066c:	9501      	str	r5, [sp, #4]
			sm = m;
1a00066e:	46a2      	mov	sl, r4
			sdiv = div;
1a000670:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000672:	3501      	adds	r5, #1
1a000674:	42ac      	cmp	r4, r5
1a000676:	d91e      	bls.n	1a0006b6 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000678:	0933      	lsrs	r3, r6, #4
1a00067a:	0730      	lsls	r0, r6, #28
1a00067c:	fba4 0100 	umull	r0, r1, r4, r0
1a000680:	fb04 1103 	mla	r1, r4, r3, r1
1a000684:	1962      	adds	r2, r4, r5
1a000686:	fb08 f202 	mul.w	r2, r8, r2
1a00068a:	2300      	movs	r3, #0
1a00068c:	f000 ff3c 	bl	1a001508 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000690:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000692:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000694:	2800      	cmp	r0, #0
1a000696:	dbe4      	blt.n	1a000662 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000698:	4297      	cmp	r7, r2
1a00069a:	d3ea      	bcc.n	1a000672 <Chip_UART_SetBaudFDR+0x3a>
1a00069c:	2b00      	cmp	r3, #0
1a00069e:	d0e8      	beq.n	1a000672 <Chip_UART_SetBaudFDR+0x3a>
1a0006a0:	0c19      	lsrs	r1, r3, #16
1a0006a2:	d1e6      	bne.n	1a000672 <Chip_UART_SetBaudFDR+0x3a>
1a0006a4:	2b02      	cmp	r3, #2
1a0006a6:	d8df      	bhi.n	1a000668 <Chip_UART_SetBaudFDR+0x30>
1a0006a8:	2d00      	cmp	r5, #0
1a0006aa:	d0dd      	beq.n	1a000668 <Chip_UART_SetBaudFDR+0x30>
1a0006ac:	e7e1      	b.n	1a000672 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0006ae:	4617      	mov	r7, r2
			sd = d;
1a0006b0:	9501      	str	r5, [sp, #4]
			sm = m;
1a0006b2:	46a2      	mov	sl, r4
			sdiv = div;
1a0006b4:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0006b6:	3401      	adds	r4, #1
1a0006b8:	b11f      	cbz	r7, 1a0006c2 <Chip_UART_SetBaudFDR+0x8a>
1a0006ba:	2c0f      	cmp	r4, #15
1a0006bc:	d801      	bhi.n	1a0006c2 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0006be:	2500      	movs	r5, #0
1a0006c0:	e7d8      	b.n	1a000674 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0006c2:	f1b9 0f00 	cmp.w	r9, #0
1a0006c6:	d024      	beq.n	1a000712 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0006c8:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0006d0:	f8cb 300c 	str.w	r3, [fp, #12]
1a0006d4:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0006d8:	f8cb 3000 	str.w	r3, [fp]
1a0006dc:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0006e0:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0006e4:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0006e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0006ec:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0006f0:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0006f4:	b2db      	uxtb	r3, r3
1a0006f6:	9901      	ldr	r1, [sp, #4]
1a0006f8:	f001 020f 	and.w	r2, r1, #15
1a0006fc:	4313      	orrs	r3, r2
1a0006fe:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000702:	0933      	lsrs	r3, r6, #4
1a000704:	fb0a f303 	mul.w	r3, sl, r3
1a000708:	448a      	add	sl, r1
1a00070a:	fb09 f90a 	mul.w	r9, r9, sl
1a00070e:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000712:	4648      	mov	r0, r9
1a000714:	b003      	add	sp, #12
1a000716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00071a:	bf00      	nop
1a00071c:	1a0018e0 	.word	0x1a0018e0

1a000720 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000720:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000722:	680b      	ldr	r3, [r1, #0]
1a000724:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000728:	d002      	beq.n	1a000730 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00072a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00072e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000730:	4607      	mov	r7, r0
1a000732:	2501      	movs	r5, #1
1a000734:	e03b      	b.n	1a0007ae <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000736:	694b      	ldr	r3, [r1, #20]
1a000738:	fb03 f302 	mul.w	r3, r3, r2
1a00073c:	fbb3 f3f5 	udiv	r3, r3, r5
1a000740:	e014      	b.n	1a00076c <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000742:	461c      	mov	r4, r3
1a000744:	e020      	b.n	1a000788 <pll_calc_divs+0x68>
		return -val;
1a000746:	f1cc 0c00 	rsb	ip, ip, #0
1a00074a:	e020      	b.n	1a00078e <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a00074c:	3201      	adds	r2, #1
1a00074e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000752:	dc26      	bgt.n	1a0007a2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000754:	680c      	ldr	r4, [r1, #0]
1a000756:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00075a:	d0ec      	beq.n	1a000736 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00075c:	1c73      	adds	r3, r6, #1
1a00075e:	fa02 fc03 	lsl.w	ip, r2, r3
1a000762:	694b      	ldr	r3, [r1, #20]
1a000764:	fb03 f30c 	mul.w	r3, r3, ip
1a000768:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00076c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a0007bc <pll_calc_divs+0x9c>
1a000770:	4563      	cmp	r3, ip
1a000772:	d9eb      	bls.n	1a00074c <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000774:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a0007c0 <pll_calc_divs+0xa0>
1a000778:	4563      	cmp	r3, ip
1a00077a:	d812      	bhi.n	1a0007a2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a00077c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000780:	d1df      	bne.n	1a000742 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a000782:	1c74      	adds	r4, r6, #1
1a000784:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a000788:	ebb0 0c04 	subs.w	ip, r0, r4
1a00078c:	d4db      	bmi.n	1a000746 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a00078e:	4567      	cmp	r7, ip
1a000790:	d9dc      	bls.n	1a00074c <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a000792:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000794:	1c77      	adds	r7, r6, #1
1a000796:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000798:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00079a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a00079c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00079e:	4667      	mov	r7, ip
1a0007a0:	e7d4      	b.n	1a00074c <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a0007a2:	3601      	adds	r6, #1
1a0007a4:	2e03      	cmp	r6, #3
1a0007a6:	dc01      	bgt.n	1a0007ac <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a0007a8:	2201      	movs	r2, #1
1a0007aa:	e7d0      	b.n	1a00074e <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a0007ac:	3501      	adds	r5, #1
1a0007ae:	2d04      	cmp	r5, #4
1a0007b0:	dc01      	bgt.n	1a0007b6 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a0007b2:	2600      	movs	r6, #0
1a0007b4:	e7f6      	b.n	1a0007a4 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a0007b6:	bcf0      	pop	{r4, r5, r6, r7}
1a0007b8:	4770      	bx	lr
1a0007ba:	bf00      	nop
1a0007bc:	094c5eff 	.word	0x094c5eff
1a0007c0:	1312d000 	.word	0x1312d000

1a0007c4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0007c6:	b099      	sub	sp, #100	; 0x64
1a0007c8:	4605      	mov	r5, r0
1a0007ca:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0007cc:	225c      	movs	r2, #92	; 0x5c
1a0007ce:	2100      	movs	r1, #0
1a0007d0:	a801      	add	r0, sp, #4
1a0007d2:	f001 f83d 	bl	1a001850 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0007d6:	2380      	movs	r3, #128	; 0x80
1a0007d8:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0007da:	6963      	ldr	r3, [r4, #20]
1a0007dc:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0007de:	7923      	ldrb	r3, [r4, #4]
1a0007e0:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0007e4:	4669      	mov	r1, sp
1a0007e6:	4628      	mov	r0, r5
1a0007e8:	f7ff ff9a 	bl	1a000720 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0007ec:	9b06      	ldr	r3, [sp, #24]
1a0007ee:	42ab      	cmp	r3, r5
1a0007f0:	d027      	beq.n	1a000842 <pll_get_frac+0x7e>
	if (val < 0)
1a0007f2:	1aeb      	subs	r3, r5, r3
1a0007f4:	d42e      	bmi.n	1a000854 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0007f6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0007f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0007fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0007fe:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000800:	6963      	ldr	r3, [r4, #20]
1a000802:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000804:	7923      	ldrb	r3, [r4, #4]
1a000806:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00080a:	a910      	add	r1, sp, #64	; 0x40
1a00080c:	4628      	mov	r0, r5
1a00080e:	f7ff ff87 	bl	1a000720 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000812:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000814:	42ab      	cmp	r3, r5
1a000816:	d01f      	beq.n	1a000858 <pll_get_frac+0x94>
	if (val < 0)
1a000818:	1aeb      	subs	r3, r5, r3
1a00081a:	d425      	bmi.n	1a000868 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a00081c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00081e:	4b2b      	ldr	r3, [pc, #172]	; (1a0008cc <pll_get_frac+0x108>)
1a000820:	429d      	cmp	r5, r3
1a000822:	d923      	bls.n	1a00086c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000826:	1aed      	subs	r5, r5, r3
1a000828:	d433      	bmi.n	1a000892 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00082a:	42ae      	cmp	r6, r5
1a00082c:	dc3b      	bgt.n	1a0008a6 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00082e:	42be      	cmp	r6, r7
1a000830:	dc31      	bgt.n	1a000896 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000832:	466d      	mov	r5, sp
1a000834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000838:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00083c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000840:	e006      	b.n	1a000850 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000842:	466d      	mov	r5, sp
1a000844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000848:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00084c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000850:	b019      	add	sp, #100	; 0x64
1a000852:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000854:	425b      	negs	r3, r3
1a000856:	e7ce      	b.n	1a0007f6 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000858:	ad10      	add	r5, sp, #64	; 0x40
1a00085a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00085c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00085e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000862:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000866:	e7f3      	b.n	1a000850 <pll_get_frac+0x8c>
		return -val;
1a000868:	425b      	negs	r3, r3
1a00086a:	e7d7      	b.n	1a00081c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a00086c:	2340      	movs	r3, #64	; 0x40
1a00086e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000870:	6963      	ldr	r3, [r4, #20]
1a000872:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000874:	a908      	add	r1, sp, #32
1a000876:	4628      	mov	r0, r5
1a000878:	f7ff ff52 	bl	1a000720 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00087c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00087e:	42ab      	cmp	r3, r5
1a000880:	d1d0      	bne.n	1a000824 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000882:	ad08      	add	r5, sp, #32
1a000884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000888:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00088c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000890:	e7de      	b.n	1a000850 <pll_get_frac+0x8c>
		return -val;
1a000892:	426d      	negs	r5, r5
1a000894:	e7c9      	b.n	1a00082a <pll_get_frac+0x66>
			*ppll = pll[2];
1a000896:	ad10      	add	r5, sp, #64	; 0x40
1a000898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00089a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00089c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0008a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0008a4:	e7d4      	b.n	1a000850 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0008a6:	42af      	cmp	r7, r5
1a0008a8:	db07      	blt.n	1a0008ba <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0008aa:	ad08      	add	r5, sp, #32
1a0008ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0008ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0008b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0008b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0008b8:	e7ca      	b.n	1a000850 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0008ba:	ad10      	add	r5, sp, #64	; 0x40
1a0008bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0008be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0008c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0008c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0008c8:	e7c2      	b.n	1a000850 <pll_get_frac+0x8c>
1a0008ca:	bf00      	nop
1a0008cc:	068e7780 	.word	0x068e7780

1a0008d0 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0008d0:	b430      	push	{r4, r5}
1a0008d2:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0008d4:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0008d6:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0008d8:	e000      	b.n	1a0008dc <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0008da:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0008dc:	281c      	cmp	r0, #28
1a0008de:	d118      	bne.n	1a000912 <Chip_Clock_FindBaseClock+0x42>
1a0008e0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0008e4:	0051      	lsls	r1, r2, #1
1a0008e6:	4a0c      	ldr	r2, [pc, #48]	; (1a000918 <Chip_Clock_FindBaseClock+0x48>)
1a0008e8:	440a      	add	r2, r1
1a0008ea:	7914      	ldrb	r4, [r2, #4]
1a0008ec:	4284      	cmp	r4, r0
1a0008ee:	d010      	beq.n	1a000912 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0008f0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0008f4:	004a      	lsls	r2, r1, #1
1a0008f6:	4908      	ldr	r1, [pc, #32]	; (1a000918 <Chip_Clock_FindBaseClock+0x48>)
1a0008f8:	5a8a      	ldrh	r2, [r1, r2]
1a0008fa:	42aa      	cmp	r2, r5
1a0008fc:	d8ed      	bhi.n	1a0008da <Chip_Clock_FindBaseClock+0xa>
1a0008fe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000902:	0051      	lsls	r1, r2, #1
1a000904:	4a04      	ldr	r2, [pc, #16]	; (1a000918 <Chip_Clock_FindBaseClock+0x48>)
1a000906:	440a      	add	r2, r1
1a000908:	8852      	ldrh	r2, [r2, #2]
1a00090a:	42aa      	cmp	r2, r5
1a00090c:	d3e5      	bcc.n	1a0008da <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00090e:	4620      	mov	r0, r4
1a000910:	e7e4      	b.n	1a0008dc <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000912:	bc30      	pop	{r4, r5}
1a000914:	4770      	bx	lr
1a000916:	bf00      	nop
1a000918:	1a0018fc 	.word	0x1a0018fc

1a00091c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00091c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000922:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000924:	4a0d      	ldr	r2, [pc, #52]	; (1a00095c <Chip_Clock_EnableCrystal+0x40>)
1a000926:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000928:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a00092c:	6992      	ldr	r2, [r2, #24]
1a00092e:	428a      	cmp	r2, r1
1a000930:	d001      	beq.n	1a000936 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000932:	4a0a      	ldr	r2, [pc, #40]	; (1a00095c <Chip_Clock_EnableCrystal+0x40>)
1a000934:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000936:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00093a:	4a09      	ldr	r2, [pc, #36]	; (1a000960 <Chip_Clock_EnableCrystal+0x44>)
1a00093c:	6811      	ldr	r1, [r2, #0]
1a00093e:	4a09      	ldr	r2, [pc, #36]	; (1a000964 <Chip_Clock_EnableCrystal+0x48>)
1a000940:	4291      	cmp	r1, r2
1a000942:	d901      	bls.n	1a000948 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000944:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000948:	4a04      	ldr	r2, [pc, #16]	; (1a00095c <Chip_Clock_EnableCrystal+0x40>)
1a00094a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a00094c:	9b01      	ldr	r3, [sp, #4]
1a00094e:	1e5a      	subs	r2, r3, #1
1a000950:	9201      	str	r2, [sp, #4]
1a000952:	2b00      	cmp	r3, #0
1a000954:	d1fa      	bne.n	1a00094c <Chip_Clock_EnableCrystal+0x30>
}
1a000956:	b002      	add	sp, #8
1a000958:	4770      	bx	lr
1a00095a:	bf00      	nop
1a00095c:	40050000 	.word	0x40050000
1a000960:	1a001864 	.word	0x1a001864
1a000964:	01312cff 	.word	0x01312cff

1a000968 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000968:	3012      	adds	r0, #18
1a00096a:	4b05      	ldr	r3, [pc, #20]	; (1a000980 <Chip_Clock_GetDividerSource+0x18>)
1a00096c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000970:	f010 0f01 	tst.w	r0, #1
1a000974:	d102      	bne.n	1a00097c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000976:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00097a:	4770      	bx	lr
		return CLKINPUT_PD;
1a00097c:	2011      	movs	r0, #17
}
1a00097e:	4770      	bx	lr
1a000980:	40050000 	.word	0x40050000

1a000984 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000984:	f100 0212 	add.w	r2, r0, #18
1a000988:	4b03      	ldr	r3, [pc, #12]	; (1a000998 <Chip_Clock_GetDividerDivisor+0x14>)
1a00098a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00098e:	4b03      	ldr	r3, [pc, #12]	; (1a00099c <Chip_Clock_GetDividerDivisor+0x18>)
1a000990:	5c18      	ldrb	r0, [r3, r0]
}
1a000992:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000996:	4770      	bx	lr
1a000998:	40050000 	.word	0x40050000
1a00099c:	1a0018f4 	.word	0x1a0018f4

1a0009a0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0009a0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0009a2:	2810      	cmp	r0, #16
1a0009a4:	d80a      	bhi.n	1a0009bc <Chip_Clock_GetClockInputHz+0x1c>
1a0009a6:	e8df f000 	tbb	[pc, r0]
1a0009aa:	0b42      	.short	0x0b42
1a0009ac:	091f160d 	.word	0x091f160d
1a0009b0:	2b282522 	.word	0x2b282522
1a0009b4:	322e0909 	.word	0x322e0909
1a0009b8:	3a36      	.short	0x3a36
1a0009ba:	3e          	.byte	0x3e
1a0009bb:	00          	.byte	0x00
	uint32_t rate = 0;
1a0009bc:	2000      	movs	r0, #0
1a0009be:	e038      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0009c0:	481e      	ldr	r0, [pc, #120]	; (1a000a3c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0009c2:	e036      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0009c4:	4b1e      	ldr	r3, [pc, #120]	; (1a000a40 <Chip_Clock_GetClockInputHz+0xa0>)
1a0009c6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0009ca:	f003 0307 	and.w	r3, r3, #7
1a0009ce:	2b04      	cmp	r3, #4
1a0009d0:	d130      	bne.n	1a000a34 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0009d2:	2000      	movs	r0, #0
1a0009d4:	e02d      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0009d6:	4b1a      	ldr	r3, [pc, #104]	; (1a000a40 <Chip_Clock_GetClockInputHz+0xa0>)
1a0009d8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0009dc:	f003 0307 	and.w	r3, r3, #7
1a0009e0:	2b04      	cmp	r3, #4
1a0009e2:	d029      	beq.n	1a000a38 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0009e4:	4817      	ldr	r0, [pc, #92]	; (1a000a44 <Chip_Clock_GetClockInputHz+0xa4>)
1a0009e6:	e024      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0009e8:	4b17      	ldr	r3, [pc, #92]	; (1a000a48 <Chip_Clock_GetClockInputHz+0xa8>)
1a0009ea:	6818      	ldr	r0, [r3, #0]
		break;
1a0009ec:	e021      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0009ee:	4b17      	ldr	r3, [pc, #92]	; (1a000a4c <Chip_Clock_GetClockInputHz+0xac>)
1a0009f0:	6818      	ldr	r0, [r3, #0]
		break;
1a0009f2:	e01e      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0009f4:	4b16      	ldr	r3, [pc, #88]	; (1a000a50 <Chip_Clock_GetClockInputHz+0xb0>)
1a0009f6:	6818      	ldr	r0, [r3, #0]
		break;
1a0009f8:	e01b      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0009fa:	4b15      	ldr	r3, [pc, #84]	; (1a000a50 <Chip_Clock_GetClockInputHz+0xb0>)
1a0009fc:	6858      	ldr	r0, [r3, #4]
		break;
1a0009fe:	e018      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000a00:	f000 f86a 	bl	1a000ad8 <Chip_Clock_GetMainPLLHz>
		break;
1a000a04:	e015      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000a06:	2100      	movs	r1, #0
1a000a08:	f000 f89c 	bl	1a000b44 <Chip_Clock_GetDivRate>
		break;
1a000a0c:	e011      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000a0e:	2101      	movs	r1, #1
1a000a10:	f000 f898 	bl	1a000b44 <Chip_Clock_GetDivRate>
		break;
1a000a14:	e00d      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000a16:	2102      	movs	r1, #2
1a000a18:	f000 f894 	bl	1a000b44 <Chip_Clock_GetDivRate>
		break;
1a000a1c:	e009      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000a1e:	2103      	movs	r1, #3
1a000a20:	f000 f890 	bl	1a000b44 <Chip_Clock_GetDivRate>
		break;
1a000a24:	e005      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000a26:	2104      	movs	r1, #4
1a000a28:	f000 f88c 	bl	1a000b44 <Chip_Clock_GetDivRate>
		break;
1a000a2c:	e001      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a000a2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000a32:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a000a34:	4803      	ldr	r0, [pc, #12]	; (1a000a44 <Chip_Clock_GetClockInputHz+0xa4>)
1a000a36:	e7fc      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a000a38:	4806      	ldr	r0, [pc, #24]	; (1a000a54 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000a3a:	e7fa      	b.n	1a000a32 <Chip_Clock_GetClockInputHz+0x92>
1a000a3c:	00b71b00 	.word	0x00b71b00
1a000a40:	40043000 	.word	0x40043000
1a000a44:	017d7840 	.word	0x017d7840
1a000a48:	1a001860 	.word	0x1a001860
1a000a4c:	1a001864 	.word	0x1a001864
1a000a50:	10000090 	.word	0x10000090
1a000a54:	02faf080 	.word	0x02faf080

1a000a58 <Chip_Clock_CalcMainPLLValue>:
{
1a000a58:	b538      	push	{r3, r4, r5, lr}
1a000a5a:	4605      	mov	r5, r0
1a000a5c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000a5e:	7908      	ldrb	r0, [r1, #4]
1a000a60:	f7ff ff9e 	bl	1a0009a0 <Chip_Clock_GetClockInputHz>
1a000a64:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000a66:	4b19      	ldr	r3, [pc, #100]	; (1a000acc <Chip_Clock_CalcMainPLLValue+0x74>)
1a000a68:	442b      	add	r3, r5
1a000a6a:	4a19      	ldr	r2, [pc, #100]	; (1a000ad0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000a6c:	4293      	cmp	r3, r2
1a000a6e:	d821      	bhi.n	1a000ab4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000a70:	b318      	cbz	r0, 1a000aba <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000a72:	2380      	movs	r3, #128	; 0x80
1a000a74:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000a76:	2300      	movs	r3, #0
1a000a78:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000a7a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000a7c:	fbb5 f3f0 	udiv	r3, r5, r0
1a000a80:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000a82:	4a14      	ldr	r2, [pc, #80]	; (1a000ad4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000a84:	4295      	cmp	r5, r2
1a000a86:	d903      	bls.n	1a000a90 <Chip_Clock_CalcMainPLLValue+0x38>
1a000a88:	fb03 f000 	mul.w	r0, r3, r0
1a000a8c:	42a8      	cmp	r0, r5
1a000a8e:	d007      	beq.n	1a000aa0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000a90:	4621      	mov	r1, r4
1a000a92:	4628      	mov	r0, r5
1a000a94:	f7ff fe96 	bl	1a0007c4 <pll_get_frac>
		if (!ppll->nsel) {
1a000a98:	68a3      	ldr	r3, [r4, #8]
1a000a9a:	b18b      	cbz	r3, 1a000ac0 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000a9c:	3b01      	subs	r3, #1
1a000a9e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000aa0:	6923      	ldr	r3, [r4, #16]
1a000aa2:	b183      	cbz	r3, 1a000ac6 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000aa4:	68e2      	ldr	r2, [r4, #12]
1a000aa6:	b10a      	cbz	r2, 1a000aac <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000aa8:	3a01      	subs	r2, #1
1a000aaa:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000aac:	3b01      	subs	r3, #1
1a000aae:	6123      	str	r3, [r4, #16]
	return 0;
1a000ab0:	2000      	movs	r0, #0
}
1a000ab2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ab8:	e7fb      	b.n	1a000ab2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000abe:	e7f8      	b.n	1a000ab2 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ac4:	e7f5      	b.n	1a000ab2 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000aca:	e7f2      	b.n	1a000ab2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000acc:	ff6b3a10 	.word	0xff6b3a10
1a000ad0:	0b940510 	.word	0x0b940510
1a000ad4:	094c5eff 	.word	0x094c5eff

1a000ad8 <Chip_Clock_GetMainPLLHz>:
{
1a000ad8:	b530      	push	{r4, r5, lr}
1a000ada:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000adc:	4d17      	ldr	r5, [pc, #92]	; (1a000b3c <Chip_Clock_GetMainPLLHz+0x64>)
1a000ade:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000ae0:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000ae4:	f7ff ff5c 	bl	1a0009a0 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000ae8:	4b15      	ldr	r3, [pc, #84]	; (1a000b40 <Chip_Clock_GetMainPLLHz+0x68>)
1a000aea:	681b      	ldr	r3, [r3, #0]
1a000aec:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000aee:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000af0:	f013 0f01 	tst.w	r3, #1
1a000af4:	d01f      	beq.n	1a000b36 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a000af6:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000afa:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000afe:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000b02:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000b06:	3301      	adds	r3, #1
	n = nsel + 1;
1a000b08:	3201      	adds	r2, #1
	p = ptab[psel];
1a000b0a:	f10d 0c08 	add.w	ip, sp, #8
1a000b0e:	4461      	add	r1, ip
1a000b10:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000b14:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000b18:	d108      	bne.n	1a000b2c <Chip_Clock_GetMainPLLHz+0x54>
1a000b1a:	b93d      	cbnz	r5, 1a000b2c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000b1c:	0049      	lsls	r1, r1, #1
1a000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
1a000b22:	fbb0 f0f2 	udiv	r0, r0, r2
1a000b26:	fb00 f003 	mul.w	r0, r0, r3
1a000b2a:	e005      	b.n	1a000b38 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a000b2c:	fbb0 f0f2 	udiv	r0, r0, r2
1a000b30:	fb03 f000 	mul.w	r0, r3, r0
1a000b34:	e000      	b.n	1a000b38 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a000b36:	2000      	movs	r0, #0
}
1a000b38:	b003      	add	sp, #12
1a000b3a:	bd30      	pop	{r4, r5, pc}
1a000b3c:	40050000 	.word	0x40050000
1a000b40:	1a0018f0 	.word	0x1a0018f0

1a000b44 <Chip_Clock_GetDivRate>:
{
1a000b44:	b538      	push	{r3, r4, r5, lr}
1a000b46:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000b48:	4608      	mov	r0, r1
1a000b4a:	f7ff ff0d 	bl	1a000968 <Chip_Clock_GetDividerSource>
1a000b4e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000b50:	4620      	mov	r0, r4
1a000b52:	f7ff ff17 	bl	1a000984 <Chip_Clock_GetDividerDivisor>
1a000b56:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000b58:	4628      	mov	r0, r5
1a000b5a:	f7ff ff21 	bl	1a0009a0 <Chip_Clock_GetClockInputHz>
1a000b5e:	3401      	adds	r4, #1
}
1a000b60:	fbb0 f0f4 	udiv	r0, r0, r4
1a000b64:	bd38      	pop	{r3, r4, r5, pc}
1a000b66:	Address 0x000000001a000b66 is out of bounds.


1a000b68 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000b68:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000b6a:	f100 0416 	add.w	r4, r0, #22
1a000b6e:	00a4      	lsls	r4, r4, #2
1a000b70:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000b74:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000b78:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000b7a:	281b      	cmp	r0, #27
1a000b7c:	d813      	bhi.n	1a000ba6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000b7e:	2911      	cmp	r1, #17
1a000b80:	d01a      	beq.n	1a000bb8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000b82:	4d0e      	ldr	r5, [pc, #56]	; (1a000bbc <Chip_Clock_SetBaseClock+0x54>)
1a000b84:	4025      	ands	r5, r4

			if (autoblocken) {
1a000b86:	b10a      	cbz	r2, 1a000b8c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000b88:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000b8c:	b10b      	cbz	r3, 1a000b92 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000b8e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000b92:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000b96:	3016      	adds	r0, #22
1a000b98:	0080      	lsls	r0, r0, #2
1a000b9a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000b9e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000ba2:	6045      	str	r5, [r0, #4]
1a000ba4:	e008      	b.n	1a000bb8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000ba6:	f044 0401 	orr.w	r4, r4, #1
1a000baa:	3016      	adds	r0, #22
1a000bac:	0080      	lsls	r0, r0, #2
1a000bae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000bb2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000bb6:	6044      	str	r4, [r0, #4]
	}
}
1a000bb8:	bc30      	pop	{r4, r5}
1a000bba:	4770      	bx	lr
1a000bbc:	e0fff7fe 	.word	0xe0fff7fe

1a000bc0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000bc0:	281b      	cmp	r0, #27
1a000bc2:	d80c      	bhi.n	1a000bde <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000bc4:	3016      	adds	r0, #22
1a000bc6:	0080      	lsls	r0, r0, #2
1a000bc8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000bcc:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000bd0:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000bd2:	f010 0f01 	tst.w	r0, #1
1a000bd6:	d104      	bne.n	1a000be2 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000bd8:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000bdc:	4770      	bx	lr
		return CLKINPUT_PD;
1a000bde:	2011      	movs	r0, #17
1a000be0:	4770      	bx	lr
		return CLKINPUT_PD;
1a000be2:	2011      	movs	r0, #17
}
1a000be4:	4770      	bx	lr

1a000be6 <Chip_Clock_GetBaseClocktHz>:
{
1a000be6:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000be8:	f7ff ffea 	bl	1a000bc0 <Chip_Clock_GetBaseClock>
1a000bec:	f7ff fed8 	bl	1a0009a0 <Chip_Clock_GetClockInputHz>
}
1a000bf0:	bd08      	pop	{r3, pc}
1a000bf2:	Address 0x000000001a000bf2 is out of bounds.


1a000bf4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000bf4:	b969      	cbnz	r1, 1a000c12 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a000bf6:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000bf8:	b10a      	cbz	r2, 1a000bfe <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000bfa:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000bfe:	2b02      	cmp	r3, #2
1a000c00:	d009      	beq.n	1a000c16 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000c02:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000c06:	d209      	bcs.n	1a000c1c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000c08:	3020      	adds	r0, #32
1a000c0a:	4b07      	ldr	r3, [pc, #28]	; (1a000c28 <Chip_Clock_EnableOpts+0x34>)
1a000c0c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000c10:	4770      	bx	lr
		reg |= (1 << 1);
1a000c12:	2103      	movs	r1, #3
1a000c14:	e7f0      	b.n	1a000bf8 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000c16:	f041 0120 	orr.w	r1, r1, #32
1a000c1a:	e7f2      	b.n	1a000c02 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000c1c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000c20:	4b02      	ldr	r3, [pc, #8]	; (1a000c2c <Chip_Clock_EnableOpts+0x38>)
1a000c22:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000c26:	4770      	bx	lr
1a000c28:	40051000 	.word	0x40051000
1a000c2c:	40052000 	.word	0x40052000

1a000c30 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000c30:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a000c32:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000c36:	d309      	bcc.n	1a000c4c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000c38:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000c3c:	4a0d      	ldr	r2, [pc, #52]	; (1a000c74 <Chip_Clock_GetRate+0x44>)
1a000c3e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a000c42:	f014 0f01 	tst.w	r4, #1
1a000c46:	d107      	bne.n	1a000c58 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a000c48:	2000      	movs	r0, #0
	}

	return rate;
}
1a000c4a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000c4c:	f100 0320 	add.w	r3, r0, #32
1a000c50:	4a09      	ldr	r2, [pc, #36]	; (1a000c78 <Chip_Clock_GetRate+0x48>)
1a000c52:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000c56:	e7f4      	b.n	1a000c42 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a000c58:	f7ff fe3a 	bl	1a0008d0 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000c5c:	f7ff ffc3 	bl	1a000be6 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a000c60:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000c64:	d103      	bne.n	1a000c6e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a000c66:	2301      	movs	r3, #1
		rate = rate / div;
1a000c68:	fbb0 f0f3 	udiv	r0, r0, r3
1a000c6c:	e7ed      	b.n	1a000c4a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a000c6e:	2302      	movs	r3, #2
1a000c70:	e7fa      	b.n	1a000c68 <Chip_Clock_GetRate+0x38>
1a000c72:	bf00      	nop
1a000c74:	40052000 	.word	0x40052000
1a000c78:	40051000 	.word	0x40051000

1a000c7c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000c7c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000c7e:	2069      	movs	r0, #105	; 0x69
1a000c80:	f7ff ffd6 	bl	1a000c30 <Chip_Clock_GetRate>
1a000c84:	4b01      	ldr	r3, [pc, #4]	; (1a000c8c <SystemCoreClockUpdate+0x10>)
1a000c86:	6018      	str	r0, [r3, #0]
}
1a000c88:	bd08      	pop	{r3, pc}
1a000c8a:	bf00      	nop
1a000c8c:	100000f0 	.word	0x100000f0

1a000c90 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000c90:	4770      	bx	lr
1a000c92:	Address 0x000000001a000c92 is out of bounds.


1a000c94 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000c94:	b570      	push	{r4, r5, r6, lr}
1a000c96:	b08a      	sub	sp, #40	; 0x28
1a000c98:	4605      	mov	r5, r0
1a000c9a:	460e      	mov	r6, r1
1a000c9c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000c9e:	f242 7310 	movw	r3, #10000	; 0x2710
1a000ca2:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000ca4:	2806      	cmp	r0, #6
1a000ca6:	d018      	beq.n	1a000cda <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000ca8:	2300      	movs	r3, #0
1a000caa:	2201      	movs	r2, #1
1a000cac:	4629      	mov	r1, r5
1a000cae:	2004      	movs	r0, #4
1a000cb0:	f7ff ff5a 	bl	1a000b68 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000cb4:	4a49      	ldr	r2, [pc, #292]	; (1a000ddc <Chip_SetupCoreClock+0x148>)
1a000cb6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000cb8:	f043 0301 	orr.w	r3, r3, #1
1a000cbc:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000cbe:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000cc2:	a901      	add	r1, sp, #4
1a000cc4:	4630      	mov	r0, r6
1a000cc6:	f7ff fec7 	bl	1a000a58 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000cca:	4b45      	ldr	r3, [pc, #276]	; (1a000de0 <Chip_SetupCoreClock+0x14c>)
1a000ccc:	429e      	cmp	r6, r3
1a000cce:	d916      	bls.n	1a000cfe <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000cd0:	9b01      	ldr	r3, [sp, #4]
1a000cd2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000cd6:	d003      	beq.n	1a000ce0 <Chip_SetupCoreClock+0x4c>
1a000cd8:	e7fe      	b.n	1a000cd8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000cda:	f7ff fe1f 	bl	1a00091c <Chip_Clock_EnableCrystal>
1a000cde:	e7e3      	b.n	1a000ca8 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a000ce0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000ce4:	d005      	beq.n	1a000cf2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000cea:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000cec:	2500      	movs	r5, #0
			direct = 1;
1a000cee:	2601      	movs	r6, #1
1a000cf0:	e007      	b.n	1a000d02 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000cf2:	9b04      	ldr	r3, [sp, #16]
1a000cf4:	3301      	adds	r3, #1
1a000cf6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000cf8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000cfa:	2600      	movs	r6, #0
1a000cfc:	e001      	b.n	1a000d02 <Chip_SetupCoreClock+0x6e>
1a000cfe:	2500      	movs	r5, #0
1a000d00:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000d02:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000d06:	9b01      	ldr	r3, [sp, #4]
1a000d08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000d0c:	9a05      	ldr	r2, [sp, #20]
1a000d0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000d12:	9a03      	ldr	r2, [sp, #12]
1a000d14:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000d18:	9a04      	ldr	r2, [sp, #16]
1a000d1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000d1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000d22:	4a2e      	ldr	r2, [pc, #184]	; (1a000ddc <Chip_SetupCoreClock+0x148>)
1a000d24:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000d26:	4b2d      	ldr	r3, [pc, #180]	; (1a000ddc <Chip_SetupCoreClock+0x148>)
1a000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000d2a:	f013 0f01 	tst.w	r3, #1
1a000d2e:	d0fa      	beq.n	1a000d26 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000d30:	2300      	movs	r3, #0
1a000d32:	2201      	movs	r2, #1
1a000d34:	2109      	movs	r1, #9
1a000d36:	2004      	movs	r0, #4
1a000d38:	f7ff ff16 	bl	1a000b68 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000d3c:	b1fe      	cbz	r6, 1a000d7e <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000d3e:	f242 7310 	movw	r3, #10000	; 0x2710
1a000d42:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000d46:	1e5a      	subs	r2, r3, #1
1a000d48:	9209      	str	r2, [sp, #36]	; 0x24
1a000d4a:	2b00      	cmp	r3, #0
1a000d4c:	d1fa      	bne.n	1a000d44 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000d4e:	9b01      	ldr	r3, [sp, #4]
1a000d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000d54:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000d56:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000d5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000d5e:	9a05      	ldr	r2, [sp, #20]
1a000d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000d64:	9a03      	ldr	r2, [sp, #12]
1a000d66:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000d6a:	9a04      	ldr	r2, [sp, #16]
1a000d6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000d70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000d74:	4a19      	ldr	r2, [pc, #100]	; (1a000ddc <Chip_SetupCoreClock+0x148>)
1a000d76:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a000d78:	b36c      	cbz	r4, 1a000dd6 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000d7a:	2400      	movs	r4, #0
1a000d7c:	e029      	b.n	1a000dd2 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a000d7e:	2d00      	cmp	r5, #0
1a000d80:	d0fa      	beq.n	1a000d78 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000d82:	f242 7310 	movw	r3, #10000	; 0x2710
1a000d86:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a000d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000d8a:	1e5a      	subs	r2, r3, #1
1a000d8c:	9209      	str	r2, [sp, #36]	; 0x24
1a000d8e:	2b00      	cmp	r3, #0
1a000d90:	d1fa      	bne.n	1a000d88 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a000d92:	9b04      	ldr	r3, [sp, #16]
1a000d94:	1e5a      	subs	r2, r3, #1
1a000d96:	9204      	str	r2, [sp, #16]
1a000d98:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a000d9c:	9b01      	ldr	r3, [sp, #4]
1a000d9e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a000da2:	9905      	ldr	r1, [sp, #20]
1a000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a000da8:	9903      	ldr	r1, [sp, #12]
1a000daa:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a000dae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000db2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000db6:	4a09      	ldr	r2, [pc, #36]	; (1a000ddc <Chip_SetupCoreClock+0x148>)
1a000db8:	6453      	str	r3, [r2, #68]	; 0x44
1a000dba:	e7dd      	b.n	1a000d78 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000dbc:	4809      	ldr	r0, [pc, #36]	; (1a000de4 <Chip_SetupCoreClock+0x150>)
1a000dbe:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000dc2:	78cb      	ldrb	r3, [r1, #3]
1a000dc4:	788a      	ldrb	r2, [r1, #2]
1a000dc6:	7849      	ldrb	r1, [r1, #1]
1a000dc8:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000dcc:	f7ff fecc 	bl	1a000b68 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000dd0:	3401      	adds	r4, #1
1a000dd2:	2c11      	cmp	r4, #17
1a000dd4:	d9f2      	bls.n	1a000dbc <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a000dd6:	b00a      	add	sp, #40	; 0x28
1a000dd8:	bd70      	pop	{r4, r5, r6, pc}
1a000dda:	bf00      	nop
1a000ddc:	40050000 	.word	0x40050000
1a000de0:	068e7780 	.word	0x068e7780
1a000de4:	1a001968 	.word	0x1a001968

1a000de8 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a000de8:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a000dea:	4a0a      	ldr	r2, [pc, #40]	; (1a000e14 <SystemInit+0x2c>)
1a000dec:	4b0a      	ldr	r3, [pc, #40]	; (1a000e18 <SystemInit+0x30>)
1a000dee:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a000df0:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a000df4:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a000df6:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a000dfa:	2b20      	cmp	r3, #32
1a000dfc:	d002      	beq.n	1a000e04 <SystemInit+0x1c>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a000dfe:	f7ff fbb5 	bl	1a00056c <Board_SystemInit>
}
1a000e02:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a000e04:	4a04      	ldr	r2, [pc, #16]	; (1a000e18 <SystemInit+0x30>)
1a000e06:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a000e0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a000e0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a000e12:	e7f4      	b.n	1a000dfe <SystemInit+0x16>
1a000e14:	1a000000 	.word	0x1a000000
1a000e18:	e000ed00 	.word	0xe000ed00

1a000e1c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a000e1c:	4b04      	ldr	r3, [pc, #16]	; (1a000e30 <cyclesCounterInit+0x14>)
1a000e1e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a000e20:	4b04      	ldr	r3, [pc, #16]	; (1a000e34 <cyclesCounterInit+0x18>)
1a000e22:	681a      	ldr	r2, [r3, #0]
1a000e24:	6813      	ldr	r3, [r2, #0]
1a000e26:	f043 0301 	orr.w	r3, r3, #1
1a000e2a:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a000e2c:	2001      	movs	r0, #1
1a000e2e:	4770      	bx	lr
1a000e30:	10000000 	.word	0x10000000
1a000e34:	10000004 	.word	0x10000004

1a000e38 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a000e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000e3c:	4680      	mov	r8, r0
1a000e3e:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a000e40:	4c19      	ldr	r4, [pc, #100]	; (1a000ea8 <uartInit+0x70>)
1a000e42:	0045      	lsls	r5, r0, #1
1a000e44:	182a      	adds	r2, r5, r0
1a000e46:	0093      	lsls	r3, r2, #2
1a000e48:	18e6      	adds	r6, r4, r3
1a000e4a:	58e7      	ldr	r7, [r4, r3]
1a000e4c:	4638      	mov	r0, r7
1a000e4e:	f7ff fba9 	bl	1a0005a4 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a000e52:	4649      	mov	r1, r9
1a000e54:	4638      	mov	r0, r7
1a000e56:	f7ff fbcf 	bl	1a0005f8 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a000e5a:	2307      	movs	r3, #7
1a000e5c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000e5e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a000e60:	2301      	movs	r3, #1
1a000e62:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a000e64:	7930      	ldrb	r0, [r6, #4]
1a000e66:	7973      	ldrb	r3, [r6, #5]
1a000e68:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000e6a:	f042 0218 	orr.w	r2, r2, #24
1a000e6e:	490f      	ldr	r1, [pc, #60]	; (1a000eac <uartInit+0x74>)
1a000e70:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a000e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a000e78:	79f0      	ldrb	r0, [r6, #7]
1a000e7a:	7a33      	ldrb	r3, [r6, #8]
1a000e7c:	7a72      	ldrb	r2, [r6, #9]
1a000e7e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a000e82:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a000e8a:	f1b8 0f01 	cmp.w	r8, #1
1a000e8e:	d001      	beq.n	1a000e94 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a000e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a000e94:	4a06      	ldr	r2, [pc, #24]	; (1a000eb0 <uartInit+0x78>)
1a000e96:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a000e98:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a000e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a000e9e:	221a      	movs	r2, #26
1a000ea0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a000ea4:	e7f4      	b.n	1a000e90 <uartInit+0x58>
1a000ea6:	bf00      	nop
1a000ea8:	1a0019b0 	.word	0x1a0019b0
1a000eac:	40086000 	.word	0x40086000
1a000eb0:	40081000 	.word	0x40081000

1a000eb4 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a000eb4:	4b01      	ldr	r3, [pc, #4]	; (1a000ebc <tickRead+0x8>)
1a000eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
1a000eba:	4770      	bx	lr
1a000ebc:	100000a0 	.word	0x100000a0

1a000ec0 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a000ec0:	b918      	cbnz	r0, 1a000eca <tickPowerSet+0xa>
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a000ec2:	4b04      	ldr	r3, [pc, #16]	; (1a000ed4 <tickPowerSet+0x14>)
1a000ec4:	2200      	movs	r2, #0
1a000ec6:	601a      	str	r2, [r3, #0]
   }
}
1a000ec8:	4770      	bx	lr
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a000eca:	4b02      	ldr	r3, [pc, #8]	; (1a000ed4 <tickPowerSet+0x14>)
1a000ecc:	2207      	movs	r2, #7
1a000ece:	601a      	str	r2, [r3, #0]
1a000ed0:	4770      	bx	lr
1a000ed2:	bf00      	nop
1a000ed4:	e000e010 	.word	0xe000e010

1a000ed8 <tickInit>:
{
1a000ed8:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a000eda:	ea50 0301 	orrs.w	r3, r0, r1
1a000ede:	d02a      	beq.n	1a000f36 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a000ee0:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a000ee4:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a000ee8:	2b00      	cmp	r3, #0
1a000eea:	bf08      	it	eq
1a000eec:	2a32      	cmpeq	r2, #50	; 0x32
1a000eee:	d227      	bcs.n	1a000f40 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a000ef0:	4b14      	ldr	r3, [pc, #80]	; (1a000f44 <tickInit+0x6c>)
1a000ef2:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a000ef6:	4b14      	ldr	r3, [pc, #80]	; (1a000f48 <tickInit+0x70>)
1a000ef8:	681b      	ldr	r3, [r3, #0]
1a000efa:	fba3 4500 	umull	r4, r5, r3, r0
1a000efe:	fb03 5501 	mla	r5, r3, r1, r5
1a000f02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000f06:	2300      	movs	r3, #0
1a000f08:	4620      	mov	r0, r4
1a000f0a:	4629      	mov	r1, r5
1a000f0c:	f000 fafc 	bl	1a001508 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a000f10:	3801      	subs	r0, #1
1a000f12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a000f16:	d209      	bcs.n	1a000f2c <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a000f18:	4b0c      	ldr	r3, [pc, #48]	; (1a000f4c <tickInit+0x74>)
1a000f1a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000f1c:	4a0c      	ldr	r2, [pc, #48]	; (1a000f50 <tickInit+0x78>)
1a000f1e:	21e0      	movs	r1, #224	; 0xe0
1a000f20:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a000f24:	2200      	movs	r2, #0
1a000f26:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000f28:	2207      	movs	r2, #7
1a000f2a:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a000f2c:	2001      	movs	r0, #1
1a000f2e:	f7ff ffc7 	bl	1a000ec0 <tickPowerSet>
      bool_t ret_val = 1;
1a000f32:	2001      	movs	r0, #1
}
1a000f34:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a000f36:	2000      	movs	r0, #0
1a000f38:	f7ff ffc2 	bl	1a000ec0 <tickPowerSet>
         ret_val = 0;
1a000f3c:	2000      	movs	r0, #0
1a000f3e:	e7f9      	b.n	1a000f34 <tickInit+0x5c>
            ret_val = 0;
1a000f40:	2000      	movs	r0, #0
1a000f42:	e7f7      	b.n	1a000f34 <tickInit+0x5c>
1a000f44:	100000f8 	.word	0x100000f8
1a000f48:	100000f0 	.word	0x100000f0
1a000f4c:	e000e010 	.word	0xe000e010
1a000f50:	e000ed00 	.word	0xe000ed00

1a000f54 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a000f54:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a000f58:	4908      	ldr	r1, [pc, #32]	; (1a000f7c <SysTick_Handler+0x28>)
1a000f5a:	e9d1 2300 	ldrd	r2, r3, [r1]
1a000f5e:	f112 0b01 	adds.w	fp, r2, #1
1a000f62:	f143 0c00 	adc.w	ip, r3, #0
1a000f66:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a000f6a:	4b05      	ldr	r3, [pc, #20]	; (1a000f80 <SysTick_Handler+0x2c>)
1a000f6c:	681b      	ldr	r3, [r3, #0]
1a000f6e:	b113      	cbz	r3, 1a000f76 <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a000f70:	4a04      	ldr	r2, [pc, #16]	; (1a000f84 <SysTick_Handler+0x30>)
1a000f72:	6810      	ldr	r0, [r2, #0]
1a000f74:	4798      	blx	r3
   }
}
1a000f76:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a000f7a:	bf00      	nop
1a000f7c:	100000a0 	.word	0x100000a0
1a000f80:	100000a8 	.word	0x100000a8
1a000f84:	10000098 	.word	0x10000098

1a000f88 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a000f88:	e7fe      	b.n	1a000f88 <errorOcurred>

1a000f8a <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a000f8a:	4770      	bx	lr

1a000f8c <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a000f8c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000f8e:	2400      	movs	r4, #0
1a000f90:	e001      	b.n	1a000f96 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000f92:	3401      	adds	r4, #1
1a000f94:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000f96:	2c03      	cmp	r4, #3
1a000f98:	d812      	bhi.n	1a000fc0 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a000f9a:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000f9c:	4b09      	ldr	r3, [pc, #36]	; (1a000fc4 <TIMER0_IRQHandler+0x38>)
1a000f9e:	681a      	ldr	r2, [r3, #0]
1a000fa0:	f004 010f 	and.w	r1, r4, #15
1a000fa4:	2301      	movs	r3, #1
1a000fa6:	408b      	lsls	r3, r1
1a000fa8:	421a      	tst	r2, r3
1a000faa:	d0f2      	beq.n	1a000f92 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000fac:	4b06      	ldr	r3, [pc, #24]	; (1a000fc8 <TIMER0_IRQHandler+0x3c>)
1a000fae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000fb2:	2000      	movs	r0, #0
1a000fb4:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000fb6:	2301      	movs	r3, #1
1a000fb8:	40ab      	lsls	r3, r5
1a000fba:	4a02      	ldr	r2, [pc, #8]	; (1a000fc4 <TIMER0_IRQHandler+0x38>)
1a000fbc:	6013      	str	r3, [r2, #0]
1a000fbe:	e7e8      	b.n	1a000f92 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a000fc0:	bd38      	pop	{r3, r4, r5, pc}
1a000fc2:	bf00      	nop
1a000fc4:	40084000 	.word	0x40084000
1a000fc8:	10000008 	.word	0x10000008

1a000fcc <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a000fcc:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000fce:	2400      	movs	r4, #0
1a000fd0:	e001      	b.n	1a000fd6 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000fd2:	3401      	adds	r4, #1
1a000fd4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000fd6:	2c03      	cmp	r4, #3
1a000fd8:	d813      	bhi.n	1a001002 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a000fda:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000fdc:	4b09      	ldr	r3, [pc, #36]	; (1a001004 <TIMER1_IRQHandler+0x38>)
1a000fde:	681a      	ldr	r2, [r3, #0]
1a000fe0:	f004 010f 	and.w	r1, r4, #15
1a000fe4:	2301      	movs	r3, #1
1a000fe6:	408b      	lsls	r3, r1
1a000fe8:	421a      	tst	r2, r3
1a000fea:	d0f2      	beq.n	1a000fd2 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000fec:	1d23      	adds	r3, r4, #4
1a000fee:	4a06      	ldr	r2, [pc, #24]	; (1a001008 <TIMER1_IRQHandler+0x3c>)
1a000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000ff4:	2000      	movs	r0, #0
1a000ff6:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000ff8:	2301      	movs	r3, #1
1a000ffa:	40ab      	lsls	r3, r5
1a000ffc:	4a01      	ldr	r2, [pc, #4]	; (1a001004 <TIMER1_IRQHandler+0x38>)
1a000ffe:	6013      	str	r3, [r2, #0]
1a001000:	e7e7      	b.n	1a000fd2 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a001002:	bd38      	pop	{r3, r4, r5, pc}
1a001004:	40085000 	.word	0x40085000
1a001008:	10000008 	.word	0x10000008

1a00100c <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a00100c:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00100e:	2400      	movs	r4, #0
1a001010:	e001      	b.n	1a001016 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001012:	3401      	adds	r4, #1
1a001014:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001016:	2c03      	cmp	r4, #3
1a001018:	d814      	bhi.n	1a001044 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a00101a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00101c:	4b0a      	ldr	r3, [pc, #40]	; (1a001048 <TIMER2_IRQHandler+0x3c>)
1a00101e:	681a      	ldr	r2, [r3, #0]
1a001020:	f004 010f 	and.w	r1, r4, #15
1a001024:	2301      	movs	r3, #1
1a001026:	408b      	lsls	r3, r1
1a001028:	421a      	tst	r2, r3
1a00102a:	d0f2      	beq.n	1a001012 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00102c:	f104 0308 	add.w	r3, r4, #8
1a001030:	4a06      	ldr	r2, [pc, #24]	; (1a00104c <TIMER2_IRQHandler+0x40>)
1a001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001036:	2000      	movs	r0, #0
1a001038:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00103a:	2301      	movs	r3, #1
1a00103c:	40ab      	lsls	r3, r5
1a00103e:	4a02      	ldr	r2, [pc, #8]	; (1a001048 <TIMER2_IRQHandler+0x3c>)
1a001040:	6013      	str	r3, [r2, #0]
1a001042:	e7e6      	b.n	1a001012 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a001044:	bd38      	pop	{r3, r4, r5, pc}
1a001046:	bf00      	nop
1a001048:	400c3000 	.word	0x400c3000
1a00104c:	10000008 	.word	0x10000008

1a001050 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a001050:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001052:	2400      	movs	r4, #0
1a001054:	e001      	b.n	1a00105a <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001056:	3401      	adds	r4, #1
1a001058:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00105a:	2c03      	cmp	r4, #3
1a00105c:	d814      	bhi.n	1a001088 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a00105e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001060:	4b0a      	ldr	r3, [pc, #40]	; (1a00108c <TIMER3_IRQHandler+0x3c>)
1a001062:	681a      	ldr	r2, [r3, #0]
1a001064:	f004 010f 	and.w	r1, r4, #15
1a001068:	2301      	movs	r3, #1
1a00106a:	408b      	lsls	r3, r1
1a00106c:	421a      	tst	r2, r3
1a00106e:	d0f2      	beq.n	1a001056 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001070:	f104 030c 	add.w	r3, r4, #12
1a001074:	4a06      	ldr	r2, [pc, #24]	; (1a001090 <TIMER3_IRQHandler+0x40>)
1a001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00107a:	2000      	movs	r0, #0
1a00107c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00107e:	2301      	movs	r3, #1
1a001080:	40ab      	lsls	r3, r5
1a001082:	4a02      	ldr	r2, [pc, #8]	; (1a00108c <TIMER3_IRQHandler+0x3c>)
1a001084:	6013      	str	r3, [r2, #0]
1a001086:	e7e6      	b.n	1a001056 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a001088:	bd38      	pop	{r3, r4, r5, pc}
1a00108a:	bf00      	nop
1a00108c:	400c4000 	.word	0x400c4000
1a001090:	10000008 	.word	0x10000008

1a001094 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001094:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001096:	4d0b      	ldr	r5, [pc, #44]	; (1a0010c4 <gpioObtainPinInit+0x30>)
1a001098:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00109c:	182c      	adds	r4, r5, r0
1a00109e:	5628      	ldrsb	r0, [r5, r0]
1a0010a0:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0010a2:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0010a6:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0010a8:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0010ac:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0010ae:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0010b2:	9b02      	ldr	r3, [sp, #8]
1a0010b4:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0010b6:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0010ba:	9b03      	ldr	r3, [sp, #12]
1a0010bc:	701a      	strb	r2, [r3, #0]
}
1a0010be:	bc30      	pop	{r4, r5}
1a0010c0:	4770      	bx	lr
1a0010c2:	bf00      	nop
1a0010c4:	1a0019f8 	.word	0x1a0019f8

1a0010c8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a0010c8:	b570      	push	{r4, r5, r6, lr}
1a0010ca:	b084      	sub	sp, #16
1a0010cc:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0010ce:	2300      	movs	r3, #0
1a0010d0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0010d4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0010d8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0010dc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0010e0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0010e4:	f10d 030b 	add.w	r3, sp, #11
1a0010e8:	9301      	str	r3, [sp, #4]
1a0010ea:	ab03      	add	r3, sp, #12
1a0010ec:	9300      	str	r3, [sp, #0]
1a0010ee:	f10d 030d 	add.w	r3, sp, #13
1a0010f2:	f10d 020e 	add.w	r2, sp, #14
1a0010f6:	f10d 010f 	add.w	r1, sp, #15
1a0010fa:	f7ff ffcb 	bl	1a001094 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0010fe:	2c05      	cmp	r4, #5
1a001100:	f200 80a5 	bhi.w	1a00124e <gpioInit+0x186>
1a001104:	e8df f004 	tbb	[pc, r4]
1a001108:	45278109 	.word	0x45278109
1a00110c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00110e:	4851      	ldr	r0, [pc, #324]	; (1a001254 <gpioInit+0x18c>)
1a001110:	f7ff fdbe 	bl	1a000c90 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001114:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001116:	b004      	add	sp, #16
1a001118:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00111a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00111e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001122:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001126:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00112a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00112e:	494a      	ldr	r1, [pc, #296]	; (1a001258 <gpioInit+0x190>)
1a001130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001134:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001138:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00113c:	2001      	movs	r0, #1
1a00113e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001142:	4c44      	ldr	r4, [pc, #272]	; (1a001254 <gpioInit+0x18c>)
1a001144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001148:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00114c:	ea22 0201 	bic.w	r2, r2, r1
1a001150:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001154:	e7df      	b.n	1a001116 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001156:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00115a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00115e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001162:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001166:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00116a:	493b      	ldr	r1, [pc, #236]	; (1a001258 <gpioInit+0x190>)
1a00116c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001170:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001174:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001178:	2001      	movs	r0, #1
1a00117a:	fa00 f102 	lsl.w	r1, r0, r2
1a00117e:	4c35      	ldr	r4, [pc, #212]	; (1a001254 <gpioInit+0x18c>)
1a001180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001184:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001188:	ea22 0201 	bic.w	r2, r2, r1
1a00118c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001190:	e7c1      	b.n	1a001116 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001192:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001196:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00119a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00119e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0011a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0011a6:	492c      	ldr	r1, [pc, #176]	; (1a001258 <gpioInit+0x190>)
1a0011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0011ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0011b0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0011b4:	2001      	movs	r0, #1
1a0011b6:	fa00 f102 	lsl.w	r1, r0, r2
1a0011ba:	4c26      	ldr	r4, [pc, #152]	; (1a001254 <gpioInit+0x18c>)
1a0011bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0011c0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0011c4:	ea22 0201 	bic.w	r2, r2, r1
1a0011c8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0011cc:	e7a3      	b.n	1a001116 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0011ce:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0011d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0011d6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0011da:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0011de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0011e2:	491d      	ldr	r1, [pc, #116]	; (1a001258 <gpioInit+0x190>)
1a0011e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0011e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0011ec:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0011f0:	2001      	movs	r0, #1
1a0011f2:	fa00 f102 	lsl.w	r1, r0, r2
1a0011f6:	4c17      	ldr	r4, [pc, #92]	; (1a001254 <gpioInit+0x18c>)
1a0011f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0011fc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001200:	ea22 0201 	bic.w	r2, r2, r1
1a001204:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001208:	e785      	b.n	1a001116 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00120a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00120e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001212:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001216:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00121a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00121e:	490e      	ldr	r1, [pc, #56]	; (1a001258 <gpioInit+0x190>)
1a001220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001224:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001228:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00122c:	2001      	movs	r0, #1
1a00122e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001232:	4b08      	ldr	r3, [pc, #32]	; (1a001254 <gpioInit+0x18c>)
1a001234:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001238:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a00123c:	4331      	orrs	r1, r6
1a00123e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001242:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001244:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001248:	2100      	movs	r1, #0
1a00124a:	5499      	strb	r1, [r3, r2]
1a00124c:	e763      	b.n	1a001116 <gpioInit+0x4e>
      ret_val = 0;
1a00124e:	2000      	movs	r0, #0
1a001250:	e761      	b.n	1a001116 <gpioInit+0x4e>
1a001252:	bf00      	nop
1a001254:	400f4000 	.word	0x400f4000
1a001258:	40086000 	.word	0x40086000

1a00125c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a00125c:	b510      	push	{r4, lr}
1a00125e:	b084      	sub	sp, #16
1a001260:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001262:	2300      	movs	r3, #0
1a001264:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001268:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00126c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001270:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001274:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001278:	f10d 030b 	add.w	r3, sp, #11
1a00127c:	9301      	str	r3, [sp, #4]
1a00127e:	ab03      	add	r3, sp, #12
1a001280:	9300      	str	r3, [sp, #0]
1a001282:	f10d 030d 	add.w	r3, sp, #13
1a001286:	f10d 020e 	add.w	r2, sp, #14
1a00128a:	f10d 010f 	add.w	r1, sp, #15
1a00128e:	f7ff ff01 	bl	1a001094 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001292:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001296:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00129a:	3400      	adds	r4, #0
1a00129c:	bf18      	it	ne
1a00129e:	2401      	movne	r4, #1
1a0012a0:	015b      	lsls	r3, r3, #5
1a0012a2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0012a6:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0012aa:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a0012ac:	2001      	movs	r0, #1
1a0012ae:	b004      	add	sp, #16
1a0012b0:	bd10      	pop	{r4, pc}

1a0012b2 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a0012b2:	b500      	push	{lr}
1a0012b4:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0012b6:	2300      	movs	r3, #0
1a0012b8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0012bc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0012c0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0012c4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0012c8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0012cc:	f10d 030b 	add.w	r3, sp, #11
1a0012d0:	9301      	str	r3, [sp, #4]
1a0012d2:	ab03      	add	r3, sp, #12
1a0012d4:	9300      	str	r3, [sp, #0]
1a0012d6:	f10d 030d 	add.w	r3, sp, #13
1a0012da:	f10d 020e 	add.w	r2, sp, #14
1a0012de:	f10d 010f 	add.w	r1, sp, #15
1a0012e2:	f7ff fed7 	bl	1a001094 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0012e6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0012ea:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0012ee:	015b      	lsls	r3, r3, #5
1a0012f0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0012f4:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0012f8:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a0012fa:	3000      	adds	r0, #0
1a0012fc:	bf18      	it	ne
1a0012fe:	2001      	movne	r0, #1
1a001300:	b005      	add	sp, #20
1a001302:	f85d fb04 	ldr.w	pc, [sp], #4
1a001306:	Address 0x000000001a001306 is out of bounds.


1a001308 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001308:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00130a:	4b04      	ldr	r3, [pc, #16]	; (1a00131c <USB0_IRQHandler+0x14>)
1a00130c:	681b      	ldr	r3, [r3, #0]
1a00130e:	681b      	ldr	r3, [r3, #0]
1a001310:	68db      	ldr	r3, [r3, #12]
1a001312:	4a03      	ldr	r2, [pc, #12]	; (1a001320 <USB0_IRQHandler+0x18>)
1a001314:	6810      	ldr	r0, [r2, #0]
1a001316:	4798      	blx	r3
}
1a001318:	bd08      	pop	{r3, pc}
1a00131a:	bf00      	nop
1a00131c:	10000100 	.word	0x10000100
1a001320:	100000ac 	.word	0x100000ac

1a001324 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001324:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001326:	f7ff fca9 	bl	1a000c7c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00132a:	4b3a      	ldr	r3, [pc, #232]	; (1a001414 <boardInit+0xf0>)
1a00132c:	6818      	ldr	r0, [r3, #0]
1a00132e:	f7ff fd75 	bl	1a000e1c <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a001332:	2001      	movs	r0, #1
1a001334:	2100      	movs	r1, #0
1a001336:	f7ff fdcf 	bl	1a000ed8 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a00133a:	2105      	movs	r1, #5
1a00133c:	2000      	movs	r0, #0
1a00133e:	f7ff fec3 	bl	1a0010c8 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a001342:	2100      	movs	r1, #0
1a001344:	2024      	movs	r0, #36	; 0x24
1a001346:	f7ff febf 	bl	1a0010c8 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a00134a:	2100      	movs	r1, #0
1a00134c:	2025      	movs	r0, #37	; 0x25
1a00134e:	f7ff febb 	bl	1a0010c8 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a001352:	2100      	movs	r1, #0
1a001354:	2026      	movs	r0, #38	; 0x26
1a001356:	f7ff feb7 	bl	1a0010c8 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a00135a:	2100      	movs	r1, #0
1a00135c:	2027      	movs	r0, #39	; 0x27
1a00135e:	f7ff feb3 	bl	1a0010c8 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a001362:	2101      	movs	r1, #1
1a001364:	2028      	movs	r0, #40	; 0x28
1a001366:	f7ff feaf 	bl	1a0010c8 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a00136a:	2101      	movs	r1, #1
1a00136c:	2029      	movs	r0, #41	; 0x29
1a00136e:	f7ff feab 	bl	1a0010c8 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a001372:	2101      	movs	r1, #1
1a001374:	202a      	movs	r0, #42	; 0x2a
1a001376:	f7ff fea7 	bl	1a0010c8 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a00137a:	2101      	movs	r1, #1
1a00137c:	202b      	movs	r0, #43	; 0x2b
1a00137e:	f7ff fea3 	bl	1a0010c8 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a001382:	2101      	movs	r1, #1
1a001384:	202c      	movs	r0, #44	; 0x2c
1a001386:	f7ff fe9f 	bl	1a0010c8 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a00138a:	2101      	movs	r1, #1
1a00138c:	202d      	movs	r0, #45	; 0x2d
1a00138e:	f7ff fe9b 	bl	1a0010c8 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a001392:	2100      	movs	r1, #0
1a001394:	202e      	movs	r0, #46	; 0x2e
1a001396:	f7ff fe97 	bl	1a0010c8 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a00139a:	2100      	movs	r1, #0
1a00139c:	202f      	movs	r0, #47	; 0x2f
1a00139e:	f7ff fe93 	bl	1a0010c8 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0013a2:	2100      	movs	r1, #0
1a0013a4:	2030      	movs	r0, #48	; 0x30
1a0013a6:	f7ff fe8f 	bl	1a0010c8 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0013aa:	2100      	movs	r1, #0
1a0013ac:	2031      	movs	r0, #49	; 0x31
1a0013ae:	f7ff fe8b 	bl	1a0010c8 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0013b2:	2100      	movs	r1, #0
1a0013b4:	2032      	movs	r0, #50	; 0x32
1a0013b6:	f7ff fe87 	bl	1a0010c8 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0013ba:	2100      	movs	r1, #0
1a0013bc:	2033      	movs	r0, #51	; 0x33
1a0013be:	f7ff fe83 	bl	1a0010c8 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0013c2:	2100      	movs	r1, #0
1a0013c4:	2034      	movs	r0, #52	; 0x34
1a0013c6:	f7ff fe7f 	bl	1a0010c8 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0013ca:	2100      	movs	r1, #0
1a0013cc:	2035      	movs	r0, #53	; 0x35
1a0013ce:	f7ff fe7b 	bl	1a0010c8 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0013d2:	2101      	movs	r1, #1
1a0013d4:	2036      	movs	r0, #54	; 0x36
1a0013d6:	f7ff fe77 	bl	1a0010c8 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0013da:	2101      	movs	r1, #1
1a0013dc:	2037      	movs	r0, #55	; 0x37
1a0013de:	f7ff fe73 	bl	1a0010c8 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0013e2:	2101      	movs	r1, #1
1a0013e4:	2038      	movs	r0, #56	; 0x38
1a0013e6:	f7ff fe6f 	bl	1a0010c8 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a0013ea:	2101      	movs	r1, #1
1a0013ec:	2039      	movs	r0, #57	; 0x39
1a0013ee:	f7ff fe6b 	bl	1a0010c8 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a0013f2:	2101      	movs	r1, #1
1a0013f4:	203a      	movs	r0, #58	; 0x3a
1a0013f6:	f7ff fe67 	bl	1a0010c8 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0013fa:	2101      	movs	r1, #1
1a0013fc:	203b      	movs	r0, #59	; 0x3b
1a0013fe:	f7ff fe63 	bl	1a0010c8 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a001402:	2101      	movs	r1, #1
1a001404:	203c      	movs	r0, #60	; 0x3c
1a001406:	f7ff fe5f 	bl	1a0010c8 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a00140a:	2101      	movs	r1, #1
1a00140c:	203d      	movs	r0, #61	; 0x3d
1a00140e:	f7ff fe5b 	bl	1a0010c8 <gpioInit>

}
1a001412:	bd08      	pop	{r3, pc}
1a001414:	100000f0 	.word	0x100000f0

1a001418 <delayInit>:
*/

/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a001418:	b510      	push	{r4, lr}
1a00141a:	4604      	mov	r4, r0
1a00141c:	4610      	mov	r0, r2
1a00141e:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a001420:	4b04      	ldr	r3, [pc, #16]	; (1a001434 <delayInit+0x1c>)
1a001422:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001426:	f000 f86f 	bl	1a001508 <__aeabi_uldivmod>
1a00142a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a00142e:	2300      	movs	r3, #0
1a001430:	7423      	strb	r3, [r4, #16]
}
1a001432:	bd10      	pop	{r4, pc}
1a001434:	100000f8 	.word	0x100000f8

1a001438 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a001438:	b570      	push	{r4, r5, r6, lr}
1a00143a:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a00143c:	7c05      	ldrb	r5, [r0, #16]
1a00143e:	b195      	cbz	r5, 1a001466 <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a001440:	f7ff fd38 	bl	1a000eb4 <tickRead>
1a001444:	e9d4 2300 	ldrd	r2, r3, [r4]
1a001448:	1a82      	subs	r2, r0, r2
1a00144a:	eb61 0303 	sbc.w	r3, r1, r3
1a00144e:	4615      	mov	r5, r2
1a001450:	461e      	mov	r6, r3
1a001452:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a001456:	429e      	cmp	r6, r3
1a001458:	bf08      	it	eq
1a00145a:	4295      	cmpeq	r5, r2
1a00145c:	d30b      	bcc.n	1a001476 <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a00145e:	2300      	movs	r3, #0
1a001460:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a001462:	2501      	movs	r5, #1
1a001464:	e005      	b.n	1a001472 <delayRead+0x3a>
      delay->startTime = tickRead();
1a001466:	f7ff fd25 	bl	1a000eb4 <tickRead>
1a00146a:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a00146e:	2301      	movs	r3, #1
1a001470:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a001472:	4628      	mov	r0, r5
1a001474:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a001476:	2500      	movs	r5, #0
1a001478:	e7fb      	b.n	1a001472 <delayRead+0x3a>
1a00147a:	Address 0x000000001a00147a is out of bounds.


1a00147c <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a00147c:	2301      	movs	r3, #1
1a00147e:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a001482:	4b01      	ldr	r3, [pc, #4]	; (1a001488 <clearInterrupt+0xc>)
1a001484:	6258      	str	r0, [r3, #36]	; 0x24
}
1a001486:	4770      	bx	lr
1a001488:	40087000 	.word	0x40087000

1a00148c <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a00148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00148e:	4b12      	ldr	r3, [pc, #72]	; (1a0014d8 <serveInterrupt+0x4c>)
1a001490:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a001492:	4b12      	ldr	r3, [pc, #72]	; (1a0014dc <serveInterrupt+0x50>)
1a001494:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a001496:	2301      	movs	r3, #1
1a001498:	4083      	lsls	r3, r0
1a00149a:	420b      	tst	r3, r1
1a00149c:	d111      	bne.n	1a0014c2 <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a00149e:	4910      	ldr	r1, [pc, #64]	; (1a0014e0 <serveInterrupt+0x54>)
1a0014a0:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0014a2:	4d10      	ldr	r5, [pc, #64]	; (1a0014e4 <serveInterrupt+0x58>)
1a0014a4:	0051      	lsls	r1, r2, #1
1a0014a6:	188f      	adds	r7, r1, r2
1a0014a8:	00fc      	lsls	r4, r7, #3
1a0014aa:	4627      	mov	r7, r4
1a0014ac:	442c      	add	r4, r5
1a0014ae:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0014b0:	6864      	ldr	r4, [r4, #4]
1a0014b2:	1b36      	subs	r6, r6, r4
1a0014b4:	443d      	add	r5, r7
1a0014b6:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0014b8:	4a08      	ldr	r2, [pc, #32]	; (1a0014dc <serveInterrupt+0x50>)
1a0014ba:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0014bc:	f7ff ffde 	bl	1a00147c <clearInterrupt>
}
1a0014c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0014c2:	4907      	ldr	r1, [pc, #28]	; (1a0014e0 <serveInterrupt+0x54>)
1a0014c4:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0014c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0014ca:	00d1      	lsls	r1, r2, #3
1a0014cc:	4a05      	ldr	r2, [pc, #20]	; (1a0014e4 <serveInterrupt+0x58>)
1a0014ce:	440a      	add	r2, r1
1a0014d0:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a0014d2:	4a02      	ldr	r2, [pc, #8]	; (1a0014dc <serveInterrupt+0x50>)
1a0014d4:	61d3      	str	r3, [r2, #28]
1a0014d6:	e7f1      	b.n	1a0014bc <serveInterrupt+0x30>
1a0014d8:	1a001b30 	.word	0x1a001b30
1a0014dc:	40087000 	.word	0x40087000
1a0014e0:	40084000 	.word	0x40084000
1a0014e4:	10000048 	.word	0x10000048

1a0014e8 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0014e8:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0014ea:	2000      	movs	r0, #0
1a0014ec:	f7ff ffce 	bl	1a00148c <serveInterrupt>
}
1a0014f0:	bd08      	pop	{r3, pc}

1a0014f2 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0014f2:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0014f4:	2001      	movs	r0, #1
1a0014f6:	f7ff ffc9 	bl	1a00148c <serveInterrupt>
}
1a0014fa:	bd08      	pop	{r3, pc}

1a0014fc <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a0014fc:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0014fe:	2002      	movs	r0, #2
1a001500:	f7ff ffc4 	bl	1a00148c <serveInterrupt>
}
1a001504:	bd08      	pop	{r3, pc}
1a001506:	Address 0x000000001a001506 is out of bounds.


1a001508 <__aeabi_uldivmod>:
1a001508:	b953      	cbnz	r3, 1a001520 <__aeabi_uldivmod+0x18>
1a00150a:	b94a      	cbnz	r2, 1a001520 <__aeabi_uldivmod+0x18>
1a00150c:	2900      	cmp	r1, #0
1a00150e:	bf08      	it	eq
1a001510:	2800      	cmpeq	r0, #0
1a001512:	bf1c      	itt	ne
1a001514:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001518:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00151c:	f000 b972 	b.w	1a001804 <__aeabi_idiv0>
1a001520:	f1ad 0c08 	sub.w	ip, sp, #8
1a001524:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001528:	f000 f806 	bl	1a001538 <__udivmoddi4>
1a00152c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001534:	b004      	add	sp, #16
1a001536:	4770      	bx	lr

1a001538 <__udivmoddi4>:
1a001538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00153c:	9e08      	ldr	r6, [sp, #32]
1a00153e:	4604      	mov	r4, r0
1a001540:	4688      	mov	r8, r1
1a001542:	2b00      	cmp	r3, #0
1a001544:	d14b      	bne.n	1a0015de <__udivmoddi4+0xa6>
1a001546:	428a      	cmp	r2, r1
1a001548:	4615      	mov	r5, r2
1a00154a:	d967      	bls.n	1a00161c <__udivmoddi4+0xe4>
1a00154c:	fab2 f282 	clz	r2, r2
1a001550:	b14a      	cbz	r2, 1a001566 <__udivmoddi4+0x2e>
1a001552:	f1c2 0720 	rsb	r7, r2, #32
1a001556:	fa01 f302 	lsl.w	r3, r1, r2
1a00155a:	fa20 f707 	lsr.w	r7, r0, r7
1a00155e:	4095      	lsls	r5, r2
1a001560:	ea47 0803 	orr.w	r8, r7, r3
1a001564:	4094      	lsls	r4, r2
1a001566:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00156a:	0c23      	lsrs	r3, r4, #16
1a00156c:	fbb8 f7fe 	udiv	r7, r8, lr
1a001570:	fa1f fc85 	uxth.w	ip, r5
1a001574:	fb0e 8817 	mls	r8, lr, r7, r8
1a001578:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00157c:	fb07 f10c 	mul.w	r1, r7, ip
1a001580:	4299      	cmp	r1, r3
1a001582:	d909      	bls.n	1a001598 <__udivmoddi4+0x60>
1a001584:	18eb      	adds	r3, r5, r3
1a001586:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00158a:	f080 811b 	bcs.w	1a0017c4 <__udivmoddi4+0x28c>
1a00158e:	4299      	cmp	r1, r3
1a001590:	f240 8118 	bls.w	1a0017c4 <__udivmoddi4+0x28c>
1a001594:	3f02      	subs	r7, #2
1a001596:	442b      	add	r3, r5
1a001598:	1a5b      	subs	r3, r3, r1
1a00159a:	b2a4      	uxth	r4, r4
1a00159c:	fbb3 f0fe 	udiv	r0, r3, lr
1a0015a0:	fb0e 3310 	mls	r3, lr, r0, r3
1a0015a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0015a8:	fb00 fc0c 	mul.w	ip, r0, ip
1a0015ac:	45a4      	cmp	ip, r4
1a0015ae:	d909      	bls.n	1a0015c4 <__udivmoddi4+0x8c>
1a0015b0:	192c      	adds	r4, r5, r4
1a0015b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0015b6:	f080 8107 	bcs.w	1a0017c8 <__udivmoddi4+0x290>
1a0015ba:	45a4      	cmp	ip, r4
1a0015bc:	f240 8104 	bls.w	1a0017c8 <__udivmoddi4+0x290>
1a0015c0:	3802      	subs	r0, #2
1a0015c2:	442c      	add	r4, r5
1a0015c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0015c8:	eba4 040c 	sub.w	r4, r4, ip
1a0015cc:	2700      	movs	r7, #0
1a0015ce:	b11e      	cbz	r6, 1a0015d8 <__udivmoddi4+0xa0>
1a0015d0:	40d4      	lsrs	r4, r2
1a0015d2:	2300      	movs	r3, #0
1a0015d4:	e9c6 4300 	strd	r4, r3, [r6]
1a0015d8:	4639      	mov	r1, r7
1a0015da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0015de:	428b      	cmp	r3, r1
1a0015e0:	d909      	bls.n	1a0015f6 <__udivmoddi4+0xbe>
1a0015e2:	2e00      	cmp	r6, #0
1a0015e4:	f000 80eb 	beq.w	1a0017be <__udivmoddi4+0x286>
1a0015e8:	2700      	movs	r7, #0
1a0015ea:	e9c6 0100 	strd	r0, r1, [r6]
1a0015ee:	4638      	mov	r0, r7
1a0015f0:	4639      	mov	r1, r7
1a0015f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0015f6:	fab3 f783 	clz	r7, r3
1a0015fa:	2f00      	cmp	r7, #0
1a0015fc:	d147      	bne.n	1a00168e <__udivmoddi4+0x156>
1a0015fe:	428b      	cmp	r3, r1
1a001600:	d302      	bcc.n	1a001608 <__udivmoddi4+0xd0>
1a001602:	4282      	cmp	r2, r0
1a001604:	f200 80fa 	bhi.w	1a0017fc <__udivmoddi4+0x2c4>
1a001608:	1a84      	subs	r4, r0, r2
1a00160a:	eb61 0303 	sbc.w	r3, r1, r3
1a00160e:	2001      	movs	r0, #1
1a001610:	4698      	mov	r8, r3
1a001612:	2e00      	cmp	r6, #0
1a001614:	d0e0      	beq.n	1a0015d8 <__udivmoddi4+0xa0>
1a001616:	e9c6 4800 	strd	r4, r8, [r6]
1a00161a:	e7dd      	b.n	1a0015d8 <__udivmoddi4+0xa0>
1a00161c:	b902      	cbnz	r2, 1a001620 <__udivmoddi4+0xe8>
1a00161e:	deff      	udf	#255	; 0xff
1a001620:	fab2 f282 	clz	r2, r2
1a001624:	2a00      	cmp	r2, #0
1a001626:	f040 808f 	bne.w	1a001748 <__udivmoddi4+0x210>
1a00162a:	1b49      	subs	r1, r1, r5
1a00162c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001630:	fa1f f885 	uxth.w	r8, r5
1a001634:	2701      	movs	r7, #1
1a001636:	fbb1 fcfe 	udiv	ip, r1, lr
1a00163a:	0c23      	lsrs	r3, r4, #16
1a00163c:	fb0e 111c 	mls	r1, lr, ip, r1
1a001640:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001644:	fb08 f10c 	mul.w	r1, r8, ip
1a001648:	4299      	cmp	r1, r3
1a00164a:	d907      	bls.n	1a00165c <__udivmoddi4+0x124>
1a00164c:	18eb      	adds	r3, r5, r3
1a00164e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001652:	d202      	bcs.n	1a00165a <__udivmoddi4+0x122>
1a001654:	4299      	cmp	r1, r3
1a001656:	f200 80cd 	bhi.w	1a0017f4 <__udivmoddi4+0x2bc>
1a00165a:	4684      	mov	ip, r0
1a00165c:	1a59      	subs	r1, r3, r1
1a00165e:	b2a3      	uxth	r3, r4
1a001660:	fbb1 f0fe 	udiv	r0, r1, lr
1a001664:	fb0e 1410 	mls	r4, lr, r0, r1
1a001668:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a00166c:	fb08 f800 	mul.w	r8, r8, r0
1a001670:	45a0      	cmp	r8, r4
1a001672:	d907      	bls.n	1a001684 <__udivmoddi4+0x14c>
1a001674:	192c      	adds	r4, r5, r4
1a001676:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00167a:	d202      	bcs.n	1a001682 <__udivmoddi4+0x14a>
1a00167c:	45a0      	cmp	r8, r4
1a00167e:	f200 80b6 	bhi.w	1a0017ee <__udivmoddi4+0x2b6>
1a001682:	4618      	mov	r0, r3
1a001684:	eba4 0408 	sub.w	r4, r4, r8
1a001688:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a00168c:	e79f      	b.n	1a0015ce <__udivmoddi4+0x96>
1a00168e:	f1c7 0c20 	rsb	ip, r7, #32
1a001692:	40bb      	lsls	r3, r7
1a001694:	fa22 fe0c 	lsr.w	lr, r2, ip
1a001698:	ea4e 0e03 	orr.w	lr, lr, r3
1a00169c:	fa01 f407 	lsl.w	r4, r1, r7
1a0016a0:	fa20 f50c 	lsr.w	r5, r0, ip
1a0016a4:	fa21 f30c 	lsr.w	r3, r1, ip
1a0016a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0016ac:	4325      	orrs	r5, r4
1a0016ae:	fbb3 f9f8 	udiv	r9, r3, r8
1a0016b2:	0c2c      	lsrs	r4, r5, #16
1a0016b4:	fb08 3319 	mls	r3, r8, r9, r3
1a0016b8:	fa1f fa8e 	uxth.w	sl, lr
1a0016bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0016c0:	fb09 f40a 	mul.w	r4, r9, sl
1a0016c4:	429c      	cmp	r4, r3
1a0016c6:	fa02 f207 	lsl.w	r2, r2, r7
1a0016ca:	fa00 f107 	lsl.w	r1, r0, r7
1a0016ce:	d90b      	bls.n	1a0016e8 <__udivmoddi4+0x1b0>
1a0016d0:	eb1e 0303 	adds.w	r3, lr, r3
1a0016d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0016d8:	f080 8087 	bcs.w	1a0017ea <__udivmoddi4+0x2b2>
1a0016dc:	429c      	cmp	r4, r3
1a0016de:	f240 8084 	bls.w	1a0017ea <__udivmoddi4+0x2b2>
1a0016e2:	f1a9 0902 	sub.w	r9, r9, #2
1a0016e6:	4473      	add	r3, lr
1a0016e8:	1b1b      	subs	r3, r3, r4
1a0016ea:	b2ad      	uxth	r5, r5
1a0016ec:	fbb3 f0f8 	udiv	r0, r3, r8
1a0016f0:	fb08 3310 	mls	r3, r8, r0, r3
1a0016f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a0016f8:	fb00 fa0a 	mul.w	sl, r0, sl
1a0016fc:	45a2      	cmp	sl, r4
1a0016fe:	d908      	bls.n	1a001712 <__udivmoddi4+0x1da>
1a001700:	eb1e 0404 	adds.w	r4, lr, r4
1a001704:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001708:	d26b      	bcs.n	1a0017e2 <__udivmoddi4+0x2aa>
1a00170a:	45a2      	cmp	sl, r4
1a00170c:	d969      	bls.n	1a0017e2 <__udivmoddi4+0x2aa>
1a00170e:	3802      	subs	r0, #2
1a001710:	4474      	add	r4, lr
1a001712:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001716:	fba0 8902 	umull	r8, r9, r0, r2
1a00171a:	eba4 040a 	sub.w	r4, r4, sl
1a00171e:	454c      	cmp	r4, r9
1a001720:	46c2      	mov	sl, r8
1a001722:	464b      	mov	r3, r9
1a001724:	d354      	bcc.n	1a0017d0 <__udivmoddi4+0x298>
1a001726:	d051      	beq.n	1a0017cc <__udivmoddi4+0x294>
1a001728:	2e00      	cmp	r6, #0
1a00172a:	d069      	beq.n	1a001800 <__udivmoddi4+0x2c8>
1a00172c:	ebb1 050a 	subs.w	r5, r1, sl
1a001730:	eb64 0403 	sbc.w	r4, r4, r3
1a001734:	fa04 fc0c 	lsl.w	ip, r4, ip
1a001738:	40fd      	lsrs	r5, r7
1a00173a:	40fc      	lsrs	r4, r7
1a00173c:	ea4c 0505 	orr.w	r5, ip, r5
1a001740:	e9c6 5400 	strd	r5, r4, [r6]
1a001744:	2700      	movs	r7, #0
1a001746:	e747      	b.n	1a0015d8 <__udivmoddi4+0xa0>
1a001748:	f1c2 0320 	rsb	r3, r2, #32
1a00174c:	fa20 f703 	lsr.w	r7, r0, r3
1a001750:	4095      	lsls	r5, r2
1a001752:	fa01 f002 	lsl.w	r0, r1, r2
1a001756:	fa21 f303 	lsr.w	r3, r1, r3
1a00175a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00175e:	4338      	orrs	r0, r7
1a001760:	0c01      	lsrs	r1, r0, #16
1a001762:	fbb3 f7fe 	udiv	r7, r3, lr
1a001766:	fa1f f885 	uxth.w	r8, r5
1a00176a:	fb0e 3317 	mls	r3, lr, r7, r3
1a00176e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001772:	fb07 f308 	mul.w	r3, r7, r8
1a001776:	428b      	cmp	r3, r1
1a001778:	fa04 f402 	lsl.w	r4, r4, r2
1a00177c:	d907      	bls.n	1a00178e <__udivmoddi4+0x256>
1a00177e:	1869      	adds	r1, r5, r1
1a001780:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a001784:	d22f      	bcs.n	1a0017e6 <__udivmoddi4+0x2ae>
1a001786:	428b      	cmp	r3, r1
1a001788:	d92d      	bls.n	1a0017e6 <__udivmoddi4+0x2ae>
1a00178a:	3f02      	subs	r7, #2
1a00178c:	4429      	add	r1, r5
1a00178e:	1acb      	subs	r3, r1, r3
1a001790:	b281      	uxth	r1, r0
1a001792:	fbb3 f0fe 	udiv	r0, r3, lr
1a001796:	fb0e 3310 	mls	r3, lr, r0, r3
1a00179a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00179e:	fb00 f308 	mul.w	r3, r0, r8
1a0017a2:	428b      	cmp	r3, r1
1a0017a4:	d907      	bls.n	1a0017b6 <__udivmoddi4+0x27e>
1a0017a6:	1869      	adds	r1, r5, r1
1a0017a8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0017ac:	d217      	bcs.n	1a0017de <__udivmoddi4+0x2a6>
1a0017ae:	428b      	cmp	r3, r1
1a0017b0:	d915      	bls.n	1a0017de <__udivmoddi4+0x2a6>
1a0017b2:	3802      	subs	r0, #2
1a0017b4:	4429      	add	r1, r5
1a0017b6:	1ac9      	subs	r1, r1, r3
1a0017b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0017bc:	e73b      	b.n	1a001636 <__udivmoddi4+0xfe>
1a0017be:	4637      	mov	r7, r6
1a0017c0:	4630      	mov	r0, r6
1a0017c2:	e709      	b.n	1a0015d8 <__udivmoddi4+0xa0>
1a0017c4:	4607      	mov	r7, r0
1a0017c6:	e6e7      	b.n	1a001598 <__udivmoddi4+0x60>
1a0017c8:	4618      	mov	r0, r3
1a0017ca:	e6fb      	b.n	1a0015c4 <__udivmoddi4+0x8c>
1a0017cc:	4541      	cmp	r1, r8
1a0017ce:	d2ab      	bcs.n	1a001728 <__udivmoddi4+0x1f0>
1a0017d0:	ebb8 0a02 	subs.w	sl, r8, r2
1a0017d4:	eb69 020e 	sbc.w	r2, r9, lr
1a0017d8:	3801      	subs	r0, #1
1a0017da:	4613      	mov	r3, r2
1a0017dc:	e7a4      	b.n	1a001728 <__udivmoddi4+0x1f0>
1a0017de:	4660      	mov	r0, ip
1a0017e0:	e7e9      	b.n	1a0017b6 <__udivmoddi4+0x27e>
1a0017e2:	4618      	mov	r0, r3
1a0017e4:	e795      	b.n	1a001712 <__udivmoddi4+0x1da>
1a0017e6:	4667      	mov	r7, ip
1a0017e8:	e7d1      	b.n	1a00178e <__udivmoddi4+0x256>
1a0017ea:	4681      	mov	r9, r0
1a0017ec:	e77c      	b.n	1a0016e8 <__udivmoddi4+0x1b0>
1a0017ee:	3802      	subs	r0, #2
1a0017f0:	442c      	add	r4, r5
1a0017f2:	e747      	b.n	1a001684 <__udivmoddi4+0x14c>
1a0017f4:	f1ac 0c02 	sub.w	ip, ip, #2
1a0017f8:	442b      	add	r3, r5
1a0017fa:	e72f      	b.n	1a00165c <__udivmoddi4+0x124>
1a0017fc:	4638      	mov	r0, r7
1a0017fe:	e708      	b.n	1a001612 <__udivmoddi4+0xda>
1a001800:	4637      	mov	r7, r6
1a001802:	e6e9      	b.n	1a0015d8 <__udivmoddi4+0xa0>

1a001804 <__aeabi_idiv0>:
1a001804:	4770      	bx	lr
1a001806:	bf00      	nop

1a001808 <__libc_init_array>:
1a001808:	b570      	push	{r4, r5, r6, lr}
1a00180a:	4e0d      	ldr	r6, [pc, #52]	; (1a001840 <__libc_init_array+0x38>)
1a00180c:	4c0d      	ldr	r4, [pc, #52]	; (1a001844 <__libc_init_array+0x3c>)
1a00180e:	1ba4      	subs	r4, r4, r6
1a001810:	10a4      	asrs	r4, r4, #2
1a001812:	2500      	movs	r5, #0
1a001814:	42a5      	cmp	r5, r4
1a001816:	d109      	bne.n	1a00182c <__libc_init_array+0x24>
1a001818:	4e0b      	ldr	r6, [pc, #44]	; (1a001848 <__libc_init_array+0x40>)
1a00181a:	4c0c      	ldr	r4, [pc, #48]	; (1a00184c <__libc_init_array+0x44>)
1a00181c:	f7fe fe3c 	bl	1a000498 <_init>
1a001820:	1ba4      	subs	r4, r4, r6
1a001822:	10a4      	asrs	r4, r4, #2
1a001824:	2500      	movs	r5, #0
1a001826:	42a5      	cmp	r5, r4
1a001828:	d105      	bne.n	1a001836 <__libc_init_array+0x2e>
1a00182a:	bd70      	pop	{r4, r5, r6, pc}
1a00182c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001830:	4798      	blx	r3
1a001832:	3501      	adds	r5, #1
1a001834:	e7ee      	b.n	1a001814 <__libc_init_array+0xc>
1a001836:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00183a:	4798      	blx	r3
1a00183c:	3501      	adds	r5, #1
1a00183e:	e7f2      	b.n	1a001826 <__libc_init_array+0x1e>
1a001840:	1a001b34 	.word	0x1a001b34
1a001844:	1a001b34 	.word	0x1a001b34
1a001848:	1a001b34 	.word	0x1a001b34
1a00184c:	1a001b38 	.word	0x1a001b38

1a001850 <memset>:
1a001850:	4402      	add	r2, r0
1a001852:	4603      	mov	r3, r0
1a001854:	4293      	cmp	r3, r2
1a001856:	d100      	bne.n	1a00185a <memset+0xa>
1a001858:	4770      	bx	lr
1a00185a:	f803 1b01 	strb.w	r1, [r3], #1
1a00185e:	e7f9      	b.n	1a001854 <memset+0x4>

1a001860 <ExtRateIn>:
1a001860:	0000 0000                                   ....

1a001864 <OscRateIn>:
1a001864:	1b00 00b7                                   ....

1a001868 <InitClkStates>:
1a001868:	0f01 0101                                   ....

1a00186c <pinmuxing>:
1a00186c:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a00187c:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a00188c:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a00189c:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a0018ac:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a0018bc:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a0018cc:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a0018dc:	0206 0057                                   ..W.

1a0018e0 <UART_BClock>:
1a0018e0:	01c2 01a2 0182 0162                         ......b.

1a0018e8 <UART_PClock>:
1a0018e8:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a0018f8:	00ff 0000                                   ....

1a0018fc <periph_to_base>:
1a0018fc:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a00190c:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a00191c:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a00192c:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a00193c:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a00194c:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a00195c:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a001968 <InitClkStates>:
1a001968:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a001978:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a001988:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a001998:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a0019a8:	111a 0001 111b 0001                         ........

1a0019b0 <lpcUarts>:
1a0019b0:	1000 4008 0406 0602 0205 0018 1000 4008     ...@...........@
1a0019c0:	0509 0907 0706 0018 2000 4008 0000 0000     ......... .@....
1a0019d0:	0000 0019 1000 400c 0107 0706 0602 001a     .......@........
1a0019e0:	1000 400c 0f01 0101 0110 001a 2000 400c     ...@......... .@
1a0019f0:	0302 0202 0204 001b                         ........

1a0019f8 <gpioPinsInit>:
1a0019f8:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a001a08:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a001a18:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a001a28:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a001a38:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a001a48:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a001a58:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a001a68:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a001a78:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a001a88:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a001a98:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a001aa8:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a001ab8:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a001ac8:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a001ad8:	020b 000c 0c01 0004 0200 0400 0001 0102     ................
1a001ae8:	0204 0200 0402 0003 0302 0307 0300 070b     ................
1a001af8:	0004 0c03 0507 0300 070d 0006 0e03 0102     ................
1a001b08:	0504 0401 0006 0602 0504 0200 0405 0004     ................
1a001b18:	0402 0804 0504 040c 0409 0d05 0a04 0504     ................
1a001b28:	010e 0005 0801 ffff                         ........

1a001b30 <ultrasonicSensorsIrqMap>:
1a001b30:	0100 ff02                                   ....
