
app/out/app.elf:     file format elf32-littlearm
app/out/app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0006d1

Program Header:
0x70000001 off    0x00011e5c vaddr 0x1a001e5c paddr 0x1a001e5c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010090 vaddr 0x10000090 paddr 0x10000090 align 2**16
         filesz 0x00000000 memsz 0x000000cc flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001e64 memsz 0x00001e64 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001e64 align 2**16
         filesz 0x00000090 memsz 0x00000090 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e58  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  10000000  1a001e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020090  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020090  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020090  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020090  2**2
                  CONTENTS
  6 .bss          000000cc  10000090  10000090  00010090  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020090  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020090  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020090  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020090  2**2
                  CONTENTS
 11 .init_array   00000004  1a001e58  1a001e58  00011e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a001e5c  1a001e5c  00011e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020090  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020090  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020090  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020090  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020090  2**2
                  CONTENTS
 18 .noinit       00000000  1000015c  1000015c  00020090  2**2
                  CONTENTS
 19 .debug_info   0002524b  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004709  00000000  00000000  000452db  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000930  00000000  00000000  000499e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000898  00000000  00000000  0004a314  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000e19b  00000000  00000000  0004abac  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000f791  00000000  00000000  00058d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00026480  00000000  00000000  000684d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  0008e958  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  0008e9d7  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001574  00000000  00000000  0008ea10  2**2
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_loc    000055b5  00000000  00000000  0008ff84  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000090 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001e58 l    d  .init_array	00000000 .init_array
1a001e5c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000015c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 uart_service.c
00000000 l    df *ABS*	00000000 key_service.c
00000000 l    df *ABS*	00000000 elevator_fsm.c
1a00035a l     F .text	0000000e isAcctionKey
10000090 l     O .bss	00000002 actualFloor.13412
10000092 l     O .bss	00000002 requiredFloor.13413
10000094 l     O .bss	00000002 stoppedTime.13414
00000000 l    df *ABS*	00000000 led_service.c
1a000494 l     F .text	0000001c redOn
1a0004b0 l     F .text	0000001c yellowOn
1a0004cc l     F .text	0000001c greenOn
1a0004e8 l     F .text	00000024 error
1a00050c l     F .text	0000001c rgbGreenLed
1a000528 l     F .text	0000001c rgbBlueLed
1a000544 l     F .text	0000001c rgbRedLed
00000000 l    df *ABS*	00000000 app.c
00000000 l    df *ABS*	00000000 debounce_fsm.c
00000000 l    df *ABS*	00000000 board.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001b8c l     O .text	00000004 InitClkStates
1a001b90 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000834 l     F .text	0000002c Chip_UART_GetIndex
1a001c04 l     O .text	00000008 UART_BClock
1a001c0c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0009dc l     F .text	000000a4 pll_calc_divs
1a000a80 l     F .text	0000010c pll_get_frac
1a000b8c l     F .text	0000004c Chip_Clock_FindBaseClock
1a000e00 l     F .text	00000022 Chip_Clock_GetDivRate
10000098 l     O .bss	00000008 audio_usb_pll_freq
1a001c20 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001c8c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000000 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a001cd4 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
100000a0 l     O .bss	00000004 callBackFuncParams
100000a8 l     O .bss	00000008 tickCounter
100000b0 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0012a4 l     F .text	00000002 errorOcurred
1a0012a6 l     F .text	00000002 doNothing
10000008 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0013b0 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100000b4 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a001798 l     F .text	00000010 clearInterrupt
1a0017a8 l     F .text	0000005c serveInterrupt
10000048 l     O .data	00000048 ultrasonicSensors
1a001e54 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a001e5c l       .init_array	00000000 __init_array_end
1a001e58 l       .bss_RAM5	00000000 __preinit_array_end
1a001e58 l       .init_array	00000000 __init_array_start
1a001e58 l       .bss_RAM5	00000000 __preinit_array_start
1a000c24 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000334 g     F .text	0000000a buttonReleased
1a001328 g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a00077c g     F .text	00000008 __stdio_init
1a001754 g     F .text	00000042 delayRead
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a001270 g     F .text	00000034 SysTick_Handler
1a0008b4 g     F .text	00000040 Chip_UART_SetBaud
100000b8 g     O .bss	00000001 actualElevatorFsmState
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a001e64 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
100000c0 g     O .bss	00000020 floorOneKey
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
100000e0 g     O .bss	00000020 floorTwoKey
53ff71be g       *ABS*	00000000 __valid_user_code_checksum
1a001e64 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a00136c g     F .text	00000044 TIMER3_IRQHandler
1a000ea2 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001824 g     F .text	00000000 .hidden __aeabi_uldivmod
1000015c g       .noinit	00000000 _noinit
1a0011b6 g     F .text	00000018 uartWriteString
10000148 g     O .bss	00000004 SystemCoreClock
1a000860 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000eec g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0007bc g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001854 g     F .text	000002cc .hidden __udivmoddi4
1a001b84 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00031e g     F .text	00000008 notPress
1a00180e g     F .text	0000000a GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001e5c g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a001b24 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000300 g     F .text	00000010 printElevatorStatus
1a000658 g     F .text	00000076 updateDebounceFsm
1a000754 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
10000100 g     O .bss	00000020 lowLevelKey
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1000015c g       .bss	00000000 _ebss
1a0012a8 g     F .text	00000040 TIMER0_IRQHandler
1a0006d0 g     F .text	00000084 Reset_Handler
1a0011f4 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000bd8 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0012e8 g     F .text	00000040 TIMER1_IRQHandler
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000d94 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001d1c g     O .text	00000136 gpioPinsInit
1a00119c g     F .text	0000001a uartWriteByte
1a001818 g     F .text	0000000a GPIO2_IRQHandler
1a000e7c g     F .text	00000026 Chip_Clock_GetBaseClock
10000090 g       .bss	00000000 _bss
1a001734 g     F .text	00000020 delayInit
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000f4c g     F .text	00000002 Chip_GPIO_Init
1a001b88 g     O .text	00000004 OscRateIn
1a001120 g     F .text	0000007c uartInit
1000015c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000326 g     F .text	0000000e buttonPressed
1a0013e4 g     F .text	00000194 gpioInit
1a001b20  w    F .text	00000002 .hidden __aeabi_ldiv0
10000120 g     O .bss	00000001 pressedKey
1a001624 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a000310 g     F .text	0000000e isPress
1a000c40 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001b6c g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0005b0 g     F .text	000000a0 main
1a000650 g     F .text	00000008 initDebounceFsm
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
10000004 g     O .data	00000004 DWT_CTRL
1a0010f4 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a000eb0 g     F .text	0000003c Chip_Clock_EnableOpts
1a000c5c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000d14 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0010a4 g     F .text	00000034 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001578 g     F .text	00000056 gpioWrite
10000158 g     O .bss	00000004 g_pUsbApi
1a000784 g     F .text	00000038 Board_SetupMuxing
1a000584 g     F .text	0000002c motorStateIndicator
1a0008f4 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0011d0 g     F .text	0000000c tickRead
10000150 g     O .bss	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00110c g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1000015c g       .bss	00000000 _pvHeapStart
1a000374 g     F .text	00000120 updateElevatorFsm
1a000178 g       .text	00000000 __section_table_end
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000758 g     F .text	00000024 Board_Debug_Init
10000090 g       .data	00000000 _edata
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a000f50 g     F .text	00000154 Chip_SetupCoreClock
1a001804 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000f38 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
10000128 g     O .bss	00000020 motorKey
1a001b20  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a00033e g     F .text	0000001c mapKeyToFloor
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0015ce g     F .text	00000054 gpioRead
1a001640 g     F .text	000000f4 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000368 g     F .text	0000000c initElevatorFsm
1a0011dc g     F .text	00000018 tickPowerSet
1a000e24 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0010d8 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000828 g     F .text	0000000c Board_SystemInit
1a000560 g     F .text	00000024 actualFloorLedIndicator



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 d1 06 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a be 71 ff 53     }............q.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	71 12 00 1a                                         q...

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	25 16 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     %...............
1a000070:	a9 12 00 1a e9 12 00 1a 29 13 00 1a 6d 13 00 1a     ........)...m...
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	05 18 00 1a 0f 18 00 1a 19 18 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a001e64 	.word	0x1a001e64
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000090 	.word	0x00000090
1a000120:	1a001e64 	.word	0x1a001e64
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001e64 	.word	0x1a001e64
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001e64 	.word	0x1a001e64
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001e64 	.word	0x1a001e64
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000090 	.word	0x10000090
1a000154:	000000cc 	.word	0x000000cc
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __WFI();
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <printElevatorStatus>:
#include "uart_service.h"
#include "sapi.h"

void printElevatorStatus() {
1a000300:	b508      	push	{r3, lr}
	char* miTexto = "hola\n\r";
	uartWriteString( UART_USB, miTexto );
1a000302:	4902      	ldr	r1, [pc, #8]	; (1a00030c <printElevatorStatus+0xc>)
1a000304:	2003      	movs	r0, #3
1a000306:	f000 ff56 	bl	1a0011b6 <uartWriteString>
}
1a00030a:	bd08      	pop	{r3, pc}
1a00030c:	1a001b7c 	.word	0x1a001b7c

1a000310 <isPress>:
#include "key_service.h"
#include "led_service.h"

bool_t isPress(gpioMap_t key) {
1a000310:	b508      	push	{r3, lr}
	return !gpioRead(key);
1a000312:	f001 f95c 	bl	1a0015ce <gpioRead>
}
1a000316:	fab0 f080 	clz	r0, r0
1a00031a:	0940      	lsrs	r0, r0, #5
1a00031c:	bd08      	pop	{r3, pc}

1a00031e <notPress>:

bool_t notPress(gpioMap_t key) {
1a00031e:	b508      	push	{r3, lr}
	return gpioRead(key);
1a000320:	f001 f955 	bl	1a0015ce <gpioRead>
}
1a000324:	bd08      	pop	{r3, pc}

1a000326 <buttonPressed>:

// down flag
bool_t buttonPressed(gpioMap_t key) {
	return key == LOW_FLOOR_KEY || key == FIRST_FLOOR_KEY || key == SECOND_FLOOR_KEY;
1a000326:	3824      	subs	r0, #36	; 0x24
1a000328:	b2c0      	uxtb	r0, r0
}
1a00032a:	2802      	cmp	r0, #2
1a00032c:	bf8c      	ite	hi
1a00032e:	2000      	movhi	r0, #0
1a000330:	2001      	movls	r0, #1
1a000332:	4770      	bx	lr

1a000334 <buttonReleased>:

// up flag
bool_t buttonReleased(gpioMap_t key) {
	return key == MOTOR_KEY ? TRUE : FALSE;
}
1a000334:	2827      	cmp	r0, #39	; 0x27
1a000336:	bf14      	ite	ne
1a000338:	2000      	movne	r0, #0
1a00033a:	2001      	moveq	r0, #1
1a00033c:	4770      	bx	lr

1a00033e <mapKeyToFloor>:

uint16_t mapKeyToFloor(gpioMap_t key) {
	if (key == LOW_FLOOR_KEY) {
1a00033e:	2824      	cmp	r0, #36	; 0x24
1a000340:	d007      	beq.n	1a000352 <mapKeyToFloor+0x14>
		return LOW_FLOOR;
	} else if (key == FIRST_FLOOR_KEY) {
1a000342:	2825      	cmp	r0, #37	; 0x25
1a000344:	d007      	beq.n	1a000356 <mapKeyToFloor+0x18>
		return FIRST_FLOOR;
	} else if (key == SECOND_FLOOR_KEY) {
1a000346:	2826      	cmp	r0, #38	; 0x26
1a000348:	d001      	beq.n	1a00034e <mapKeyToFloor+0x10>
		return SECOND_FLOOR;
	}
	return LOW_FLOOR;
1a00034a:	2000      	movs	r0, #0
}
1a00034c:	4770      	bx	lr
		return SECOND_FLOOR;
1a00034e:	2002      	movs	r0, #2
1a000350:	4770      	bx	lr
		return LOW_FLOOR;
1a000352:	2000      	movs	r0, #0
1a000354:	4770      	bx	lr
		return FIRST_FLOOR;
1a000356:	2001      	movs	r0, #1
1a000358:	4770      	bx	lr

1a00035a <isAcctionKey>:
}

static bool_t isAcctionKey(gpioMap_t key) {
	return key == LOW_FLOOR_KEY
			|| key == FIRST_FLOOR_KEY
			|| key == SECOND_FLOOR_KEY;
1a00035a:	3824      	subs	r0, #36	; 0x24
1a00035c:	b2c0      	uxtb	r0, r0
}
1a00035e:	2802      	cmp	r0, #2
1a000360:	bf8c      	ite	hi
1a000362:	2000      	movhi	r0, #0
1a000364:	2001      	movls	r0, #1
1a000366:	4770      	bx	lr

1a000368 <initElevatorFsm>:
	actualElevatorFsmState = LOW_FLOOR_STATE;
1a000368:	4b01      	ldr	r3, [pc, #4]	; (1a000370 <initElevatorFsm+0x8>)
1a00036a:	2200      	movs	r2, #0
1a00036c:	701a      	strb	r2, [r3, #0]
}
1a00036e:	4770      	bx	lr
1a000370:	100000b8 	.word	0x100000b8

1a000374 <updateElevatorFsm>:
void updateElevatorFsm(gpioMap_t * key) {
1a000374:	b538      	push	{r3, r4, r5, lr}
1a000376:	4605      	mov	r5, r0
	switch (actualElevatorFsmState) {
1a000378:	4b41      	ldr	r3, [pc, #260]	; (1a000480 <updateElevatorFsm+0x10c>)
1a00037a:	781b      	ldrb	r3, [r3, #0]
1a00037c:	2b03      	cmp	r3, #3
1a00037e:	d87c      	bhi.n	1a00047a <updateElevatorFsm+0x106>
1a000380:	e8df f003 	tbb	[pc, r3]
1a000384:	67241002 	.word	0x67241002
		if (isAcctionKey(*key)) {
1a000388:	7800      	ldrb	r0, [r0, #0]
1a00038a:	f7ff ffe6 	bl	1a00035a <isAcctionKey>
1a00038e:	2800      	cmp	r0, #0
1a000390:	d02a      	beq.n	1a0003e8 <updateElevatorFsm+0x74>
			actualElevatorFsmState = GOING_UP_STATE;
1a000392:	4b3b      	ldr	r3, [pc, #236]	; (1a000480 <updateElevatorFsm+0x10c>)
1a000394:	2201      	movs	r2, #1
1a000396:	701a      	strb	r2, [r3, #0]
			requiredFloor = mapKeyToFloor(*key);
1a000398:	7828      	ldrb	r0, [r5, #0]
1a00039a:	f7ff ffd0 	bl	1a00033e <mapKeyToFloor>
1a00039e:	4b39      	ldr	r3, [pc, #228]	; (1a000484 <updateElevatorFsm+0x110>)
1a0003a0:	8018      	strh	r0, [r3, #0]
1a0003a2:	e021      	b.n	1a0003e8 <updateElevatorFsm+0x74>
		if (requiredFloor == actualFloor) {
1a0003a4:	4b37      	ldr	r3, [pc, #220]	; (1a000484 <updateElevatorFsm+0x110>)
1a0003a6:	881a      	ldrh	r2, [r3, #0]
1a0003a8:	4b37      	ldr	r3, [pc, #220]	; (1a000488 <updateElevatorFsm+0x114>)
1a0003aa:	881b      	ldrh	r3, [r3, #0]
1a0003ac:	429a      	cmp	r2, r3
1a0003ae:	d006      	beq.n	1a0003be <updateElevatorFsm+0x4a>
		} else if (*key == MOTOR_KEY) {
1a0003b0:	7802      	ldrb	r2, [r0, #0]
1a0003b2:	2a27      	cmp	r2, #39	; 0x27
1a0003b4:	d118      	bne.n	1a0003e8 <updateElevatorFsm+0x74>
			actualFloor++;
1a0003b6:	3301      	adds	r3, #1
1a0003b8:	4a33      	ldr	r2, [pc, #204]	; (1a000488 <updateElevatorFsm+0x114>)
1a0003ba:	8013      	strh	r3, [r2, #0]
1a0003bc:	e014      	b.n	1a0003e8 <updateElevatorFsm+0x74>
			actualElevatorFsmState = STOPPED_STATE;
1a0003be:	4b30      	ldr	r3, [pc, #192]	; (1a000480 <updateElevatorFsm+0x10c>)
1a0003c0:	2202      	movs	r2, #2
1a0003c2:	701a      	strb	r2, [r3, #0]
			stoppedTime = ZERO;
1a0003c4:	4b31      	ldr	r3, [pc, #196]	; (1a00048c <updateElevatorFsm+0x118>)
1a0003c6:	2200      	movs	r2, #0
1a0003c8:	801a      	strh	r2, [r3, #0]
1a0003ca:	e00d      	b.n	1a0003e8 <updateElevatorFsm+0x74>
		if (stoppedTime >= DEFAULT_MAX_STOPPED_10_SEG) {
1a0003cc:	4b2f      	ldr	r3, [pc, #188]	; (1a00048c <updateElevatorFsm+0x118>)
1a0003ce:	881b      	ldrh	r3, [r3, #0]
1a0003d0:	2bc7      	cmp	r3, #199	; 0xc7
1a0003d2:	d91f      	bls.n	1a000414 <updateElevatorFsm+0xa0>
			requiredFloor = LOW_FLOOR;
1a0003d4:	4b2b      	ldr	r3, [pc, #172]	; (1a000484 <updateElevatorFsm+0x110>)
1a0003d6:	2200      	movs	r2, #0
1a0003d8:	801a      	strh	r2, [r3, #0]
			actualElevatorFsmState = GOING_DOWN_STATE;
1a0003da:	4b29      	ldr	r3, [pc, #164]	; (1a000480 <updateElevatorFsm+0x10c>)
1a0003dc:	2203      	movs	r2, #3
1a0003de:	701a      	strb	r2, [r3, #0]
		stoppedTime++;
1a0003e0:	4a2a      	ldr	r2, [pc, #168]	; (1a00048c <updateElevatorFsm+0x118>)
1a0003e2:	8813      	ldrh	r3, [r2, #0]
1a0003e4:	3301      	adds	r3, #1
1a0003e6:	8013      	strh	r3, [r2, #0]
	actualFloorLedIndicator(actualFloor);			// actualizacion led de piso
1a0003e8:	4c27      	ldr	r4, [pc, #156]	; (1a000488 <updateElevatorFsm+0x114>)
1a0003ea:	8820      	ldrh	r0, [r4, #0]
1a0003ec:	f000 f8b8 	bl	1a000560 <actualFloorLedIndicator>
	motorStateIndicator(actualElevatorFsmState);	// actualizacion de led de motor
1a0003f0:	4b23      	ldr	r3, [pc, #140]	; (1a000480 <updateElevatorFsm+0x10c>)
1a0003f2:	7818      	ldrb	r0, [r3, #0]
1a0003f4:	f000 f8c6 	bl	1a000584 <motorStateIndicator>
	actualFloor = actualFloor % 3;					// borro la tecla presionada
1a0003f8:	8822      	ldrh	r2, [r4, #0]
1a0003fa:	4b25      	ldr	r3, [pc, #148]	; (1a000490 <updateElevatorFsm+0x11c>)
1a0003fc:	fba3 1302 	umull	r1, r3, r3, r2
1a000400:	085b      	lsrs	r3, r3, #1
1a000402:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a000406:	1ad3      	subs	r3, r2, r3
1a000408:	8023      	strh	r3, [r4, #0]
	*key = T_FIL1;
1a00040a:	2300      	movs	r3, #0
1a00040c:	702b      	strb	r3, [r5, #0]
	printElevatorStatus();
1a00040e:	f7ff ff77 	bl	1a000300 <printElevatorStatus>
}
1a000412:	bd38      	pop	{r3, r4, r5, pc}
		} else if (isAcctionKey(*key)) {
1a000414:	7804      	ldrb	r4, [r0, #0]
1a000416:	4620      	mov	r0, r4
1a000418:	f7ff ff9f 	bl	1a00035a <isAcctionKey>
1a00041c:	b938      	cbnz	r0, 1a00042e <updateElevatorFsm+0xba>
		} else if(actualFloor == LOW_FLOOR) {
1a00041e:	4b1a      	ldr	r3, [pc, #104]	; (1a000488 <updateElevatorFsm+0x114>)
1a000420:	881b      	ldrh	r3, [r3, #0]
1a000422:	2b00      	cmp	r3, #0
1a000424:	d1dc      	bne.n	1a0003e0 <updateElevatorFsm+0x6c>
			actualElevatorFsmState = LOW_FLOOR_STATE;
1a000426:	4b16      	ldr	r3, [pc, #88]	; (1a000480 <updateElevatorFsm+0x10c>)
1a000428:	2200      	movs	r2, #0
1a00042a:	701a      	strb	r2, [r3, #0]
1a00042c:	e7d8      	b.n	1a0003e0 <updateElevatorFsm+0x6c>
			requiredFloor = mapKeyToFloor(*key);
1a00042e:	4620      	mov	r0, r4
1a000430:	f7ff ff85 	bl	1a00033e <mapKeyToFloor>
1a000434:	4b13      	ldr	r3, [pc, #76]	; (1a000484 <updateElevatorFsm+0x110>)
1a000436:	8018      	strh	r0, [r3, #0]
			if (actualFloor - requiredFloor > ZERO) {
1a000438:	4b13      	ldr	r3, [pc, #76]	; (1a000488 <updateElevatorFsm+0x114>)
1a00043a:	881b      	ldrh	r3, [r3, #0]
1a00043c:	1a18      	subs	r0, r3, r0
1a00043e:	2800      	cmp	r0, #0
1a000440:	dd03      	ble.n	1a00044a <updateElevatorFsm+0xd6>
				actualElevatorFsmState = GOING_DOWN_STATE;
1a000442:	4b0f      	ldr	r3, [pc, #60]	; (1a000480 <updateElevatorFsm+0x10c>)
1a000444:	2203      	movs	r2, #3
1a000446:	701a      	strb	r2, [r3, #0]
1a000448:	e7ca      	b.n	1a0003e0 <updateElevatorFsm+0x6c>
				actualElevatorFsmState = GOING_UP_STATE;
1a00044a:	4b0d      	ldr	r3, [pc, #52]	; (1a000480 <updateElevatorFsm+0x10c>)
1a00044c:	2201      	movs	r2, #1
1a00044e:	701a      	strb	r2, [r3, #0]
1a000450:	e7c6      	b.n	1a0003e0 <updateElevatorFsm+0x6c>
		if (requiredFloor == actualFloor) {
1a000452:	4b0c      	ldr	r3, [pc, #48]	; (1a000484 <updateElevatorFsm+0x110>)
1a000454:	881a      	ldrh	r2, [r3, #0]
1a000456:	4b0c      	ldr	r3, [pc, #48]	; (1a000488 <updateElevatorFsm+0x114>)
1a000458:	881b      	ldrh	r3, [r3, #0]
1a00045a:	429a      	cmp	r2, r3
1a00045c:	d006      	beq.n	1a00046c <updateElevatorFsm+0xf8>
		} else if (*key == MOTOR_KEY) {
1a00045e:	7802      	ldrb	r2, [r0, #0]
1a000460:	2a27      	cmp	r2, #39	; 0x27
1a000462:	d1c1      	bne.n	1a0003e8 <updateElevatorFsm+0x74>
			actualFloor--;
1a000464:	3b01      	subs	r3, #1
1a000466:	4a08      	ldr	r2, [pc, #32]	; (1a000488 <updateElevatorFsm+0x114>)
1a000468:	8013      	strh	r3, [r2, #0]
1a00046a:	e7bd      	b.n	1a0003e8 <updateElevatorFsm+0x74>
			actualElevatorFsmState = STOPPED_STATE;
1a00046c:	4b04      	ldr	r3, [pc, #16]	; (1a000480 <updateElevatorFsm+0x10c>)
1a00046e:	2202      	movs	r2, #2
1a000470:	701a      	strb	r2, [r3, #0]
			stoppedTime = ZERO;
1a000472:	4b06      	ldr	r3, [pc, #24]	; (1a00048c <updateElevatorFsm+0x118>)
1a000474:	2200      	movs	r2, #0
1a000476:	801a      	strh	r2, [r3, #0]
1a000478:	e7b6      	b.n	1a0003e8 <updateElevatorFsm+0x74>
		initElevatorFsm();
1a00047a:	f7ff ff75 	bl	1a000368 <initElevatorFsm>
		break;
1a00047e:	e7b3      	b.n	1a0003e8 <updateElevatorFsm+0x74>
1a000480:	100000b8 	.word	0x100000b8
1a000484:	10000092 	.word	0x10000092
1a000488:	10000090 	.word	0x10000090
1a00048c:	10000094 	.word	0x10000094
1a000490:	aaaaaaab 	.word	0xaaaaaaab

1a000494 <redOn>:
			break;
	}
	return;
}

static void redOn() {
1a000494:	b508      	push	{r3, lr}
	gpioWrite(RED_LED, TRUE);
1a000496:	2101      	movs	r1, #1
1a000498:	202b      	movs	r0, #43	; 0x2b
1a00049a:	f001 f86d 	bl	1a001578 <gpioWrite>
	gpioWrite(YELLOW_LED, FALSE);
1a00049e:	2100      	movs	r1, #0
1a0004a0:	202c      	movs	r0, #44	; 0x2c
1a0004a2:	f001 f869 	bl	1a001578 <gpioWrite>
	gpioWrite(GREEN_LED, FALSE);
1a0004a6:	2100      	movs	r1, #0
1a0004a8:	202d      	movs	r0, #45	; 0x2d
1a0004aa:	f001 f865 	bl	1a001578 <gpioWrite>
}
1a0004ae:	bd08      	pop	{r3, pc}

1a0004b0 <yellowOn>:
	gpioWrite(RED_LED, FALSE);
	gpioWrite(YELLOW_LED, FALSE);
	gpioWrite(GREEN_LED, TRUE);
}

static void yellowOn() {
1a0004b0:	b508      	push	{r3, lr}
	gpioWrite(RED_LED, FALSE);
1a0004b2:	2100      	movs	r1, #0
1a0004b4:	202b      	movs	r0, #43	; 0x2b
1a0004b6:	f001 f85f 	bl	1a001578 <gpioWrite>
	gpioWrite(YELLOW_LED, TRUE);
1a0004ba:	2101      	movs	r1, #1
1a0004bc:	202c      	movs	r0, #44	; 0x2c
1a0004be:	f001 f85b 	bl	1a001578 <gpioWrite>
	gpioWrite(GREEN_LED, FALSE);
1a0004c2:	2100      	movs	r1, #0
1a0004c4:	202d      	movs	r0, #45	; 0x2d
1a0004c6:	f001 f857 	bl	1a001578 <gpioWrite>
}
1a0004ca:	bd08      	pop	{r3, pc}

1a0004cc <greenOn>:
static void greenOn() {
1a0004cc:	b508      	push	{r3, lr}
	gpioWrite(RED_LED, FALSE);
1a0004ce:	2100      	movs	r1, #0
1a0004d0:	202b      	movs	r0, #43	; 0x2b
1a0004d2:	f001 f851 	bl	1a001578 <gpioWrite>
	gpioWrite(YELLOW_LED, FALSE);
1a0004d6:	2100      	movs	r1, #0
1a0004d8:	202c      	movs	r0, #44	; 0x2c
1a0004da:	f001 f84d 	bl	1a001578 <gpioWrite>
	gpioWrite(GREEN_LED, TRUE);
1a0004de:	2101      	movs	r1, #1
1a0004e0:	202d      	movs	r0, #45	; 0x2d
1a0004e2:	f001 f849 	bl	1a001578 <gpioWrite>
}
1a0004e6:	bd08      	pop	{r3, pc}

1a0004e8 <error>:
	gpioWrite(LEDB, FALSE);
	gpioWrite(LEDR, FALSE);
	gpioWrite(LEDG, TRUE);
}

static void error() {
1a0004e8:	b508      	push	{r3, lr}
	gpioWrite(RED_LED, TRUE);
1a0004ea:	2101      	movs	r1, #1
1a0004ec:	202b      	movs	r0, #43	; 0x2b
1a0004ee:	f001 f843 	bl	1a001578 <gpioWrite>
	gpioWrite(YELLOW_LED, TRUE);
1a0004f2:	2101      	movs	r1, #1
1a0004f4:	202c      	movs	r0, #44	; 0x2c
1a0004f6:	f001 f83f 	bl	1a001578 <gpioWrite>
	gpioWrite(GREEN_LED, TRUE);
1a0004fa:	2101      	movs	r1, #1
1a0004fc:	202d      	movs	r0, #45	; 0x2d
1a0004fe:	f001 f83b 	bl	1a001578 <gpioWrite>
	gpioWrite(LEDG, TRUE);
1a000502:	2101      	movs	r1, #1
1a000504:	2029      	movs	r0, #41	; 0x29
1a000506:	f001 f837 	bl	1a001578 <gpioWrite>
}
1a00050a:	bd08      	pop	{r3, pc}

1a00050c <rgbGreenLed>:
static void rgbGreenLed() {
1a00050c:	b508      	push	{r3, lr}
	gpioWrite(LEDB, FALSE);
1a00050e:	2100      	movs	r1, #0
1a000510:	202a      	movs	r0, #42	; 0x2a
1a000512:	f001 f831 	bl	1a001578 <gpioWrite>
	gpioWrite(LEDR, FALSE);
1a000516:	2100      	movs	r1, #0
1a000518:	2028      	movs	r0, #40	; 0x28
1a00051a:	f001 f82d 	bl	1a001578 <gpioWrite>
	gpioWrite(LEDG, TRUE);
1a00051e:	2101      	movs	r1, #1
1a000520:	2029      	movs	r0, #41	; 0x29
1a000522:	f001 f829 	bl	1a001578 <gpioWrite>
}
1a000526:	bd08      	pop	{r3, pc}

1a000528 <rgbBlueLed>:
static void rgbBlueLed() {
1a000528:	b508      	push	{r3, lr}
	gpioWrite(LEDB, TRUE);
1a00052a:	2101      	movs	r1, #1
1a00052c:	202a      	movs	r0, #42	; 0x2a
1a00052e:	f001 f823 	bl	1a001578 <gpioWrite>
	gpioWrite(LEDR, FALSE);
1a000532:	2100      	movs	r1, #0
1a000534:	2028      	movs	r0, #40	; 0x28
1a000536:	f001 f81f 	bl	1a001578 <gpioWrite>
	gpioWrite(LEDG, FALSE);
1a00053a:	2100      	movs	r1, #0
1a00053c:	2029      	movs	r0, #41	; 0x29
1a00053e:	f001 f81b 	bl	1a001578 <gpioWrite>
}
1a000542:	bd08      	pop	{r3, pc}

1a000544 <rgbRedLed>:
static void rgbRedLed() {
1a000544:	b508      	push	{r3, lr}
	gpioWrite(LEDB, FALSE);
1a000546:	2100      	movs	r1, #0
1a000548:	202a      	movs	r0, #42	; 0x2a
1a00054a:	f001 f815 	bl	1a001578 <gpioWrite>
	gpioWrite(LEDR, TRUE);
1a00054e:	2101      	movs	r1, #1
1a000550:	2028      	movs	r0, #40	; 0x28
1a000552:	f001 f811 	bl	1a001578 <gpioWrite>
	gpioWrite(LEDG, FALSE);
1a000556:	2100      	movs	r1, #0
1a000558:	2029      	movs	r0, #41	; 0x29
1a00055a:	f001 f80d 	bl	1a001578 <gpioWrite>
}
1a00055e:	bd08      	pop	{r3, pc}

1a000560 <actualFloorLedIndicator>:
void actualFloorLedIndicator(uint16_t floor) {
1a000560:	b508      	push	{r3, lr}
	switch(floor){
1a000562:	2801      	cmp	r0, #1
1a000564:	d008      	beq.n	1a000578 <actualFloorLedIndicator+0x18>
1a000566:	b120      	cbz	r0, 1a000572 <actualFloorLedIndicator+0x12>
1a000568:	2802      	cmp	r0, #2
1a00056a:	d008      	beq.n	1a00057e <actualFloorLedIndicator+0x1e>
			error();
1a00056c:	f7ff ffbc 	bl	1a0004e8 <error>
	return;
1a000570:	e001      	b.n	1a000576 <actualFloorLedIndicator+0x16>
			redOn();
1a000572:	f7ff ff8f 	bl	1a000494 <redOn>
}
1a000576:	bd08      	pop	{r3, pc}
			yellowOn();
1a000578:	f7ff ff9a 	bl	1a0004b0 <yellowOn>
			break;
1a00057c:	e7fb      	b.n	1a000576 <actualFloorLedIndicator+0x16>
			greenOn();
1a00057e:	f7ff ffa5 	bl	1a0004cc <greenOn>
			break;
1a000582:	e7f8      	b.n	1a000576 <actualFloorLedIndicator+0x16>

1a000584 <motorStateIndicator>:
void motorStateIndicator(ElevatorFsmState elevatorFsmState) {
1a000584:	b508      	push	{r3, lr}
	switch(elevatorFsmState){
1a000586:	2803      	cmp	r0, #3
1a000588:	d80f      	bhi.n	1a0005aa <motorStateIndicator+0x26>
1a00058a:	e8df f000 	tbb	[pc, r0]
1a00058e:	0502      	.short	0x0502
1a000590:	0b08      	.short	0x0b08
			rgbBlueLed();
1a000592:	f7ff ffc9 	bl	1a000528 <rgbBlueLed>
}
1a000596:	bd08      	pop	{r3, pc}
			rgbGreenLed();
1a000598:	f7ff ffb8 	bl	1a00050c <rgbGreenLed>
			break;
1a00059c:	e7fb      	b.n	1a000596 <motorStateIndicator+0x12>
			rgbBlueLed();
1a00059e:	f7ff ffc3 	bl	1a000528 <rgbBlueLed>
			break;
1a0005a2:	e7f8      	b.n	1a000596 <motorStateIndicator+0x12>
			rgbRedLed();
1a0005a4:	f7ff ffce 	bl	1a000544 <rgbRedLed>
			break;
1a0005a8:	e7f5      	b.n	1a000596 <motorStateIndicator+0x12>
			error();
1a0005aa:	f7ff ff9d 	bl	1a0004e8 <error>
	return;
1a0005ae:	e7f2      	b.n	1a000596 <motorStateIndicator+0x12>

1a0005b0 <main>:
#define DEFAULT_ELEVATOR_TIME 50

debounceData_t  lowLevelKey, floorOneKey, floorTwoKey, motorKey;
gpioMap_t pressedKey;

int main(void) {
1a0005b0:	b500      	push	{lr}
1a0005b2:	b08d      	sub	sp, #52	; 0x34

    boardConfig();
1a0005b4:	f001 f844 	bl	1a001640 <boardInit>

    delay_t keysDelay;
    delay_t elevatorDelay;

    delayConfig(&keysDelay, DEFAULT_DEBOUNCE_TIME);
1a0005b8:	2228      	movs	r2, #40	; 0x28
1a0005ba:	2300      	movs	r3, #0
1a0005bc:	a806      	add	r0, sp, #24
1a0005be:	f001 f8b9 	bl	1a001734 <delayInit>
    delayConfig(&elevatorDelay, DEFAULT_ELEVATOR_TIME);
1a0005c2:	2232      	movs	r2, #50	; 0x32
1a0005c4:	2300      	movs	r3, #0
1a0005c6:	4668      	mov	r0, sp
1a0005c8:	f001 f8b4 	bl	1a001734 <delayInit>

    uartConfig(UART_USB, DEFAULT_BAUD_RATE);
1a0005cc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0005d0:	2003      	movs	r0, #3
1a0005d2:	f000 fda5 	bl	1a001120 <uartInit>

    initDebounceFsm(&lowLevelKey, LOW_FLOOR_KEY);
1a0005d6:	2124      	movs	r1, #36	; 0x24
1a0005d8:	4818      	ldr	r0, [pc, #96]	; (1a00063c <main+0x8c>)
1a0005da:	f000 f839 	bl	1a000650 <initDebounceFsm>
    initDebounceFsm(&floorOneKey, FIRST_FLOOR_KEY);
1a0005de:	2125      	movs	r1, #37	; 0x25
1a0005e0:	4817      	ldr	r0, [pc, #92]	; (1a000640 <main+0x90>)
1a0005e2:	f000 f835 	bl	1a000650 <initDebounceFsm>
    initDebounceFsm(&floorTwoKey, SECOND_FLOOR_KEY);
1a0005e6:	2126      	movs	r1, #38	; 0x26
1a0005e8:	4816      	ldr	r0, [pc, #88]	; (1a000644 <main+0x94>)
1a0005ea:	f000 f831 	bl	1a000650 <initDebounceFsm>
    initDebounceFsm(&motorKey, MOTOR_KEY);
1a0005ee:	2127      	movs	r1, #39	; 0x27
1a0005f0:	4815      	ldr	r0, [pc, #84]	; (1a000648 <main+0x98>)
1a0005f2:	f000 f82d 	bl	1a000650 <initDebounceFsm>

    initElevatorFsm();
1a0005f6:	f7ff feb7 	bl	1a000368 <initElevatorFsm>
1a0005fa:	e003      	b.n	1a000604 <main+0x54>
            updateDebounceFsm(&floorOneKey, &pressedKey);
            updateDebounceFsm(&floorTwoKey, &pressedKey);
            updateDebounceFsm(&motorKey, &pressedKey);
        }

        if (delayRead(&elevatorDelay)) {
1a0005fc:	4668      	mov	r0, sp
1a0005fe:	f001 f8a9 	bl	1a001754 <delayRead>
1a000602:	b9b0      	cbnz	r0, 1a000632 <main+0x82>
        if (delayRead(&keysDelay)) {
1a000604:	a806      	add	r0, sp, #24
1a000606:	f001 f8a5 	bl	1a001754 <delayRead>
1a00060a:	2800      	cmp	r0, #0
1a00060c:	d0f6      	beq.n	1a0005fc <main+0x4c>
            updateDebounceFsm(&lowLevelKey, &pressedKey);
1a00060e:	4c0f      	ldr	r4, [pc, #60]	; (1a00064c <main+0x9c>)
1a000610:	4621      	mov	r1, r4
1a000612:	480a      	ldr	r0, [pc, #40]	; (1a00063c <main+0x8c>)
1a000614:	f000 f820 	bl	1a000658 <updateDebounceFsm>
            updateDebounceFsm(&floorOneKey, &pressedKey);
1a000618:	4621      	mov	r1, r4
1a00061a:	4809      	ldr	r0, [pc, #36]	; (1a000640 <main+0x90>)
1a00061c:	f000 f81c 	bl	1a000658 <updateDebounceFsm>
            updateDebounceFsm(&floorTwoKey, &pressedKey);
1a000620:	4621      	mov	r1, r4
1a000622:	4808      	ldr	r0, [pc, #32]	; (1a000644 <main+0x94>)
1a000624:	f000 f818 	bl	1a000658 <updateDebounceFsm>
            updateDebounceFsm(&motorKey, &pressedKey);
1a000628:	4621      	mov	r1, r4
1a00062a:	4807      	ldr	r0, [pc, #28]	; (1a000648 <main+0x98>)
1a00062c:	f000 f814 	bl	1a000658 <updateDebounceFsm>
1a000630:	e7e4      	b.n	1a0005fc <main+0x4c>
        	updateElevatorFsm(&pressedKey);
1a000632:	4806      	ldr	r0, [pc, #24]	; (1a00064c <main+0x9c>)
1a000634:	f7ff fe9e 	bl	1a000374 <updateElevatorFsm>
1a000638:	e7e4      	b.n	1a000604 <main+0x54>
1a00063a:	bf00      	nop
1a00063c:	10000100 	.word	0x10000100
1a000640:	100000c0 	.word	0x100000c0
1a000644:	100000e0 	.word	0x100000e0
1a000648:	10000128 	.word	0x10000128
1a00064c:	10000120 	.word	0x10000120

1a000650 <initDebounceFsm>:
#include "led_service.h"

#define DEBOUNCE_DEFAULT_TIME 40

void initDebounceFsm(debounceData_t * dataStruct, gpioMap_t key) {
	dataStruct->key = key;
1a000650:	7001      	strb	r1, [r0, #0]
	dataStruct->state = BUTTON_UP_STATE;
1a000652:	2300      	movs	r3, #0
1a000654:	7043      	strb	r3, [r0, #1]
	return;
}
1a000656:	4770      	bx	lr

1a000658 <updateDebounceFsm>:

void updateDebounceFsm(debounceData_t * ptrDataStruct, gpioMap_t * pressedKey) {
1a000658:	b538      	push	{r3, r4, r5, lr}
1a00065a:	4604      	mov	r4, r0
1a00065c:	460d      	mov	r5, r1

	switch (ptrDataStruct->state) {
1a00065e:	7843      	ldrb	r3, [r0, #1]
1a000660:	2b03      	cmp	r3, #3
1a000662:	d831      	bhi.n	1a0006c8 <updateDebounceFsm+0x70>
1a000664:	e8df f003 	tbb	[pc, r3]
1a000668:	20190902 	.word	0x20190902

	case BUTTON_UP_STATE:
		if (isPress(ptrDataStruct->key)) {
1a00066c:	7800      	ldrb	r0, [r0, #0]
1a00066e:	f7ff fe4f 	bl	1a000310 <isPress>
1a000672:	b358      	cbz	r0, 1a0006cc <updateDebounceFsm+0x74>
			ptrDataStruct->state = BUTTON_FALLING_STATE;
1a000674:	2301      	movs	r3, #1
1a000676:	7063      	strb	r3, [r4, #1]
1a000678:	e028      	b.n	1a0006cc <updateDebounceFsm+0x74>
		}
		break;

	case BUTTON_FALLING_STATE:
		if (isPress(ptrDataStruct->key)) {
1a00067a:	7800      	ldrb	r0, [r0, #0]
1a00067c:	f7ff fe48 	bl	1a000310 <isPress>
1a000680:	b910      	cbnz	r0, 1a000688 <updateDebounceFsm+0x30>
			if(buttonPressed(ptrDataStruct->key)) {
				*pressedKey = ptrDataStruct->key;
			}
				ptrDataStruct->state = BUTTON_DOWN_STATE;
			} else {
				ptrDataStruct->state = BUTTON_UP_STATE;
1a000682:	2300      	movs	r3, #0
1a000684:	7063      	strb	r3, [r4, #1]
1a000686:	e021      	b.n	1a0006cc <updateDebounceFsm+0x74>
			if(buttonPressed(ptrDataStruct->key)) {
1a000688:	7820      	ldrb	r0, [r4, #0]
1a00068a:	f7ff fe4c 	bl	1a000326 <buttonPressed>
1a00068e:	b108      	cbz	r0, 1a000694 <updateDebounceFsm+0x3c>
				*pressedKey = ptrDataStruct->key;
1a000690:	7823      	ldrb	r3, [r4, #0]
1a000692:	702b      	strb	r3, [r5, #0]
				ptrDataStruct->state = BUTTON_DOWN_STATE;
1a000694:	2302      	movs	r3, #2
1a000696:	7063      	strb	r3, [r4, #1]
1a000698:	e018      	b.n	1a0006cc <updateDebounceFsm+0x74>
			}
		break;

	case BUTTON_DOWN_STATE:
		if (notPress(ptrDataStruct->key)) {
1a00069a:	7800      	ldrb	r0, [r0, #0]
1a00069c:	f7ff fe3f 	bl	1a00031e <notPress>
1a0006a0:	b1a0      	cbz	r0, 1a0006cc <updateDebounceFsm+0x74>
			ptrDataStruct->state = BUTTON_RISING_STATE;
1a0006a2:	2303      	movs	r3, #3
1a0006a4:	7063      	strb	r3, [r4, #1]
1a0006a6:	e011      	b.n	1a0006cc <updateDebounceFsm+0x74>
		}
		break;

	case BUTTON_RISING_STATE:
		if (notPress(ptrDataStruct->key)) {
1a0006a8:	7800      	ldrb	r0, [r0, #0]
1a0006aa:	f7ff fe38 	bl	1a00031e <notPress>
1a0006ae:	b910      	cbnz	r0, 1a0006b6 <updateDebounceFsm+0x5e>
				if (buttonReleased(ptrDataStruct->key)) {
					*pressedKey = MOTOR_KEY;
				}
				ptrDataStruct->state = BUTTON_UP_STATE;
			} else {
				ptrDataStruct->state = BUTTON_DOWN_STATE;
1a0006b0:	2302      	movs	r3, #2
1a0006b2:	7063      	strb	r3, [r4, #1]
1a0006b4:	e00a      	b.n	1a0006cc <updateDebounceFsm+0x74>
				if (buttonReleased(ptrDataStruct->key)) {
1a0006b6:	7820      	ldrb	r0, [r4, #0]
1a0006b8:	f7ff fe3c 	bl	1a000334 <buttonReleased>
1a0006bc:	b108      	cbz	r0, 1a0006c2 <updateDebounceFsm+0x6a>
					*pressedKey = MOTOR_KEY;
1a0006be:	2327      	movs	r3, #39	; 0x27
1a0006c0:	702b      	strb	r3, [r5, #0]
				ptrDataStruct->state = BUTTON_UP_STATE;
1a0006c2:	2300      	movs	r3, #0
1a0006c4:	7063      	strb	r3, [r4, #1]
1a0006c6:	e001      	b.n	1a0006cc <updateDebounceFsm+0x74>
			}
		break;

	default:
		ptrDataStruct->state = BUTTON_UP_STATE;
1a0006c8:	2300      	movs	r3, #0
1a0006ca:	7043      	strb	r3, [r0, #1]
		break;
	}
	return;
}
1a0006cc:	bd38      	pop	{r3, r4, r5, pc}
1a0006ce:	Address 0x000000001a0006ce is out of bounds.


1a0006d0 <Reset_Handler>:
void Reset_Handler(void) {
1a0006d0:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1a0006d2:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0006d4:	4b18      	ldr	r3, [pc, #96]	; (1a000738 <Reset_Handler+0x68>)
1a0006d6:	4a19      	ldr	r2, [pc, #100]	; (1a00073c <Reset_Handler+0x6c>)
1a0006d8:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0006da:	3304      	adds	r3, #4
1a0006dc:	4a18      	ldr	r2, [pc, #96]	; (1a000740 <Reset_Handler+0x70>)
1a0006de:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0006e0:	2300      	movs	r3, #0
1a0006e2:	e005      	b.n	1a0006f0 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0006e4:	4a17      	ldr	r2, [pc, #92]	; (1a000744 <Reset_Handler+0x74>)
1a0006e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0006ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0006ee:	3301      	adds	r3, #1
1a0006f0:	2b07      	cmp	r3, #7
1a0006f2:	d9f7      	bls.n	1a0006e4 <Reset_Handler+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
1a0006f4:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0006f6:	4b14      	ldr	r3, [pc, #80]	; (1a000748 <Reset_Handler+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0006f8:	e007      	b.n	1a00070a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0006fa:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0006fe:	689a      	ldr	r2, [r3, #8]
1a000700:	6859      	ldr	r1, [r3, #4]
1a000702:	6818      	ldr	r0, [r3, #0]
1a000704:	f7ff fd41 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000708:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00070a:	4a10      	ldr	r2, [pc, #64]	; (1a00074c <Reset_Handler+0x7c>)
1a00070c:	4293      	cmp	r3, r2
1a00070e:	d3f4      	bcc.n	1a0006fa <Reset_Handler+0x2a>
1a000710:	e006      	b.n	1a000720 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000712:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000714:	6859      	ldr	r1, [r3, #4]
1a000716:	f854 0b08 	ldr.w	r0, [r4], #8
1a00071a:	f7ff fd45 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00071e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000720:	4a0b      	ldr	r2, [pc, #44]	; (1a000750 <Reset_Handler+0x80>)
1a000722:	4293      	cmp	r3, r2
1a000724:	d3f5      	bcc.n	1a000712 <Reset_Handler+0x42>
    SystemInit();
1a000726:	f000 fcbd 	bl	1a0010a4 <SystemInit>
    __libc_init_array();
1a00072a:	f001 f9fb 	bl	1a001b24 <__libc_init_array>
    main();
1a00072e:	f7ff ff3f 	bl	1a0005b0 <main>
        __WFI();
1a000732:	bf30      	wfi
1a000734:	e7fd      	b.n	1a000732 <Reset_Handler+0x62>
1a000736:	bf00      	nop
1a000738:	40053100 	.word	0x40053100
1a00073c:	10df1000 	.word	0x10df1000
1a000740:	01dff7ff 	.word	0x01dff7ff
1a000744:	e000e280 	.word	0xe000e280
1a000748:	1a000114 	.word	0x1a000114
1a00074c:	1a000150 	.word	0x1a000150
1a000750:	1a000178 	.word	0x1a000178

1a000754 <_init>:
void _init(void) {}
1a000754:	4770      	bx	lr
1a000756:	Address 0x000000001a000756 is out of bounds.


1a000758 <Board_Debug_Init>:
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
}


void Board_Debug_Init(void)
{
1a000758:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a00075a:	4c07      	ldr	r4, [pc, #28]	; (1a000778 <Board_Debug_Init+0x20>)
1a00075c:	4620      	mov	r0, r4
1a00075e:	f000 f87f 	bl	1a000860 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000762:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000766:	4620      	mov	r0, r4
1a000768:	f000 f8c4 	bl	1a0008f4 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a00076c:	2303      	movs	r3, #3
1a00076e:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000770:	2301      	movs	r3, #1
1a000772:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a000774:	bd10      	pop	{r4, pc}
1a000776:	bf00      	nop
1a000778:	400c1000 	.word	0x400c1000

1a00077c <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a00077c:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00077e:	f7ff ffeb 	bl	1a000758 <Board_Debug_Init>
1a000782:	bd08      	pop	{r3, pc}

1a000784 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000784:	2300      	movs	r3, #0
1a000786:	2b1c      	cmp	r3, #28
1a000788:	d812      	bhi.n	1a0007b0 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00078a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00078c:	4a09      	ldr	r2, [pc, #36]	; (1a0007b4 <Board_SetupMuxing+0x30>)
1a00078e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000792:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000796:	784a      	ldrb	r2, [r1, #1]
1a000798:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00079a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00079e:	4906      	ldr	r1, [pc, #24]	; (1a0007b8 <Board_SetupMuxing+0x34>)
1a0007a0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0007a4:	3301      	adds	r3, #1
1a0007a6:	2b1c      	cmp	r3, #28
1a0007a8:	d9f0      	bls.n	1a00078c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0007aa:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0007ae:	4770      	bx	lr
1a0007b0:	4770      	bx	lr
1a0007b2:	bf00      	nop
1a0007b4:	1a001b90 	.word	0x1a001b90
1a0007b8:	40086000 	.word	0x40086000

1a0007bc <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0007bc:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0007be:	4a17      	ldr	r2, [pc, #92]	; (1a00081c <Board_SetupClocking+0x60>)
1a0007c0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0007c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0007c8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0007cc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0007d0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0007d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0007d8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0007dc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0007e0:	2201      	movs	r2, #1
1a0007e2:	490f      	ldr	r1, [pc, #60]	; (1a000820 <Board_SetupClocking+0x64>)
1a0007e4:	2006      	movs	r0, #6
1a0007e6:	f000 fbb3 	bl	1a000f50 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0007ea:	2400      	movs	r4, #0
1a0007ec:	b14c      	cbz	r4, 1a000802 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0007ee:	4b0b      	ldr	r3, [pc, #44]	; (1a00081c <Board_SetupClocking+0x60>)
1a0007f0:	685a      	ldr	r2, [r3, #4]
1a0007f2:	f022 020c 	bic.w	r2, r2, #12
1a0007f6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0007f8:	685a      	ldr	r2, [r3, #4]
1a0007fa:	f042 0203 	orr.w	r2, r2, #3
1a0007fe:	605a      	str	r2, [r3, #4]
}
1a000800:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000802:	4808      	ldr	r0, [pc, #32]	; (1a000824 <Board_SetupClocking+0x68>)
1a000804:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000808:	2301      	movs	r3, #1
1a00080a:	788a      	ldrb	r2, [r1, #2]
1a00080c:	7849      	ldrb	r1, [r1, #1]
1a00080e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000812:	f000 fb07 	bl	1a000e24 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000816:	3401      	adds	r4, #1
1a000818:	e7e8      	b.n	1a0007ec <Board_SetupClocking+0x30>
1a00081a:	bf00      	nop
1a00081c:	40043000 	.word	0x40043000
1a000820:	0c28cb00 	.word	0x0c28cb00
1a000824:	1a001b8c 	.word	0x1a001b8c

1a000828 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000828:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00082a:	f7ff ffab 	bl	1a000784 <Board_SetupMuxing>
    Board_SetupClocking();
1a00082e:	f7ff ffc5 	bl	1a0007bc <Board_SetupClocking>
}
1a000832:	bd08      	pop	{r3, pc}

1a000834 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000834:	4b09      	ldr	r3, [pc, #36]	; (1a00085c <Chip_UART_GetIndex+0x28>)
1a000836:	4298      	cmp	r0, r3
1a000838:	d009      	beq.n	1a00084e <Chip_UART_GetIndex+0x1a>
1a00083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00083e:	4298      	cmp	r0, r3
1a000840:	d007      	beq.n	1a000852 <Chip_UART_GetIndex+0x1e>
1a000842:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000846:	4298      	cmp	r0, r3
1a000848:	d005      	beq.n	1a000856 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00084a:	2000      	movs	r0, #0
1a00084c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00084e:	2002      	movs	r0, #2
1a000850:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000852:	2003      	movs	r0, #3
1a000854:	4770      	bx	lr
			return 1;
1a000856:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000858:	4770      	bx	lr
1a00085a:	bf00      	nop
1a00085c:	400c1000 	.word	0x400c1000

1a000860 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000860:	b530      	push	{r4, r5, lr}
1a000862:	b083      	sub	sp, #12
1a000864:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000866:	f7ff ffe5 	bl	1a000834 <Chip_UART_GetIndex>
1a00086a:	2301      	movs	r3, #1
1a00086c:	461a      	mov	r2, r3
1a00086e:	4619      	mov	r1, r3
1a000870:	4d0e      	ldr	r5, [pc, #56]	; (1a0008ac <Chip_UART_Init+0x4c>)
1a000872:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000876:	f000 fb1b 	bl	1a000eb0 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00087a:	2307      	movs	r3, #7
1a00087c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00087e:	2300      	movs	r3, #0
1a000880:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000882:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000884:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000886:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000888:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00088a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00088c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00088e:	4b08      	ldr	r3, [pc, #32]	; (1a0008b0 <Chip_UART_Init+0x50>)
1a000890:	429c      	cmp	r4, r3
1a000892:	d006      	beq.n	1a0008a2 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000894:	2303      	movs	r3, #3
1a000896:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000898:	2310      	movs	r3, #16
1a00089a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00089c:	9b01      	ldr	r3, [sp, #4]
}
1a00089e:	b003      	add	sp, #12
1a0008a0:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0008a2:	2300      	movs	r3, #0
1a0008a4:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0008a6:	69a3      	ldr	r3, [r4, #24]
1a0008a8:	9301      	str	r3, [sp, #4]
1a0008aa:	e7f3      	b.n	1a000894 <Chip_UART_Init+0x34>
1a0008ac:	1a001c0c 	.word	0x1a001c0c
1a0008b0:	40082000 	.word	0x40082000

1a0008b4 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0008b4:	b538      	push	{r3, r4, r5, lr}
1a0008b6:	4605      	mov	r5, r0
1a0008b8:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0008ba:	f7ff ffbb 	bl	1a000834 <Chip_UART_GetIndex>
1a0008be:	4b0c      	ldr	r3, [pc, #48]	; (1a0008f0 <Chip_UART_SetBaud+0x3c>)
1a0008c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0008c4:	f000 fb12 	bl	1a000eec <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0008c8:	0123      	lsls	r3, r4, #4
1a0008ca:	fbb0 f3f3 	udiv	r3, r0, r3
1a0008ce:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0008d0:	68ea      	ldr	r2, [r5, #12]
1a0008d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0008d6:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0008d8:	6029      	str	r1, [r5, #0]
1a0008da:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0008de:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0008e0:	68ea      	ldr	r2, [r5, #12]
1a0008e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0008e6:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0008e8:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0008ec:	0900      	lsrs	r0, r0, #4
1a0008ee:	bd38      	pop	{r3, r4, r5, pc}
1a0008f0:	1a001c04 	.word	0x1a001c04

1a0008f4 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0008f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0008f8:	b083      	sub	sp, #12
1a0008fa:	4683      	mov	fp, r0
1a0008fc:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0008fe:	f7ff ff99 	bl	1a000834 <Chip_UART_GetIndex>
1a000902:	4b35      	ldr	r3, [pc, #212]	; (1a0009d8 <Chip_UART_SetBaudFDR+0xe4>)
1a000904:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000908:	f000 faf0 	bl	1a000eec <Chip_Clock_GetRate>
1a00090c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00090e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000912:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000914:	2300      	movs	r3, #0
1a000916:	9301      	str	r3, [sp, #4]
1a000918:	46a2      	mov	sl, r4
1a00091a:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00091c:	e02a      	b.n	1a000974 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00091e:	4242      	negs	r2, r0
				div ++;
1a000920:	1c4b      	adds	r3, r1, #1
1a000922:	e017      	b.n	1a000954 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000924:	b30a      	cbz	r2, 1a00096a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000926:	4617      	mov	r7, r2
			sd = d;
1a000928:	9501      	str	r5, [sp, #4]
			sm = m;
1a00092a:	46a2      	mov	sl, r4
			sdiv = div;
1a00092c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00092e:	3501      	adds	r5, #1
1a000930:	42ac      	cmp	r4, r5
1a000932:	d91e      	bls.n	1a000972 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000934:	0933      	lsrs	r3, r6, #4
1a000936:	0730      	lsls	r0, r6, #28
1a000938:	fba4 0100 	umull	r0, r1, r4, r0
1a00093c:	fb04 1103 	mla	r1, r4, r3, r1
1a000940:	1962      	adds	r2, r4, r5
1a000942:	fb08 f202 	mul.w	r2, r8, r2
1a000946:	2300      	movs	r3, #0
1a000948:	f000 ff6c 	bl	1a001824 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a00094c:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00094e:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000950:	2800      	cmp	r0, #0
1a000952:	dbe4      	blt.n	1a00091e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000954:	4297      	cmp	r7, r2
1a000956:	d3ea      	bcc.n	1a00092e <Chip_UART_SetBaudFDR+0x3a>
1a000958:	2b00      	cmp	r3, #0
1a00095a:	d0e8      	beq.n	1a00092e <Chip_UART_SetBaudFDR+0x3a>
1a00095c:	0c19      	lsrs	r1, r3, #16
1a00095e:	d1e6      	bne.n	1a00092e <Chip_UART_SetBaudFDR+0x3a>
1a000960:	2b02      	cmp	r3, #2
1a000962:	d8df      	bhi.n	1a000924 <Chip_UART_SetBaudFDR+0x30>
1a000964:	2d00      	cmp	r5, #0
1a000966:	d0dd      	beq.n	1a000924 <Chip_UART_SetBaudFDR+0x30>
1a000968:	e7e1      	b.n	1a00092e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00096a:	4617      	mov	r7, r2
			sd = d;
1a00096c:	9501      	str	r5, [sp, #4]
			sm = m;
1a00096e:	46a2      	mov	sl, r4
			sdiv = div;
1a000970:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000972:	3401      	adds	r4, #1
1a000974:	b11f      	cbz	r7, 1a00097e <Chip_UART_SetBaudFDR+0x8a>
1a000976:	2c0f      	cmp	r4, #15
1a000978:	d801      	bhi.n	1a00097e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00097a:	2500      	movs	r5, #0
1a00097c:	e7d8      	b.n	1a000930 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00097e:	f1b9 0f00 	cmp.w	r9, #0
1a000982:	d024      	beq.n	1a0009ce <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000984:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00098c:	f8cb 300c 	str.w	r3, [fp, #12]
1a000990:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a000994:	f8cb 3000 	str.w	r3, [fp]
1a000998:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a00099c:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0009a0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0009a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0009a8:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0009ac:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0009b0:	b2db      	uxtb	r3, r3
1a0009b2:	9901      	ldr	r1, [sp, #4]
1a0009b4:	f001 020f 	and.w	r2, r1, #15
1a0009b8:	4313      	orrs	r3, r2
1a0009ba:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0009be:	0933      	lsrs	r3, r6, #4
1a0009c0:	fb0a f303 	mul.w	r3, sl, r3
1a0009c4:	448a      	add	sl, r1
1a0009c6:	fb09 f90a 	mul.w	r9, r9, sl
1a0009ca:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0009ce:	4648      	mov	r0, r9
1a0009d0:	b003      	add	sp, #12
1a0009d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0009d6:	bf00      	nop
1a0009d8:	1a001c04 	.word	0x1a001c04

1a0009dc <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0009dc:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0009de:	680b      	ldr	r3, [r1, #0]
1a0009e0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0009e4:	d002      	beq.n	1a0009ec <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0009e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0009ea:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0009ec:	4607      	mov	r7, r0
1a0009ee:	2501      	movs	r5, #1
1a0009f0:	e03b      	b.n	1a000a6a <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0009f2:	694b      	ldr	r3, [r1, #20]
1a0009f4:	fb03 f302 	mul.w	r3, r3, r2
1a0009f8:	fbb3 f3f5 	udiv	r3, r3, r5
1a0009fc:	e014      	b.n	1a000a28 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0009fe:	461c      	mov	r4, r3
1a000a00:	e020      	b.n	1a000a44 <pll_calc_divs+0x68>
		return -val;
1a000a02:	f1cc 0c00 	rsb	ip, ip, #0
1a000a06:	e020      	b.n	1a000a4a <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a000a08:	3201      	adds	r2, #1
1a000a0a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000a0e:	dc26      	bgt.n	1a000a5e <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000a10:	680c      	ldr	r4, [r1, #0]
1a000a12:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000a16:	d0ec      	beq.n	1a0009f2 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000a18:	1c73      	adds	r3, r6, #1
1a000a1a:	fa02 fc03 	lsl.w	ip, r2, r3
1a000a1e:	694b      	ldr	r3, [r1, #20]
1a000a20:	fb03 f30c 	mul.w	r3, r3, ip
1a000a24:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000a28:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a000a78 <pll_calc_divs+0x9c>
1a000a2c:	4563      	cmp	r3, ip
1a000a2e:	d9eb      	bls.n	1a000a08 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000a30:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a000a7c <pll_calc_divs+0xa0>
1a000a34:	4563      	cmp	r3, ip
1a000a36:	d812      	bhi.n	1a000a5e <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000a38:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000a3c:	d1df      	bne.n	1a0009fe <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a000a3e:	1c74      	adds	r4, r6, #1
1a000a40:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a000a44:	ebb0 0c04 	subs.w	ip, r0, r4
1a000a48:	d4db      	bmi.n	1a000a02 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a000a4a:	4567      	cmp	r7, ip
1a000a4c:	d9dc      	bls.n	1a000a08 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a000a4e:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000a50:	1c77      	adds	r7, r6, #1
1a000a52:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000a54:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000a56:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000a58:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000a5a:	4667      	mov	r7, ip
1a000a5c:	e7d4      	b.n	1a000a08 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000a5e:	3601      	adds	r6, #1
1a000a60:	2e03      	cmp	r6, #3
1a000a62:	dc01      	bgt.n	1a000a68 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a000a64:	2201      	movs	r2, #1
1a000a66:	e7d0      	b.n	1a000a0a <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a000a68:	3501      	adds	r5, #1
1a000a6a:	2d04      	cmp	r5, #4
1a000a6c:	dc01      	bgt.n	1a000a72 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a000a6e:	2600      	movs	r6, #0
1a000a70:	e7f6      	b.n	1a000a60 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a000a72:	bcf0      	pop	{r4, r5, r6, r7}
1a000a74:	4770      	bx	lr
1a000a76:	bf00      	nop
1a000a78:	094c5eff 	.word	0x094c5eff
1a000a7c:	1312d000 	.word	0x1312d000

1a000a80 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a82:	b099      	sub	sp, #100	; 0x64
1a000a84:	4605      	mov	r5, r0
1a000a86:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000a88:	225c      	movs	r2, #92	; 0x5c
1a000a8a:	2100      	movs	r1, #0
1a000a8c:	a801      	add	r0, sp, #4
1a000a8e:	f001 f86d 	bl	1a001b6c <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000a92:	2380      	movs	r3, #128	; 0x80
1a000a94:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000a96:	6963      	ldr	r3, [r4, #20]
1a000a98:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000a9a:	7923      	ldrb	r3, [r4, #4]
1a000a9c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000aa0:	4669      	mov	r1, sp
1a000aa2:	4628      	mov	r0, r5
1a000aa4:	f7ff ff9a 	bl	1a0009dc <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000aa8:	9b06      	ldr	r3, [sp, #24]
1a000aaa:	42ab      	cmp	r3, r5
1a000aac:	d027      	beq.n	1a000afe <pll_get_frac+0x7e>
	if (val < 0)
1a000aae:	1aeb      	subs	r3, r5, r3
1a000ab0:	d42e      	bmi.n	1a000b10 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000ab2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000ab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000aba:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000abc:	6963      	ldr	r3, [r4, #20]
1a000abe:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000ac0:	7923      	ldrb	r3, [r4, #4]
1a000ac2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000ac6:	a910      	add	r1, sp, #64	; 0x40
1a000ac8:	4628      	mov	r0, r5
1a000aca:	f7ff ff87 	bl	1a0009dc <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000ace:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000ad0:	42ab      	cmp	r3, r5
1a000ad2:	d01f      	beq.n	1a000b14 <pll_get_frac+0x94>
	if (val < 0)
1a000ad4:	1aeb      	subs	r3, r5, r3
1a000ad6:	d425      	bmi.n	1a000b24 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000ad8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000ada:	4b2b      	ldr	r3, [pc, #172]	; (1a000b88 <pll_get_frac+0x108>)
1a000adc:	429d      	cmp	r5, r3
1a000ade:	d923      	bls.n	1a000b28 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000ae2:	1aed      	subs	r5, r5, r3
1a000ae4:	d433      	bmi.n	1a000b4e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000ae6:	42ae      	cmp	r6, r5
1a000ae8:	dc3b      	bgt.n	1a000b62 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000aea:	42be      	cmp	r6, r7
1a000aec:	dc31      	bgt.n	1a000b52 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000aee:	466d      	mov	r5, sp
1a000af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000af4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000af8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000afc:	e006      	b.n	1a000b0c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000afe:	466d      	mov	r5, sp
1a000b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000b0c:	b019      	add	sp, #100	; 0x64
1a000b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000b10:	425b      	negs	r3, r3
1a000b12:	e7ce      	b.n	1a000ab2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000b14:	ad10      	add	r5, sp, #64	; 0x40
1a000b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000b22:	e7f3      	b.n	1a000b0c <pll_get_frac+0x8c>
		return -val;
1a000b24:	425b      	negs	r3, r3
1a000b26:	e7d7      	b.n	1a000ad8 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000b28:	2340      	movs	r3, #64	; 0x40
1a000b2a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000b2c:	6963      	ldr	r3, [r4, #20]
1a000b2e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000b30:	a908      	add	r1, sp, #32
1a000b32:	4628      	mov	r0, r5
1a000b34:	f7ff ff52 	bl	1a0009dc <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000b3a:	42ab      	cmp	r3, r5
1a000b3c:	d1d0      	bne.n	1a000ae0 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000b3e:	ad08      	add	r5, sp, #32
1a000b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000b4c:	e7de      	b.n	1a000b0c <pll_get_frac+0x8c>
		return -val;
1a000b4e:	426d      	negs	r5, r5
1a000b50:	e7c9      	b.n	1a000ae6 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000b52:	ad10      	add	r5, sp, #64	; 0x40
1a000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b60:	e7d4      	b.n	1a000b0c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000b62:	42af      	cmp	r7, r5
1a000b64:	db07      	blt.n	1a000b76 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000b66:	ad08      	add	r5, sp, #32
1a000b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b74:	e7ca      	b.n	1a000b0c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000b76:	ad10      	add	r5, sp, #64	; 0x40
1a000b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b84:	e7c2      	b.n	1a000b0c <pll_get_frac+0x8c>
1a000b86:	bf00      	nop
1a000b88:	068e7780 	.word	0x068e7780

1a000b8c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000b8c:	b430      	push	{r4, r5}
1a000b8e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000b90:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000b92:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000b94:	e000      	b.n	1a000b98 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000b96:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000b98:	281c      	cmp	r0, #28
1a000b9a:	d118      	bne.n	1a000bce <Chip_Clock_FindBaseClock+0x42>
1a000b9c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000ba0:	0051      	lsls	r1, r2, #1
1a000ba2:	4a0c      	ldr	r2, [pc, #48]	; (1a000bd4 <Chip_Clock_FindBaseClock+0x48>)
1a000ba4:	440a      	add	r2, r1
1a000ba6:	7914      	ldrb	r4, [r2, #4]
1a000ba8:	4284      	cmp	r4, r0
1a000baa:	d010      	beq.n	1a000bce <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000bac:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000bb0:	004a      	lsls	r2, r1, #1
1a000bb2:	4908      	ldr	r1, [pc, #32]	; (1a000bd4 <Chip_Clock_FindBaseClock+0x48>)
1a000bb4:	5a8a      	ldrh	r2, [r1, r2]
1a000bb6:	42aa      	cmp	r2, r5
1a000bb8:	d8ed      	bhi.n	1a000b96 <Chip_Clock_FindBaseClock+0xa>
1a000bba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000bbe:	0051      	lsls	r1, r2, #1
1a000bc0:	4a04      	ldr	r2, [pc, #16]	; (1a000bd4 <Chip_Clock_FindBaseClock+0x48>)
1a000bc2:	440a      	add	r2, r1
1a000bc4:	8852      	ldrh	r2, [r2, #2]
1a000bc6:	42aa      	cmp	r2, r5
1a000bc8:	d3e5      	bcc.n	1a000b96 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000bca:	4620      	mov	r0, r4
1a000bcc:	e7e4      	b.n	1a000b98 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000bce:	bc30      	pop	{r4, r5}
1a000bd0:	4770      	bx	lr
1a000bd2:	bf00      	nop
1a000bd4:	1a001c20 	.word	0x1a001c20

1a000bd8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000bd8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000bde:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000be0:	4a0d      	ldr	r2, [pc, #52]	; (1a000c18 <Chip_Clock_EnableCrystal+0x40>)
1a000be2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000be4:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000be8:	6992      	ldr	r2, [r2, #24]
1a000bea:	428a      	cmp	r2, r1
1a000bec:	d001      	beq.n	1a000bf2 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000bee:	4a0a      	ldr	r2, [pc, #40]	; (1a000c18 <Chip_Clock_EnableCrystal+0x40>)
1a000bf0:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000bf2:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000bf6:	4a09      	ldr	r2, [pc, #36]	; (1a000c1c <Chip_Clock_EnableCrystal+0x44>)
1a000bf8:	6811      	ldr	r1, [r2, #0]
1a000bfa:	4a09      	ldr	r2, [pc, #36]	; (1a000c20 <Chip_Clock_EnableCrystal+0x48>)
1a000bfc:	4291      	cmp	r1, r2
1a000bfe:	d901      	bls.n	1a000c04 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000c00:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000c04:	4a04      	ldr	r2, [pc, #16]	; (1a000c18 <Chip_Clock_EnableCrystal+0x40>)
1a000c06:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000c08:	9b01      	ldr	r3, [sp, #4]
1a000c0a:	1e5a      	subs	r2, r3, #1
1a000c0c:	9201      	str	r2, [sp, #4]
1a000c0e:	2b00      	cmp	r3, #0
1a000c10:	d1fa      	bne.n	1a000c08 <Chip_Clock_EnableCrystal+0x30>
}
1a000c12:	b002      	add	sp, #8
1a000c14:	4770      	bx	lr
1a000c16:	bf00      	nop
1a000c18:	40050000 	.word	0x40050000
1a000c1c:	1a001b88 	.word	0x1a001b88
1a000c20:	01312cff 	.word	0x01312cff

1a000c24 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000c24:	3012      	adds	r0, #18
1a000c26:	4b05      	ldr	r3, [pc, #20]	; (1a000c3c <Chip_Clock_GetDividerSource+0x18>)
1a000c28:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000c2c:	f010 0f01 	tst.w	r0, #1
1a000c30:	d102      	bne.n	1a000c38 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000c32:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000c36:	4770      	bx	lr
		return CLKINPUT_PD;
1a000c38:	2011      	movs	r0, #17
}
1a000c3a:	4770      	bx	lr
1a000c3c:	40050000 	.word	0x40050000

1a000c40 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000c40:	f100 0212 	add.w	r2, r0, #18
1a000c44:	4b03      	ldr	r3, [pc, #12]	; (1a000c54 <Chip_Clock_GetDividerDivisor+0x14>)
1a000c46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000c4a:	4b03      	ldr	r3, [pc, #12]	; (1a000c58 <Chip_Clock_GetDividerDivisor+0x18>)
1a000c4c:	5c18      	ldrb	r0, [r3, r0]
}
1a000c4e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000c52:	4770      	bx	lr
1a000c54:	40050000 	.word	0x40050000
1a000c58:	1a001c18 	.word	0x1a001c18

1a000c5c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000c5c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000c5e:	2810      	cmp	r0, #16
1a000c60:	d80a      	bhi.n	1a000c78 <Chip_Clock_GetClockInputHz+0x1c>
1a000c62:	e8df f000 	tbb	[pc, r0]
1a000c66:	0b42      	.short	0x0b42
1a000c68:	091f160d 	.word	0x091f160d
1a000c6c:	2b282522 	.word	0x2b282522
1a000c70:	322e0909 	.word	0x322e0909
1a000c74:	3a36      	.short	0x3a36
1a000c76:	3e          	.byte	0x3e
1a000c77:	00          	.byte	0x00
	uint32_t rate = 0;
1a000c78:	2000      	movs	r0, #0
1a000c7a:	e038      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000c7c:	481e      	ldr	r0, [pc, #120]	; (1a000cf8 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000c7e:	e036      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000c80:	4b1e      	ldr	r3, [pc, #120]	; (1a000cfc <Chip_Clock_GetClockInputHz+0xa0>)
1a000c82:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000c86:	f003 0307 	and.w	r3, r3, #7
1a000c8a:	2b04      	cmp	r3, #4
1a000c8c:	d130      	bne.n	1a000cf0 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a000c8e:	2000      	movs	r0, #0
1a000c90:	e02d      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000c92:	4b1a      	ldr	r3, [pc, #104]	; (1a000cfc <Chip_Clock_GetClockInputHz+0xa0>)
1a000c94:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000c98:	f003 0307 	and.w	r3, r3, #7
1a000c9c:	2b04      	cmp	r3, #4
1a000c9e:	d029      	beq.n	1a000cf4 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000ca0:	4817      	ldr	r0, [pc, #92]	; (1a000d00 <Chip_Clock_GetClockInputHz+0xa4>)
1a000ca2:	e024      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000ca4:	4b17      	ldr	r3, [pc, #92]	; (1a000d04 <Chip_Clock_GetClockInputHz+0xa8>)
1a000ca6:	6818      	ldr	r0, [r3, #0]
		break;
1a000ca8:	e021      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000caa:	4b17      	ldr	r3, [pc, #92]	; (1a000d08 <Chip_Clock_GetClockInputHz+0xac>)
1a000cac:	6818      	ldr	r0, [r3, #0]
		break;
1a000cae:	e01e      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000cb0:	4b16      	ldr	r3, [pc, #88]	; (1a000d0c <Chip_Clock_GetClockInputHz+0xb0>)
1a000cb2:	6818      	ldr	r0, [r3, #0]
		break;
1a000cb4:	e01b      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000cb6:	4b15      	ldr	r3, [pc, #84]	; (1a000d0c <Chip_Clock_GetClockInputHz+0xb0>)
1a000cb8:	6858      	ldr	r0, [r3, #4]
		break;
1a000cba:	e018      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000cbc:	f000 f86a 	bl	1a000d94 <Chip_Clock_GetMainPLLHz>
		break;
1a000cc0:	e015      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000cc2:	2100      	movs	r1, #0
1a000cc4:	f000 f89c 	bl	1a000e00 <Chip_Clock_GetDivRate>
		break;
1a000cc8:	e011      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000cca:	2101      	movs	r1, #1
1a000ccc:	f000 f898 	bl	1a000e00 <Chip_Clock_GetDivRate>
		break;
1a000cd0:	e00d      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000cd2:	2102      	movs	r1, #2
1a000cd4:	f000 f894 	bl	1a000e00 <Chip_Clock_GetDivRate>
		break;
1a000cd8:	e009      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000cda:	2103      	movs	r1, #3
1a000cdc:	f000 f890 	bl	1a000e00 <Chip_Clock_GetDivRate>
		break;
1a000ce0:	e005      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000ce2:	2104      	movs	r1, #4
1a000ce4:	f000 f88c 	bl	1a000e00 <Chip_Clock_GetDivRate>
		break;
1a000ce8:	e001      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a000cea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000cee:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a000cf0:	4803      	ldr	r0, [pc, #12]	; (1a000d00 <Chip_Clock_GetClockInputHz+0xa4>)
1a000cf2:	e7fc      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a000cf4:	4806      	ldr	r0, [pc, #24]	; (1a000d10 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000cf6:	e7fa      	b.n	1a000cee <Chip_Clock_GetClockInputHz+0x92>
1a000cf8:	00b71b00 	.word	0x00b71b00
1a000cfc:	40043000 	.word	0x40043000
1a000d00:	017d7840 	.word	0x017d7840
1a000d04:	1a001b84 	.word	0x1a001b84
1a000d08:	1a001b88 	.word	0x1a001b88
1a000d0c:	10000098 	.word	0x10000098
1a000d10:	02faf080 	.word	0x02faf080

1a000d14 <Chip_Clock_CalcMainPLLValue>:
{
1a000d14:	b538      	push	{r3, r4, r5, lr}
1a000d16:	4605      	mov	r5, r0
1a000d18:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000d1a:	7908      	ldrb	r0, [r1, #4]
1a000d1c:	f7ff ff9e 	bl	1a000c5c <Chip_Clock_GetClockInputHz>
1a000d20:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000d22:	4b19      	ldr	r3, [pc, #100]	; (1a000d88 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000d24:	442b      	add	r3, r5
1a000d26:	4a19      	ldr	r2, [pc, #100]	; (1a000d8c <Chip_Clock_CalcMainPLLValue+0x78>)
1a000d28:	4293      	cmp	r3, r2
1a000d2a:	d821      	bhi.n	1a000d70 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000d2c:	b318      	cbz	r0, 1a000d76 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000d2e:	2380      	movs	r3, #128	; 0x80
1a000d30:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000d32:	2300      	movs	r3, #0
1a000d34:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000d36:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000d38:	fbb5 f3f0 	udiv	r3, r5, r0
1a000d3c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000d3e:	4a14      	ldr	r2, [pc, #80]	; (1a000d90 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000d40:	4295      	cmp	r5, r2
1a000d42:	d903      	bls.n	1a000d4c <Chip_Clock_CalcMainPLLValue+0x38>
1a000d44:	fb03 f000 	mul.w	r0, r3, r0
1a000d48:	42a8      	cmp	r0, r5
1a000d4a:	d007      	beq.n	1a000d5c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000d4c:	4621      	mov	r1, r4
1a000d4e:	4628      	mov	r0, r5
1a000d50:	f7ff fe96 	bl	1a000a80 <pll_get_frac>
		if (!ppll->nsel) {
1a000d54:	68a3      	ldr	r3, [r4, #8]
1a000d56:	b18b      	cbz	r3, 1a000d7c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000d58:	3b01      	subs	r3, #1
1a000d5a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000d5c:	6923      	ldr	r3, [r4, #16]
1a000d5e:	b183      	cbz	r3, 1a000d82 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000d60:	68e2      	ldr	r2, [r4, #12]
1a000d62:	b10a      	cbz	r2, 1a000d68 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000d64:	3a01      	subs	r2, #1
1a000d66:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000d68:	3b01      	subs	r3, #1
1a000d6a:	6123      	str	r3, [r4, #16]
	return 0;
1a000d6c:	2000      	movs	r0, #0
}
1a000d6e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d74:	e7fb      	b.n	1a000d6e <Chip_Clock_CalcMainPLLValue+0x5a>
1a000d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d7a:	e7f8      	b.n	1a000d6e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d80:	e7f5      	b.n	1a000d6e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d86:	e7f2      	b.n	1a000d6e <Chip_Clock_CalcMainPLLValue+0x5a>
1a000d88:	ff6b3a10 	.word	0xff6b3a10
1a000d8c:	0b940510 	.word	0x0b940510
1a000d90:	094c5eff 	.word	0x094c5eff

1a000d94 <Chip_Clock_GetMainPLLHz>:
{
1a000d94:	b530      	push	{r4, r5, lr}
1a000d96:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000d98:	4d17      	ldr	r5, [pc, #92]	; (1a000df8 <Chip_Clock_GetMainPLLHz+0x64>)
1a000d9a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000d9c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000da0:	f7ff ff5c 	bl	1a000c5c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000da4:	4b15      	ldr	r3, [pc, #84]	; (1a000dfc <Chip_Clock_GetMainPLLHz+0x68>)
1a000da6:	681b      	ldr	r3, [r3, #0]
1a000da8:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000daa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000dac:	f013 0f01 	tst.w	r3, #1
1a000db0:	d01f      	beq.n	1a000df2 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a000db2:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000db6:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000dba:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000dbe:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000dc2:	3301      	adds	r3, #1
	n = nsel + 1;
1a000dc4:	3201      	adds	r2, #1
	p = ptab[psel];
1a000dc6:	f10d 0c08 	add.w	ip, sp, #8
1a000dca:	4461      	add	r1, ip
1a000dcc:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000dd0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000dd4:	d108      	bne.n	1a000de8 <Chip_Clock_GetMainPLLHz+0x54>
1a000dd6:	b93d      	cbnz	r5, 1a000de8 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000dd8:	0049      	lsls	r1, r1, #1
1a000dda:	fbb3 f3f1 	udiv	r3, r3, r1
1a000dde:	fbb0 f0f2 	udiv	r0, r0, r2
1a000de2:	fb00 f003 	mul.w	r0, r0, r3
1a000de6:	e005      	b.n	1a000df4 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a000de8:	fbb0 f0f2 	udiv	r0, r0, r2
1a000dec:	fb03 f000 	mul.w	r0, r3, r0
1a000df0:	e000      	b.n	1a000df4 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a000df2:	2000      	movs	r0, #0
}
1a000df4:	b003      	add	sp, #12
1a000df6:	bd30      	pop	{r4, r5, pc}
1a000df8:	40050000 	.word	0x40050000
1a000dfc:	1a001c14 	.word	0x1a001c14

1a000e00 <Chip_Clock_GetDivRate>:
{
1a000e00:	b538      	push	{r3, r4, r5, lr}
1a000e02:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000e04:	4608      	mov	r0, r1
1a000e06:	f7ff ff0d 	bl	1a000c24 <Chip_Clock_GetDividerSource>
1a000e0a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000e0c:	4620      	mov	r0, r4
1a000e0e:	f7ff ff17 	bl	1a000c40 <Chip_Clock_GetDividerDivisor>
1a000e12:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000e14:	4628      	mov	r0, r5
1a000e16:	f7ff ff21 	bl	1a000c5c <Chip_Clock_GetClockInputHz>
1a000e1a:	3401      	adds	r4, #1
}
1a000e1c:	fbb0 f0f4 	udiv	r0, r0, r4
1a000e20:	bd38      	pop	{r3, r4, r5, pc}
1a000e22:	Address 0x000000001a000e22 is out of bounds.


1a000e24 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000e24:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000e26:	f100 0416 	add.w	r4, r0, #22
1a000e2a:	00a4      	lsls	r4, r4, #2
1a000e2c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000e30:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000e34:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000e36:	281b      	cmp	r0, #27
1a000e38:	d813      	bhi.n	1a000e62 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000e3a:	2911      	cmp	r1, #17
1a000e3c:	d01a      	beq.n	1a000e74 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000e3e:	4d0e      	ldr	r5, [pc, #56]	; (1a000e78 <Chip_Clock_SetBaseClock+0x54>)
1a000e40:	4025      	ands	r5, r4

			if (autoblocken) {
1a000e42:	b10a      	cbz	r2, 1a000e48 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000e44:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000e48:	b10b      	cbz	r3, 1a000e4e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000e4a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000e4e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000e52:	3016      	adds	r0, #22
1a000e54:	0080      	lsls	r0, r0, #2
1a000e56:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000e5a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000e5e:	6045      	str	r5, [r0, #4]
1a000e60:	e008      	b.n	1a000e74 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000e62:	f044 0401 	orr.w	r4, r4, #1
1a000e66:	3016      	adds	r0, #22
1a000e68:	0080      	lsls	r0, r0, #2
1a000e6a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000e6e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000e72:	6044      	str	r4, [r0, #4]
	}
}
1a000e74:	bc30      	pop	{r4, r5}
1a000e76:	4770      	bx	lr
1a000e78:	e0fff7fe 	.word	0xe0fff7fe

1a000e7c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000e7c:	281b      	cmp	r0, #27
1a000e7e:	d80c      	bhi.n	1a000e9a <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000e80:	3016      	adds	r0, #22
1a000e82:	0080      	lsls	r0, r0, #2
1a000e84:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000e88:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000e8c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000e8e:	f010 0f01 	tst.w	r0, #1
1a000e92:	d104      	bne.n	1a000e9e <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000e94:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000e98:	4770      	bx	lr
		return CLKINPUT_PD;
1a000e9a:	2011      	movs	r0, #17
1a000e9c:	4770      	bx	lr
		return CLKINPUT_PD;
1a000e9e:	2011      	movs	r0, #17
}
1a000ea0:	4770      	bx	lr

1a000ea2 <Chip_Clock_GetBaseClocktHz>:
{
1a000ea2:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000ea4:	f7ff ffea 	bl	1a000e7c <Chip_Clock_GetBaseClock>
1a000ea8:	f7ff fed8 	bl	1a000c5c <Chip_Clock_GetClockInputHz>
}
1a000eac:	bd08      	pop	{r3, pc}
1a000eae:	Address 0x000000001a000eae is out of bounds.


1a000eb0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000eb0:	b969      	cbnz	r1, 1a000ece <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a000eb2:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000eb4:	b10a      	cbz	r2, 1a000eba <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000eb6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000eba:	2b02      	cmp	r3, #2
1a000ebc:	d009      	beq.n	1a000ed2 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000ebe:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000ec2:	d209      	bcs.n	1a000ed8 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000ec4:	3020      	adds	r0, #32
1a000ec6:	4b07      	ldr	r3, [pc, #28]	; (1a000ee4 <Chip_Clock_EnableOpts+0x34>)
1a000ec8:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000ecc:	4770      	bx	lr
		reg |= (1 << 1);
1a000ece:	2103      	movs	r1, #3
1a000ed0:	e7f0      	b.n	1a000eb4 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000ed2:	f041 0120 	orr.w	r1, r1, #32
1a000ed6:	e7f2      	b.n	1a000ebe <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000ed8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000edc:	4b02      	ldr	r3, [pc, #8]	; (1a000ee8 <Chip_Clock_EnableOpts+0x38>)
1a000ede:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000ee2:	4770      	bx	lr
1a000ee4:	40051000 	.word	0x40051000
1a000ee8:	40052000 	.word	0x40052000

1a000eec <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000eec:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a000eee:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000ef2:	d309      	bcc.n	1a000f08 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000ef4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000ef8:	4a0d      	ldr	r2, [pc, #52]	; (1a000f30 <Chip_Clock_GetRate+0x44>)
1a000efa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a000efe:	f014 0f01 	tst.w	r4, #1
1a000f02:	d107      	bne.n	1a000f14 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a000f04:	2000      	movs	r0, #0
	}

	return rate;
}
1a000f06:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000f08:	f100 0320 	add.w	r3, r0, #32
1a000f0c:	4a09      	ldr	r2, [pc, #36]	; (1a000f34 <Chip_Clock_GetRate+0x48>)
1a000f0e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000f12:	e7f4      	b.n	1a000efe <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a000f14:	f7ff fe3a 	bl	1a000b8c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000f18:	f7ff ffc3 	bl	1a000ea2 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a000f1c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000f20:	d103      	bne.n	1a000f2a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a000f22:	2301      	movs	r3, #1
		rate = rate / div;
1a000f24:	fbb0 f0f3 	udiv	r0, r0, r3
1a000f28:	e7ed      	b.n	1a000f06 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a000f2a:	2302      	movs	r3, #2
1a000f2c:	e7fa      	b.n	1a000f24 <Chip_Clock_GetRate+0x38>
1a000f2e:	bf00      	nop
1a000f30:	40052000 	.word	0x40052000
1a000f34:	40051000 	.word	0x40051000

1a000f38 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000f38:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000f3a:	2069      	movs	r0, #105	; 0x69
1a000f3c:	f7ff ffd6 	bl	1a000eec <Chip_Clock_GetRate>
1a000f40:	4b01      	ldr	r3, [pc, #4]	; (1a000f48 <SystemCoreClockUpdate+0x10>)
1a000f42:	6018      	str	r0, [r3, #0]
}
1a000f44:	bd08      	pop	{r3, pc}
1a000f46:	bf00      	nop
1a000f48:	10000148 	.word	0x10000148

1a000f4c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000f4c:	4770      	bx	lr
1a000f4e:	Address 0x000000001a000f4e is out of bounds.


1a000f50 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000f50:	b570      	push	{r4, r5, r6, lr}
1a000f52:	b08a      	sub	sp, #40	; 0x28
1a000f54:	4605      	mov	r5, r0
1a000f56:	460e      	mov	r6, r1
1a000f58:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000f5a:	f242 7310 	movw	r3, #10000	; 0x2710
1a000f5e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000f60:	2806      	cmp	r0, #6
1a000f62:	d018      	beq.n	1a000f96 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000f64:	2300      	movs	r3, #0
1a000f66:	2201      	movs	r2, #1
1a000f68:	4629      	mov	r1, r5
1a000f6a:	2004      	movs	r0, #4
1a000f6c:	f7ff ff5a 	bl	1a000e24 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000f70:	4a49      	ldr	r2, [pc, #292]	; (1a001098 <Chip_SetupCoreClock+0x148>)
1a000f72:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000f74:	f043 0301 	orr.w	r3, r3, #1
1a000f78:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000f7a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000f7e:	a901      	add	r1, sp, #4
1a000f80:	4630      	mov	r0, r6
1a000f82:	f7ff fec7 	bl	1a000d14 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000f86:	4b45      	ldr	r3, [pc, #276]	; (1a00109c <Chip_SetupCoreClock+0x14c>)
1a000f88:	429e      	cmp	r6, r3
1a000f8a:	d916      	bls.n	1a000fba <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000f8c:	9b01      	ldr	r3, [sp, #4]
1a000f8e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000f92:	d003      	beq.n	1a000f9c <Chip_SetupCoreClock+0x4c>
1a000f94:	e7fe      	b.n	1a000f94 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000f96:	f7ff fe1f 	bl	1a000bd8 <Chip_Clock_EnableCrystal>
1a000f9a:	e7e3      	b.n	1a000f64 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a000f9c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000fa0:	d005      	beq.n	1a000fae <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000fa6:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000fa8:	2500      	movs	r5, #0
			direct = 1;
1a000faa:	2601      	movs	r6, #1
1a000fac:	e007      	b.n	1a000fbe <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000fae:	9b04      	ldr	r3, [sp, #16]
1a000fb0:	3301      	adds	r3, #1
1a000fb2:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000fb4:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000fb6:	2600      	movs	r6, #0
1a000fb8:	e001      	b.n	1a000fbe <Chip_SetupCoreClock+0x6e>
1a000fba:	2500      	movs	r5, #0
1a000fbc:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000fbe:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000fc2:	9b01      	ldr	r3, [sp, #4]
1a000fc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000fc8:	9a05      	ldr	r2, [sp, #20]
1a000fca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000fce:	9a03      	ldr	r2, [sp, #12]
1a000fd0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000fd4:	9a04      	ldr	r2, [sp, #16]
1a000fd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000fda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000fde:	4a2e      	ldr	r2, [pc, #184]	; (1a001098 <Chip_SetupCoreClock+0x148>)
1a000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000fe2:	4b2d      	ldr	r3, [pc, #180]	; (1a001098 <Chip_SetupCoreClock+0x148>)
1a000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000fe6:	f013 0f01 	tst.w	r3, #1
1a000fea:	d0fa      	beq.n	1a000fe2 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000fec:	2300      	movs	r3, #0
1a000fee:	2201      	movs	r2, #1
1a000ff0:	2109      	movs	r1, #9
1a000ff2:	2004      	movs	r0, #4
1a000ff4:	f7ff ff16 	bl	1a000e24 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000ff8:	b1fe      	cbz	r6, 1a00103a <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000ffa:	f242 7310 	movw	r3, #10000	; 0x2710
1a000ffe:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001000:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001002:	1e5a      	subs	r2, r3, #1
1a001004:	9209      	str	r2, [sp, #36]	; 0x24
1a001006:	2b00      	cmp	r3, #0
1a001008:	d1fa      	bne.n	1a001000 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00100a:	9b01      	ldr	r3, [sp, #4]
1a00100c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001010:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001012:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001016:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00101a:	9a05      	ldr	r2, [sp, #20]
1a00101c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001020:	9a03      	ldr	r2, [sp, #12]
1a001022:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001026:	9a04      	ldr	r2, [sp, #16]
1a001028:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00102c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001030:	4a19      	ldr	r2, [pc, #100]	; (1a001098 <Chip_SetupCoreClock+0x148>)
1a001032:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001034:	b36c      	cbz	r4, 1a001092 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001036:	2400      	movs	r4, #0
1a001038:	e029      	b.n	1a00108e <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a00103a:	2d00      	cmp	r5, #0
1a00103c:	d0fa      	beq.n	1a001034 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00103e:	f242 7310 	movw	r3, #10000	; 0x2710
1a001042:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001044:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001046:	1e5a      	subs	r2, r3, #1
1a001048:	9209      	str	r2, [sp, #36]	; 0x24
1a00104a:	2b00      	cmp	r3, #0
1a00104c:	d1fa      	bne.n	1a001044 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a00104e:	9b04      	ldr	r3, [sp, #16]
1a001050:	1e5a      	subs	r2, r3, #1
1a001052:	9204      	str	r2, [sp, #16]
1a001054:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001058:	9b01      	ldr	r3, [sp, #4]
1a00105a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00105e:	9905      	ldr	r1, [sp, #20]
1a001060:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001064:	9903      	ldr	r1, [sp, #12]
1a001066:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00106a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00106e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001072:	4a09      	ldr	r2, [pc, #36]	; (1a001098 <Chip_SetupCoreClock+0x148>)
1a001074:	6453      	str	r3, [r2, #68]	; 0x44
1a001076:	e7dd      	b.n	1a001034 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001078:	4809      	ldr	r0, [pc, #36]	; (1a0010a0 <Chip_SetupCoreClock+0x150>)
1a00107a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00107e:	78cb      	ldrb	r3, [r1, #3]
1a001080:	788a      	ldrb	r2, [r1, #2]
1a001082:	7849      	ldrb	r1, [r1, #1]
1a001084:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001088:	f7ff fecc 	bl	1a000e24 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00108c:	3401      	adds	r4, #1
1a00108e:	2c11      	cmp	r4, #17
1a001090:	d9f2      	bls.n	1a001078 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001092:	b00a      	add	sp, #40	; 0x28
1a001094:	bd70      	pop	{r4, r5, r6, pc}
1a001096:	bf00      	nop
1a001098:	40050000 	.word	0x40050000
1a00109c:	068e7780 	.word	0x068e7780
1a0010a0:	1a001c8c 	.word	0x1a001c8c

1a0010a4 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0010a4:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0010a6:	4a0a      	ldr	r2, [pc, #40]	; (1a0010d0 <SystemInit+0x2c>)
1a0010a8:	4b0a      	ldr	r3, [pc, #40]	; (1a0010d4 <SystemInit+0x30>)
1a0010aa:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0010ac:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0010b0:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0010b2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0010b6:	2b20      	cmp	r3, #32
1a0010b8:	d002      	beq.n	1a0010c0 <SystemInit+0x1c>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0010ba:	f7ff fbb5 	bl	1a000828 <Board_SystemInit>
}
1a0010be:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0010c0:	4a04      	ldr	r2, [pc, #16]	; (1a0010d4 <SystemInit+0x30>)
1a0010c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0010c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0010ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0010ce:	e7f4      	b.n	1a0010ba <SystemInit+0x16>
1a0010d0:	1a000000 	.word	0x1a000000
1a0010d4:	e000ed00 	.word	0xe000ed00

1a0010d8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0010d8:	4b04      	ldr	r3, [pc, #16]	; (1a0010ec <cyclesCounterInit+0x14>)
1a0010da:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a0010dc:	4b04      	ldr	r3, [pc, #16]	; (1a0010f0 <cyclesCounterInit+0x18>)
1a0010de:	681a      	ldr	r2, [r3, #0]
1a0010e0:	6813      	ldr	r3, [r2, #0]
1a0010e2:	f043 0301 	orr.w	r3, r3, #1
1a0010e6:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0010e8:	2001      	movs	r0, #1
1a0010ea:	4770      	bx	lr
1a0010ec:	10000000 	.word	0x10000000
1a0010f0:	10000004 	.word	0x10000004

1a0010f4 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0010f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0010f8:	0083      	lsls	r3, r0, #2
1a0010fa:	4a03      	ldr	r2, [pc, #12]	; (1a001108 <uartTxReady+0x14>)
1a0010fc:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0010fe:	6958      	ldr	r0, [r3, #20]
}
1a001100:	f000 0020 	and.w	r0, r0, #32
1a001104:	4770      	bx	lr
1a001106:	bf00      	nop
1a001108:	1a001cd4 	.word	0x1a001cd4

1a00110c <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a00110c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001110:	0083      	lsls	r3, r0, #2
1a001112:	4a02      	ldr	r2, [pc, #8]	; (1a00111c <uartTxWrite+0x10>)
1a001114:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a001116:	6019      	str	r1, [r3, #0]
}
1a001118:	4770      	bx	lr
1a00111a:	bf00      	nop
1a00111c:	1a001cd4 	.word	0x1a001cd4

1a001120 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a001120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001124:	4680      	mov	r8, r0
1a001126:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001128:	4c19      	ldr	r4, [pc, #100]	; (1a001190 <uartInit+0x70>)
1a00112a:	0045      	lsls	r5, r0, #1
1a00112c:	182a      	adds	r2, r5, r0
1a00112e:	0093      	lsls	r3, r2, #2
1a001130:	18e6      	adds	r6, r4, r3
1a001132:	58e7      	ldr	r7, [r4, r3]
1a001134:	4638      	mov	r0, r7
1a001136:	f7ff fb93 	bl	1a000860 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00113a:	4649      	mov	r1, r9
1a00113c:	4638      	mov	r0, r7
1a00113e:	f7ff fbb9 	bl	1a0008b4 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001142:	2307      	movs	r3, #7
1a001144:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001146:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a001148:	2301      	movs	r3, #1
1a00114a:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a00114c:	7930      	ldrb	r0, [r6, #4]
1a00114e:	7973      	ldrb	r3, [r6, #5]
1a001150:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001152:	f042 0218 	orr.w	r2, r2, #24
1a001156:	490f      	ldr	r1, [pc, #60]	; (1a001194 <uartInit+0x74>)
1a001158:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00115c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001160:	79f0      	ldrb	r0, [r6, #7]
1a001162:	7a33      	ldrb	r3, [r6, #8]
1a001164:	7a72      	ldrb	r2, [r6, #9]
1a001166:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00116a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a001172:	f1b8 0f01 	cmp.w	r8, #1
1a001176:	d001      	beq.n	1a00117c <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a001178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a00117c:	4a06      	ldr	r2, [pc, #24]	; (1a001198 <uartInit+0x78>)
1a00117e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001180:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001184:	64d3      	str	r3, [r2, #76]	; 0x4c
1a001186:	221a      	movs	r2, #26
1a001188:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a00118c:	e7f4      	b.n	1a001178 <uartInit+0x58>
1a00118e:	bf00      	nop
1a001190:	1a001cd4 	.word	0x1a001cd4
1a001194:	40086000 	.word	0x40086000
1a001198:	40081000 	.word	0x40081000

1a00119c <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a00119c:	b538      	push	{r3, r4, r5, lr}
1a00119e:	4604      	mov	r4, r0
1a0011a0:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a0011a2:	4620      	mov	r0, r4
1a0011a4:	f7ff ffa6 	bl	1a0010f4 <uartTxReady>
1a0011a8:	2800      	cmp	r0, #0
1a0011aa:	d0fa      	beq.n	1a0011a2 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a0011ac:	4629      	mov	r1, r5
1a0011ae:	4620      	mov	r0, r4
1a0011b0:	f7ff ffac 	bl	1a00110c <uartTxWrite>
}
1a0011b4:	bd38      	pop	{r3, r4, r5, pc}

1a0011b6 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a0011b6:	b538      	push	{r3, r4, r5, lr}
1a0011b8:	4605      	mov	r5, r0
1a0011ba:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0011bc:	e003      	b.n	1a0011c6 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a0011be:	4628      	mov	r0, r5
1a0011c0:	f7ff ffec 	bl	1a00119c <uartWriteByte>
      str++;
1a0011c4:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a0011c6:	7821      	ldrb	r1, [r4, #0]
1a0011c8:	2900      	cmp	r1, #0
1a0011ca:	d1f8      	bne.n	1a0011be <uartWriteString+0x8>
   }
}
1a0011cc:	bd38      	pop	{r3, r4, r5, pc}
1a0011ce:	Address 0x000000001a0011ce is out of bounds.


1a0011d0 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a0011d0:	4b01      	ldr	r3, [pc, #4]	; (1a0011d8 <tickRead+0x8>)
1a0011d2:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0011d6:	4770      	bx	lr
1a0011d8:	100000a8 	.word	0x100000a8

1a0011dc <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a0011dc:	b918      	cbnz	r0, 1a0011e6 <tickPowerSet+0xa>
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a0011de:	4b04      	ldr	r3, [pc, #16]	; (1a0011f0 <tickPowerSet+0x14>)
1a0011e0:	2200      	movs	r2, #0
1a0011e2:	601a      	str	r2, [r3, #0]
   }
}
1a0011e4:	4770      	bx	lr
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0011e6:	4b02      	ldr	r3, [pc, #8]	; (1a0011f0 <tickPowerSet+0x14>)
1a0011e8:	2207      	movs	r2, #7
1a0011ea:	601a      	str	r2, [r3, #0]
1a0011ec:	4770      	bx	lr
1a0011ee:	bf00      	nop
1a0011f0:	e000e010 	.word	0xe000e010

1a0011f4 <tickInit>:
{
1a0011f4:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a0011f6:	ea50 0301 	orrs.w	r3, r0, r1
1a0011fa:	d02a      	beq.n	1a001252 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0011fc:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001200:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001204:	2b00      	cmp	r3, #0
1a001206:	bf08      	it	eq
1a001208:	2a32      	cmpeq	r2, #50	; 0x32
1a00120a:	d227      	bcs.n	1a00125c <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a00120c:	4b14      	ldr	r3, [pc, #80]	; (1a001260 <tickInit+0x6c>)
1a00120e:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001212:	4b14      	ldr	r3, [pc, #80]	; (1a001264 <tickInit+0x70>)
1a001214:	681b      	ldr	r3, [r3, #0]
1a001216:	fba3 4500 	umull	r4, r5, r3, r0
1a00121a:	fb03 5501 	mla	r5, r3, r1, r5
1a00121e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001222:	2300      	movs	r3, #0
1a001224:	4620      	mov	r0, r4
1a001226:	4629      	mov	r1, r5
1a001228:	f000 fafc 	bl	1a001824 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a00122c:	3801      	subs	r0, #1
1a00122e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001232:	d209      	bcs.n	1a001248 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001234:	4b0c      	ldr	r3, [pc, #48]	; (1a001268 <tickInit+0x74>)
1a001236:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001238:	4a0c      	ldr	r2, [pc, #48]	; (1a00126c <tickInit+0x78>)
1a00123a:	21e0      	movs	r1, #224	; 0xe0
1a00123c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001240:	2200      	movs	r2, #0
1a001242:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001244:	2207      	movs	r2, #7
1a001246:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001248:	2001      	movs	r0, #1
1a00124a:	f7ff ffc7 	bl	1a0011dc <tickPowerSet>
      bool_t ret_val = 1;
1a00124e:	2001      	movs	r0, #1
}
1a001250:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001252:	2000      	movs	r0, #0
1a001254:	f7ff ffc2 	bl	1a0011dc <tickPowerSet>
         ret_val = 0;
1a001258:	2000      	movs	r0, #0
1a00125a:	e7f9      	b.n	1a001250 <tickInit+0x5c>
            ret_val = 0;
1a00125c:	2000      	movs	r0, #0
1a00125e:	e7f7      	b.n	1a001250 <tickInit+0x5c>
1a001260:	10000150 	.word	0x10000150
1a001264:	10000148 	.word	0x10000148
1a001268:	e000e010 	.word	0xe000e010
1a00126c:	e000ed00 	.word	0xe000ed00

1a001270 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001270:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a001274:	4908      	ldr	r1, [pc, #32]	; (1a001298 <SysTick_Handler+0x28>)
1a001276:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00127a:	f112 0b01 	adds.w	fp, r2, #1
1a00127e:	f143 0c00 	adc.w	ip, r3, #0
1a001282:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001286:	4b05      	ldr	r3, [pc, #20]	; (1a00129c <SysTick_Handler+0x2c>)
1a001288:	681b      	ldr	r3, [r3, #0]
1a00128a:	b113      	cbz	r3, 1a001292 <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a00128c:	4a04      	ldr	r2, [pc, #16]	; (1a0012a0 <SysTick_Handler+0x30>)
1a00128e:	6810      	ldr	r0, [r2, #0]
1a001290:	4798      	blx	r3
   }
}
1a001292:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a001296:	bf00      	nop
1a001298:	100000a8 	.word	0x100000a8
1a00129c:	100000b0 	.word	0x100000b0
1a0012a0:	100000a0 	.word	0x100000a0

1a0012a4 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a0012a4:	e7fe      	b.n	1a0012a4 <errorOcurred>

1a0012a6 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a0012a6:	4770      	bx	lr

1a0012a8 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0012a8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0012aa:	2400      	movs	r4, #0
1a0012ac:	e001      	b.n	1a0012b2 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0012ae:	3401      	adds	r4, #1
1a0012b0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0012b2:	2c03      	cmp	r4, #3
1a0012b4:	d812      	bhi.n	1a0012dc <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0012b6:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0012b8:	4b09      	ldr	r3, [pc, #36]	; (1a0012e0 <TIMER0_IRQHandler+0x38>)
1a0012ba:	681a      	ldr	r2, [r3, #0]
1a0012bc:	f004 010f 	and.w	r1, r4, #15
1a0012c0:	2301      	movs	r3, #1
1a0012c2:	408b      	lsls	r3, r1
1a0012c4:	421a      	tst	r2, r3
1a0012c6:	d0f2      	beq.n	1a0012ae <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0012c8:	4b06      	ldr	r3, [pc, #24]	; (1a0012e4 <TIMER0_IRQHandler+0x3c>)
1a0012ca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0012ce:	2000      	movs	r0, #0
1a0012d0:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0012d2:	2301      	movs	r3, #1
1a0012d4:	40ab      	lsls	r3, r5
1a0012d6:	4a02      	ldr	r2, [pc, #8]	; (1a0012e0 <TIMER0_IRQHandler+0x38>)
1a0012d8:	6013      	str	r3, [r2, #0]
1a0012da:	e7e8      	b.n	1a0012ae <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0012dc:	bd38      	pop	{r3, r4, r5, pc}
1a0012de:	bf00      	nop
1a0012e0:	40084000 	.word	0x40084000
1a0012e4:	10000008 	.word	0x10000008

1a0012e8 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0012e8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0012ea:	2400      	movs	r4, #0
1a0012ec:	e001      	b.n	1a0012f2 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0012ee:	3401      	adds	r4, #1
1a0012f0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0012f2:	2c03      	cmp	r4, #3
1a0012f4:	d813      	bhi.n	1a00131e <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0012f6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0012f8:	4b09      	ldr	r3, [pc, #36]	; (1a001320 <TIMER1_IRQHandler+0x38>)
1a0012fa:	681a      	ldr	r2, [r3, #0]
1a0012fc:	f004 010f 	and.w	r1, r4, #15
1a001300:	2301      	movs	r3, #1
1a001302:	408b      	lsls	r3, r1
1a001304:	421a      	tst	r2, r3
1a001306:	d0f2      	beq.n	1a0012ee <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001308:	1d23      	adds	r3, r4, #4
1a00130a:	4a06      	ldr	r2, [pc, #24]	; (1a001324 <TIMER1_IRQHandler+0x3c>)
1a00130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001310:	2000      	movs	r0, #0
1a001312:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001314:	2301      	movs	r3, #1
1a001316:	40ab      	lsls	r3, r5
1a001318:	4a01      	ldr	r2, [pc, #4]	; (1a001320 <TIMER1_IRQHandler+0x38>)
1a00131a:	6013      	str	r3, [r2, #0]
1a00131c:	e7e7      	b.n	1a0012ee <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00131e:	bd38      	pop	{r3, r4, r5, pc}
1a001320:	40085000 	.word	0x40085000
1a001324:	10000008 	.word	0x10000008

1a001328 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a001328:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00132a:	2400      	movs	r4, #0
1a00132c:	e001      	b.n	1a001332 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00132e:	3401      	adds	r4, #1
1a001330:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001332:	2c03      	cmp	r4, #3
1a001334:	d814      	bhi.n	1a001360 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a001336:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001338:	4b0a      	ldr	r3, [pc, #40]	; (1a001364 <TIMER2_IRQHandler+0x3c>)
1a00133a:	681a      	ldr	r2, [r3, #0]
1a00133c:	f004 010f 	and.w	r1, r4, #15
1a001340:	2301      	movs	r3, #1
1a001342:	408b      	lsls	r3, r1
1a001344:	421a      	tst	r2, r3
1a001346:	d0f2      	beq.n	1a00132e <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001348:	f104 0308 	add.w	r3, r4, #8
1a00134c:	4a06      	ldr	r2, [pc, #24]	; (1a001368 <TIMER2_IRQHandler+0x40>)
1a00134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001352:	2000      	movs	r0, #0
1a001354:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001356:	2301      	movs	r3, #1
1a001358:	40ab      	lsls	r3, r5
1a00135a:	4a02      	ldr	r2, [pc, #8]	; (1a001364 <TIMER2_IRQHandler+0x3c>)
1a00135c:	6013      	str	r3, [r2, #0]
1a00135e:	e7e6      	b.n	1a00132e <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a001360:	bd38      	pop	{r3, r4, r5, pc}
1a001362:	bf00      	nop
1a001364:	400c3000 	.word	0x400c3000
1a001368:	10000008 	.word	0x10000008

1a00136c <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a00136c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00136e:	2400      	movs	r4, #0
1a001370:	e001      	b.n	1a001376 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001372:	3401      	adds	r4, #1
1a001374:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001376:	2c03      	cmp	r4, #3
1a001378:	d814      	bhi.n	1a0013a4 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a00137a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00137c:	4b0a      	ldr	r3, [pc, #40]	; (1a0013a8 <TIMER3_IRQHandler+0x3c>)
1a00137e:	681a      	ldr	r2, [r3, #0]
1a001380:	f004 010f 	and.w	r1, r4, #15
1a001384:	2301      	movs	r3, #1
1a001386:	408b      	lsls	r3, r1
1a001388:	421a      	tst	r2, r3
1a00138a:	d0f2      	beq.n	1a001372 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00138c:	f104 030c 	add.w	r3, r4, #12
1a001390:	4a06      	ldr	r2, [pc, #24]	; (1a0013ac <TIMER3_IRQHandler+0x40>)
1a001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001396:	2000      	movs	r0, #0
1a001398:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00139a:	2301      	movs	r3, #1
1a00139c:	40ab      	lsls	r3, r5
1a00139e:	4a02      	ldr	r2, [pc, #8]	; (1a0013a8 <TIMER3_IRQHandler+0x3c>)
1a0013a0:	6013      	str	r3, [r2, #0]
1a0013a2:	e7e6      	b.n	1a001372 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0013a4:	bd38      	pop	{r3, r4, r5, pc}
1a0013a6:	bf00      	nop
1a0013a8:	400c4000 	.word	0x400c4000
1a0013ac:	10000008 	.word	0x10000008

1a0013b0 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0013b0:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0013b2:	4d0b      	ldr	r5, [pc, #44]	; (1a0013e0 <gpioObtainPinInit+0x30>)
1a0013b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0013b8:	182c      	adds	r4, r5, r0
1a0013ba:	5628      	ldrsb	r0, [r5, r0]
1a0013bc:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0013be:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0013c2:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0013c4:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0013c8:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0013ca:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0013ce:	9b02      	ldr	r3, [sp, #8]
1a0013d0:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0013d2:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0013d6:	9b03      	ldr	r3, [sp, #12]
1a0013d8:	701a      	strb	r2, [r3, #0]
}
1a0013da:	bc30      	pop	{r4, r5}
1a0013dc:	4770      	bx	lr
1a0013de:	bf00      	nop
1a0013e0:	1a001d1c 	.word	0x1a001d1c

1a0013e4 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a0013e4:	b570      	push	{r4, r5, r6, lr}
1a0013e6:	b084      	sub	sp, #16
1a0013e8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0013ea:	2300      	movs	r3, #0
1a0013ec:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0013f0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0013f4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0013f8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0013fc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001400:	f10d 030b 	add.w	r3, sp, #11
1a001404:	9301      	str	r3, [sp, #4]
1a001406:	ab03      	add	r3, sp, #12
1a001408:	9300      	str	r3, [sp, #0]
1a00140a:	f10d 030d 	add.w	r3, sp, #13
1a00140e:	f10d 020e 	add.w	r2, sp, #14
1a001412:	f10d 010f 	add.w	r1, sp, #15
1a001416:	f7ff ffcb 	bl	1a0013b0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00141a:	2c05      	cmp	r4, #5
1a00141c:	f200 80a5 	bhi.w	1a00156a <gpioInit+0x186>
1a001420:	e8df f004 	tbb	[pc, r4]
1a001424:	45278109 	.word	0x45278109
1a001428:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00142a:	4851      	ldr	r0, [pc, #324]	; (1a001570 <gpioInit+0x18c>)
1a00142c:	f7ff fd8e 	bl	1a000f4c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001430:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001432:	b004      	add	sp, #16
1a001434:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001436:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00143a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00143e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001442:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001446:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00144a:	494a      	ldr	r1, [pc, #296]	; (1a001574 <gpioInit+0x190>)
1a00144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001450:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001454:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001458:	2001      	movs	r0, #1
1a00145a:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00145e:	4c44      	ldr	r4, [pc, #272]	; (1a001570 <gpioInit+0x18c>)
1a001460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001464:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001468:	ea22 0201 	bic.w	r2, r2, r1
1a00146c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001470:	e7df      	b.n	1a001432 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001472:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001476:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00147a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00147e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001482:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001486:	493b      	ldr	r1, [pc, #236]	; (1a001574 <gpioInit+0x190>)
1a001488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00148c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001490:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001494:	2001      	movs	r0, #1
1a001496:	fa00 f102 	lsl.w	r1, r0, r2
1a00149a:	4c35      	ldr	r4, [pc, #212]	; (1a001570 <gpioInit+0x18c>)
1a00149c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0014a0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0014a4:	ea22 0201 	bic.w	r2, r2, r1
1a0014a8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0014ac:	e7c1      	b.n	1a001432 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0014ae:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0014b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0014b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0014ba:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0014be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0014c2:	492c      	ldr	r1, [pc, #176]	; (1a001574 <gpioInit+0x190>)
1a0014c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0014c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0014cc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0014d0:	2001      	movs	r0, #1
1a0014d2:	fa00 f102 	lsl.w	r1, r0, r2
1a0014d6:	4c26      	ldr	r4, [pc, #152]	; (1a001570 <gpioInit+0x18c>)
1a0014d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0014dc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0014e0:	ea22 0201 	bic.w	r2, r2, r1
1a0014e4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0014e8:	e7a3      	b.n	1a001432 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0014ea:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0014ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0014f2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0014f6:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0014fa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0014fe:	491d      	ldr	r1, [pc, #116]	; (1a001574 <gpioInit+0x190>)
1a001500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001504:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001508:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00150c:	2001      	movs	r0, #1
1a00150e:	fa00 f102 	lsl.w	r1, r0, r2
1a001512:	4c17      	ldr	r4, [pc, #92]	; (1a001570 <gpioInit+0x18c>)
1a001514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001518:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00151c:	ea22 0201 	bic.w	r2, r2, r1
1a001520:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001524:	e785      	b.n	1a001432 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001526:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00152a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00152e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001532:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001536:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00153a:	490e      	ldr	r1, [pc, #56]	; (1a001574 <gpioInit+0x190>)
1a00153c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001540:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001544:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001548:	2001      	movs	r0, #1
1a00154a:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00154e:	4b08      	ldr	r3, [pc, #32]	; (1a001570 <gpioInit+0x18c>)
1a001550:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001554:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001558:	4331      	orrs	r1, r6
1a00155a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00155e:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001560:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001564:	2100      	movs	r1, #0
1a001566:	5499      	strb	r1, [r3, r2]
1a001568:	e763      	b.n	1a001432 <gpioInit+0x4e>
      ret_val = 0;
1a00156a:	2000      	movs	r0, #0
1a00156c:	e761      	b.n	1a001432 <gpioInit+0x4e>
1a00156e:	bf00      	nop
1a001570:	400f4000 	.word	0x400f4000
1a001574:	40086000 	.word	0x40086000

1a001578 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a001578:	b510      	push	{r4, lr}
1a00157a:	b084      	sub	sp, #16
1a00157c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00157e:	2300      	movs	r3, #0
1a001580:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001584:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001588:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00158c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001590:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001594:	f10d 030b 	add.w	r3, sp, #11
1a001598:	9301      	str	r3, [sp, #4]
1a00159a:	ab03      	add	r3, sp, #12
1a00159c:	9300      	str	r3, [sp, #0]
1a00159e:	f10d 030d 	add.w	r3, sp, #13
1a0015a2:	f10d 020e 	add.w	r2, sp, #14
1a0015a6:	f10d 010f 	add.w	r1, sp, #15
1a0015aa:	f7ff ff01 	bl	1a0013b0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0015ae:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0015b2:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0015b6:	3400      	adds	r4, #0
1a0015b8:	bf18      	it	ne
1a0015ba:	2401      	movne	r4, #1
1a0015bc:	015b      	lsls	r3, r3, #5
1a0015be:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0015c2:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0015c6:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a0015c8:	2001      	movs	r0, #1
1a0015ca:	b004      	add	sp, #16
1a0015cc:	bd10      	pop	{r4, pc}

1a0015ce <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a0015ce:	b500      	push	{lr}
1a0015d0:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0015d2:	2300      	movs	r3, #0
1a0015d4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0015d8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0015dc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0015e0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0015e4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0015e8:	f10d 030b 	add.w	r3, sp, #11
1a0015ec:	9301      	str	r3, [sp, #4]
1a0015ee:	ab03      	add	r3, sp, #12
1a0015f0:	9300      	str	r3, [sp, #0]
1a0015f2:	f10d 030d 	add.w	r3, sp, #13
1a0015f6:	f10d 020e 	add.w	r2, sp, #14
1a0015fa:	f10d 010f 	add.w	r1, sp, #15
1a0015fe:	f7ff fed7 	bl	1a0013b0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a001602:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001606:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a00160a:	015b      	lsls	r3, r3, #5
1a00160c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001610:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001614:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a001616:	3000      	adds	r0, #0
1a001618:	bf18      	it	ne
1a00161a:	2001      	movne	r0, #1
1a00161c:	b005      	add	sp, #20
1a00161e:	f85d fb04 	ldr.w	pc, [sp], #4
1a001622:	Address 0x000000001a001622 is out of bounds.


1a001624 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001624:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001626:	4b04      	ldr	r3, [pc, #16]	; (1a001638 <USB0_IRQHandler+0x14>)
1a001628:	681b      	ldr	r3, [r3, #0]
1a00162a:	681b      	ldr	r3, [r3, #0]
1a00162c:	68db      	ldr	r3, [r3, #12]
1a00162e:	4a03      	ldr	r2, [pc, #12]	; (1a00163c <USB0_IRQHandler+0x18>)
1a001630:	6810      	ldr	r0, [r2, #0]
1a001632:	4798      	blx	r3
}
1a001634:	bd08      	pop	{r3, pc}
1a001636:	bf00      	nop
1a001638:	10000158 	.word	0x10000158
1a00163c:	100000b4 	.word	0x100000b4

1a001640 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001640:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001642:	f7ff fc79 	bl	1a000f38 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001646:	4b3a      	ldr	r3, [pc, #232]	; (1a001730 <boardInit+0xf0>)
1a001648:	6818      	ldr	r0, [r3, #0]
1a00164a:	f7ff fd45 	bl	1a0010d8 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a00164e:	2001      	movs	r0, #1
1a001650:	2100      	movs	r1, #0
1a001652:	f7ff fdcf 	bl	1a0011f4 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a001656:	2105      	movs	r1, #5
1a001658:	2000      	movs	r0, #0
1a00165a:	f7ff fec3 	bl	1a0013e4 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a00165e:	2100      	movs	r1, #0
1a001660:	2024      	movs	r0, #36	; 0x24
1a001662:	f7ff febf 	bl	1a0013e4 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a001666:	2100      	movs	r1, #0
1a001668:	2025      	movs	r0, #37	; 0x25
1a00166a:	f7ff febb 	bl	1a0013e4 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00166e:	2100      	movs	r1, #0
1a001670:	2026      	movs	r0, #38	; 0x26
1a001672:	f7ff feb7 	bl	1a0013e4 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a001676:	2100      	movs	r1, #0
1a001678:	2027      	movs	r0, #39	; 0x27
1a00167a:	f7ff feb3 	bl	1a0013e4 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00167e:	2101      	movs	r1, #1
1a001680:	2028      	movs	r0, #40	; 0x28
1a001682:	f7ff feaf 	bl	1a0013e4 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a001686:	2101      	movs	r1, #1
1a001688:	2029      	movs	r0, #41	; 0x29
1a00168a:	f7ff feab 	bl	1a0013e4 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00168e:	2101      	movs	r1, #1
1a001690:	202a      	movs	r0, #42	; 0x2a
1a001692:	f7ff fea7 	bl	1a0013e4 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a001696:	2101      	movs	r1, #1
1a001698:	202b      	movs	r0, #43	; 0x2b
1a00169a:	f7ff fea3 	bl	1a0013e4 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00169e:	2101      	movs	r1, #1
1a0016a0:	202c      	movs	r0, #44	; 0x2c
1a0016a2:	f7ff fe9f 	bl	1a0013e4 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a0016a6:	2101      	movs	r1, #1
1a0016a8:	202d      	movs	r0, #45	; 0x2d
1a0016aa:	f7ff fe9b 	bl	1a0013e4 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a0016ae:	2100      	movs	r1, #0
1a0016b0:	202e      	movs	r0, #46	; 0x2e
1a0016b2:	f7ff fe97 	bl	1a0013e4 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a0016b6:	2100      	movs	r1, #0
1a0016b8:	202f      	movs	r0, #47	; 0x2f
1a0016ba:	f7ff fe93 	bl	1a0013e4 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0016be:	2100      	movs	r1, #0
1a0016c0:	2030      	movs	r0, #48	; 0x30
1a0016c2:	f7ff fe8f 	bl	1a0013e4 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0016c6:	2100      	movs	r1, #0
1a0016c8:	2031      	movs	r0, #49	; 0x31
1a0016ca:	f7ff fe8b 	bl	1a0013e4 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0016ce:	2100      	movs	r1, #0
1a0016d0:	2032      	movs	r0, #50	; 0x32
1a0016d2:	f7ff fe87 	bl	1a0013e4 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0016d6:	2100      	movs	r1, #0
1a0016d8:	2033      	movs	r0, #51	; 0x33
1a0016da:	f7ff fe83 	bl	1a0013e4 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0016de:	2100      	movs	r1, #0
1a0016e0:	2034      	movs	r0, #52	; 0x34
1a0016e2:	f7ff fe7f 	bl	1a0013e4 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0016e6:	2100      	movs	r1, #0
1a0016e8:	2035      	movs	r0, #53	; 0x35
1a0016ea:	f7ff fe7b 	bl	1a0013e4 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0016ee:	2101      	movs	r1, #1
1a0016f0:	2036      	movs	r0, #54	; 0x36
1a0016f2:	f7ff fe77 	bl	1a0013e4 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0016f6:	2101      	movs	r1, #1
1a0016f8:	2037      	movs	r0, #55	; 0x37
1a0016fa:	f7ff fe73 	bl	1a0013e4 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0016fe:	2101      	movs	r1, #1
1a001700:	2038      	movs	r0, #56	; 0x38
1a001702:	f7ff fe6f 	bl	1a0013e4 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a001706:	2101      	movs	r1, #1
1a001708:	2039      	movs	r0, #57	; 0x39
1a00170a:	f7ff fe6b 	bl	1a0013e4 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a00170e:	2101      	movs	r1, #1
1a001710:	203a      	movs	r0, #58	; 0x3a
1a001712:	f7ff fe67 	bl	1a0013e4 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a001716:	2101      	movs	r1, #1
1a001718:	203b      	movs	r0, #59	; 0x3b
1a00171a:	f7ff fe63 	bl	1a0013e4 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a00171e:	2101      	movs	r1, #1
1a001720:	203c      	movs	r0, #60	; 0x3c
1a001722:	f7ff fe5f 	bl	1a0013e4 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a001726:	2101      	movs	r1, #1
1a001728:	203d      	movs	r0, #61	; 0x3d
1a00172a:	f7ff fe5b 	bl	1a0013e4 <gpioInit>

}
1a00172e:	bd08      	pop	{r3, pc}
1a001730:	10000148 	.word	0x10000148

1a001734 <delayInit>:
*/

/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a001734:	b510      	push	{r4, lr}
1a001736:	4604      	mov	r4, r0
1a001738:	4610      	mov	r0, r2
1a00173a:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a00173c:	4b04      	ldr	r3, [pc, #16]	; (1a001750 <delayInit+0x1c>)
1a00173e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001742:	f000 f86f 	bl	1a001824 <__aeabi_uldivmod>
1a001746:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a00174a:	2300      	movs	r3, #0
1a00174c:	7423      	strb	r3, [r4, #16]
}
1a00174e:	bd10      	pop	{r4, pc}
1a001750:	10000150 	.word	0x10000150

1a001754 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a001754:	b570      	push	{r4, r5, r6, lr}
1a001756:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a001758:	7c05      	ldrb	r5, [r0, #16]
1a00175a:	b195      	cbz	r5, 1a001782 <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a00175c:	f7ff fd38 	bl	1a0011d0 <tickRead>
1a001760:	e9d4 2300 	ldrd	r2, r3, [r4]
1a001764:	1a82      	subs	r2, r0, r2
1a001766:	eb61 0303 	sbc.w	r3, r1, r3
1a00176a:	4615      	mov	r5, r2
1a00176c:	461e      	mov	r6, r3
1a00176e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a001772:	429e      	cmp	r6, r3
1a001774:	bf08      	it	eq
1a001776:	4295      	cmpeq	r5, r2
1a001778:	d30b      	bcc.n	1a001792 <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a00177a:	2300      	movs	r3, #0
1a00177c:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a00177e:	2501      	movs	r5, #1
1a001780:	e005      	b.n	1a00178e <delayRead+0x3a>
      delay->startTime = tickRead();
1a001782:	f7ff fd25 	bl	1a0011d0 <tickRead>
1a001786:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a00178a:	2301      	movs	r3, #1
1a00178c:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a00178e:	4628      	mov	r0, r5
1a001790:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a001792:	2500      	movs	r5, #0
1a001794:	e7fb      	b.n	1a00178e <delayRead+0x3a>
1a001796:	Address 0x000000001a001796 is out of bounds.


1a001798 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a001798:	2301      	movs	r3, #1
1a00179a:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00179e:	4b01      	ldr	r3, [pc, #4]	; (1a0017a4 <clearInterrupt+0xc>)
1a0017a0:	6258      	str	r0, [r3, #36]	; 0x24
}
1a0017a2:	4770      	bx	lr
1a0017a4:	40087000 	.word	0x40087000

1a0017a8 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a0017a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a0017aa:	4b12      	ldr	r3, [pc, #72]	; (1a0017f4 <serveInterrupt+0x4c>)
1a0017ac:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a0017ae:	4b12      	ldr	r3, [pc, #72]	; (1a0017f8 <serveInterrupt+0x50>)
1a0017b0:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a0017b2:	2301      	movs	r3, #1
1a0017b4:	4083      	lsls	r3, r0
1a0017b6:	420b      	tst	r3, r1
1a0017b8:	d111      	bne.n	1a0017de <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a0017ba:	4910      	ldr	r1, [pc, #64]	; (1a0017fc <serveInterrupt+0x54>)
1a0017bc:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0017be:	4d10      	ldr	r5, [pc, #64]	; (1a001800 <serveInterrupt+0x58>)
1a0017c0:	0051      	lsls	r1, r2, #1
1a0017c2:	188f      	adds	r7, r1, r2
1a0017c4:	00fc      	lsls	r4, r7, #3
1a0017c6:	4627      	mov	r7, r4
1a0017c8:	442c      	add	r4, r5
1a0017ca:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0017cc:	6864      	ldr	r4, [r4, #4]
1a0017ce:	1b36      	subs	r6, r6, r4
1a0017d0:	443d      	add	r5, r7
1a0017d2:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0017d4:	4a08      	ldr	r2, [pc, #32]	; (1a0017f8 <serveInterrupt+0x50>)
1a0017d6:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0017d8:	f7ff ffde 	bl	1a001798 <clearInterrupt>
}
1a0017dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0017de:	4907      	ldr	r1, [pc, #28]	; (1a0017fc <serveInterrupt+0x54>)
1a0017e0:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0017e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0017e6:	00d1      	lsls	r1, r2, #3
1a0017e8:	4a05      	ldr	r2, [pc, #20]	; (1a001800 <serveInterrupt+0x58>)
1a0017ea:	440a      	add	r2, r1
1a0017ec:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a0017ee:	4a02      	ldr	r2, [pc, #8]	; (1a0017f8 <serveInterrupt+0x50>)
1a0017f0:	61d3      	str	r3, [r2, #28]
1a0017f2:	e7f1      	b.n	1a0017d8 <serveInterrupt+0x30>
1a0017f4:	1a001e54 	.word	0x1a001e54
1a0017f8:	40087000 	.word	0x40087000
1a0017fc:	40084000 	.word	0x40084000
1a001800:	10000048 	.word	0x10000048

1a001804 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a001804:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a001806:	2000      	movs	r0, #0
1a001808:	f7ff ffce 	bl	1a0017a8 <serveInterrupt>
}
1a00180c:	bd08      	pop	{r3, pc}

1a00180e <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a00180e:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a001810:	2001      	movs	r0, #1
1a001812:	f7ff ffc9 	bl	1a0017a8 <serveInterrupt>
}
1a001816:	bd08      	pop	{r3, pc}

1a001818 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a001818:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a00181a:	2002      	movs	r0, #2
1a00181c:	f7ff ffc4 	bl	1a0017a8 <serveInterrupt>
}
1a001820:	bd08      	pop	{r3, pc}
1a001822:	Address 0x000000001a001822 is out of bounds.


1a001824 <__aeabi_uldivmod>:
1a001824:	b953      	cbnz	r3, 1a00183c <__aeabi_uldivmod+0x18>
1a001826:	b94a      	cbnz	r2, 1a00183c <__aeabi_uldivmod+0x18>
1a001828:	2900      	cmp	r1, #0
1a00182a:	bf08      	it	eq
1a00182c:	2800      	cmpeq	r0, #0
1a00182e:	bf1c      	itt	ne
1a001830:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001834:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001838:	f000 b972 	b.w	1a001b20 <__aeabi_idiv0>
1a00183c:	f1ad 0c08 	sub.w	ip, sp, #8
1a001840:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001844:	f000 f806 	bl	1a001854 <__udivmoddi4>
1a001848:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00184c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001850:	b004      	add	sp, #16
1a001852:	4770      	bx	lr

1a001854 <__udivmoddi4>:
1a001854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001858:	9e08      	ldr	r6, [sp, #32]
1a00185a:	4604      	mov	r4, r0
1a00185c:	4688      	mov	r8, r1
1a00185e:	2b00      	cmp	r3, #0
1a001860:	d14b      	bne.n	1a0018fa <__udivmoddi4+0xa6>
1a001862:	428a      	cmp	r2, r1
1a001864:	4615      	mov	r5, r2
1a001866:	d967      	bls.n	1a001938 <__udivmoddi4+0xe4>
1a001868:	fab2 f282 	clz	r2, r2
1a00186c:	b14a      	cbz	r2, 1a001882 <__udivmoddi4+0x2e>
1a00186e:	f1c2 0720 	rsb	r7, r2, #32
1a001872:	fa01 f302 	lsl.w	r3, r1, r2
1a001876:	fa20 f707 	lsr.w	r7, r0, r7
1a00187a:	4095      	lsls	r5, r2
1a00187c:	ea47 0803 	orr.w	r8, r7, r3
1a001880:	4094      	lsls	r4, r2
1a001882:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001886:	0c23      	lsrs	r3, r4, #16
1a001888:	fbb8 f7fe 	udiv	r7, r8, lr
1a00188c:	fa1f fc85 	uxth.w	ip, r5
1a001890:	fb0e 8817 	mls	r8, lr, r7, r8
1a001894:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001898:	fb07 f10c 	mul.w	r1, r7, ip
1a00189c:	4299      	cmp	r1, r3
1a00189e:	d909      	bls.n	1a0018b4 <__udivmoddi4+0x60>
1a0018a0:	18eb      	adds	r3, r5, r3
1a0018a2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0018a6:	f080 811b 	bcs.w	1a001ae0 <__udivmoddi4+0x28c>
1a0018aa:	4299      	cmp	r1, r3
1a0018ac:	f240 8118 	bls.w	1a001ae0 <__udivmoddi4+0x28c>
1a0018b0:	3f02      	subs	r7, #2
1a0018b2:	442b      	add	r3, r5
1a0018b4:	1a5b      	subs	r3, r3, r1
1a0018b6:	b2a4      	uxth	r4, r4
1a0018b8:	fbb3 f0fe 	udiv	r0, r3, lr
1a0018bc:	fb0e 3310 	mls	r3, lr, r0, r3
1a0018c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0018c4:	fb00 fc0c 	mul.w	ip, r0, ip
1a0018c8:	45a4      	cmp	ip, r4
1a0018ca:	d909      	bls.n	1a0018e0 <__udivmoddi4+0x8c>
1a0018cc:	192c      	adds	r4, r5, r4
1a0018ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0018d2:	f080 8107 	bcs.w	1a001ae4 <__udivmoddi4+0x290>
1a0018d6:	45a4      	cmp	ip, r4
1a0018d8:	f240 8104 	bls.w	1a001ae4 <__udivmoddi4+0x290>
1a0018dc:	3802      	subs	r0, #2
1a0018de:	442c      	add	r4, r5
1a0018e0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0018e4:	eba4 040c 	sub.w	r4, r4, ip
1a0018e8:	2700      	movs	r7, #0
1a0018ea:	b11e      	cbz	r6, 1a0018f4 <__udivmoddi4+0xa0>
1a0018ec:	40d4      	lsrs	r4, r2
1a0018ee:	2300      	movs	r3, #0
1a0018f0:	e9c6 4300 	strd	r4, r3, [r6]
1a0018f4:	4639      	mov	r1, r7
1a0018f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0018fa:	428b      	cmp	r3, r1
1a0018fc:	d909      	bls.n	1a001912 <__udivmoddi4+0xbe>
1a0018fe:	2e00      	cmp	r6, #0
1a001900:	f000 80eb 	beq.w	1a001ada <__udivmoddi4+0x286>
1a001904:	2700      	movs	r7, #0
1a001906:	e9c6 0100 	strd	r0, r1, [r6]
1a00190a:	4638      	mov	r0, r7
1a00190c:	4639      	mov	r1, r7
1a00190e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001912:	fab3 f783 	clz	r7, r3
1a001916:	2f00      	cmp	r7, #0
1a001918:	d147      	bne.n	1a0019aa <__udivmoddi4+0x156>
1a00191a:	428b      	cmp	r3, r1
1a00191c:	d302      	bcc.n	1a001924 <__udivmoddi4+0xd0>
1a00191e:	4282      	cmp	r2, r0
1a001920:	f200 80fa 	bhi.w	1a001b18 <__udivmoddi4+0x2c4>
1a001924:	1a84      	subs	r4, r0, r2
1a001926:	eb61 0303 	sbc.w	r3, r1, r3
1a00192a:	2001      	movs	r0, #1
1a00192c:	4698      	mov	r8, r3
1a00192e:	2e00      	cmp	r6, #0
1a001930:	d0e0      	beq.n	1a0018f4 <__udivmoddi4+0xa0>
1a001932:	e9c6 4800 	strd	r4, r8, [r6]
1a001936:	e7dd      	b.n	1a0018f4 <__udivmoddi4+0xa0>
1a001938:	b902      	cbnz	r2, 1a00193c <__udivmoddi4+0xe8>
1a00193a:	deff      	udf	#255	; 0xff
1a00193c:	fab2 f282 	clz	r2, r2
1a001940:	2a00      	cmp	r2, #0
1a001942:	f040 808f 	bne.w	1a001a64 <__udivmoddi4+0x210>
1a001946:	1b49      	subs	r1, r1, r5
1a001948:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00194c:	fa1f f885 	uxth.w	r8, r5
1a001950:	2701      	movs	r7, #1
1a001952:	fbb1 fcfe 	udiv	ip, r1, lr
1a001956:	0c23      	lsrs	r3, r4, #16
1a001958:	fb0e 111c 	mls	r1, lr, ip, r1
1a00195c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001960:	fb08 f10c 	mul.w	r1, r8, ip
1a001964:	4299      	cmp	r1, r3
1a001966:	d907      	bls.n	1a001978 <__udivmoddi4+0x124>
1a001968:	18eb      	adds	r3, r5, r3
1a00196a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00196e:	d202      	bcs.n	1a001976 <__udivmoddi4+0x122>
1a001970:	4299      	cmp	r1, r3
1a001972:	f200 80cd 	bhi.w	1a001b10 <__udivmoddi4+0x2bc>
1a001976:	4684      	mov	ip, r0
1a001978:	1a59      	subs	r1, r3, r1
1a00197a:	b2a3      	uxth	r3, r4
1a00197c:	fbb1 f0fe 	udiv	r0, r1, lr
1a001980:	fb0e 1410 	mls	r4, lr, r0, r1
1a001984:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001988:	fb08 f800 	mul.w	r8, r8, r0
1a00198c:	45a0      	cmp	r8, r4
1a00198e:	d907      	bls.n	1a0019a0 <__udivmoddi4+0x14c>
1a001990:	192c      	adds	r4, r5, r4
1a001992:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001996:	d202      	bcs.n	1a00199e <__udivmoddi4+0x14a>
1a001998:	45a0      	cmp	r8, r4
1a00199a:	f200 80b6 	bhi.w	1a001b0a <__udivmoddi4+0x2b6>
1a00199e:	4618      	mov	r0, r3
1a0019a0:	eba4 0408 	sub.w	r4, r4, r8
1a0019a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0019a8:	e79f      	b.n	1a0018ea <__udivmoddi4+0x96>
1a0019aa:	f1c7 0c20 	rsb	ip, r7, #32
1a0019ae:	40bb      	lsls	r3, r7
1a0019b0:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0019b4:	ea4e 0e03 	orr.w	lr, lr, r3
1a0019b8:	fa01 f407 	lsl.w	r4, r1, r7
1a0019bc:	fa20 f50c 	lsr.w	r5, r0, ip
1a0019c0:	fa21 f30c 	lsr.w	r3, r1, ip
1a0019c4:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0019c8:	4325      	orrs	r5, r4
1a0019ca:	fbb3 f9f8 	udiv	r9, r3, r8
1a0019ce:	0c2c      	lsrs	r4, r5, #16
1a0019d0:	fb08 3319 	mls	r3, r8, r9, r3
1a0019d4:	fa1f fa8e 	uxth.w	sl, lr
1a0019d8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0019dc:	fb09 f40a 	mul.w	r4, r9, sl
1a0019e0:	429c      	cmp	r4, r3
1a0019e2:	fa02 f207 	lsl.w	r2, r2, r7
1a0019e6:	fa00 f107 	lsl.w	r1, r0, r7
1a0019ea:	d90b      	bls.n	1a001a04 <__udivmoddi4+0x1b0>
1a0019ec:	eb1e 0303 	adds.w	r3, lr, r3
1a0019f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0019f4:	f080 8087 	bcs.w	1a001b06 <__udivmoddi4+0x2b2>
1a0019f8:	429c      	cmp	r4, r3
1a0019fa:	f240 8084 	bls.w	1a001b06 <__udivmoddi4+0x2b2>
1a0019fe:	f1a9 0902 	sub.w	r9, r9, #2
1a001a02:	4473      	add	r3, lr
1a001a04:	1b1b      	subs	r3, r3, r4
1a001a06:	b2ad      	uxth	r5, r5
1a001a08:	fbb3 f0f8 	udiv	r0, r3, r8
1a001a0c:	fb08 3310 	mls	r3, r8, r0, r3
1a001a10:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a001a14:	fb00 fa0a 	mul.w	sl, r0, sl
1a001a18:	45a2      	cmp	sl, r4
1a001a1a:	d908      	bls.n	1a001a2e <__udivmoddi4+0x1da>
1a001a1c:	eb1e 0404 	adds.w	r4, lr, r4
1a001a20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001a24:	d26b      	bcs.n	1a001afe <__udivmoddi4+0x2aa>
1a001a26:	45a2      	cmp	sl, r4
1a001a28:	d969      	bls.n	1a001afe <__udivmoddi4+0x2aa>
1a001a2a:	3802      	subs	r0, #2
1a001a2c:	4474      	add	r4, lr
1a001a2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001a32:	fba0 8902 	umull	r8, r9, r0, r2
1a001a36:	eba4 040a 	sub.w	r4, r4, sl
1a001a3a:	454c      	cmp	r4, r9
1a001a3c:	46c2      	mov	sl, r8
1a001a3e:	464b      	mov	r3, r9
1a001a40:	d354      	bcc.n	1a001aec <__udivmoddi4+0x298>
1a001a42:	d051      	beq.n	1a001ae8 <__udivmoddi4+0x294>
1a001a44:	2e00      	cmp	r6, #0
1a001a46:	d069      	beq.n	1a001b1c <__udivmoddi4+0x2c8>
1a001a48:	ebb1 050a 	subs.w	r5, r1, sl
1a001a4c:	eb64 0403 	sbc.w	r4, r4, r3
1a001a50:	fa04 fc0c 	lsl.w	ip, r4, ip
1a001a54:	40fd      	lsrs	r5, r7
1a001a56:	40fc      	lsrs	r4, r7
1a001a58:	ea4c 0505 	orr.w	r5, ip, r5
1a001a5c:	e9c6 5400 	strd	r5, r4, [r6]
1a001a60:	2700      	movs	r7, #0
1a001a62:	e747      	b.n	1a0018f4 <__udivmoddi4+0xa0>
1a001a64:	f1c2 0320 	rsb	r3, r2, #32
1a001a68:	fa20 f703 	lsr.w	r7, r0, r3
1a001a6c:	4095      	lsls	r5, r2
1a001a6e:	fa01 f002 	lsl.w	r0, r1, r2
1a001a72:	fa21 f303 	lsr.w	r3, r1, r3
1a001a76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001a7a:	4338      	orrs	r0, r7
1a001a7c:	0c01      	lsrs	r1, r0, #16
1a001a7e:	fbb3 f7fe 	udiv	r7, r3, lr
1a001a82:	fa1f f885 	uxth.w	r8, r5
1a001a86:	fb0e 3317 	mls	r3, lr, r7, r3
1a001a8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001a8e:	fb07 f308 	mul.w	r3, r7, r8
1a001a92:	428b      	cmp	r3, r1
1a001a94:	fa04 f402 	lsl.w	r4, r4, r2
1a001a98:	d907      	bls.n	1a001aaa <__udivmoddi4+0x256>
1a001a9a:	1869      	adds	r1, r5, r1
1a001a9c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a001aa0:	d22f      	bcs.n	1a001b02 <__udivmoddi4+0x2ae>
1a001aa2:	428b      	cmp	r3, r1
1a001aa4:	d92d      	bls.n	1a001b02 <__udivmoddi4+0x2ae>
1a001aa6:	3f02      	subs	r7, #2
1a001aa8:	4429      	add	r1, r5
1a001aaa:	1acb      	subs	r3, r1, r3
1a001aac:	b281      	uxth	r1, r0
1a001aae:	fbb3 f0fe 	udiv	r0, r3, lr
1a001ab2:	fb0e 3310 	mls	r3, lr, r0, r3
1a001ab6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001aba:	fb00 f308 	mul.w	r3, r0, r8
1a001abe:	428b      	cmp	r3, r1
1a001ac0:	d907      	bls.n	1a001ad2 <__udivmoddi4+0x27e>
1a001ac2:	1869      	adds	r1, r5, r1
1a001ac4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a001ac8:	d217      	bcs.n	1a001afa <__udivmoddi4+0x2a6>
1a001aca:	428b      	cmp	r3, r1
1a001acc:	d915      	bls.n	1a001afa <__udivmoddi4+0x2a6>
1a001ace:	3802      	subs	r0, #2
1a001ad0:	4429      	add	r1, r5
1a001ad2:	1ac9      	subs	r1, r1, r3
1a001ad4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a001ad8:	e73b      	b.n	1a001952 <__udivmoddi4+0xfe>
1a001ada:	4637      	mov	r7, r6
1a001adc:	4630      	mov	r0, r6
1a001ade:	e709      	b.n	1a0018f4 <__udivmoddi4+0xa0>
1a001ae0:	4607      	mov	r7, r0
1a001ae2:	e6e7      	b.n	1a0018b4 <__udivmoddi4+0x60>
1a001ae4:	4618      	mov	r0, r3
1a001ae6:	e6fb      	b.n	1a0018e0 <__udivmoddi4+0x8c>
1a001ae8:	4541      	cmp	r1, r8
1a001aea:	d2ab      	bcs.n	1a001a44 <__udivmoddi4+0x1f0>
1a001aec:	ebb8 0a02 	subs.w	sl, r8, r2
1a001af0:	eb69 020e 	sbc.w	r2, r9, lr
1a001af4:	3801      	subs	r0, #1
1a001af6:	4613      	mov	r3, r2
1a001af8:	e7a4      	b.n	1a001a44 <__udivmoddi4+0x1f0>
1a001afa:	4660      	mov	r0, ip
1a001afc:	e7e9      	b.n	1a001ad2 <__udivmoddi4+0x27e>
1a001afe:	4618      	mov	r0, r3
1a001b00:	e795      	b.n	1a001a2e <__udivmoddi4+0x1da>
1a001b02:	4667      	mov	r7, ip
1a001b04:	e7d1      	b.n	1a001aaa <__udivmoddi4+0x256>
1a001b06:	4681      	mov	r9, r0
1a001b08:	e77c      	b.n	1a001a04 <__udivmoddi4+0x1b0>
1a001b0a:	3802      	subs	r0, #2
1a001b0c:	442c      	add	r4, r5
1a001b0e:	e747      	b.n	1a0019a0 <__udivmoddi4+0x14c>
1a001b10:	f1ac 0c02 	sub.w	ip, ip, #2
1a001b14:	442b      	add	r3, r5
1a001b16:	e72f      	b.n	1a001978 <__udivmoddi4+0x124>
1a001b18:	4638      	mov	r0, r7
1a001b1a:	e708      	b.n	1a00192e <__udivmoddi4+0xda>
1a001b1c:	4637      	mov	r7, r6
1a001b1e:	e6e9      	b.n	1a0018f4 <__udivmoddi4+0xa0>

1a001b20 <__aeabi_idiv0>:
1a001b20:	4770      	bx	lr
1a001b22:	bf00      	nop

1a001b24 <__libc_init_array>:
1a001b24:	b570      	push	{r4, r5, r6, lr}
1a001b26:	4e0d      	ldr	r6, [pc, #52]	; (1a001b5c <__libc_init_array+0x38>)
1a001b28:	4c0d      	ldr	r4, [pc, #52]	; (1a001b60 <__libc_init_array+0x3c>)
1a001b2a:	1ba4      	subs	r4, r4, r6
1a001b2c:	10a4      	asrs	r4, r4, #2
1a001b2e:	2500      	movs	r5, #0
1a001b30:	42a5      	cmp	r5, r4
1a001b32:	d109      	bne.n	1a001b48 <__libc_init_array+0x24>
1a001b34:	4e0b      	ldr	r6, [pc, #44]	; (1a001b64 <__libc_init_array+0x40>)
1a001b36:	4c0c      	ldr	r4, [pc, #48]	; (1a001b68 <__libc_init_array+0x44>)
1a001b38:	f7fe fe0c 	bl	1a000754 <_init>
1a001b3c:	1ba4      	subs	r4, r4, r6
1a001b3e:	10a4      	asrs	r4, r4, #2
1a001b40:	2500      	movs	r5, #0
1a001b42:	42a5      	cmp	r5, r4
1a001b44:	d105      	bne.n	1a001b52 <__libc_init_array+0x2e>
1a001b46:	bd70      	pop	{r4, r5, r6, pc}
1a001b48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001b4c:	4798      	blx	r3
1a001b4e:	3501      	adds	r5, #1
1a001b50:	e7ee      	b.n	1a001b30 <__libc_init_array+0xc>
1a001b52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001b56:	4798      	blx	r3
1a001b58:	3501      	adds	r5, #1
1a001b5a:	e7f2      	b.n	1a001b42 <__libc_init_array+0x1e>
1a001b5c:	1a001e58 	.word	0x1a001e58
1a001b60:	1a001e58 	.word	0x1a001e58
1a001b64:	1a001e58 	.word	0x1a001e58
1a001b68:	1a001e5c 	.word	0x1a001e5c

1a001b6c <memset>:
1a001b6c:	4402      	add	r2, r0
1a001b6e:	4603      	mov	r3, r0
1a001b70:	4293      	cmp	r3, r2
1a001b72:	d100      	bne.n	1a001b76 <memset+0xa>
1a001b74:	4770      	bx	lr
1a001b76:	f803 1b01 	strb.w	r1, [r3], #1
1a001b7a:	e7f9      	b.n	1a001b70 <memset+0x4>
1a001b7c:	616c6f68 	.word	0x616c6f68
1a001b80:	ff000d0a 	.word	0xff000d0a

1a001b84 <ExtRateIn>:
1a001b84:	00000000                                ....

1a001b88 <OscRateIn>:
1a001b88:	00b71b00                                ....

1a001b8c <InitClkStates>:
1a001b8c:	01010f01                                ....

1a001b90 <pinmuxing>:
1a001b90:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a001ba0:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a001bb0:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a001bc0:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a001bd0:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a001be0:	00d50301 00d50401 00160107 00560207     ..............V.
1a001bf0:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a001c00:	00570206                                ..W.

1a001c04 <UART_BClock>:
1a001c04:	01a201c2 01620182                       ......b.

1a001c0c <UART_PClock>:
1a001c0c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a001c1c:	000000ff                                ....

1a001c20 <periph_to_base>:
1a001c20:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a001c30:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a001c40:	000100e0 01000100 01200003 00060120     .......... . ...
1a001c50:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a001c60:	01820013 00120182 01a201a2 01c20011     ................
1a001c70:	001001c2 01e201e2 0202000f 000e0202     ................
1a001c80:	02220222 0223000d 001c0223              "."...#.#...

1a001c8c <InitClkStates>:
1a001c8c:	00010100 00010909 0001090a 01010701     ................
1a001c9c:	00010902 00010906 0101090c 0001090d     ................
1a001cac:	0001090e 0001090f 00010910 00010911     ................
1a001cbc:	00010912 00010913 00011114 00011119     ................
1a001ccc:	0001111a 0001111b                       ........

1a001cd4 <lpcUarts>:
1a001cd4:	40081000 06020406 00180205 40081000     ...@...........@
1a001ce4:	09070509 00180706 40082000 00000000     ......... .@....
1a001cf4:	00190000 400c1000 07060107 001a0602     .......@........
1a001d04:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a001d14:	02020302 001b0204                       ........

1a001d1c <gpioPinsInit>:
1a001d1c:	02000104 00050701 05010d03 04080100     ................
1a001d2c:	02020002 02000304 00000403 04070002     ................
1a001d3c:	030c0300 09050402 05040103 04030208     ................
1a001d4c:	04020305 06040504 0802000c 03000b06     ................
1a001d5c:	00090607 07060503 060f0504 03030004     ................
1a001d6c:	02000404 00050404 06040502 04060200     ................
1a001d7c:	0c050408 05040a04 0003010e 14010a00     ................
1a001d8c:	010f0000 0d000012 00001101 0010010c     ................
1a001d9c:	07070300 000f0300 01000001 00000000     ................
1a001dac:	000a0600 08060603 06100504 04030005     ................
1a001dbc:	03000106 04090400 04010d05 010b0000     ................
1a001dcc:	0200000f 00000001 00010104 02010800     ................
1a001ddc:	01090000 09010006 05040002 04010200     ................
1a001dec:	02020105 02020504 0e00000a 01000b02     ................
1a001dfc:	000c020b 00040c01 04000200 01020001     ................
1a001e0c:	02000204 00030402 03070302 070b0300     ................
1a001e1c:	0c030004 03000507 0006070d 01020e03     ................
1a001e2c:	04010504 06020006 02000504 00040405     ................
1a001e3c:	08040402 040c0504 0d050409 05040a04     ................
1a001e4c:	0005010e ffff0801                       ........

1a001e54 <ultrasonicSensorsIrqMap>:
1a001e54:	ff020100                                ....
