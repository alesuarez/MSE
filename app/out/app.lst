
app/out/app.elf:     file format elf32-littlearm
app/out/app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00069d

Program Header:
0x70000001 off    0x00011dc0 vaddr 0x1a001dc0 paddr 0x1a001dc0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010090 vaddr 0x10000090 paddr 0x10000090 align 2**16
         filesz 0x00000000 memsz 0x000000cc flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001dc8 memsz 0x00001dc8 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001dc8 align 2**16
         filesz 0x00000090 memsz 0x00000090 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dbc  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  10000000  1a001dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020090  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020090  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020090  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020090  2**2
                  CONTENTS
  6 .bss          000000cc  10000090  10000090  00010090  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020090  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020090  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020090  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020090  2**2
                  CONTENTS
 11 .init_array   00000004  1a001dbc  1a001dbc  00011dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a001dc0  1a001dc0  00011dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020090  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020090  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020090  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020090  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020090  2**2
                  CONTENTS
 18 .noinit       00000000  1000015c  1000015c  00020090  2**2
                  CONTENTS
 19 .debug_info   0002334f  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 0000449f  00000000  00000000  000433df  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000055c1  00000000  00000000  0004787e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000910  00000000  00000000  0004ce3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000888  00000000  00000000  0004d74f  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000db1e  00000000  00000000  0004dfd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000eabb  00000000  00000000  0005baf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00026434  00000000  00000000  0006a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000909e4  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  00090a63  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001548  00000000  00000000  00090a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000090 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001dbc l    d  .init_array	00000000 .init_array
1a001dc0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000015c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 key_service.c
00000000 l    df *ABS*	00000000 elevator_fsm.c
1a000348 l     F .text	0000000e isAcctionKey
10000090 l     O .bss	00000002 actualFloor.13411
10000092 l     O .bss	00000002 requiredFloor.13412
10000094 l     O .bss	00000002 stoppedTime.13413
00000000 l    df *ABS*	00000000 led_service.c
1a000460 l     F .text	0000001c redOn
1a00047c l     F .text	0000001c yellowOn
1a000498 l     F .text	0000001c greenOn
1a0004b4 l     F .text	00000024 error
1a0004d8 l     F .text	0000001c rgbGreenLed
1a0004f4 l     F .text	0000001c rgbBlueLed
1a000510 l     F .text	0000001c rgbRedLed
00000000 l    df *ABS*	00000000 app.c
00000000 l    df *ABS*	00000000 debounce_fsm.c
00000000 l    df *ABS*	00000000 board.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001af0 l     O .text	00000004 InitClkStates
1a001af4 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000800 l     F .text	0000002c Chip_UART_GetIndex
1a001b68 l     O .text	00000008 UART_BClock
1a001b70 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0009a8 l     F .text	000000a4 pll_calc_divs
1a000a4c l     F .text	0000010c pll_get_frac
1a000b58 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000dcc l     F .text	00000022 Chip_Clock_GetDivRate
10000098 l     O .bss	00000008 audio_usb_pll_freq
1a001b84 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001bf0 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000000 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a001c38 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
100000a0 l     O .bss	00000004 callBackFuncParams
100000a8 l     O .bss	00000008 tickCounter
100000b0 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_timer.c
1a001210 l     F .text	00000002 errorOcurred
1a001212 l     F .text	00000002 doNothing
10000008 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00131c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100000b4 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a001704 l     F .text	00000010 clearInterrupt
1a001714 l     F .text	0000005c serveInterrupt
10000048 l     O .data	00000048 ultrasonicSensors
1a001db8 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a001dc0 l       .init_array	00000000 __init_array_end
1a001dbc l       .bss_RAM5	00000000 __preinit_array_end
1a001dbc l       .init_array	00000000 __init_array_start
1a001dbc l       .bss_RAM5	00000000 __preinit_array_start
1a000bf0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000324 g     F .text	0000000a buttonReleased
1a001294 g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a000748 g     F .text	00000008 __stdio_init
1a0016c0 g     F .text	00000042 delayRead
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a0011dc g     F .text	00000034 SysTick_Handler
1a000880 g     F .text	00000040 Chip_UART_SetBaud
100000b8 g     O .bss	00000001 actualElevatorFsmState
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a001dc8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
100000c0 g     O .bss	00000020 floorOneKey
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
100000e0 g     O .bss	00000020 floorTwoKey
53ff71f2 g       *ABS*	00000000 __valid_user_code_checksum
1a001dc8 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0012d8 g     F .text	00000044 TIMER3_IRQHandler
1a000e6e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001790 g     F .text	00000000 .hidden __aeabi_uldivmod
1000015c g       .noinit	00000000 _noinit
10000148 g     O .bss	00000004 SystemCoreClock
1a00082c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000eb8 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000788 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0017c0 g     F .text	000002cc .hidden __udivmoddi4
1a001ae8 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00030e g     F .text	00000008 notPress
1a00177a g     F .text	0000000a GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001dc0 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a001a90 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000624 g     F .text	00000076 updateDebounceFsm
1a000720 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
10000100 g     O .bss	00000020 lowLevelKey
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1000015c g       .bss	00000000 _ebss
1a001214 g     F .text	00000040 TIMER0_IRQHandler
1a00069c g     F .text	00000084 Reset_Handler
1a001160 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000ba4 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a001254 g     F .text	00000040 TIMER1_IRQHandler
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000d60 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001c80 g     O .text	00000136 gpioPinsInit
1a001784 g     F .text	0000000a GPIO2_IRQHandler
1a000e48 g     F .text	00000026 Chip_Clock_GetBaseClock
10000090 g       .bss	00000000 _bss
1a0016a0 g     F .text	00000020 delayInit
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000f18 g     F .text	00000002 Chip_GPIO_Init
1a001aec g     O .text	00000004 OscRateIn
1a0010c0 g     F .text	0000007c uartInit
1000015c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000316 g     F .text	0000000e buttonPressed
1a001350 g     F .text	00000194 gpioInit
1a001a8c  w    F .text	00000002 .hidden __aeabi_ldiv0
10000120 g     O .bss	00000001 pressedKey
1a001590 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a000300 g     F .text	0000000e isPress
1a000c0c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001ad8 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a00057c g     F .text	000000a0 main
1a00061c g     F .text	00000008 initDebounceFsm
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
10000004 g     O .data	00000004 DWT_CTRL
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a000e7c g     F .text	0000003c Chip_Clock_EnableOpts
1a000c28 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000ce0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001070 g     F .text	00000034 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0014e4 g     F .text	00000056 gpioWrite
10000158 g     O .bss	00000004 g_pUsbApi
1a000750 g     F .text	00000038 Board_SetupMuxing
1a000550 g     F .text	0000002c motorStateIndicator
1a0008c0 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00113c g     F .text	0000000c tickRead
10000150 g     O .bss	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1000015c g       .bss	00000000 _pvHeapStart
1a000364 g     F .text	000000fc updateElevatorFsm
1a000178 g       .text	00000000 __section_table_end
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000724 g     F .text	00000024 Board_Debug_Init
10000090 g       .data	00000000 _edata
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a000f1c g     F .text	00000154 Chip_SetupCoreClock
1a001770 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000f04 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
10000128 g     O .bss	00000020 motorKey
1a001a8c  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a00032e g     F .text	0000001a mapKeyToFloor
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00153a g     F .text	00000054 gpioRead
1a0015ac g     F .text	000000f4 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000358 g     F .text	0000000c initElevatorFsm
1a001148 g     F .text	00000018 tickPowerSet
1a000df0 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0010a4 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0007f4 g     F .text	0000000c Board_SystemInit
1a00052c g     F .text	00000024 actualFloorLedIndicator



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 9d 06 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a f2 71 ff 53     }............q.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	dd 11 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	91 15 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	15 12 00 1a 55 12 00 1a 95 12 00 1a d9 12 00 1a     ....U...........
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	71 17 00 1a 7b 17 00 1a 85 17 00 1a bb 01 00 1a     q...{...........
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a001dc8 	.word	0x1a001dc8
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000090 	.word	0x00000090
1a000120:	1a001dc8 	.word	0x1a001dc8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001dc8 	.word	0x1a001dc8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001dc8 	.word	0x1a001dc8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001dc8 	.word	0x1a001dc8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000090 	.word	0x10000090
1a000154:	000000cc 	.word	0x000000cc
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __WFI();
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <isPress>:
#include "key_service.h"
#include "led_service.h"

bool_t isPress(gpioMap_t key) {
1a000300:	b508      	push	{r3, lr}
	return !gpioRead(key);
1a000302:	f001 f91a 	bl	1a00153a <gpioRead>
}
1a000306:	fab0 f080 	clz	r0, r0
1a00030a:	0940      	lsrs	r0, r0, #5
1a00030c:	bd08      	pop	{r3, pc}

1a00030e <notPress>:

bool_t notPress(gpioMap_t key) {
1a00030e:	b508      	push	{r3, lr}
	return gpioRead(key);
1a000310:	f001 f913 	bl	1a00153a <gpioRead>
}
1a000314:	bd08      	pop	{r3, pc}

1a000316 <buttonPressed>:

// down flag
bool_t buttonPressed(gpioMap_t key) {
	return key == LOW_FLOOR_KEY || key == FIRST_FLOOR_KEY || key == SECOND_FLOOR_KEY;
1a000316:	3824      	subs	r0, #36	; 0x24
1a000318:	b2c0      	uxtb	r0, r0
}
1a00031a:	2802      	cmp	r0, #2
1a00031c:	bf8c      	ite	hi
1a00031e:	2000      	movhi	r0, #0
1a000320:	2001      	movls	r0, #1
1a000322:	4770      	bx	lr

1a000324 <buttonReleased>:

// up flag
bool_t buttonReleased(gpioMap_t key) {
	return key == MOTOR_KEY ? TRUE : FALSE;
}
1a000324:	2827      	cmp	r0, #39	; 0x27
1a000326:	bf14      	ite	ne
1a000328:	2000      	movne	r0, #0
1a00032a:	2001      	moveq	r0, #1
1a00032c:	4770      	bx	lr

1a00032e <mapKeyToFloor>:

uint16_t mapKeyToFloor(gpioMap_t key) {
	if (key == LOW_FLOOR_KEY) {
1a00032e:	2824      	cmp	r0, #36	; 0x24
1a000330:	d004      	beq.n	1a00033c <mapKeyToFloor+0xe>
		return LOW_FLOOR;
	} else if (key == FIRST_FLOOR_KEY) {
1a000332:	2825      	cmp	r0, #37	; 0x25
1a000334:	d004      	beq.n	1a000340 <mapKeyToFloor+0x12>
		return FIRST_FLOOR;
	} else if (key == SECOND_FLOOR_KEY) {
1a000336:	2826      	cmp	r0, #38	; 0x26
1a000338:	d004      	beq.n	1a000344 <mapKeyToFloor+0x16>
		return SECOND_FLOOR;
	}
}
1a00033a:	4770      	bx	lr
		return LOW_FLOOR;
1a00033c:	2000      	movs	r0, #0
1a00033e:	4770      	bx	lr
		return FIRST_FLOOR;
1a000340:	2001      	movs	r0, #1
1a000342:	4770      	bx	lr
		return SECOND_FLOOR;
1a000344:	2002      	movs	r0, #2
}
1a000346:	4770      	bx	lr

1a000348 <isAcctionKey>:
    actualFloor = actualFloor % 3;
    return;
}

static bool_t isAcctionKey(gpioMap_t key) {
	return key == LOW_FLOOR_KEY || key == FIRST_FLOOR_KEY || key == SECOND_FLOOR_KEY;
1a000348:	3824      	subs	r0, #36	; 0x24
1a00034a:	b2c0      	uxtb	r0, r0
}
1a00034c:	2802      	cmp	r0, #2
1a00034e:	bf8c      	ite	hi
1a000350:	2000      	movhi	r0, #0
1a000352:	2001      	movls	r0, #1
1a000354:	4770      	bx	lr
1a000356:	Address 0x000000001a000356 is out of bounds.


1a000358 <initElevatorFsm>:
    actualElevatorFsmState = LOW_FLOOR_STATE;
1a000358:	4b01      	ldr	r3, [pc, #4]	; (1a000360 <initElevatorFsm+0x8>)
1a00035a:	2200      	movs	r2, #0
1a00035c:	701a      	strb	r2, [r3, #0]
}
1a00035e:	4770      	bx	lr
1a000360:	100000b8 	.word	0x100000b8

1a000364 <updateElevatorFsm>:
void updateElevatorFsm(gpioMap_t key) {
1a000364:	b510      	push	{r4, lr}
1a000366:	4604      	mov	r4, r0
    switch (actualElevatorFsmState) {
1a000368:	4b38      	ldr	r3, [pc, #224]	; (1a00044c <updateElevatorFsm+0xe8>)
1a00036a:	781b      	ldrb	r3, [r3, #0]
1a00036c:	2b03      	cmp	r3, #3
1a00036e:	d869      	bhi.n	1a000444 <updateElevatorFsm+0xe0>
1a000370:	e8df f003 	tbb	[pc, r3]
1a000374:	581e0e02 	.word	0x581e0e02
            if (isAcctionKey(key)) {
1a000378:	f7ff ffe6 	bl	1a000348 <isAcctionKey>
1a00037c:	b340      	cbz	r0, 1a0003d0 <updateElevatorFsm+0x6c>
                requiredFloor = mapKeyToFloor(key);
1a00037e:	4620      	mov	r0, r4
1a000380:	f7ff ffd5 	bl	1a00032e <mapKeyToFloor>
1a000384:	4b32      	ldr	r3, [pc, #200]	; (1a000450 <updateElevatorFsm+0xec>)
1a000386:	8018      	strh	r0, [r3, #0]
                actualElevatorFsmState = GOING_UP_STATE;
1a000388:	4b30      	ldr	r3, [pc, #192]	; (1a00044c <updateElevatorFsm+0xe8>)
1a00038a:	2201      	movs	r2, #1
1a00038c:	701a      	strb	r2, [r3, #0]
1a00038e:	e01f      	b.n	1a0003d0 <updateElevatorFsm+0x6c>
            if (requiredFloor == actualFloor) {
1a000390:	4b2f      	ldr	r3, [pc, #188]	; (1a000450 <updateElevatorFsm+0xec>)
1a000392:	881a      	ldrh	r2, [r3, #0]
1a000394:	4b2f      	ldr	r3, [pc, #188]	; (1a000454 <updateElevatorFsm+0xf0>)
1a000396:	881b      	ldrh	r3, [r3, #0]
1a000398:	429a      	cmp	r2, r3
1a00039a:	d005      	beq.n	1a0003a8 <updateElevatorFsm+0x44>
            } else if (key == MOTOR_KEY) {
1a00039c:	2827      	cmp	r0, #39	; 0x27
1a00039e:	d117      	bne.n	1a0003d0 <updateElevatorFsm+0x6c>
                actualFloor++;
1a0003a0:	3301      	adds	r3, #1
1a0003a2:	4a2c      	ldr	r2, [pc, #176]	; (1a000454 <updateElevatorFsm+0xf0>)
1a0003a4:	8013      	strh	r3, [r2, #0]
1a0003a6:	e013      	b.n	1a0003d0 <updateElevatorFsm+0x6c>
                actualElevatorFsmState = STOPPED_STATE;
1a0003a8:	4b28      	ldr	r3, [pc, #160]	; (1a00044c <updateElevatorFsm+0xe8>)
1a0003aa:	2202      	movs	r2, #2
1a0003ac:	701a      	strb	r2, [r3, #0]
1a0003ae:	e00f      	b.n	1a0003d0 <updateElevatorFsm+0x6c>
            if (stoppedTime >= DEFAULT_MAX_STOPPED_10_SEG) {
1a0003b0:	4b29      	ldr	r3, [pc, #164]	; (1a000458 <updateElevatorFsm+0xf4>)
1a0003b2:	881b      	ldrh	r3, [r3, #0]
1a0003b4:	2bf9      	cmp	r3, #249	; 0xf9
1a0003b6:	d91d      	bls.n	1a0003f4 <updateElevatorFsm+0x90>
                requiredFloor = LOW_FLOOR;
1a0003b8:	2300      	movs	r3, #0
1a0003ba:	4a25      	ldr	r2, [pc, #148]	; (1a000450 <updateElevatorFsm+0xec>)
1a0003bc:	8013      	strh	r3, [r2, #0]
                stoppedTime = ZERO;
1a0003be:	4a26      	ldr	r2, [pc, #152]	; (1a000458 <updateElevatorFsm+0xf4>)
1a0003c0:	8013      	strh	r3, [r2, #0]
                actualElevatorFsmState = GOING_DOWN_STATE;
1a0003c2:	4b22      	ldr	r3, [pc, #136]	; (1a00044c <updateElevatorFsm+0xe8>)
1a0003c4:	2203      	movs	r2, #3
1a0003c6:	701a      	strb	r2, [r3, #0]
            stoppedTime++;
1a0003c8:	4a23      	ldr	r2, [pc, #140]	; (1a000458 <updateElevatorFsm+0xf4>)
1a0003ca:	8813      	ldrh	r3, [r2, #0]
1a0003cc:	3301      	adds	r3, #1
1a0003ce:	8013      	strh	r3, [r2, #0]
    actualFloorLedIndicator(actualFloor);
1a0003d0:	4c20      	ldr	r4, [pc, #128]	; (1a000454 <updateElevatorFsm+0xf0>)
1a0003d2:	8820      	ldrh	r0, [r4, #0]
1a0003d4:	f000 f8aa 	bl	1a00052c <actualFloorLedIndicator>
    motorStateIndicator(actualElevatorFsmState);
1a0003d8:	4b1c      	ldr	r3, [pc, #112]	; (1a00044c <updateElevatorFsm+0xe8>)
1a0003da:	7818      	ldrb	r0, [r3, #0]
1a0003dc:	f000 f8b8 	bl	1a000550 <motorStateIndicator>
    actualFloor = actualFloor % 3;
1a0003e0:	8822      	ldrh	r2, [r4, #0]
1a0003e2:	4b1e      	ldr	r3, [pc, #120]	; (1a00045c <updateElevatorFsm+0xf8>)
1a0003e4:	fba3 1302 	umull	r1, r3, r3, r2
1a0003e8:	085b      	lsrs	r3, r3, #1
1a0003ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a0003ee:	1ad3      	subs	r3, r2, r3
1a0003f0:	8023      	strh	r3, [r4, #0]
}
1a0003f2:	bd10      	pop	{r4, pc}
            } else if (isAcctionKey(key)){
1a0003f4:	f7ff ffa8 	bl	1a000348 <isAcctionKey>
1a0003f8:	2800      	cmp	r0, #0
1a0003fa:	d0e5      	beq.n	1a0003c8 <updateElevatorFsm+0x64>
                if (actualFloor - requiredFloor > ZERO) {
1a0003fc:	4b15      	ldr	r3, [pc, #84]	; (1a000454 <updateElevatorFsm+0xf0>)
1a0003fe:	881b      	ldrh	r3, [r3, #0]
1a000400:	4a13      	ldr	r2, [pc, #76]	; (1a000450 <updateElevatorFsm+0xec>)
1a000402:	8812      	ldrh	r2, [r2, #0]
1a000404:	1a9b      	subs	r3, r3, r2
1a000406:	2b00      	cmp	r3, #0
1a000408:	dd08      	ble.n	1a00041c <updateElevatorFsm+0xb8>
                    actualElevatorFsmState = GOING_DOWN_STATE;
1a00040a:	4b10      	ldr	r3, [pc, #64]	; (1a00044c <updateElevatorFsm+0xe8>)
1a00040c:	2203      	movs	r2, #3
1a00040e:	701a      	strb	r2, [r3, #0]
                requiredFloor = mapKeyToFloor(key);
1a000410:	4620      	mov	r0, r4
1a000412:	f7ff ff8c 	bl	1a00032e <mapKeyToFloor>
1a000416:	4b0e      	ldr	r3, [pc, #56]	; (1a000450 <updateElevatorFsm+0xec>)
1a000418:	8018      	strh	r0, [r3, #0]
1a00041a:	e7d5      	b.n	1a0003c8 <updateElevatorFsm+0x64>
                    actualElevatorFsmState = GOING_UP_STATE;
1a00041c:	4b0b      	ldr	r3, [pc, #44]	; (1a00044c <updateElevatorFsm+0xe8>)
1a00041e:	2201      	movs	r2, #1
1a000420:	701a      	strb	r2, [r3, #0]
1a000422:	e7f5      	b.n	1a000410 <updateElevatorFsm+0xac>
            if (requiredFloor == actualFloor) {
1a000424:	4b0a      	ldr	r3, [pc, #40]	; (1a000450 <updateElevatorFsm+0xec>)
1a000426:	881a      	ldrh	r2, [r3, #0]
1a000428:	4b0a      	ldr	r3, [pc, #40]	; (1a000454 <updateElevatorFsm+0xf0>)
1a00042a:	881b      	ldrh	r3, [r3, #0]
1a00042c:	429a      	cmp	r2, r3
1a00042e:	d005      	beq.n	1a00043c <updateElevatorFsm+0xd8>
            } else if (key == MOTOR_KEY) {
1a000430:	2827      	cmp	r0, #39	; 0x27
1a000432:	d1cd      	bne.n	1a0003d0 <updateElevatorFsm+0x6c>
                actualFloor--;
1a000434:	3b01      	subs	r3, #1
1a000436:	4a07      	ldr	r2, [pc, #28]	; (1a000454 <updateElevatorFsm+0xf0>)
1a000438:	8013      	strh	r3, [r2, #0]
1a00043a:	e7c9      	b.n	1a0003d0 <updateElevatorFsm+0x6c>
                actualElevatorFsmState = STOPPED_STATE;
1a00043c:	4b03      	ldr	r3, [pc, #12]	; (1a00044c <updateElevatorFsm+0xe8>)
1a00043e:	2202      	movs	r2, #2
1a000440:	701a      	strb	r2, [r3, #0]
1a000442:	e7c5      	b.n	1a0003d0 <updateElevatorFsm+0x6c>
            initElevatorFsm();
1a000444:	f7ff ff88 	bl	1a000358 <initElevatorFsm>
            break;
1a000448:	e7c2      	b.n	1a0003d0 <updateElevatorFsm+0x6c>
1a00044a:	bf00      	nop
1a00044c:	100000b8 	.word	0x100000b8
1a000450:	10000092 	.word	0x10000092
1a000454:	10000090 	.word	0x10000090
1a000458:	10000094 	.word	0x10000094
1a00045c:	aaaaaaab 	.word	0xaaaaaaab

1a000460 <redOn>:
			break;
	}
	return;
}

static void redOn() {
1a000460:	b508      	push	{r3, lr}
	gpioWrite(RED_LED, TRUE);
1a000462:	2101      	movs	r1, #1
1a000464:	202b      	movs	r0, #43	; 0x2b
1a000466:	f001 f83d 	bl	1a0014e4 <gpioWrite>
	gpioWrite(YELLOW_LED, FALSE);
1a00046a:	2100      	movs	r1, #0
1a00046c:	202c      	movs	r0, #44	; 0x2c
1a00046e:	f001 f839 	bl	1a0014e4 <gpioWrite>
	gpioWrite(GREEN_LED, FALSE);
1a000472:	2100      	movs	r1, #0
1a000474:	202d      	movs	r0, #45	; 0x2d
1a000476:	f001 f835 	bl	1a0014e4 <gpioWrite>
}
1a00047a:	bd08      	pop	{r3, pc}

1a00047c <yellowOn>:
	gpioWrite(RED_LED, FALSE);
	gpioWrite(YELLOW_LED, FALSE);
	gpioWrite(GREEN_LED, TRUE);
}

static void yellowOn() {
1a00047c:	b508      	push	{r3, lr}
	gpioWrite(RED_LED, FALSE);
1a00047e:	2100      	movs	r1, #0
1a000480:	202b      	movs	r0, #43	; 0x2b
1a000482:	f001 f82f 	bl	1a0014e4 <gpioWrite>
	gpioWrite(YELLOW_LED, TRUE);
1a000486:	2101      	movs	r1, #1
1a000488:	202c      	movs	r0, #44	; 0x2c
1a00048a:	f001 f82b 	bl	1a0014e4 <gpioWrite>
	gpioWrite(GREEN_LED, FALSE);
1a00048e:	2100      	movs	r1, #0
1a000490:	202d      	movs	r0, #45	; 0x2d
1a000492:	f001 f827 	bl	1a0014e4 <gpioWrite>
}
1a000496:	bd08      	pop	{r3, pc}

1a000498 <greenOn>:
static void greenOn() {
1a000498:	b508      	push	{r3, lr}
	gpioWrite(RED_LED, FALSE);
1a00049a:	2100      	movs	r1, #0
1a00049c:	202b      	movs	r0, #43	; 0x2b
1a00049e:	f001 f821 	bl	1a0014e4 <gpioWrite>
	gpioWrite(YELLOW_LED, FALSE);
1a0004a2:	2100      	movs	r1, #0
1a0004a4:	202c      	movs	r0, #44	; 0x2c
1a0004a6:	f001 f81d 	bl	1a0014e4 <gpioWrite>
	gpioWrite(GREEN_LED, TRUE);
1a0004aa:	2101      	movs	r1, #1
1a0004ac:	202d      	movs	r0, #45	; 0x2d
1a0004ae:	f001 f819 	bl	1a0014e4 <gpioWrite>
}
1a0004b2:	bd08      	pop	{r3, pc}

1a0004b4 <error>:
	gpioWrite(LEDB, FALSE);
	gpioWrite(LEDR, FALSE);
	gpioWrite(LEDG, TRUE);
}

static void error() {
1a0004b4:	b508      	push	{r3, lr}
	gpioWrite(RED_LED, TRUE);
1a0004b6:	2101      	movs	r1, #1
1a0004b8:	202b      	movs	r0, #43	; 0x2b
1a0004ba:	f001 f813 	bl	1a0014e4 <gpioWrite>
	gpioWrite(YELLOW_LED, TRUE);
1a0004be:	2101      	movs	r1, #1
1a0004c0:	202c      	movs	r0, #44	; 0x2c
1a0004c2:	f001 f80f 	bl	1a0014e4 <gpioWrite>
	gpioWrite(GREEN_LED, TRUE);
1a0004c6:	2101      	movs	r1, #1
1a0004c8:	202d      	movs	r0, #45	; 0x2d
1a0004ca:	f001 f80b 	bl	1a0014e4 <gpioWrite>
	gpioWrite(LEDG, TRUE);
1a0004ce:	2101      	movs	r1, #1
1a0004d0:	2029      	movs	r0, #41	; 0x29
1a0004d2:	f001 f807 	bl	1a0014e4 <gpioWrite>
}
1a0004d6:	bd08      	pop	{r3, pc}

1a0004d8 <rgbGreenLed>:
static void rgbGreenLed() {
1a0004d8:	b508      	push	{r3, lr}
	gpioWrite(LEDB, FALSE);
1a0004da:	2100      	movs	r1, #0
1a0004dc:	202a      	movs	r0, #42	; 0x2a
1a0004de:	f001 f801 	bl	1a0014e4 <gpioWrite>
	gpioWrite(LEDR, FALSE);
1a0004e2:	2100      	movs	r1, #0
1a0004e4:	2028      	movs	r0, #40	; 0x28
1a0004e6:	f000 fffd 	bl	1a0014e4 <gpioWrite>
	gpioWrite(LEDG, TRUE);
1a0004ea:	2101      	movs	r1, #1
1a0004ec:	2029      	movs	r0, #41	; 0x29
1a0004ee:	f000 fff9 	bl	1a0014e4 <gpioWrite>
}
1a0004f2:	bd08      	pop	{r3, pc}

1a0004f4 <rgbBlueLed>:
static void rgbBlueLed() {
1a0004f4:	b508      	push	{r3, lr}
	gpioWrite(LEDB, TRUE);
1a0004f6:	2101      	movs	r1, #1
1a0004f8:	202a      	movs	r0, #42	; 0x2a
1a0004fa:	f000 fff3 	bl	1a0014e4 <gpioWrite>
	gpioWrite(LEDR, FALSE);
1a0004fe:	2100      	movs	r1, #0
1a000500:	2028      	movs	r0, #40	; 0x28
1a000502:	f000 ffef 	bl	1a0014e4 <gpioWrite>
	gpioWrite(LEDG, FALSE);
1a000506:	2100      	movs	r1, #0
1a000508:	2029      	movs	r0, #41	; 0x29
1a00050a:	f000 ffeb 	bl	1a0014e4 <gpioWrite>
}
1a00050e:	bd08      	pop	{r3, pc}

1a000510 <rgbRedLed>:
static void rgbRedLed() {
1a000510:	b508      	push	{r3, lr}
	gpioWrite(LEDB, FALSE);
1a000512:	2100      	movs	r1, #0
1a000514:	202a      	movs	r0, #42	; 0x2a
1a000516:	f000 ffe5 	bl	1a0014e4 <gpioWrite>
	gpioWrite(LEDR, TRUE);
1a00051a:	2101      	movs	r1, #1
1a00051c:	2028      	movs	r0, #40	; 0x28
1a00051e:	f000 ffe1 	bl	1a0014e4 <gpioWrite>
	gpioWrite(LEDG, FALSE);
1a000522:	2100      	movs	r1, #0
1a000524:	2029      	movs	r0, #41	; 0x29
1a000526:	f000 ffdd 	bl	1a0014e4 <gpioWrite>
}
1a00052a:	bd08      	pop	{r3, pc}

1a00052c <actualFloorLedIndicator>:
void actualFloorLedIndicator(uint16_t floor) {
1a00052c:	b508      	push	{r3, lr}
	switch(floor){
1a00052e:	2801      	cmp	r0, #1
1a000530:	d008      	beq.n	1a000544 <actualFloorLedIndicator+0x18>
1a000532:	b120      	cbz	r0, 1a00053e <actualFloorLedIndicator+0x12>
1a000534:	2802      	cmp	r0, #2
1a000536:	d008      	beq.n	1a00054a <actualFloorLedIndicator+0x1e>
			error();
1a000538:	f7ff ffbc 	bl	1a0004b4 <error>
	return;
1a00053c:	e001      	b.n	1a000542 <actualFloorLedIndicator+0x16>
			redOn();
1a00053e:	f7ff ff8f 	bl	1a000460 <redOn>
}
1a000542:	bd08      	pop	{r3, pc}
			yellowOn();
1a000544:	f7ff ff9a 	bl	1a00047c <yellowOn>
			break;
1a000548:	e7fb      	b.n	1a000542 <actualFloorLedIndicator+0x16>
			greenOn();
1a00054a:	f7ff ffa5 	bl	1a000498 <greenOn>
			break;
1a00054e:	e7f8      	b.n	1a000542 <actualFloorLedIndicator+0x16>

1a000550 <motorStateIndicator>:
void motorStateIndicator(ElevatorFsmState elevatorFsmState) {
1a000550:	b508      	push	{r3, lr}
	switch(elevatorFsmState){
1a000552:	2803      	cmp	r0, #3
1a000554:	d80f      	bhi.n	1a000576 <motorStateIndicator+0x26>
1a000556:	e8df f000 	tbb	[pc, r0]
1a00055a:	0502      	.short	0x0502
1a00055c:	0b08      	.short	0x0b08
			rgbBlueLed();
1a00055e:	f7ff ffc9 	bl	1a0004f4 <rgbBlueLed>
}
1a000562:	bd08      	pop	{r3, pc}
			rgbGreenLed();
1a000564:	f7ff ffb8 	bl	1a0004d8 <rgbGreenLed>
			break;
1a000568:	e7fb      	b.n	1a000562 <motorStateIndicator+0x12>
			rgbBlueLed();
1a00056a:	f7ff ffc3 	bl	1a0004f4 <rgbBlueLed>
			break;
1a00056e:	e7f8      	b.n	1a000562 <motorStateIndicator+0x12>
			rgbRedLed();
1a000570:	f7ff ffce 	bl	1a000510 <rgbRedLed>
			break;
1a000574:	e7f5      	b.n	1a000562 <motorStateIndicator+0x12>
			error();
1a000576:	f7ff ff9d 	bl	1a0004b4 <error>
	return;
1a00057a:	e7f2      	b.n	1a000562 <motorStateIndicator+0x12>

1a00057c <main>:
#define DEFAULT_ELEVATOR_TIME 50

debounceData_t  lowLevelKey, floorOneKey, floorTwoKey, motorKey;
gpioMap_t pressedKey;

int main(void) {
1a00057c:	b500      	push	{lr}
1a00057e:	b08d      	sub	sp, #52	; 0x34

    boardConfig();
1a000580:	f001 f814 	bl	1a0015ac <boardInit>

    delay_t keysDelay;
    delay_t elevatorDelay;

    delayConfig(&keysDelay, DEFAULT_DEBOUNCE_TIME);
1a000584:	2228      	movs	r2, #40	; 0x28
1a000586:	2300      	movs	r3, #0
1a000588:	a806      	add	r0, sp, #24
1a00058a:	f001 f889 	bl	1a0016a0 <delayInit>
    delayConfig(&elevatorDelay, DEFAULT_ELEVATOR_TIME);
1a00058e:	2232      	movs	r2, #50	; 0x32
1a000590:	2300      	movs	r3, #0
1a000592:	4668      	mov	r0, sp
1a000594:	f001 f884 	bl	1a0016a0 <delayInit>

    uartConfig(UART_USB, DEFAULT_BAUD_RATE);
1a000598:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00059c:	2003      	movs	r0, #3
1a00059e:	f000 fd8f 	bl	1a0010c0 <uartInit>

    initDebounceFsm(&lowLevelKey, LOW_FLOOR_KEY);
1a0005a2:	2124      	movs	r1, #36	; 0x24
1a0005a4:	4818      	ldr	r0, [pc, #96]	; (1a000608 <main+0x8c>)
1a0005a6:	f000 f839 	bl	1a00061c <initDebounceFsm>
    initDebounceFsm(&floorOneKey, FIRST_FLOOR_KEY);
1a0005aa:	2125      	movs	r1, #37	; 0x25
1a0005ac:	4817      	ldr	r0, [pc, #92]	; (1a00060c <main+0x90>)
1a0005ae:	f000 f835 	bl	1a00061c <initDebounceFsm>
    initDebounceFsm(&floorTwoKey, SECOND_FLOOR_KEY);
1a0005b2:	2126      	movs	r1, #38	; 0x26
1a0005b4:	4816      	ldr	r0, [pc, #88]	; (1a000610 <main+0x94>)
1a0005b6:	f000 f831 	bl	1a00061c <initDebounceFsm>
    initDebounceFsm(&motorKey, MOTOR_KEY);
1a0005ba:	2127      	movs	r1, #39	; 0x27
1a0005bc:	4815      	ldr	r0, [pc, #84]	; (1a000614 <main+0x98>)
1a0005be:	f000 f82d 	bl	1a00061c <initDebounceFsm>

    initElevatorFsm();
1a0005c2:	f7ff fec9 	bl	1a000358 <initElevatorFsm>
1a0005c6:	e003      	b.n	1a0005d0 <main+0x54>
            updateDebounceFsm(&floorOneKey, &pressedKey);
            updateDebounceFsm(&floorTwoKey, &pressedKey);
            updateDebounceFsm(&motorKey, &pressedKey);
        }

        if (delayRead(&elevatorDelay)) {
1a0005c8:	4668      	mov	r0, sp
1a0005ca:	f001 f879 	bl	1a0016c0 <delayRead>
1a0005ce:	b9b0      	cbnz	r0, 1a0005fe <main+0x82>
        if (delayRead(&keysDelay)) {
1a0005d0:	a806      	add	r0, sp, #24
1a0005d2:	f001 f875 	bl	1a0016c0 <delayRead>
1a0005d6:	2800      	cmp	r0, #0
1a0005d8:	d0f6      	beq.n	1a0005c8 <main+0x4c>
            updateDebounceFsm(&lowLevelKey, &pressedKey);
1a0005da:	4c0f      	ldr	r4, [pc, #60]	; (1a000618 <main+0x9c>)
1a0005dc:	4621      	mov	r1, r4
1a0005de:	480a      	ldr	r0, [pc, #40]	; (1a000608 <main+0x8c>)
1a0005e0:	f000 f820 	bl	1a000624 <updateDebounceFsm>
            updateDebounceFsm(&floorOneKey, &pressedKey);
1a0005e4:	4621      	mov	r1, r4
1a0005e6:	4809      	ldr	r0, [pc, #36]	; (1a00060c <main+0x90>)
1a0005e8:	f000 f81c 	bl	1a000624 <updateDebounceFsm>
            updateDebounceFsm(&floorTwoKey, &pressedKey);
1a0005ec:	4621      	mov	r1, r4
1a0005ee:	4808      	ldr	r0, [pc, #32]	; (1a000610 <main+0x94>)
1a0005f0:	f000 f818 	bl	1a000624 <updateDebounceFsm>
            updateDebounceFsm(&motorKey, &pressedKey);
1a0005f4:	4621      	mov	r1, r4
1a0005f6:	4807      	ldr	r0, [pc, #28]	; (1a000614 <main+0x98>)
1a0005f8:	f000 f814 	bl	1a000624 <updateDebounceFsm>
1a0005fc:	e7e4      	b.n	1a0005c8 <main+0x4c>
        	updateElevatorFsm(pressedKey);
1a0005fe:	4b06      	ldr	r3, [pc, #24]	; (1a000618 <main+0x9c>)
1a000600:	7818      	ldrb	r0, [r3, #0]
1a000602:	f7ff feaf 	bl	1a000364 <updateElevatorFsm>
1a000606:	e7e3      	b.n	1a0005d0 <main+0x54>
1a000608:	10000100 	.word	0x10000100
1a00060c:	100000c0 	.word	0x100000c0
1a000610:	100000e0 	.word	0x100000e0
1a000614:	10000128 	.word	0x10000128
1a000618:	10000120 	.word	0x10000120

1a00061c <initDebounceFsm>:
#include "led_service.h"

#define DEBOUNCE_DEFAULT_TIME 40

void initDebounceFsm(debounceData_t * dataStruct, gpioMap_t key) {
	dataStruct->key = key;
1a00061c:	7001      	strb	r1, [r0, #0]
	dataStruct->state = BUTTON_UP_STATE;
1a00061e:	2300      	movs	r3, #0
1a000620:	7043      	strb	r3, [r0, #1]
	return;
}
1a000622:	4770      	bx	lr

1a000624 <updateDebounceFsm>:

void updateDebounceFsm(debounceData_t * ptrDataStruct, gpioMap_t * pressedKey) {
1a000624:	b538      	push	{r3, r4, r5, lr}
1a000626:	4604      	mov	r4, r0
1a000628:	460d      	mov	r5, r1

	switch (ptrDataStruct->state) {
1a00062a:	7843      	ldrb	r3, [r0, #1]
1a00062c:	2b03      	cmp	r3, #3
1a00062e:	d831      	bhi.n	1a000694 <updateDebounceFsm+0x70>
1a000630:	e8df f003 	tbb	[pc, r3]
1a000634:	20190902 	.word	0x20190902

	case BUTTON_UP_STATE:
		if (isPress(ptrDataStruct->key)) {
1a000638:	7800      	ldrb	r0, [r0, #0]
1a00063a:	f7ff fe61 	bl	1a000300 <isPress>
1a00063e:	b358      	cbz	r0, 1a000698 <updateDebounceFsm+0x74>
			ptrDataStruct->state = BUTTON_FALLING_STATE;
1a000640:	2301      	movs	r3, #1
1a000642:	7063      	strb	r3, [r4, #1]
1a000644:	e028      	b.n	1a000698 <updateDebounceFsm+0x74>
		}
		break;

	case BUTTON_FALLING_STATE:
		if (isPress(ptrDataStruct->key)) {
1a000646:	7800      	ldrb	r0, [r0, #0]
1a000648:	f7ff fe5a 	bl	1a000300 <isPress>
1a00064c:	b910      	cbnz	r0, 1a000654 <updateDebounceFsm+0x30>
			if(buttonPressed(ptrDataStruct->key)) {
				*pressedKey = ptrDataStruct->key;
			}
				ptrDataStruct->state = BUTTON_DOWN_STATE;
			} else {
				ptrDataStruct->state = BUTTON_UP_STATE;
1a00064e:	2300      	movs	r3, #0
1a000650:	7063      	strb	r3, [r4, #1]
1a000652:	e021      	b.n	1a000698 <updateDebounceFsm+0x74>
			if(buttonPressed(ptrDataStruct->key)) {
1a000654:	7820      	ldrb	r0, [r4, #0]
1a000656:	f7ff fe5e 	bl	1a000316 <buttonPressed>
1a00065a:	b108      	cbz	r0, 1a000660 <updateDebounceFsm+0x3c>
				*pressedKey = ptrDataStruct->key;
1a00065c:	7823      	ldrb	r3, [r4, #0]
1a00065e:	702b      	strb	r3, [r5, #0]
				ptrDataStruct->state = BUTTON_DOWN_STATE;
1a000660:	2302      	movs	r3, #2
1a000662:	7063      	strb	r3, [r4, #1]
1a000664:	e018      	b.n	1a000698 <updateDebounceFsm+0x74>
			}
		break;

	case BUTTON_DOWN_STATE:
		if (notPress(ptrDataStruct->key)) {
1a000666:	7800      	ldrb	r0, [r0, #0]
1a000668:	f7ff fe51 	bl	1a00030e <notPress>
1a00066c:	b1a0      	cbz	r0, 1a000698 <updateDebounceFsm+0x74>
			ptrDataStruct->state = BUTTON_RISING_STATE;
1a00066e:	2303      	movs	r3, #3
1a000670:	7063      	strb	r3, [r4, #1]
1a000672:	e011      	b.n	1a000698 <updateDebounceFsm+0x74>
		}
		break;

	case BUTTON_RISING_STATE:
		if (notPress(ptrDataStruct->key)) {
1a000674:	7800      	ldrb	r0, [r0, #0]
1a000676:	f7ff fe4a 	bl	1a00030e <notPress>
1a00067a:	b910      	cbnz	r0, 1a000682 <updateDebounceFsm+0x5e>
				if (buttonReleased(ptrDataStruct->key)) {
					*pressedKey = MOTOR_KEY;
				}
				ptrDataStruct->state = BUTTON_UP_STATE;
			} else {
				ptrDataStruct->state = BUTTON_DOWN_STATE;
1a00067c:	2302      	movs	r3, #2
1a00067e:	7063      	strb	r3, [r4, #1]
1a000680:	e00a      	b.n	1a000698 <updateDebounceFsm+0x74>
				if (buttonReleased(ptrDataStruct->key)) {
1a000682:	7820      	ldrb	r0, [r4, #0]
1a000684:	f7ff fe4e 	bl	1a000324 <buttonReleased>
1a000688:	b108      	cbz	r0, 1a00068e <updateDebounceFsm+0x6a>
					*pressedKey = MOTOR_KEY;
1a00068a:	2327      	movs	r3, #39	; 0x27
1a00068c:	702b      	strb	r3, [r5, #0]
				ptrDataStruct->state = BUTTON_UP_STATE;
1a00068e:	2300      	movs	r3, #0
1a000690:	7063      	strb	r3, [r4, #1]
1a000692:	e001      	b.n	1a000698 <updateDebounceFsm+0x74>
			}
		break;

	default:
		ptrDataStruct->state = BUTTON_UP_STATE;
1a000694:	2300      	movs	r3, #0
1a000696:	7043      	strb	r3, [r0, #1]
		break;
	}
	return;
}
1a000698:	bd38      	pop	{r3, r4, r5, pc}
1a00069a:	Address 0x000000001a00069a is out of bounds.


1a00069c <Reset_Handler>:
void Reset_Handler(void) {
1a00069c:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1a00069e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0006a0:	4b18      	ldr	r3, [pc, #96]	; (1a000704 <Reset_Handler+0x68>)
1a0006a2:	4a19      	ldr	r2, [pc, #100]	; (1a000708 <Reset_Handler+0x6c>)
1a0006a4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0006a6:	3304      	adds	r3, #4
1a0006a8:	4a18      	ldr	r2, [pc, #96]	; (1a00070c <Reset_Handler+0x70>)
1a0006aa:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0006ac:	2300      	movs	r3, #0
1a0006ae:	e005      	b.n	1a0006bc <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0006b0:	4a17      	ldr	r2, [pc, #92]	; (1a000710 <Reset_Handler+0x74>)
1a0006b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0006b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0006ba:	3301      	adds	r3, #1
1a0006bc:	2b07      	cmp	r3, #7
1a0006be:	d9f7      	bls.n	1a0006b0 <Reset_Handler+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
1a0006c0:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0006c2:	4b14      	ldr	r3, [pc, #80]	; (1a000714 <Reset_Handler+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0006c4:	e007      	b.n	1a0006d6 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0006c6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0006ca:	689a      	ldr	r2, [r3, #8]
1a0006cc:	6859      	ldr	r1, [r3, #4]
1a0006ce:	6818      	ldr	r0, [r3, #0]
1a0006d0:	f7ff fd5b 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0006d4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0006d6:	4a10      	ldr	r2, [pc, #64]	; (1a000718 <Reset_Handler+0x7c>)
1a0006d8:	4293      	cmp	r3, r2
1a0006da:	d3f4      	bcc.n	1a0006c6 <Reset_Handler+0x2a>
1a0006dc:	e006      	b.n	1a0006ec <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0006de:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0006e0:	6859      	ldr	r1, [r3, #4]
1a0006e2:	f854 0b08 	ldr.w	r0, [r4], #8
1a0006e6:	f7ff fd5f 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0006ea:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0006ec:	4a0b      	ldr	r2, [pc, #44]	; (1a00071c <Reset_Handler+0x80>)
1a0006ee:	4293      	cmp	r3, r2
1a0006f0:	d3f5      	bcc.n	1a0006de <Reset_Handler+0x42>
    SystemInit();
1a0006f2:	f000 fcbd 	bl	1a001070 <SystemInit>
    __libc_init_array();
1a0006f6:	f001 f9cb 	bl	1a001a90 <__libc_init_array>
    main();
1a0006fa:	f7ff ff3f 	bl	1a00057c <main>
        __WFI();
1a0006fe:	bf30      	wfi
1a000700:	e7fd      	b.n	1a0006fe <Reset_Handler+0x62>
1a000702:	bf00      	nop
1a000704:	40053100 	.word	0x40053100
1a000708:	10df1000 	.word	0x10df1000
1a00070c:	01dff7ff 	.word	0x01dff7ff
1a000710:	e000e280 	.word	0xe000e280
1a000714:	1a000114 	.word	0x1a000114
1a000718:	1a000150 	.word	0x1a000150
1a00071c:	1a000178 	.word	0x1a000178

1a000720 <_init>:
void _init(void) {}
1a000720:	4770      	bx	lr
1a000722:	Address 0x000000001a000722 is out of bounds.


1a000724 <Board_Debug_Init>:
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
}


void Board_Debug_Init(void)
{
1a000724:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a000726:	4c07      	ldr	r4, [pc, #28]	; (1a000744 <Board_Debug_Init+0x20>)
1a000728:	4620      	mov	r0, r4
1a00072a:	f000 f87f 	bl	1a00082c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00072e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000732:	4620      	mov	r0, r4
1a000734:	f000 f8c4 	bl	1a0008c0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000738:	2303      	movs	r3, #3
1a00073a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00073c:	2301      	movs	r3, #1
1a00073e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a000740:	bd10      	pop	{r4, pc}
1a000742:	bf00      	nop
1a000744:	400c1000 	.word	0x400c1000

1a000748 <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a000748:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00074a:	f7ff ffeb 	bl	1a000724 <Board_Debug_Init>
1a00074e:	bd08      	pop	{r3, pc}

1a000750 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000750:	2300      	movs	r3, #0
1a000752:	2b1c      	cmp	r3, #28
1a000754:	d812      	bhi.n	1a00077c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000756:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000758:	4a09      	ldr	r2, [pc, #36]	; (1a000780 <Board_SetupMuxing+0x30>)
1a00075a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00075e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000762:	784a      	ldrb	r2, [r1, #1]
1a000764:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000766:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00076a:	4906      	ldr	r1, [pc, #24]	; (1a000784 <Board_SetupMuxing+0x34>)
1a00076c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000770:	3301      	adds	r3, #1
1a000772:	2b1c      	cmp	r3, #28
1a000774:	d9f0      	bls.n	1a000758 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000776:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00077a:	4770      	bx	lr
1a00077c:	4770      	bx	lr
1a00077e:	bf00      	nop
1a000780:	1a001af4 	.word	0x1a001af4
1a000784:	40086000 	.word	0x40086000

1a000788 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000788:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00078a:	4a17      	ldr	r2, [pc, #92]	; (1a0007e8 <Board_SetupClocking+0x60>)
1a00078c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000794:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000798:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00079c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0007a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0007a4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0007a8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0007ac:	2201      	movs	r2, #1
1a0007ae:	490f      	ldr	r1, [pc, #60]	; (1a0007ec <Board_SetupClocking+0x64>)
1a0007b0:	2006      	movs	r0, #6
1a0007b2:	f000 fbb3 	bl	1a000f1c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0007b6:	2400      	movs	r4, #0
1a0007b8:	b14c      	cbz	r4, 1a0007ce <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0007ba:	4b0b      	ldr	r3, [pc, #44]	; (1a0007e8 <Board_SetupClocking+0x60>)
1a0007bc:	685a      	ldr	r2, [r3, #4]
1a0007be:	f022 020c 	bic.w	r2, r2, #12
1a0007c2:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0007c4:	685a      	ldr	r2, [r3, #4]
1a0007c6:	f042 0203 	orr.w	r2, r2, #3
1a0007ca:	605a      	str	r2, [r3, #4]
}
1a0007cc:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0007ce:	4808      	ldr	r0, [pc, #32]	; (1a0007f0 <Board_SetupClocking+0x68>)
1a0007d0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0007d4:	2301      	movs	r3, #1
1a0007d6:	788a      	ldrb	r2, [r1, #2]
1a0007d8:	7849      	ldrb	r1, [r1, #1]
1a0007da:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0007de:	f000 fb07 	bl	1a000df0 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0007e2:	3401      	adds	r4, #1
1a0007e4:	e7e8      	b.n	1a0007b8 <Board_SetupClocking+0x30>
1a0007e6:	bf00      	nop
1a0007e8:	40043000 	.word	0x40043000
1a0007ec:	0c28cb00 	.word	0x0c28cb00
1a0007f0:	1a001af0 	.word	0x1a001af0

1a0007f4 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0007f4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0007f6:	f7ff ffab 	bl	1a000750 <Board_SetupMuxing>
    Board_SetupClocking();
1a0007fa:	f7ff ffc5 	bl	1a000788 <Board_SetupClocking>
}
1a0007fe:	bd08      	pop	{r3, pc}

1a000800 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000800:	4b09      	ldr	r3, [pc, #36]	; (1a000828 <Chip_UART_GetIndex+0x28>)
1a000802:	4298      	cmp	r0, r3
1a000804:	d009      	beq.n	1a00081a <Chip_UART_GetIndex+0x1a>
1a000806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00080a:	4298      	cmp	r0, r3
1a00080c:	d007      	beq.n	1a00081e <Chip_UART_GetIndex+0x1e>
1a00080e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000812:	4298      	cmp	r0, r3
1a000814:	d005      	beq.n	1a000822 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000816:	2000      	movs	r0, #0
1a000818:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00081a:	2002      	movs	r0, #2
1a00081c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00081e:	2003      	movs	r0, #3
1a000820:	4770      	bx	lr
			return 1;
1a000822:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000824:	4770      	bx	lr
1a000826:	bf00      	nop
1a000828:	400c1000 	.word	0x400c1000

1a00082c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00082c:	b530      	push	{r4, r5, lr}
1a00082e:	b083      	sub	sp, #12
1a000830:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000832:	f7ff ffe5 	bl	1a000800 <Chip_UART_GetIndex>
1a000836:	2301      	movs	r3, #1
1a000838:	461a      	mov	r2, r3
1a00083a:	4619      	mov	r1, r3
1a00083c:	4d0e      	ldr	r5, [pc, #56]	; (1a000878 <Chip_UART_Init+0x4c>)
1a00083e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000842:	f000 fb1b 	bl	1a000e7c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000846:	2307      	movs	r3, #7
1a000848:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00084a:	2300      	movs	r3, #0
1a00084c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00084e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000850:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000852:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000854:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000856:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000858:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00085a:	4b08      	ldr	r3, [pc, #32]	; (1a00087c <Chip_UART_Init+0x50>)
1a00085c:	429c      	cmp	r4, r3
1a00085e:	d006      	beq.n	1a00086e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000860:	2303      	movs	r3, #3
1a000862:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000864:	2310      	movs	r3, #16
1a000866:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000868:	9b01      	ldr	r3, [sp, #4]
}
1a00086a:	b003      	add	sp, #12
1a00086c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00086e:	2300      	movs	r3, #0
1a000870:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000872:	69a3      	ldr	r3, [r4, #24]
1a000874:	9301      	str	r3, [sp, #4]
1a000876:	e7f3      	b.n	1a000860 <Chip_UART_Init+0x34>
1a000878:	1a001b70 	.word	0x1a001b70
1a00087c:	40082000 	.word	0x40082000

1a000880 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000880:	b538      	push	{r3, r4, r5, lr}
1a000882:	4605      	mov	r5, r0
1a000884:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000886:	f7ff ffbb 	bl	1a000800 <Chip_UART_GetIndex>
1a00088a:	4b0c      	ldr	r3, [pc, #48]	; (1a0008bc <Chip_UART_SetBaud+0x3c>)
1a00088c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000890:	f000 fb12 	bl	1a000eb8 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a000894:	0123      	lsls	r3, r4, #4
1a000896:	fbb0 f3f3 	udiv	r3, r0, r3
1a00089a:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00089c:	68ea      	ldr	r2, [r5, #12]
1a00089e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0008a2:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0008a4:	6029      	str	r1, [r5, #0]
1a0008a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0008aa:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0008ac:	68ea      	ldr	r2, [r5, #12]
1a0008ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0008b2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0008b4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0008b8:	0900      	lsrs	r0, r0, #4
1a0008ba:	bd38      	pop	{r3, r4, r5, pc}
1a0008bc:	1a001b68 	.word	0x1a001b68

1a0008c0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0008c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0008c4:	b083      	sub	sp, #12
1a0008c6:	4683      	mov	fp, r0
1a0008c8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0008ca:	f7ff ff99 	bl	1a000800 <Chip_UART_GetIndex>
1a0008ce:	4b35      	ldr	r3, [pc, #212]	; (1a0009a4 <Chip_UART_SetBaudFDR+0xe4>)
1a0008d0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0008d4:	f000 faf0 	bl	1a000eb8 <Chip_Clock_GetRate>
1a0008d8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0008da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0008de:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0008e0:	2300      	movs	r3, #0
1a0008e2:	9301      	str	r3, [sp, #4]
1a0008e4:	46a2      	mov	sl, r4
1a0008e6:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0008e8:	e02a      	b.n	1a000940 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0008ea:	4242      	negs	r2, r0
				div ++;
1a0008ec:	1c4b      	adds	r3, r1, #1
1a0008ee:	e017      	b.n	1a000920 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0008f0:	b30a      	cbz	r2, 1a000936 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0008f2:	4617      	mov	r7, r2
			sd = d;
1a0008f4:	9501      	str	r5, [sp, #4]
			sm = m;
1a0008f6:	46a2      	mov	sl, r4
			sdiv = div;
1a0008f8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0008fa:	3501      	adds	r5, #1
1a0008fc:	42ac      	cmp	r4, r5
1a0008fe:	d91e      	bls.n	1a00093e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000900:	0933      	lsrs	r3, r6, #4
1a000902:	0730      	lsls	r0, r6, #28
1a000904:	fba4 0100 	umull	r0, r1, r4, r0
1a000908:	fb04 1103 	mla	r1, r4, r3, r1
1a00090c:	1962      	adds	r2, r4, r5
1a00090e:	fb08 f202 	mul.w	r2, r8, r2
1a000912:	2300      	movs	r3, #0
1a000914:	f000 ff3c 	bl	1a001790 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000918:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00091a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00091c:	2800      	cmp	r0, #0
1a00091e:	dbe4      	blt.n	1a0008ea <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000920:	4297      	cmp	r7, r2
1a000922:	d3ea      	bcc.n	1a0008fa <Chip_UART_SetBaudFDR+0x3a>
1a000924:	2b00      	cmp	r3, #0
1a000926:	d0e8      	beq.n	1a0008fa <Chip_UART_SetBaudFDR+0x3a>
1a000928:	0c19      	lsrs	r1, r3, #16
1a00092a:	d1e6      	bne.n	1a0008fa <Chip_UART_SetBaudFDR+0x3a>
1a00092c:	2b02      	cmp	r3, #2
1a00092e:	d8df      	bhi.n	1a0008f0 <Chip_UART_SetBaudFDR+0x30>
1a000930:	2d00      	cmp	r5, #0
1a000932:	d0dd      	beq.n	1a0008f0 <Chip_UART_SetBaudFDR+0x30>
1a000934:	e7e1      	b.n	1a0008fa <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000936:	4617      	mov	r7, r2
			sd = d;
1a000938:	9501      	str	r5, [sp, #4]
			sm = m;
1a00093a:	46a2      	mov	sl, r4
			sdiv = div;
1a00093c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00093e:	3401      	adds	r4, #1
1a000940:	b11f      	cbz	r7, 1a00094a <Chip_UART_SetBaudFDR+0x8a>
1a000942:	2c0f      	cmp	r4, #15
1a000944:	d801      	bhi.n	1a00094a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000946:	2500      	movs	r5, #0
1a000948:	e7d8      	b.n	1a0008fc <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00094a:	f1b9 0f00 	cmp.w	r9, #0
1a00094e:	d024      	beq.n	1a00099a <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000950:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000958:	f8cb 300c 	str.w	r3, [fp, #12]
1a00095c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a000960:	f8cb 3000 	str.w	r3, [fp]
1a000964:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000968:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00096c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000974:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000978:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00097c:	b2db      	uxtb	r3, r3
1a00097e:	9901      	ldr	r1, [sp, #4]
1a000980:	f001 020f 	and.w	r2, r1, #15
1a000984:	4313      	orrs	r3, r2
1a000986:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00098a:	0933      	lsrs	r3, r6, #4
1a00098c:	fb0a f303 	mul.w	r3, sl, r3
1a000990:	448a      	add	sl, r1
1a000992:	fb09 f90a 	mul.w	r9, r9, sl
1a000996:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00099a:	4648      	mov	r0, r9
1a00099c:	b003      	add	sp, #12
1a00099e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0009a2:	bf00      	nop
1a0009a4:	1a001b68 	.word	0x1a001b68

1a0009a8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0009a8:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0009aa:	680b      	ldr	r3, [r1, #0]
1a0009ac:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0009b0:	d002      	beq.n	1a0009b8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0009b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0009b6:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0009b8:	4607      	mov	r7, r0
1a0009ba:	2501      	movs	r5, #1
1a0009bc:	e03b      	b.n	1a000a36 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0009be:	694b      	ldr	r3, [r1, #20]
1a0009c0:	fb03 f302 	mul.w	r3, r3, r2
1a0009c4:	fbb3 f3f5 	udiv	r3, r3, r5
1a0009c8:	e014      	b.n	1a0009f4 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0009ca:	461c      	mov	r4, r3
1a0009cc:	e020      	b.n	1a000a10 <pll_calc_divs+0x68>
		return -val;
1a0009ce:	f1cc 0c00 	rsb	ip, ip, #0
1a0009d2:	e020      	b.n	1a000a16 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a0009d4:	3201      	adds	r2, #1
1a0009d6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0009da:	dc26      	bgt.n	1a000a2a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a0009dc:	680c      	ldr	r4, [r1, #0]
1a0009de:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0009e2:	d0ec      	beq.n	1a0009be <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0009e4:	1c73      	adds	r3, r6, #1
1a0009e6:	fa02 fc03 	lsl.w	ip, r2, r3
1a0009ea:	694b      	ldr	r3, [r1, #20]
1a0009ec:	fb03 f30c 	mul.w	r3, r3, ip
1a0009f0:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0009f4:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a000a44 <pll_calc_divs+0x9c>
1a0009f8:	4563      	cmp	r3, ip
1a0009fa:	d9eb      	bls.n	1a0009d4 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0009fc:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a000a48 <pll_calc_divs+0xa0>
1a000a00:	4563      	cmp	r3, ip
1a000a02:	d812      	bhi.n	1a000a2a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000a04:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000a08:	d1df      	bne.n	1a0009ca <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a000a0a:	1c74      	adds	r4, r6, #1
1a000a0c:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a000a10:	ebb0 0c04 	subs.w	ip, r0, r4
1a000a14:	d4db      	bmi.n	1a0009ce <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a000a16:	4567      	cmp	r7, ip
1a000a18:	d9dc      	bls.n	1a0009d4 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a000a1a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000a1c:	1c77      	adds	r7, r6, #1
1a000a1e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000a20:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000a22:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000a24:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000a26:	4667      	mov	r7, ip
1a000a28:	e7d4      	b.n	1a0009d4 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000a2a:	3601      	adds	r6, #1
1a000a2c:	2e03      	cmp	r6, #3
1a000a2e:	dc01      	bgt.n	1a000a34 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a000a30:	2201      	movs	r2, #1
1a000a32:	e7d0      	b.n	1a0009d6 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a000a34:	3501      	adds	r5, #1
1a000a36:	2d04      	cmp	r5, #4
1a000a38:	dc01      	bgt.n	1a000a3e <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a000a3a:	2600      	movs	r6, #0
1a000a3c:	e7f6      	b.n	1a000a2c <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a000a3e:	bcf0      	pop	{r4, r5, r6, r7}
1a000a40:	4770      	bx	lr
1a000a42:	bf00      	nop
1a000a44:	094c5eff 	.word	0x094c5eff
1a000a48:	1312d000 	.word	0x1312d000

1a000a4c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a4e:	b099      	sub	sp, #100	; 0x64
1a000a50:	4605      	mov	r5, r0
1a000a52:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000a54:	225c      	movs	r2, #92	; 0x5c
1a000a56:	2100      	movs	r1, #0
1a000a58:	a801      	add	r0, sp, #4
1a000a5a:	f001 f83d 	bl	1a001ad8 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000a5e:	2380      	movs	r3, #128	; 0x80
1a000a60:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000a62:	6963      	ldr	r3, [r4, #20]
1a000a64:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000a66:	7923      	ldrb	r3, [r4, #4]
1a000a68:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000a6c:	4669      	mov	r1, sp
1a000a6e:	4628      	mov	r0, r5
1a000a70:	f7ff ff9a 	bl	1a0009a8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000a74:	9b06      	ldr	r3, [sp, #24]
1a000a76:	42ab      	cmp	r3, r5
1a000a78:	d027      	beq.n	1a000aca <pll_get_frac+0x7e>
	if (val < 0)
1a000a7a:	1aeb      	subs	r3, r5, r3
1a000a7c:	d42e      	bmi.n	1a000adc <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000a7e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000a80:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000a86:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000a88:	6963      	ldr	r3, [r4, #20]
1a000a8a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000a8c:	7923      	ldrb	r3, [r4, #4]
1a000a8e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000a92:	a910      	add	r1, sp, #64	; 0x40
1a000a94:	4628      	mov	r0, r5
1a000a96:	f7ff ff87 	bl	1a0009a8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000a9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000a9c:	42ab      	cmp	r3, r5
1a000a9e:	d01f      	beq.n	1a000ae0 <pll_get_frac+0x94>
	if (val < 0)
1a000aa0:	1aeb      	subs	r3, r5, r3
1a000aa2:	d425      	bmi.n	1a000af0 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000aa4:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000aa6:	4b2b      	ldr	r3, [pc, #172]	; (1a000b54 <pll_get_frac+0x108>)
1a000aa8:	429d      	cmp	r5, r3
1a000aaa:	d923      	bls.n	1a000af4 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000aae:	1aed      	subs	r5, r5, r3
1a000ab0:	d433      	bmi.n	1a000b1a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000ab2:	42ae      	cmp	r6, r5
1a000ab4:	dc3b      	bgt.n	1a000b2e <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000ab6:	42be      	cmp	r6, r7
1a000ab8:	dc31      	bgt.n	1a000b1e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000aba:	466d      	mov	r5, sp
1a000abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ac0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ac8:	e006      	b.n	1a000ad8 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000aca:	466d      	mov	r5, sp
1a000acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ad0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ad4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000ad8:	b019      	add	sp, #100	; 0x64
1a000ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000adc:	425b      	negs	r3, r3
1a000ade:	e7ce      	b.n	1a000a7e <pll_get_frac+0x32>
		*ppll = pll[2];
1a000ae0:	ad10      	add	r5, sp, #64	; 0x40
1a000ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ae6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000aee:	e7f3      	b.n	1a000ad8 <pll_get_frac+0x8c>
		return -val;
1a000af0:	425b      	negs	r3, r3
1a000af2:	e7d7      	b.n	1a000aa4 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000af4:	2340      	movs	r3, #64	; 0x40
1a000af6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000af8:	6963      	ldr	r3, [r4, #20]
1a000afa:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000afc:	a908      	add	r1, sp, #32
1a000afe:	4628      	mov	r0, r5
1a000b00:	f7ff ff52 	bl	1a0009a8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000b04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000b06:	42ab      	cmp	r3, r5
1a000b08:	d1d0      	bne.n	1a000aac <pll_get_frac+0x60>
			*ppll = pll[1];
1a000b0a:	ad08      	add	r5, sp, #32
1a000b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000b18:	e7de      	b.n	1a000ad8 <pll_get_frac+0x8c>
		return -val;
1a000b1a:	426d      	negs	r5, r5
1a000b1c:	e7c9      	b.n	1a000ab2 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000b1e:	ad10      	add	r5, sp, #64	; 0x40
1a000b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b2c:	e7d4      	b.n	1a000ad8 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000b2e:	42af      	cmp	r7, r5
1a000b30:	db07      	blt.n	1a000b42 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000b32:	ad08      	add	r5, sp, #32
1a000b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b40:	e7ca      	b.n	1a000ad8 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000b42:	ad10      	add	r5, sp, #64	; 0x40
1a000b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b50:	e7c2      	b.n	1a000ad8 <pll_get_frac+0x8c>
1a000b52:	bf00      	nop
1a000b54:	068e7780 	.word	0x068e7780

1a000b58 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000b58:	b430      	push	{r4, r5}
1a000b5a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000b5c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000b5e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000b60:	e000      	b.n	1a000b64 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000b62:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000b64:	281c      	cmp	r0, #28
1a000b66:	d118      	bne.n	1a000b9a <Chip_Clock_FindBaseClock+0x42>
1a000b68:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000b6c:	0051      	lsls	r1, r2, #1
1a000b6e:	4a0c      	ldr	r2, [pc, #48]	; (1a000ba0 <Chip_Clock_FindBaseClock+0x48>)
1a000b70:	440a      	add	r2, r1
1a000b72:	7914      	ldrb	r4, [r2, #4]
1a000b74:	4284      	cmp	r4, r0
1a000b76:	d010      	beq.n	1a000b9a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000b78:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000b7c:	004a      	lsls	r2, r1, #1
1a000b7e:	4908      	ldr	r1, [pc, #32]	; (1a000ba0 <Chip_Clock_FindBaseClock+0x48>)
1a000b80:	5a8a      	ldrh	r2, [r1, r2]
1a000b82:	42aa      	cmp	r2, r5
1a000b84:	d8ed      	bhi.n	1a000b62 <Chip_Clock_FindBaseClock+0xa>
1a000b86:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000b8a:	0051      	lsls	r1, r2, #1
1a000b8c:	4a04      	ldr	r2, [pc, #16]	; (1a000ba0 <Chip_Clock_FindBaseClock+0x48>)
1a000b8e:	440a      	add	r2, r1
1a000b90:	8852      	ldrh	r2, [r2, #2]
1a000b92:	42aa      	cmp	r2, r5
1a000b94:	d3e5      	bcc.n	1a000b62 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000b96:	4620      	mov	r0, r4
1a000b98:	e7e4      	b.n	1a000b64 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000b9a:	bc30      	pop	{r4, r5}
1a000b9c:	4770      	bx	lr
1a000b9e:	bf00      	nop
1a000ba0:	1a001b84 	.word	0x1a001b84

1a000ba4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000ba4:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000baa:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000bac:	4a0d      	ldr	r2, [pc, #52]	; (1a000be4 <Chip_Clock_EnableCrystal+0x40>)
1a000bae:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000bb0:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000bb4:	6992      	ldr	r2, [r2, #24]
1a000bb6:	428a      	cmp	r2, r1
1a000bb8:	d001      	beq.n	1a000bbe <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000bba:	4a0a      	ldr	r2, [pc, #40]	; (1a000be4 <Chip_Clock_EnableCrystal+0x40>)
1a000bbc:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000bbe:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000bc2:	4a09      	ldr	r2, [pc, #36]	; (1a000be8 <Chip_Clock_EnableCrystal+0x44>)
1a000bc4:	6811      	ldr	r1, [r2, #0]
1a000bc6:	4a09      	ldr	r2, [pc, #36]	; (1a000bec <Chip_Clock_EnableCrystal+0x48>)
1a000bc8:	4291      	cmp	r1, r2
1a000bca:	d901      	bls.n	1a000bd0 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000bcc:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000bd0:	4a04      	ldr	r2, [pc, #16]	; (1a000be4 <Chip_Clock_EnableCrystal+0x40>)
1a000bd2:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000bd4:	9b01      	ldr	r3, [sp, #4]
1a000bd6:	1e5a      	subs	r2, r3, #1
1a000bd8:	9201      	str	r2, [sp, #4]
1a000bda:	2b00      	cmp	r3, #0
1a000bdc:	d1fa      	bne.n	1a000bd4 <Chip_Clock_EnableCrystal+0x30>
}
1a000bde:	b002      	add	sp, #8
1a000be0:	4770      	bx	lr
1a000be2:	bf00      	nop
1a000be4:	40050000 	.word	0x40050000
1a000be8:	1a001aec 	.word	0x1a001aec
1a000bec:	01312cff 	.word	0x01312cff

1a000bf0 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000bf0:	3012      	adds	r0, #18
1a000bf2:	4b05      	ldr	r3, [pc, #20]	; (1a000c08 <Chip_Clock_GetDividerSource+0x18>)
1a000bf4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000bf8:	f010 0f01 	tst.w	r0, #1
1a000bfc:	d102      	bne.n	1a000c04 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000bfe:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000c02:	4770      	bx	lr
		return CLKINPUT_PD;
1a000c04:	2011      	movs	r0, #17
}
1a000c06:	4770      	bx	lr
1a000c08:	40050000 	.word	0x40050000

1a000c0c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000c0c:	f100 0212 	add.w	r2, r0, #18
1a000c10:	4b03      	ldr	r3, [pc, #12]	; (1a000c20 <Chip_Clock_GetDividerDivisor+0x14>)
1a000c12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000c16:	4b03      	ldr	r3, [pc, #12]	; (1a000c24 <Chip_Clock_GetDividerDivisor+0x18>)
1a000c18:	5c18      	ldrb	r0, [r3, r0]
}
1a000c1a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000c1e:	4770      	bx	lr
1a000c20:	40050000 	.word	0x40050000
1a000c24:	1a001b7c 	.word	0x1a001b7c

1a000c28 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000c28:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000c2a:	2810      	cmp	r0, #16
1a000c2c:	d80a      	bhi.n	1a000c44 <Chip_Clock_GetClockInputHz+0x1c>
1a000c2e:	e8df f000 	tbb	[pc, r0]
1a000c32:	0b42      	.short	0x0b42
1a000c34:	091f160d 	.word	0x091f160d
1a000c38:	2b282522 	.word	0x2b282522
1a000c3c:	322e0909 	.word	0x322e0909
1a000c40:	3a36      	.short	0x3a36
1a000c42:	3e          	.byte	0x3e
1a000c43:	00          	.byte	0x00
	uint32_t rate = 0;
1a000c44:	2000      	movs	r0, #0
1a000c46:	e038      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000c48:	481e      	ldr	r0, [pc, #120]	; (1a000cc4 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000c4a:	e036      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000c4c:	4b1e      	ldr	r3, [pc, #120]	; (1a000cc8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000c4e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000c52:	f003 0307 	and.w	r3, r3, #7
1a000c56:	2b04      	cmp	r3, #4
1a000c58:	d130      	bne.n	1a000cbc <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a000c5a:	2000      	movs	r0, #0
1a000c5c:	e02d      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000c5e:	4b1a      	ldr	r3, [pc, #104]	; (1a000cc8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000c60:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000c64:	f003 0307 	and.w	r3, r3, #7
1a000c68:	2b04      	cmp	r3, #4
1a000c6a:	d029      	beq.n	1a000cc0 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000c6c:	4817      	ldr	r0, [pc, #92]	; (1a000ccc <Chip_Clock_GetClockInputHz+0xa4>)
1a000c6e:	e024      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000c70:	4b17      	ldr	r3, [pc, #92]	; (1a000cd0 <Chip_Clock_GetClockInputHz+0xa8>)
1a000c72:	6818      	ldr	r0, [r3, #0]
		break;
1a000c74:	e021      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000c76:	4b17      	ldr	r3, [pc, #92]	; (1a000cd4 <Chip_Clock_GetClockInputHz+0xac>)
1a000c78:	6818      	ldr	r0, [r3, #0]
		break;
1a000c7a:	e01e      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000c7c:	4b16      	ldr	r3, [pc, #88]	; (1a000cd8 <Chip_Clock_GetClockInputHz+0xb0>)
1a000c7e:	6818      	ldr	r0, [r3, #0]
		break;
1a000c80:	e01b      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000c82:	4b15      	ldr	r3, [pc, #84]	; (1a000cd8 <Chip_Clock_GetClockInputHz+0xb0>)
1a000c84:	6858      	ldr	r0, [r3, #4]
		break;
1a000c86:	e018      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000c88:	f000 f86a 	bl	1a000d60 <Chip_Clock_GetMainPLLHz>
		break;
1a000c8c:	e015      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000c8e:	2100      	movs	r1, #0
1a000c90:	f000 f89c 	bl	1a000dcc <Chip_Clock_GetDivRate>
		break;
1a000c94:	e011      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000c96:	2101      	movs	r1, #1
1a000c98:	f000 f898 	bl	1a000dcc <Chip_Clock_GetDivRate>
		break;
1a000c9c:	e00d      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000c9e:	2102      	movs	r1, #2
1a000ca0:	f000 f894 	bl	1a000dcc <Chip_Clock_GetDivRate>
		break;
1a000ca4:	e009      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000ca6:	2103      	movs	r1, #3
1a000ca8:	f000 f890 	bl	1a000dcc <Chip_Clock_GetDivRate>
		break;
1a000cac:	e005      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000cae:	2104      	movs	r1, #4
1a000cb0:	f000 f88c 	bl	1a000dcc <Chip_Clock_GetDivRate>
		break;
1a000cb4:	e001      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a000cb6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000cba:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a000cbc:	4803      	ldr	r0, [pc, #12]	; (1a000ccc <Chip_Clock_GetClockInputHz+0xa4>)
1a000cbe:	e7fc      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a000cc0:	4806      	ldr	r0, [pc, #24]	; (1a000cdc <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000cc2:	e7fa      	b.n	1a000cba <Chip_Clock_GetClockInputHz+0x92>
1a000cc4:	00b71b00 	.word	0x00b71b00
1a000cc8:	40043000 	.word	0x40043000
1a000ccc:	017d7840 	.word	0x017d7840
1a000cd0:	1a001ae8 	.word	0x1a001ae8
1a000cd4:	1a001aec 	.word	0x1a001aec
1a000cd8:	10000098 	.word	0x10000098
1a000cdc:	02faf080 	.word	0x02faf080

1a000ce0 <Chip_Clock_CalcMainPLLValue>:
{
1a000ce0:	b538      	push	{r3, r4, r5, lr}
1a000ce2:	4605      	mov	r5, r0
1a000ce4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000ce6:	7908      	ldrb	r0, [r1, #4]
1a000ce8:	f7ff ff9e 	bl	1a000c28 <Chip_Clock_GetClockInputHz>
1a000cec:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000cee:	4b19      	ldr	r3, [pc, #100]	; (1a000d54 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000cf0:	442b      	add	r3, r5
1a000cf2:	4a19      	ldr	r2, [pc, #100]	; (1a000d58 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000cf4:	4293      	cmp	r3, r2
1a000cf6:	d821      	bhi.n	1a000d3c <Chip_Clock_CalcMainPLLValue+0x5c>
1a000cf8:	b318      	cbz	r0, 1a000d42 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000cfa:	2380      	movs	r3, #128	; 0x80
1a000cfc:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000cfe:	2300      	movs	r3, #0
1a000d00:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000d02:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000d04:	fbb5 f3f0 	udiv	r3, r5, r0
1a000d08:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000d0a:	4a14      	ldr	r2, [pc, #80]	; (1a000d5c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000d0c:	4295      	cmp	r5, r2
1a000d0e:	d903      	bls.n	1a000d18 <Chip_Clock_CalcMainPLLValue+0x38>
1a000d10:	fb03 f000 	mul.w	r0, r3, r0
1a000d14:	42a8      	cmp	r0, r5
1a000d16:	d007      	beq.n	1a000d28 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000d18:	4621      	mov	r1, r4
1a000d1a:	4628      	mov	r0, r5
1a000d1c:	f7ff fe96 	bl	1a000a4c <pll_get_frac>
		if (!ppll->nsel) {
1a000d20:	68a3      	ldr	r3, [r4, #8]
1a000d22:	b18b      	cbz	r3, 1a000d48 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000d24:	3b01      	subs	r3, #1
1a000d26:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000d28:	6923      	ldr	r3, [r4, #16]
1a000d2a:	b183      	cbz	r3, 1a000d4e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000d2c:	68e2      	ldr	r2, [r4, #12]
1a000d2e:	b10a      	cbz	r2, 1a000d34 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000d30:	3a01      	subs	r2, #1
1a000d32:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000d34:	3b01      	subs	r3, #1
1a000d36:	6123      	str	r3, [r4, #16]
	return 0;
1a000d38:	2000      	movs	r0, #0
}
1a000d3a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d40:	e7fb      	b.n	1a000d3a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d46:	e7f8      	b.n	1a000d3a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d4c:	e7f5      	b.n	1a000d3a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d52:	e7f2      	b.n	1a000d3a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000d54:	ff6b3a10 	.word	0xff6b3a10
1a000d58:	0b940510 	.word	0x0b940510
1a000d5c:	094c5eff 	.word	0x094c5eff

1a000d60 <Chip_Clock_GetMainPLLHz>:
{
1a000d60:	b530      	push	{r4, r5, lr}
1a000d62:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000d64:	4d17      	ldr	r5, [pc, #92]	; (1a000dc4 <Chip_Clock_GetMainPLLHz+0x64>)
1a000d66:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000d68:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000d6c:	f7ff ff5c 	bl	1a000c28 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000d70:	4b15      	ldr	r3, [pc, #84]	; (1a000dc8 <Chip_Clock_GetMainPLLHz+0x68>)
1a000d72:	681b      	ldr	r3, [r3, #0]
1a000d74:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000d76:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000d78:	f013 0f01 	tst.w	r3, #1
1a000d7c:	d01f      	beq.n	1a000dbe <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a000d7e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000d82:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000d86:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000d8a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000d8e:	3301      	adds	r3, #1
	n = nsel + 1;
1a000d90:	3201      	adds	r2, #1
	p = ptab[psel];
1a000d92:	f10d 0c08 	add.w	ip, sp, #8
1a000d96:	4461      	add	r1, ip
1a000d98:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000d9c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000da0:	d108      	bne.n	1a000db4 <Chip_Clock_GetMainPLLHz+0x54>
1a000da2:	b93d      	cbnz	r5, 1a000db4 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000da4:	0049      	lsls	r1, r1, #1
1a000da6:	fbb3 f3f1 	udiv	r3, r3, r1
1a000daa:	fbb0 f0f2 	udiv	r0, r0, r2
1a000dae:	fb00 f003 	mul.w	r0, r0, r3
1a000db2:	e005      	b.n	1a000dc0 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a000db4:	fbb0 f0f2 	udiv	r0, r0, r2
1a000db8:	fb03 f000 	mul.w	r0, r3, r0
1a000dbc:	e000      	b.n	1a000dc0 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a000dbe:	2000      	movs	r0, #0
}
1a000dc0:	b003      	add	sp, #12
1a000dc2:	bd30      	pop	{r4, r5, pc}
1a000dc4:	40050000 	.word	0x40050000
1a000dc8:	1a001b78 	.word	0x1a001b78

1a000dcc <Chip_Clock_GetDivRate>:
{
1a000dcc:	b538      	push	{r3, r4, r5, lr}
1a000dce:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000dd0:	4608      	mov	r0, r1
1a000dd2:	f7ff ff0d 	bl	1a000bf0 <Chip_Clock_GetDividerSource>
1a000dd6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000dd8:	4620      	mov	r0, r4
1a000dda:	f7ff ff17 	bl	1a000c0c <Chip_Clock_GetDividerDivisor>
1a000dde:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000de0:	4628      	mov	r0, r5
1a000de2:	f7ff ff21 	bl	1a000c28 <Chip_Clock_GetClockInputHz>
1a000de6:	3401      	adds	r4, #1
}
1a000de8:	fbb0 f0f4 	udiv	r0, r0, r4
1a000dec:	bd38      	pop	{r3, r4, r5, pc}
1a000dee:	Address 0x000000001a000dee is out of bounds.


1a000df0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000df0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000df2:	f100 0416 	add.w	r4, r0, #22
1a000df6:	00a4      	lsls	r4, r4, #2
1a000df8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000dfc:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000e00:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000e02:	281b      	cmp	r0, #27
1a000e04:	d813      	bhi.n	1a000e2e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000e06:	2911      	cmp	r1, #17
1a000e08:	d01a      	beq.n	1a000e40 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000e0a:	4d0e      	ldr	r5, [pc, #56]	; (1a000e44 <Chip_Clock_SetBaseClock+0x54>)
1a000e0c:	4025      	ands	r5, r4

			if (autoblocken) {
1a000e0e:	b10a      	cbz	r2, 1a000e14 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000e10:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000e14:	b10b      	cbz	r3, 1a000e1a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000e16:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000e1a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000e1e:	3016      	adds	r0, #22
1a000e20:	0080      	lsls	r0, r0, #2
1a000e22:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000e26:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000e2a:	6045      	str	r5, [r0, #4]
1a000e2c:	e008      	b.n	1a000e40 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000e2e:	f044 0401 	orr.w	r4, r4, #1
1a000e32:	3016      	adds	r0, #22
1a000e34:	0080      	lsls	r0, r0, #2
1a000e36:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000e3a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000e3e:	6044      	str	r4, [r0, #4]
	}
}
1a000e40:	bc30      	pop	{r4, r5}
1a000e42:	4770      	bx	lr
1a000e44:	e0fff7fe 	.word	0xe0fff7fe

1a000e48 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000e48:	281b      	cmp	r0, #27
1a000e4a:	d80c      	bhi.n	1a000e66 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000e4c:	3016      	adds	r0, #22
1a000e4e:	0080      	lsls	r0, r0, #2
1a000e50:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000e54:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000e58:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000e5a:	f010 0f01 	tst.w	r0, #1
1a000e5e:	d104      	bne.n	1a000e6a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000e60:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000e64:	4770      	bx	lr
		return CLKINPUT_PD;
1a000e66:	2011      	movs	r0, #17
1a000e68:	4770      	bx	lr
		return CLKINPUT_PD;
1a000e6a:	2011      	movs	r0, #17
}
1a000e6c:	4770      	bx	lr

1a000e6e <Chip_Clock_GetBaseClocktHz>:
{
1a000e6e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000e70:	f7ff ffea 	bl	1a000e48 <Chip_Clock_GetBaseClock>
1a000e74:	f7ff fed8 	bl	1a000c28 <Chip_Clock_GetClockInputHz>
}
1a000e78:	bd08      	pop	{r3, pc}
1a000e7a:	Address 0x000000001a000e7a is out of bounds.


1a000e7c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000e7c:	b969      	cbnz	r1, 1a000e9a <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a000e7e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000e80:	b10a      	cbz	r2, 1a000e86 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000e82:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000e86:	2b02      	cmp	r3, #2
1a000e88:	d009      	beq.n	1a000e9e <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000e8a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000e8e:	d209      	bcs.n	1a000ea4 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000e90:	3020      	adds	r0, #32
1a000e92:	4b07      	ldr	r3, [pc, #28]	; (1a000eb0 <Chip_Clock_EnableOpts+0x34>)
1a000e94:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000e98:	4770      	bx	lr
		reg |= (1 << 1);
1a000e9a:	2103      	movs	r1, #3
1a000e9c:	e7f0      	b.n	1a000e80 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000e9e:	f041 0120 	orr.w	r1, r1, #32
1a000ea2:	e7f2      	b.n	1a000e8a <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000ea4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000ea8:	4b02      	ldr	r3, [pc, #8]	; (1a000eb4 <Chip_Clock_EnableOpts+0x38>)
1a000eaa:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000eae:	4770      	bx	lr
1a000eb0:	40051000 	.word	0x40051000
1a000eb4:	40052000 	.word	0x40052000

1a000eb8 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000eb8:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a000eba:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000ebe:	d309      	bcc.n	1a000ed4 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000ec0:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000ec4:	4a0d      	ldr	r2, [pc, #52]	; (1a000efc <Chip_Clock_GetRate+0x44>)
1a000ec6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a000eca:	f014 0f01 	tst.w	r4, #1
1a000ece:	d107      	bne.n	1a000ee0 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a000ed0:	2000      	movs	r0, #0
	}

	return rate;
}
1a000ed2:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000ed4:	f100 0320 	add.w	r3, r0, #32
1a000ed8:	4a09      	ldr	r2, [pc, #36]	; (1a000f00 <Chip_Clock_GetRate+0x48>)
1a000eda:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000ede:	e7f4      	b.n	1a000eca <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a000ee0:	f7ff fe3a 	bl	1a000b58 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000ee4:	f7ff ffc3 	bl	1a000e6e <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a000ee8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000eec:	d103      	bne.n	1a000ef6 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a000eee:	2301      	movs	r3, #1
		rate = rate / div;
1a000ef0:	fbb0 f0f3 	udiv	r0, r0, r3
1a000ef4:	e7ed      	b.n	1a000ed2 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a000ef6:	2302      	movs	r3, #2
1a000ef8:	e7fa      	b.n	1a000ef0 <Chip_Clock_GetRate+0x38>
1a000efa:	bf00      	nop
1a000efc:	40052000 	.word	0x40052000
1a000f00:	40051000 	.word	0x40051000

1a000f04 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000f04:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000f06:	2069      	movs	r0, #105	; 0x69
1a000f08:	f7ff ffd6 	bl	1a000eb8 <Chip_Clock_GetRate>
1a000f0c:	4b01      	ldr	r3, [pc, #4]	; (1a000f14 <SystemCoreClockUpdate+0x10>)
1a000f0e:	6018      	str	r0, [r3, #0]
}
1a000f10:	bd08      	pop	{r3, pc}
1a000f12:	bf00      	nop
1a000f14:	10000148 	.word	0x10000148

1a000f18 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000f18:	4770      	bx	lr
1a000f1a:	Address 0x000000001a000f1a is out of bounds.


1a000f1c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000f1c:	b570      	push	{r4, r5, r6, lr}
1a000f1e:	b08a      	sub	sp, #40	; 0x28
1a000f20:	4605      	mov	r5, r0
1a000f22:	460e      	mov	r6, r1
1a000f24:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000f26:	f242 7310 	movw	r3, #10000	; 0x2710
1a000f2a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000f2c:	2806      	cmp	r0, #6
1a000f2e:	d018      	beq.n	1a000f62 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000f30:	2300      	movs	r3, #0
1a000f32:	2201      	movs	r2, #1
1a000f34:	4629      	mov	r1, r5
1a000f36:	2004      	movs	r0, #4
1a000f38:	f7ff ff5a 	bl	1a000df0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000f3c:	4a49      	ldr	r2, [pc, #292]	; (1a001064 <Chip_SetupCoreClock+0x148>)
1a000f3e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000f40:	f043 0301 	orr.w	r3, r3, #1
1a000f44:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000f46:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000f4a:	a901      	add	r1, sp, #4
1a000f4c:	4630      	mov	r0, r6
1a000f4e:	f7ff fec7 	bl	1a000ce0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000f52:	4b45      	ldr	r3, [pc, #276]	; (1a001068 <Chip_SetupCoreClock+0x14c>)
1a000f54:	429e      	cmp	r6, r3
1a000f56:	d916      	bls.n	1a000f86 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000f58:	9b01      	ldr	r3, [sp, #4]
1a000f5a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000f5e:	d003      	beq.n	1a000f68 <Chip_SetupCoreClock+0x4c>
1a000f60:	e7fe      	b.n	1a000f60 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000f62:	f7ff fe1f 	bl	1a000ba4 <Chip_Clock_EnableCrystal>
1a000f66:	e7e3      	b.n	1a000f30 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a000f68:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000f6c:	d005      	beq.n	1a000f7a <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000f72:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000f74:	2500      	movs	r5, #0
			direct = 1;
1a000f76:	2601      	movs	r6, #1
1a000f78:	e007      	b.n	1a000f8a <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000f7a:	9b04      	ldr	r3, [sp, #16]
1a000f7c:	3301      	adds	r3, #1
1a000f7e:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000f80:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000f82:	2600      	movs	r6, #0
1a000f84:	e001      	b.n	1a000f8a <Chip_SetupCoreClock+0x6e>
1a000f86:	2500      	movs	r5, #0
1a000f88:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000f8a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000f8e:	9b01      	ldr	r3, [sp, #4]
1a000f90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000f94:	9a05      	ldr	r2, [sp, #20]
1a000f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000f9a:	9a03      	ldr	r2, [sp, #12]
1a000f9c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000fa0:	9a04      	ldr	r2, [sp, #16]
1a000fa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000fa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000faa:	4a2e      	ldr	r2, [pc, #184]	; (1a001064 <Chip_SetupCoreClock+0x148>)
1a000fac:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000fae:	4b2d      	ldr	r3, [pc, #180]	; (1a001064 <Chip_SetupCoreClock+0x148>)
1a000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000fb2:	f013 0f01 	tst.w	r3, #1
1a000fb6:	d0fa      	beq.n	1a000fae <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000fb8:	2300      	movs	r3, #0
1a000fba:	2201      	movs	r2, #1
1a000fbc:	2109      	movs	r1, #9
1a000fbe:	2004      	movs	r0, #4
1a000fc0:	f7ff ff16 	bl	1a000df0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000fc4:	b1fe      	cbz	r6, 1a001006 <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000fc6:	f242 7310 	movw	r3, #10000	; 0x2710
1a000fca:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000fce:	1e5a      	subs	r2, r3, #1
1a000fd0:	9209      	str	r2, [sp, #36]	; 0x24
1a000fd2:	2b00      	cmp	r3, #0
1a000fd4:	d1fa      	bne.n	1a000fcc <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000fd6:	9b01      	ldr	r3, [sp, #4]
1a000fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000fdc:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000fde:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000fe2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000fe6:	9a05      	ldr	r2, [sp, #20]
1a000fe8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000fec:	9a03      	ldr	r2, [sp, #12]
1a000fee:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000ff2:	9a04      	ldr	r2, [sp, #16]
1a000ff4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000ff8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000ffc:	4a19      	ldr	r2, [pc, #100]	; (1a001064 <Chip_SetupCoreClock+0x148>)
1a000ffe:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001000:	b36c      	cbz	r4, 1a00105e <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001002:	2400      	movs	r4, #0
1a001004:	e029      	b.n	1a00105a <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a001006:	2d00      	cmp	r5, #0
1a001008:	d0fa      	beq.n	1a001000 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00100a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00100e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001010:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001012:	1e5a      	subs	r2, r3, #1
1a001014:	9209      	str	r2, [sp, #36]	; 0x24
1a001016:	2b00      	cmp	r3, #0
1a001018:	d1fa      	bne.n	1a001010 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a00101a:	9b04      	ldr	r3, [sp, #16]
1a00101c:	1e5a      	subs	r2, r3, #1
1a00101e:	9204      	str	r2, [sp, #16]
1a001020:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001024:	9b01      	ldr	r3, [sp, #4]
1a001026:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00102a:	9905      	ldr	r1, [sp, #20]
1a00102c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001030:	9903      	ldr	r1, [sp, #12]
1a001032:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001036:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00103a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00103e:	4a09      	ldr	r2, [pc, #36]	; (1a001064 <Chip_SetupCoreClock+0x148>)
1a001040:	6453      	str	r3, [r2, #68]	; 0x44
1a001042:	e7dd      	b.n	1a001000 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001044:	4809      	ldr	r0, [pc, #36]	; (1a00106c <Chip_SetupCoreClock+0x150>)
1a001046:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00104a:	78cb      	ldrb	r3, [r1, #3]
1a00104c:	788a      	ldrb	r2, [r1, #2]
1a00104e:	7849      	ldrb	r1, [r1, #1]
1a001050:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001054:	f7ff fecc 	bl	1a000df0 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001058:	3401      	adds	r4, #1
1a00105a:	2c11      	cmp	r4, #17
1a00105c:	d9f2      	bls.n	1a001044 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00105e:	b00a      	add	sp, #40	; 0x28
1a001060:	bd70      	pop	{r4, r5, r6, pc}
1a001062:	bf00      	nop
1a001064:	40050000 	.word	0x40050000
1a001068:	068e7780 	.word	0x068e7780
1a00106c:	1a001bf0 	.word	0x1a001bf0

1a001070 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001070:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001072:	4a0a      	ldr	r2, [pc, #40]	; (1a00109c <SystemInit+0x2c>)
1a001074:	4b0a      	ldr	r3, [pc, #40]	; (1a0010a0 <SystemInit+0x30>)
1a001076:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001078:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a00107c:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00107e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001082:	2b20      	cmp	r3, #32
1a001084:	d002      	beq.n	1a00108c <SystemInit+0x1c>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a001086:	f7ff fbb5 	bl	1a0007f4 <Board_SystemInit>
}
1a00108a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00108c:	4a04      	ldr	r2, [pc, #16]	; (1a0010a0 <SystemInit+0x30>)
1a00108e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001092:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001096:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00109a:	e7f4      	b.n	1a001086 <SystemInit+0x16>
1a00109c:	1a000000 	.word	0x1a000000
1a0010a0:	e000ed00 	.word	0xe000ed00

1a0010a4 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0010a4:	4b04      	ldr	r3, [pc, #16]	; (1a0010b8 <cyclesCounterInit+0x14>)
1a0010a6:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a0010a8:	4b04      	ldr	r3, [pc, #16]	; (1a0010bc <cyclesCounterInit+0x18>)
1a0010aa:	681a      	ldr	r2, [r3, #0]
1a0010ac:	6813      	ldr	r3, [r2, #0]
1a0010ae:	f043 0301 	orr.w	r3, r3, #1
1a0010b2:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0010b4:	2001      	movs	r0, #1
1a0010b6:	4770      	bx	lr
1a0010b8:	10000000 	.word	0x10000000
1a0010bc:	10000004 	.word	0x10000004

1a0010c0 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0010c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0010c4:	4680      	mov	r8, r0
1a0010c6:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0010c8:	4c19      	ldr	r4, [pc, #100]	; (1a001130 <uartInit+0x70>)
1a0010ca:	0045      	lsls	r5, r0, #1
1a0010cc:	182a      	adds	r2, r5, r0
1a0010ce:	0093      	lsls	r3, r2, #2
1a0010d0:	18e6      	adds	r6, r4, r3
1a0010d2:	58e7      	ldr	r7, [r4, r3]
1a0010d4:	4638      	mov	r0, r7
1a0010d6:	f7ff fba9 	bl	1a00082c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0010da:	4649      	mov	r1, r9
1a0010dc:	4638      	mov	r0, r7
1a0010de:	f7ff fbcf 	bl	1a000880 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0010e2:	2307      	movs	r3, #7
1a0010e4:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0010e6:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0010e8:	2301      	movs	r3, #1
1a0010ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0010ec:	7930      	ldrb	r0, [r6, #4]
1a0010ee:	7973      	ldrb	r3, [r6, #5]
1a0010f0:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0010f2:	f042 0218 	orr.w	r2, r2, #24
1a0010f6:	490f      	ldr	r1, [pc, #60]	; (1a001134 <uartInit+0x74>)
1a0010f8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0010fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001100:	79f0      	ldrb	r0, [r6, #7]
1a001102:	7a33      	ldrb	r3, [r6, #8]
1a001104:	7a72      	ldrb	r2, [r6, #9]
1a001106:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00110a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a001112:	f1b8 0f01 	cmp.w	r8, #1
1a001116:	d001      	beq.n	1a00111c <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a001118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a00111c:	4a06      	ldr	r2, [pc, #24]	; (1a001138 <uartInit+0x78>)
1a00111e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001120:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001124:	64d3      	str	r3, [r2, #76]	; 0x4c
1a001126:	221a      	movs	r2, #26
1a001128:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a00112c:	e7f4      	b.n	1a001118 <uartInit+0x58>
1a00112e:	bf00      	nop
1a001130:	1a001c38 	.word	0x1a001c38
1a001134:	40086000 	.word	0x40086000
1a001138:	40081000 	.word	0x40081000

1a00113c <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a00113c:	4b01      	ldr	r3, [pc, #4]	; (1a001144 <tickRead+0x8>)
1a00113e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001142:	4770      	bx	lr
1a001144:	100000a8 	.word	0x100000a8

1a001148 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a001148:	b918      	cbnz	r0, 1a001152 <tickPowerSet+0xa>
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a00114a:	4b04      	ldr	r3, [pc, #16]	; (1a00115c <tickPowerSet+0x14>)
1a00114c:	2200      	movs	r2, #0
1a00114e:	601a      	str	r2, [r3, #0]
   }
}
1a001150:	4770      	bx	lr
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001152:	4b02      	ldr	r3, [pc, #8]	; (1a00115c <tickPowerSet+0x14>)
1a001154:	2207      	movs	r2, #7
1a001156:	601a      	str	r2, [r3, #0]
1a001158:	4770      	bx	lr
1a00115a:	bf00      	nop
1a00115c:	e000e010 	.word	0xe000e010

1a001160 <tickInit>:
{
1a001160:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001162:	ea50 0301 	orrs.w	r3, r0, r1
1a001166:	d02a      	beq.n	1a0011be <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001168:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a00116c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001170:	2b00      	cmp	r3, #0
1a001172:	bf08      	it	eq
1a001174:	2a32      	cmpeq	r2, #50	; 0x32
1a001176:	d227      	bcs.n	1a0011c8 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001178:	4b14      	ldr	r3, [pc, #80]	; (1a0011cc <tickInit+0x6c>)
1a00117a:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00117e:	4b14      	ldr	r3, [pc, #80]	; (1a0011d0 <tickInit+0x70>)
1a001180:	681b      	ldr	r3, [r3, #0]
1a001182:	fba3 4500 	umull	r4, r5, r3, r0
1a001186:	fb03 5501 	mla	r5, r3, r1, r5
1a00118a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00118e:	2300      	movs	r3, #0
1a001190:	4620      	mov	r0, r4
1a001192:	4629      	mov	r1, r5
1a001194:	f000 fafc 	bl	1a001790 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001198:	3801      	subs	r0, #1
1a00119a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00119e:	d209      	bcs.n	1a0011b4 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0011a0:	4b0c      	ldr	r3, [pc, #48]	; (1a0011d4 <tickInit+0x74>)
1a0011a2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0011a4:	4a0c      	ldr	r2, [pc, #48]	; (1a0011d8 <tickInit+0x78>)
1a0011a6:	21e0      	movs	r1, #224	; 0xe0
1a0011a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0011ac:	2200      	movs	r2, #0
1a0011ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0011b0:	2207      	movs	r2, #7
1a0011b2:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a0011b4:	2001      	movs	r0, #1
1a0011b6:	f7ff ffc7 	bl	1a001148 <tickPowerSet>
      bool_t ret_val = 1;
1a0011ba:	2001      	movs	r0, #1
}
1a0011bc:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a0011be:	2000      	movs	r0, #0
1a0011c0:	f7ff ffc2 	bl	1a001148 <tickPowerSet>
         ret_val = 0;
1a0011c4:	2000      	movs	r0, #0
1a0011c6:	e7f9      	b.n	1a0011bc <tickInit+0x5c>
            ret_val = 0;
1a0011c8:	2000      	movs	r0, #0
1a0011ca:	e7f7      	b.n	1a0011bc <tickInit+0x5c>
1a0011cc:	10000150 	.word	0x10000150
1a0011d0:	10000148 	.word	0x10000148
1a0011d4:	e000e010 	.word	0xe000e010
1a0011d8:	e000ed00 	.word	0xe000ed00

1a0011dc <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0011dc:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a0011e0:	4908      	ldr	r1, [pc, #32]	; (1a001204 <SysTick_Handler+0x28>)
1a0011e2:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0011e6:	f112 0b01 	adds.w	fp, r2, #1
1a0011ea:	f143 0c00 	adc.w	ip, r3, #0
1a0011ee:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0011f2:	4b05      	ldr	r3, [pc, #20]	; (1a001208 <SysTick_Handler+0x2c>)
1a0011f4:	681b      	ldr	r3, [r3, #0]
1a0011f6:	b113      	cbz	r3, 1a0011fe <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a0011f8:	4a04      	ldr	r2, [pc, #16]	; (1a00120c <SysTick_Handler+0x30>)
1a0011fa:	6810      	ldr	r0, [r2, #0]
1a0011fc:	4798      	blx	r3
   }
}
1a0011fe:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a001202:	bf00      	nop
1a001204:	100000a8 	.word	0x100000a8
1a001208:	100000b0 	.word	0x100000b0
1a00120c:	100000a0 	.word	0x100000a0

1a001210 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a001210:	e7fe      	b.n	1a001210 <errorOcurred>

1a001212 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a001212:	4770      	bx	lr

1a001214 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a001214:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001216:	2400      	movs	r4, #0
1a001218:	e001      	b.n	1a00121e <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00121a:	3401      	adds	r4, #1
1a00121c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00121e:	2c03      	cmp	r4, #3
1a001220:	d812      	bhi.n	1a001248 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a001222:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001224:	4b09      	ldr	r3, [pc, #36]	; (1a00124c <TIMER0_IRQHandler+0x38>)
1a001226:	681a      	ldr	r2, [r3, #0]
1a001228:	f004 010f 	and.w	r1, r4, #15
1a00122c:	2301      	movs	r3, #1
1a00122e:	408b      	lsls	r3, r1
1a001230:	421a      	tst	r2, r3
1a001232:	d0f2      	beq.n	1a00121a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001234:	4b06      	ldr	r3, [pc, #24]	; (1a001250 <TIMER0_IRQHandler+0x3c>)
1a001236:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00123a:	2000      	movs	r0, #0
1a00123c:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00123e:	2301      	movs	r3, #1
1a001240:	40ab      	lsls	r3, r5
1a001242:	4a02      	ldr	r2, [pc, #8]	; (1a00124c <TIMER0_IRQHandler+0x38>)
1a001244:	6013      	str	r3, [r2, #0]
1a001246:	e7e8      	b.n	1a00121a <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a001248:	bd38      	pop	{r3, r4, r5, pc}
1a00124a:	bf00      	nop
1a00124c:	40084000 	.word	0x40084000
1a001250:	10000008 	.word	0x10000008

1a001254 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a001254:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001256:	2400      	movs	r4, #0
1a001258:	e001      	b.n	1a00125e <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00125a:	3401      	adds	r4, #1
1a00125c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00125e:	2c03      	cmp	r4, #3
1a001260:	d813      	bhi.n	1a00128a <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a001262:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001264:	4b09      	ldr	r3, [pc, #36]	; (1a00128c <TIMER1_IRQHandler+0x38>)
1a001266:	681a      	ldr	r2, [r3, #0]
1a001268:	f004 010f 	and.w	r1, r4, #15
1a00126c:	2301      	movs	r3, #1
1a00126e:	408b      	lsls	r3, r1
1a001270:	421a      	tst	r2, r3
1a001272:	d0f2      	beq.n	1a00125a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001274:	1d23      	adds	r3, r4, #4
1a001276:	4a06      	ldr	r2, [pc, #24]	; (1a001290 <TIMER1_IRQHandler+0x3c>)
1a001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00127c:	2000      	movs	r0, #0
1a00127e:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001280:	2301      	movs	r3, #1
1a001282:	40ab      	lsls	r3, r5
1a001284:	4a01      	ldr	r2, [pc, #4]	; (1a00128c <TIMER1_IRQHandler+0x38>)
1a001286:	6013      	str	r3, [r2, #0]
1a001288:	e7e7      	b.n	1a00125a <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00128a:	bd38      	pop	{r3, r4, r5, pc}
1a00128c:	40085000 	.word	0x40085000
1a001290:	10000008 	.word	0x10000008

1a001294 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a001294:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001296:	2400      	movs	r4, #0
1a001298:	e001      	b.n	1a00129e <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00129a:	3401      	adds	r4, #1
1a00129c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00129e:	2c03      	cmp	r4, #3
1a0012a0:	d814      	bhi.n	1a0012cc <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0012a2:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0012a4:	4b0a      	ldr	r3, [pc, #40]	; (1a0012d0 <TIMER2_IRQHandler+0x3c>)
1a0012a6:	681a      	ldr	r2, [r3, #0]
1a0012a8:	f004 010f 	and.w	r1, r4, #15
1a0012ac:	2301      	movs	r3, #1
1a0012ae:	408b      	lsls	r3, r1
1a0012b0:	421a      	tst	r2, r3
1a0012b2:	d0f2      	beq.n	1a00129a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0012b4:	f104 0308 	add.w	r3, r4, #8
1a0012b8:	4a06      	ldr	r2, [pc, #24]	; (1a0012d4 <TIMER2_IRQHandler+0x40>)
1a0012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0012be:	2000      	movs	r0, #0
1a0012c0:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0012c2:	2301      	movs	r3, #1
1a0012c4:	40ab      	lsls	r3, r5
1a0012c6:	4a02      	ldr	r2, [pc, #8]	; (1a0012d0 <TIMER2_IRQHandler+0x3c>)
1a0012c8:	6013      	str	r3, [r2, #0]
1a0012ca:	e7e6      	b.n	1a00129a <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0012cc:	bd38      	pop	{r3, r4, r5, pc}
1a0012ce:	bf00      	nop
1a0012d0:	400c3000 	.word	0x400c3000
1a0012d4:	10000008 	.word	0x10000008

1a0012d8 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0012d8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0012da:	2400      	movs	r4, #0
1a0012dc:	e001      	b.n	1a0012e2 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0012de:	3401      	adds	r4, #1
1a0012e0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0012e2:	2c03      	cmp	r4, #3
1a0012e4:	d814      	bhi.n	1a001310 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0012e6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0012e8:	4b0a      	ldr	r3, [pc, #40]	; (1a001314 <TIMER3_IRQHandler+0x3c>)
1a0012ea:	681a      	ldr	r2, [r3, #0]
1a0012ec:	f004 010f 	and.w	r1, r4, #15
1a0012f0:	2301      	movs	r3, #1
1a0012f2:	408b      	lsls	r3, r1
1a0012f4:	421a      	tst	r2, r3
1a0012f6:	d0f2      	beq.n	1a0012de <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0012f8:	f104 030c 	add.w	r3, r4, #12
1a0012fc:	4a06      	ldr	r2, [pc, #24]	; (1a001318 <TIMER3_IRQHandler+0x40>)
1a0012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001302:	2000      	movs	r0, #0
1a001304:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001306:	2301      	movs	r3, #1
1a001308:	40ab      	lsls	r3, r5
1a00130a:	4a02      	ldr	r2, [pc, #8]	; (1a001314 <TIMER3_IRQHandler+0x3c>)
1a00130c:	6013      	str	r3, [r2, #0]
1a00130e:	e7e6      	b.n	1a0012de <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a001310:	bd38      	pop	{r3, r4, r5, pc}
1a001312:	bf00      	nop
1a001314:	400c4000 	.word	0x400c4000
1a001318:	10000008 	.word	0x10000008

1a00131c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00131c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00131e:	4d0b      	ldr	r5, [pc, #44]	; (1a00134c <gpioObtainPinInit+0x30>)
1a001320:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001324:	182c      	adds	r4, r5, r0
1a001326:	5628      	ldrsb	r0, [r5, r0]
1a001328:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00132a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00132e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001330:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001334:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001336:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00133a:	9b02      	ldr	r3, [sp, #8]
1a00133c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00133e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001342:	9b03      	ldr	r3, [sp, #12]
1a001344:	701a      	strb	r2, [r3, #0]
}
1a001346:	bc30      	pop	{r4, r5}
1a001348:	4770      	bx	lr
1a00134a:	bf00      	nop
1a00134c:	1a001c80 	.word	0x1a001c80

1a001350 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a001350:	b570      	push	{r4, r5, r6, lr}
1a001352:	b084      	sub	sp, #16
1a001354:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001356:	2300      	movs	r3, #0
1a001358:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00135c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001360:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001364:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001368:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00136c:	f10d 030b 	add.w	r3, sp, #11
1a001370:	9301      	str	r3, [sp, #4]
1a001372:	ab03      	add	r3, sp, #12
1a001374:	9300      	str	r3, [sp, #0]
1a001376:	f10d 030d 	add.w	r3, sp, #13
1a00137a:	f10d 020e 	add.w	r2, sp, #14
1a00137e:	f10d 010f 	add.w	r1, sp, #15
1a001382:	f7ff ffcb 	bl	1a00131c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001386:	2c05      	cmp	r4, #5
1a001388:	f200 80a5 	bhi.w	1a0014d6 <gpioInit+0x186>
1a00138c:	e8df f004 	tbb	[pc, r4]
1a001390:	45278109 	.word	0x45278109
1a001394:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001396:	4851      	ldr	r0, [pc, #324]	; (1a0014dc <gpioInit+0x18c>)
1a001398:	f7ff fdbe 	bl	1a000f18 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a00139c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00139e:	b004      	add	sp, #16
1a0013a0:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0013a2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0013a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0013aa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0013ae:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0013b2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0013b6:	494a      	ldr	r1, [pc, #296]	; (1a0014e0 <gpioInit+0x190>)
1a0013b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0013bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0013c0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0013c4:	2001      	movs	r0, #1
1a0013c6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0013ca:	4c44      	ldr	r4, [pc, #272]	; (1a0014dc <gpioInit+0x18c>)
1a0013cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0013d0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0013d4:	ea22 0201 	bic.w	r2, r2, r1
1a0013d8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0013dc:	e7df      	b.n	1a00139e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0013de:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0013e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0013e6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0013ea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0013ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0013f2:	493b      	ldr	r1, [pc, #236]	; (1a0014e0 <gpioInit+0x190>)
1a0013f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0013f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0013fc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001400:	2001      	movs	r0, #1
1a001402:	fa00 f102 	lsl.w	r1, r0, r2
1a001406:	4c35      	ldr	r4, [pc, #212]	; (1a0014dc <gpioInit+0x18c>)
1a001408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00140c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001410:	ea22 0201 	bic.w	r2, r2, r1
1a001414:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001418:	e7c1      	b.n	1a00139e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00141a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00141e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001422:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001426:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00142a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00142e:	492c      	ldr	r1, [pc, #176]	; (1a0014e0 <gpioInit+0x190>)
1a001430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001434:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001438:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00143c:	2001      	movs	r0, #1
1a00143e:	fa00 f102 	lsl.w	r1, r0, r2
1a001442:	4c26      	ldr	r4, [pc, #152]	; (1a0014dc <gpioInit+0x18c>)
1a001444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001448:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00144c:	ea22 0201 	bic.w	r2, r2, r1
1a001450:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001454:	e7a3      	b.n	1a00139e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001456:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00145a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00145e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001462:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001466:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00146a:	491d      	ldr	r1, [pc, #116]	; (1a0014e0 <gpioInit+0x190>)
1a00146c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001470:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001474:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001478:	2001      	movs	r0, #1
1a00147a:	fa00 f102 	lsl.w	r1, r0, r2
1a00147e:	4c17      	ldr	r4, [pc, #92]	; (1a0014dc <gpioInit+0x18c>)
1a001480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001484:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001488:	ea22 0201 	bic.w	r2, r2, r1
1a00148c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001490:	e785      	b.n	1a00139e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001492:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001496:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00149a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00149e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0014a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0014a6:	490e      	ldr	r1, [pc, #56]	; (1a0014e0 <gpioInit+0x190>)
1a0014a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0014ac:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0014b0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0014b4:	2001      	movs	r0, #1
1a0014b6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0014ba:	4b08      	ldr	r3, [pc, #32]	; (1a0014dc <gpioInit+0x18c>)
1a0014bc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0014c0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0014c4:	4331      	orrs	r1, r6
1a0014c6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0014ca:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0014cc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0014d0:	2100      	movs	r1, #0
1a0014d2:	5499      	strb	r1, [r3, r2]
1a0014d4:	e763      	b.n	1a00139e <gpioInit+0x4e>
      ret_val = 0;
1a0014d6:	2000      	movs	r0, #0
1a0014d8:	e761      	b.n	1a00139e <gpioInit+0x4e>
1a0014da:	bf00      	nop
1a0014dc:	400f4000 	.word	0x400f4000
1a0014e0:	40086000 	.word	0x40086000

1a0014e4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0014e4:	b510      	push	{r4, lr}
1a0014e6:	b084      	sub	sp, #16
1a0014e8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0014ea:	2300      	movs	r3, #0
1a0014ec:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0014f0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0014f4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0014f8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0014fc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001500:	f10d 030b 	add.w	r3, sp, #11
1a001504:	9301      	str	r3, [sp, #4]
1a001506:	ab03      	add	r3, sp, #12
1a001508:	9300      	str	r3, [sp, #0]
1a00150a:	f10d 030d 	add.w	r3, sp, #13
1a00150e:	f10d 020e 	add.w	r2, sp, #14
1a001512:	f10d 010f 	add.w	r1, sp, #15
1a001516:	f7ff ff01 	bl	1a00131c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00151a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00151e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001522:	3400      	adds	r4, #0
1a001524:	bf18      	it	ne
1a001526:	2401      	movne	r4, #1
1a001528:	015b      	lsls	r3, r3, #5
1a00152a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00152e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001532:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a001534:	2001      	movs	r0, #1
1a001536:	b004      	add	sp, #16
1a001538:	bd10      	pop	{r4, pc}

1a00153a <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a00153a:	b500      	push	{lr}
1a00153c:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00153e:	2300      	movs	r3, #0
1a001540:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001544:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001548:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00154c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001550:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001554:	f10d 030b 	add.w	r3, sp, #11
1a001558:	9301      	str	r3, [sp, #4]
1a00155a:	ab03      	add	r3, sp, #12
1a00155c:	9300      	str	r3, [sp, #0]
1a00155e:	f10d 030d 	add.w	r3, sp, #13
1a001562:	f10d 020e 	add.w	r2, sp, #14
1a001566:	f10d 010f 	add.w	r1, sp, #15
1a00156a:	f7ff fed7 	bl	1a00131c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00156e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001572:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a001576:	015b      	lsls	r3, r3, #5
1a001578:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00157c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001580:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a001582:	3000      	adds	r0, #0
1a001584:	bf18      	it	ne
1a001586:	2001      	movne	r0, #1
1a001588:	b005      	add	sp, #20
1a00158a:	f85d fb04 	ldr.w	pc, [sp], #4
1a00158e:	Address 0x000000001a00158e is out of bounds.


1a001590 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001590:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001592:	4b04      	ldr	r3, [pc, #16]	; (1a0015a4 <USB0_IRQHandler+0x14>)
1a001594:	681b      	ldr	r3, [r3, #0]
1a001596:	681b      	ldr	r3, [r3, #0]
1a001598:	68db      	ldr	r3, [r3, #12]
1a00159a:	4a03      	ldr	r2, [pc, #12]	; (1a0015a8 <USB0_IRQHandler+0x18>)
1a00159c:	6810      	ldr	r0, [r2, #0]
1a00159e:	4798      	blx	r3
}
1a0015a0:	bd08      	pop	{r3, pc}
1a0015a2:	bf00      	nop
1a0015a4:	10000158 	.word	0x10000158
1a0015a8:	100000b4 	.word	0x100000b4

1a0015ac <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0015ac:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0015ae:	f7ff fca9 	bl	1a000f04 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0015b2:	4b3a      	ldr	r3, [pc, #232]	; (1a00169c <boardInit+0xf0>)
1a0015b4:	6818      	ldr	r0, [r3, #0]
1a0015b6:	f7ff fd75 	bl	1a0010a4 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a0015ba:	2001      	movs	r0, #1
1a0015bc:	2100      	movs	r1, #0
1a0015be:	f7ff fdcf 	bl	1a001160 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a0015c2:	2105      	movs	r1, #5
1a0015c4:	2000      	movs	r0, #0
1a0015c6:	f7ff fec3 	bl	1a001350 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a0015ca:	2100      	movs	r1, #0
1a0015cc:	2024      	movs	r0, #36	; 0x24
1a0015ce:	f7ff febf 	bl	1a001350 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a0015d2:	2100      	movs	r1, #0
1a0015d4:	2025      	movs	r0, #37	; 0x25
1a0015d6:	f7ff febb 	bl	1a001350 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a0015da:	2100      	movs	r1, #0
1a0015dc:	2026      	movs	r0, #38	; 0x26
1a0015de:	f7ff feb7 	bl	1a001350 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a0015e2:	2100      	movs	r1, #0
1a0015e4:	2027      	movs	r0, #39	; 0x27
1a0015e6:	f7ff feb3 	bl	1a001350 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a0015ea:	2101      	movs	r1, #1
1a0015ec:	2028      	movs	r0, #40	; 0x28
1a0015ee:	f7ff feaf 	bl	1a001350 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a0015f2:	2101      	movs	r1, #1
1a0015f4:	2029      	movs	r0, #41	; 0x29
1a0015f6:	f7ff feab 	bl	1a001350 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a0015fa:	2101      	movs	r1, #1
1a0015fc:	202a      	movs	r0, #42	; 0x2a
1a0015fe:	f7ff fea7 	bl	1a001350 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a001602:	2101      	movs	r1, #1
1a001604:	202b      	movs	r0, #43	; 0x2b
1a001606:	f7ff fea3 	bl	1a001350 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00160a:	2101      	movs	r1, #1
1a00160c:	202c      	movs	r0, #44	; 0x2c
1a00160e:	f7ff fe9f 	bl	1a001350 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a001612:	2101      	movs	r1, #1
1a001614:	202d      	movs	r0, #45	; 0x2d
1a001616:	f7ff fe9b 	bl	1a001350 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00161a:	2100      	movs	r1, #0
1a00161c:	202e      	movs	r0, #46	; 0x2e
1a00161e:	f7ff fe97 	bl	1a001350 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a001622:	2100      	movs	r1, #0
1a001624:	202f      	movs	r0, #47	; 0x2f
1a001626:	f7ff fe93 	bl	1a001350 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00162a:	2100      	movs	r1, #0
1a00162c:	2030      	movs	r0, #48	; 0x30
1a00162e:	f7ff fe8f 	bl	1a001350 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a001632:	2100      	movs	r1, #0
1a001634:	2031      	movs	r0, #49	; 0x31
1a001636:	f7ff fe8b 	bl	1a001350 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00163a:	2100      	movs	r1, #0
1a00163c:	2032      	movs	r0, #50	; 0x32
1a00163e:	f7ff fe87 	bl	1a001350 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a001642:	2100      	movs	r1, #0
1a001644:	2033      	movs	r0, #51	; 0x33
1a001646:	f7ff fe83 	bl	1a001350 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a00164a:	2100      	movs	r1, #0
1a00164c:	2034      	movs	r0, #52	; 0x34
1a00164e:	f7ff fe7f 	bl	1a001350 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a001652:	2100      	movs	r1, #0
1a001654:	2035      	movs	r0, #53	; 0x35
1a001656:	f7ff fe7b 	bl	1a001350 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a00165a:	2101      	movs	r1, #1
1a00165c:	2036      	movs	r0, #54	; 0x36
1a00165e:	f7ff fe77 	bl	1a001350 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a001662:	2101      	movs	r1, #1
1a001664:	2037      	movs	r0, #55	; 0x37
1a001666:	f7ff fe73 	bl	1a001350 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a00166a:	2101      	movs	r1, #1
1a00166c:	2038      	movs	r0, #56	; 0x38
1a00166e:	f7ff fe6f 	bl	1a001350 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a001672:	2101      	movs	r1, #1
1a001674:	2039      	movs	r0, #57	; 0x39
1a001676:	f7ff fe6b 	bl	1a001350 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a00167a:	2101      	movs	r1, #1
1a00167c:	203a      	movs	r0, #58	; 0x3a
1a00167e:	f7ff fe67 	bl	1a001350 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a001682:	2101      	movs	r1, #1
1a001684:	203b      	movs	r0, #59	; 0x3b
1a001686:	f7ff fe63 	bl	1a001350 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a00168a:	2101      	movs	r1, #1
1a00168c:	203c      	movs	r0, #60	; 0x3c
1a00168e:	f7ff fe5f 	bl	1a001350 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a001692:	2101      	movs	r1, #1
1a001694:	203d      	movs	r0, #61	; 0x3d
1a001696:	f7ff fe5b 	bl	1a001350 <gpioInit>

}
1a00169a:	bd08      	pop	{r3, pc}
1a00169c:	10000148 	.word	0x10000148

1a0016a0 <delayInit>:
*/

/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a0016a0:	b510      	push	{r4, lr}
1a0016a2:	4604      	mov	r4, r0
1a0016a4:	4610      	mov	r0, r2
1a0016a6:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a0016a8:	4b04      	ldr	r3, [pc, #16]	; (1a0016bc <delayInit+0x1c>)
1a0016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0016ae:	f000 f86f 	bl	1a001790 <__aeabi_uldivmod>
1a0016b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a0016b6:	2300      	movs	r3, #0
1a0016b8:	7423      	strb	r3, [r4, #16]
}
1a0016ba:	bd10      	pop	{r4, pc}
1a0016bc:	10000150 	.word	0x10000150

1a0016c0 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a0016c0:	b570      	push	{r4, r5, r6, lr}
1a0016c2:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a0016c4:	7c05      	ldrb	r5, [r0, #16]
1a0016c6:	b195      	cbz	r5, 1a0016ee <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a0016c8:	f7ff fd38 	bl	1a00113c <tickRead>
1a0016cc:	e9d4 2300 	ldrd	r2, r3, [r4]
1a0016d0:	1a82      	subs	r2, r0, r2
1a0016d2:	eb61 0303 	sbc.w	r3, r1, r3
1a0016d6:	4615      	mov	r5, r2
1a0016d8:	461e      	mov	r6, r3
1a0016da:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a0016de:	429e      	cmp	r6, r3
1a0016e0:	bf08      	it	eq
1a0016e2:	4295      	cmpeq	r5, r2
1a0016e4:	d30b      	bcc.n	1a0016fe <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a0016e6:	2300      	movs	r3, #0
1a0016e8:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a0016ea:	2501      	movs	r5, #1
1a0016ec:	e005      	b.n	1a0016fa <delayRead+0x3a>
      delay->startTime = tickRead();
1a0016ee:	f7ff fd25 	bl	1a00113c <tickRead>
1a0016f2:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a0016f6:	2301      	movs	r3, #1
1a0016f8:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a0016fa:	4628      	mov	r0, r5
1a0016fc:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a0016fe:	2500      	movs	r5, #0
1a001700:	e7fb      	b.n	1a0016fa <delayRead+0x3a>
1a001702:	Address 0x000000001a001702 is out of bounds.


1a001704 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a001704:	2301      	movs	r3, #1
1a001706:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00170a:	4b01      	ldr	r3, [pc, #4]	; (1a001710 <clearInterrupt+0xc>)
1a00170c:	6258      	str	r0, [r3, #36]	; 0x24
}
1a00170e:	4770      	bx	lr
1a001710:	40087000 	.word	0x40087000

1a001714 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a001716:	4b12      	ldr	r3, [pc, #72]	; (1a001760 <serveInterrupt+0x4c>)
1a001718:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a00171a:	4b12      	ldr	r3, [pc, #72]	; (1a001764 <serveInterrupt+0x50>)
1a00171c:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00171e:	2301      	movs	r3, #1
1a001720:	4083      	lsls	r3, r0
1a001722:	420b      	tst	r3, r1
1a001724:	d111      	bne.n	1a00174a <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a001726:	4910      	ldr	r1, [pc, #64]	; (1a001768 <serveInterrupt+0x54>)
1a001728:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00172a:	4d10      	ldr	r5, [pc, #64]	; (1a00176c <serveInterrupt+0x58>)
1a00172c:	0051      	lsls	r1, r2, #1
1a00172e:	188f      	adds	r7, r1, r2
1a001730:	00fc      	lsls	r4, r7, #3
1a001732:	4627      	mov	r7, r4
1a001734:	442c      	add	r4, r5
1a001736:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a001738:	6864      	ldr	r4, [r4, #4]
1a00173a:	1b36      	subs	r6, r6, r4
1a00173c:	443d      	add	r5, r7
1a00173e:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a001740:	4a08      	ldr	r2, [pc, #32]	; (1a001764 <serveInterrupt+0x50>)
1a001742:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a001744:	f7ff ffde 	bl	1a001704 <clearInterrupt>
}
1a001748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00174a:	4907      	ldr	r1, [pc, #28]	; (1a001768 <serveInterrupt+0x54>)
1a00174c:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00174e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a001752:	00d1      	lsls	r1, r2, #3
1a001754:	4a05      	ldr	r2, [pc, #20]	; (1a00176c <serveInterrupt+0x58>)
1a001756:	440a      	add	r2, r1
1a001758:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a00175a:	4a02      	ldr	r2, [pc, #8]	; (1a001764 <serveInterrupt+0x50>)
1a00175c:	61d3      	str	r3, [r2, #28]
1a00175e:	e7f1      	b.n	1a001744 <serveInterrupt+0x30>
1a001760:	1a001db8 	.word	0x1a001db8
1a001764:	40087000 	.word	0x40087000
1a001768:	40084000 	.word	0x40084000
1a00176c:	10000048 	.word	0x10000048

1a001770 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a001770:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a001772:	2000      	movs	r0, #0
1a001774:	f7ff ffce 	bl	1a001714 <serveInterrupt>
}
1a001778:	bd08      	pop	{r3, pc}

1a00177a <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a00177a:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a00177c:	2001      	movs	r0, #1
1a00177e:	f7ff ffc9 	bl	1a001714 <serveInterrupt>
}
1a001782:	bd08      	pop	{r3, pc}

1a001784 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a001784:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a001786:	2002      	movs	r0, #2
1a001788:	f7ff ffc4 	bl	1a001714 <serveInterrupt>
}
1a00178c:	bd08      	pop	{r3, pc}
1a00178e:	Address 0x000000001a00178e is out of bounds.


1a001790 <__aeabi_uldivmod>:
1a001790:	b953      	cbnz	r3, 1a0017a8 <__aeabi_uldivmod+0x18>
1a001792:	b94a      	cbnz	r2, 1a0017a8 <__aeabi_uldivmod+0x18>
1a001794:	2900      	cmp	r1, #0
1a001796:	bf08      	it	eq
1a001798:	2800      	cmpeq	r0, #0
1a00179a:	bf1c      	itt	ne
1a00179c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0017a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0017a4:	f000 b972 	b.w	1a001a8c <__aeabi_idiv0>
1a0017a8:	f1ad 0c08 	sub.w	ip, sp, #8
1a0017ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0017b0:	f000 f806 	bl	1a0017c0 <__udivmoddi4>
1a0017b4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0017b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0017bc:	b004      	add	sp, #16
1a0017be:	4770      	bx	lr

1a0017c0 <__udivmoddi4>:
1a0017c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0017c4:	9e08      	ldr	r6, [sp, #32]
1a0017c6:	4604      	mov	r4, r0
1a0017c8:	4688      	mov	r8, r1
1a0017ca:	2b00      	cmp	r3, #0
1a0017cc:	d14b      	bne.n	1a001866 <__udivmoddi4+0xa6>
1a0017ce:	428a      	cmp	r2, r1
1a0017d0:	4615      	mov	r5, r2
1a0017d2:	d967      	bls.n	1a0018a4 <__udivmoddi4+0xe4>
1a0017d4:	fab2 f282 	clz	r2, r2
1a0017d8:	b14a      	cbz	r2, 1a0017ee <__udivmoddi4+0x2e>
1a0017da:	f1c2 0720 	rsb	r7, r2, #32
1a0017de:	fa01 f302 	lsl.w	r3, r1, r2
1a0017e2:	fa20 f707 	lsr.w	r7, r0, r7
1a0017e6:	4095      	lsls	r5, r2
1a0017e8:	ea47 0803 	orr.w	r8, r7, r3
1a0017ec:	4094      	lsls	r4, r2
1a0017ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0017f2:	0c23      	lsrs	r3, r4, #16
1a0017f4:	fbb8 f7fe 	udiv	r7, r8, lr
1a0017f8:	fa1f fc85 	uxth.w	ip, r5
1a0017fc:	fb0e 8817 	mls	r8, lr, r7, r8
1a001800:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001804:	fb07 f10c 	mul.w	r1, r7, ip
1a001808:	4299      	cmp	r1, r3
1a00180a:	d909      	bls.n	1a001820 <__udivmoddi4+0x60>
1a00180c:	18eb      	adds	r3, r5, r3
1a00180e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a001812:	f080 811b 	bcs.w	1a001a4c <__udivmoddi4+0x28c>
1a001816:	4299      	cmp	r1, r3
1a001818:	f240 8118 	bls.w	1a001a4c <__udivmoddi4+0x28c>
1a00181c:	3f02      	subs	r7, #2
1a00181e:	442b      	add	r3, r5
1a001820:	1a5b      	subs	r3, r3, r1
1a001822:	b2a4      	uxth	r4, r4
1a001824:	fbb3 f0fe 	udiv	r0, r3, lr
1a001828:	fb0e 3310 	mls	r3, lr, r0, r3
1a00182c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001830:	fb00 fc0c 	mul.w	ip, r0, ip
1a001834:	45a4      	cmp	ip, r4
1a001836:	d909      	bls.n	1a00184c <__udivmoddi4+0x8c>
1a001838:	192c      	adds	r4, r5, r4
1a00183a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00183e:	f080 8107 	bcs.w	1a001a50 <__udivmoddi4+0x290>
1a001842:	45a4      	cmp	ip, r4
1a001844:	f240 8104 	bls.w	1a001a50 <__udivmoddi4+0x290>
1a001848:	3802      	subs	r0, #2
1a00184a:	442c      	add	r4, r5
1a00184c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001850:	eba4 040c 	sub.w	r4, r4, ip
1a001854:	2700      	movs	r7, #0
1a001856:	b11e      	cbz	r6, 1a001860 <__udivmoddi4+0xa0>
1a001858:	40d4      	lsrs	r4, r2
1a00185a:	2300      	movs	r3, #0
1a00185c:	e9c6 4300 	strd	r4, r3, [r6]
1a001860:	4639      	mov	r1, r7
1a001862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001866:	428b      	cmp	r3, r1
1a001868:	d909      	bls.n	1a00187e <__udivmoddi4+0xbe>
1a00186a:	2e00      	cmp	r6, #0
1a00186c:	f000 80eb 	beq.w	1a001a46 <__udivmoddi4+0x286>
1a001870:	2700      	movs	r7, #0
1a001872:	e9c6 0100 	strd	r0, r1, [r6]
1a001876:	4638      	mov	r0, r7
1a001878:	4639      	mov	r1, r7
1a00187a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00187e:	fab3 f783 	clz	r7, r3
1a001882:	2f00      	cmp	r7, #0
1a001884:	d147      	bne.n	1a001916 <__udivmoddi4+0x156>
1a001886:	428b      	cmp	r3, r1
1a001888:	d302      	bcc.n	1a001890 <__udivmoddi4+0xd0>
1a00188a:	4282      	cmp	r2, r0
1a00188c:	f200 80fa 	bhi.w	1a001a84 <__udivmoddi4+0x2c4>
1a001890:	1a84      	subs	r4, r0, r2
1a001892:	eb61 0303 	sbc.w	r3, r1, r3
1a001896:	2001      	movs	r0, #1
1a001898:	4698      	mov	r8, r3
1a00189a:	2e00      	cmp	r6, #0
1a00189c:	d0e0      	beq.n	1a001860 <__udivmoddi4+0xa0>
1a00189e:	e9c6 4800 	strd	r4, r8, [r6]
1a0018a2:	e7dd      	b.n	1a001860 <__udivmoddi4+0xa0>
1a0018a4:	b902      	cbnz	r2, 1a0018a8 <__udivmoddi4+0xe8>
1a0018a6:	deff      	udf	#255	; 0xff
1a0018a8:	fab2 f282 	clz	r2, r2
1a0018ac:	2a00      	cmp	r2, #0
1a0018ae:	f040 808f 	bne.w	1a0019d0 <__udivmoddi4+0x210>
1a0018b2:	1b49      	subs	r1, r1, r5
1a0018b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0018b8:	fa1f f885 	uxth.w	r8, r5
1a0018bc:	2701      	movs	r7, #1
1a0018be:	fbb1 fcfe 	udiv	ip, r1, lr
1a0018c2:	0c23      	lsrs	r3, r4, #16
1a0018c4:	fb0e 111c 	mls	r1, lr, ip, r1
1a0018c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0018cc:	fb08 f10c 	mul.w	r1, r8, ip
1a0018d0:	4299      	cmp	r1, r3
1a0018d2:	d907      	bls.n	1a0018e4 <__udivmoddi4+0x124>
1a0018d4:	18eb      	adds	r3, r5, r3
1a0018d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0018da:	d202      	bcs.n	1a0018e2 <__udivmoddi4+0x122>
1a0018dc:	4299      	cmp	r1, r3
1a0018de:	f200 80cd 	bhi.w	1a001a7c <__udivmoddi4+0x2bc>
1a0018e2:	4684      	mov	ip, r0
1a0018e4:	1a59      	subs	r1, r3, r1
1a0018e6:	b2a3      	uxth	r3, r4
1a0018e8:	fbb1 f0fe 	udiv	r0, r1, lr
1a0018ec:	fb0e 1410 	mls	r4, lr, r0, r1
1a0018f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0018f4:	fb08 f800 	mul.w	r8, r8, r0
1a0018f8:	45a0      	cmp	r8, r4
1a0018fa:	d907      	bls.n	1a00190c <__udivmoddi4+0x14c>
1a0018fc:	192c      	adds	r4, r5, r4
1a0018fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001902:	d202      	bcs.n	1a00190a <__udivmoddi4+0x14a>
1a001904:	45a0      	cmp	r8, r4
1a001906:	f200 80b6 	bhi.w	1a001a76 <__udivmoddi4+0x2b6>
1a00190a:	4618      	mov	r0, r3
1a00190c:	eba4 0408 	sub.w	r4, r4, r8
1a001910:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001914:	e79f      	b.n	1a001856 <__udivmoddi4+0x96>
1a001916:	f1c7 0c20 	rsb	ip, r7, #32
1a00191a:	40bb      	lsls	r3, r7
1a00191c:	fa22 fe0c 	lsr.w	lr, r2, ip
1a001920:	ea4e 0e03 	orr.w	lr, lr, r3
1a001924:	fa01 f407 	lsl.w	r4, r1, r7
1a001928:	fa20 f50c 	lsr.w	r5, r0, ip
1a00192c:	fa21 f30c 	lsr.w	r3, r1, ip
1a001930:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a001934:	4325      	orrs	r5, r4
1a001936:	fbb3 f9f8 	udiv	r9, r3, r8
1a00193a:	0c2c      	lsrs	r4, r5, #16
1a00193c:	fb08 3319 	mls	r3, r8, r9, r3
1a001940:	fa1f fa8e 	uxth.w	sl, lr
1a001944:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a001948:	fb09 f40a 	mul.w	r4, r9, sl
1a00194c:	429c      	cmp	r4, r3
1a00194e:	fa02 f207 	lsl.w	r2, r2, r7
1a001952:	fa00 f107 	lsl.w	r1, r0, r7
1a001956:	d90b      	bls.n	1a001970 <__udivmoddi4+0x1b0>
1a001958:	eb1e 0303 	adds.w	r3, lr, r3
1a00195c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a001960:	f080 8087 	bcs.w	1a001a72 <__udivmoddi4+0x2b2>
1a001964:	429c      	cmp	r4, r3
1a001966:	f240 8084 	bls.w	1a001a72 <__udivmoddi4+0x2b2>
1a00196a:	f1a9 0902 	sub.w	r9, r9, #2
1a00196e:	4473      	add	r3, lr
1a001970:	1b1b      	subs	r3, r3, r4
1a001972:	b2ad      	uxth	r5, r5
1a001974:	fbb3 f0f8 	udiv	r0, r3, r8
1a001978:	fb08 3310 	mls	r3, r8, r0, r3
1a00197c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a001980:	fb00 fa0a 	mul.w	sl, r0, sl
1a001984:	45a2      	cmp	sl, r4
1a001986:	d908      	bls.n	1a00199a <__udivmoddi4+0x1da>
1a001988:	eb1e 0404 	adds.w	r4, lr, r4
1a00198c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001990:	d26b      	bcs.n	1a001a6a <__udivmoddi4+0x2aa>
1a001992:	45a2      	cmp	sl, r4
1a001994:	d969      	bls.n	1a001a6a <__udivmoddi4+0x2aa>
1a001996:	3802      	subs	r0, #2
1a001998:	4474      	add	r4, lr
1a00199a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00199e:	fba0 8902 	umull	r8, r9, r0, r2
1a0019a2:	eba4 040a 	sub.w	r4, r4, sl
1a0019a6:	454c      	cmp	r4, r9
1a0019a8:	46c2      	mov	sl, r8
1a0019aa:	464b      	mov	r3, r9
1a0019ac:	d354      	bcc.n	1a001a58 <__udivmoddi4+0x298>
1a0019ae:	d051      	beq.n	1a001a54 <__udivmoddi4+0x294>
1a0019b0:	2e00      	cmp	r6, #0
1a0019b2:	d069      	beq.n	1a001a88 <__udivmoddi4+0x2c8>
1a0019b4:	ebb1 050a 	subs.w	r5, r1, sl
1a0019b8:	eb64 0403 	sbc.w	r4, r4, r3
1a0019bc:	fa04 fc0c 	lsl.w	ip, r4, ip
1a0019c0:	40fd      	lsrs	r5, r7
1a0019c2:	40fc      	lsrs	r4, r7
1a0019c4:	ea4c 0505 	orr.w	r5, ip, r5
1a0019c8:	e9c6 5400 	strd	r5, r4, [r6]
1a0019cc:	2700      	movs	r7, #0
1a0019ce:	e747      	b.n	1a001860 <__udivmoddi4+0xa0>
1a0019d0:	f1c2 0320 	rsb	r3, r2, #32
1a0019d4:	fa20 f703 	lsr.w	r7, r0, r3
1a0019d8:	4095      	lsls	r5, r2
1a0019da:	fa01 f002 	lsl.w	r0, r1, r2
1a0019de:	fa21 f303 	lsr.w	r3, r1, r3
1a0019e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0019e6:	4338      	orrs	r0, r7
1a0019e8:	0c01      	lsrs	r1, r0, #16
1a0019ea:	fbb3 f7fe 	udiv	r7, r3, lr
1a0019ee:	fa1f f885 	uxth.w	r8, r5
1a0019f2:	fb0e 3317 	mls	r3, lr, r7, r3
1a0019f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0019fa:	fb07 f308 	mul.w	r3, r7, r8
1a0019fe:	428b      	cmp	r3, r1
1a001a00:	fa04 f402 	lsl.w	r4, r4, r2
1a001a04:	d907      	bls.n	1a001a16 <__udivmoddi4+0x256>
1a001a06:	1869      	adds	r1, r5, r1
1a001a08:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a001a0c:	d22f      	bcs.n	1a001a6e <__udivmoddi4+0x2ae>
1a001a0e:	428b      	cmp	r3, r1
1a001a10:	d92d      	bls.n	1a001a6e <__udivmoddi4+0x2ae>
1a001a12:	3f02      	subs	r7, #2
1a001a14:	4429      	add	r1, r5
1a001a16:	1acb      	subs	r3, r1, r3
1a001a18:	b281      	uxth	r1, r0
1a001a1a:	fbb3 f0fe 	udiv	r0, r3, lr
1a001a1e:	fb0e 3310 	mls	r3, lr, r0, r3
1a001a22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001a26:	fb00 f308 	mul.w	r3, r0, r8
1a001a2a:	428b      	cmp	r3, r1
1a001a2c:	d907      	bls.n	1a001a3e <__udivmoddi4+0x27e>
1a001a2e:	1869      	adds	r1, r5, r1
1a001a30:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a001a34:	d217      	bcs.n	1a001a66 <__udivmoddi4+0x2a6>
1a001a36:	428b      	cmp	r3, r1
1a001a38:	d915      	bls.n	1a001a66 <__udivmoddi4+0x2a6>
1a001a3a:	3802      	subs	r0, #2
1a001a3c:	4429      	add	r1, r5
1a001a3e:	1ac9      	subs	r1, r1, r3
1a001a40:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a001a44:	e73b      	b.n	1a0018be <__udivmoddi4+0xfe>
1a001a46:	4637      	mov	r7, r6
1a001a48:	4630      	mov	r0, r6
1a001a4a:	e709      	b.n	1a001860 <__udivmoddi4+0xa0>
1a001a4c:	4607      	mov	r7, r0
1a001a4e:	e6e7      	b.n	1a001820 <__udivmoddi4+0x60>
1a001a50:	4618      	mov	r0, r3
1a001a52:	e6fb      	b.n	1a00184c <__udivmoddi4+0x8c>
1a001a54:	4541      	cmp	r1, r8
1a001a56:	d2ab      	bcs.n	1a0019b0 <__udivmoddi4+0x1f0>
1a001a58:	ebb8 0a02 	subs.w	sl, r8, r2
1a001a5c:	eb69 020e 	sbc.w	r2, r9, lr
1a001a60:	3801      	subs	r0, #1
1a001a62:	4613      	mov	r3, r2
1a001a64:	e7a4      	b.n	1a0019b0 <__udivmoddi4+0x1f0>
1a001a66:	4660      	mov	r0, ip
1a001a68:	e7e9      	b.n	1a001a3e <__udivmoddi4+0x27e>
1a001a6a:	4618      	mov	r0, r3
1a001a6c:	e795      	b.n	1a00199a <__udivmoddi4+0x1da>
1a001a6e:	4667      	mov	r7, ip
1a001a70:	e7d1      	b.n	1a001a16 <__udivmoddi4+0x256>
1a001a72:	4681      	mov	r9, r0
1a001a74:	e77c      	b.n	1a001970 <__udivmoddi4+0x1b0>
1a001a76:	3802      	subs	r0, #2
1a001a78:	442c      	add	r4, r5
1a001a7a:	e747      	b.n	1a00190c <__udivmoddi4+0x14c>
1a001a7c:	f1ac 0c02 	sub.w	ip, ip, #2
1a001a80:	442b      	add	r3, r5
1a001a82:	e72f      	b.n	1a0018e4 <__udivmoddi4+0x124>
1a001a84:	4638      	mov	r0, r7
1a001a86:	e708      	b.n	1a00189a <__udivmoddi4+0xda>
1a001a88:	4637      	mov	r7, r6
1a001a8a:	e6e9      	b.n	1a001860 <__udivmoddi4+0xa0>

1a001a8c <__aeabi_idiv0>:
1a001a8c:	4770      	bx	lr
1a001a8e:	bf00      	nop

1a001a90 <__libc_init_array>:
1a001a90:	b570      	push	{r4, r5, r6, lr}
1a001a92:	4e0d      	ldr	r6, [pc, #52]	; (1a001ac8 <__libc_init_array+0x38>)
1a001a94:	4c0d      	ldr	r4, [pc, #52]	; (1a001acc <__libc_init_array+0x3c>)
1a001a96:	1ba4      	subs	r4, r4, r6
1a001a98:	10a4      	asrs	r4, r4, #2
1a001a9a:	2500      	movs	r5, #0
1a001a9c:	42a5      	cmp	r5, r4
1a001a9e:	d109      	bne.n	1a001ab4 <__libc_init_array+0x24>
1a001aa0:	4e0b      	ldr	r6, [pc, #44]	; (1a001ad0 <__libc_init_array+0x40>)
1a001aa2:	4c0c      	ldr	r4, [pc, #48]	; (1a001ad4 <__libc_init_array+0x44>)
1a001aa4:	f7fe fe3c 	bl	1a000720 <_init>
1a001aa8:	1ba4      	subs	r4, r4, r6
1a001aaa:	10a4      	asrs	r4, r4, #2
1a001aac:	2500      	movs	r5, #0
1a001aae:	42a5      	cmp	r5, r4
1a001ab0:	d105      	bne.n	1a001abe <__libc_init_array+0x2e>
1a001ab2:	bd70      	pop	{r4, r5, r6, pc}
1a001ab4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001ab8:	4798      	blx	r3
1a001aba:	3501      	adds	r5, #1
1a001abc:	e7ee      	b.n	1a001a9c <__libc_init_array+0xc>
1a001abe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001ac2:	4798      	blx	r3
1a001ac4:	3501      	adds	r5, #1
1a001ac6:	e7f2      	b.n	1a001aae <__libc_init_array+0x1e>
1a001ac8:	1a001dbc 	.word	0x1a001dbc
1a001acc:	1a001dbc 	.word	0x1a001dbc
1a001ad0:	1a001dbc 	.word	0x1a001dbc
1a001ad4:	1a001dc0 	.word	0x1a001dc0

1a001ad8 <memset>:
1a001ad8:	4402      	add	r2, r0
1a001ada:	4603      	mov	r3, r0
1a001adc:	4293      	cmp	r3, r2
1a001ade:	d100      	bne.n	1a001ae2 <memset+0xa>
1a001ae0:	4770      	bx	lr
1a001ae2:	f803 1b01 	strb.w	r1, [r3], #1
1a001ae6:	e7f9      	b.n	1a001adc <memset+0x4>

1a001ae8 <ExtRateIn>:
1a001ae8:	0000 0000                                   ....

1a001aec <OscRateIn>:
1a001aec:	1b00 00b7                                   ....

1a001af0 <InitClkStates>:
1a001af0:	0f01 0101                                   ....

1a001af4 <pinmuxing>:
1a001af4:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a001b04:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a001b14:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a001b24:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a001b34:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a001b44:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a001b54:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a001b64:	0206 0057                                   ..W.

1a001b68 <UART_BClock>:
1a001b68:	01c2 01a2 0182 0162                         ......b.

1a001b70 <UART_PClock>:
1a001b70:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a001b80:	00ff 0000                                   ....

1a001b84 <periph_to_base>:
1a001b84:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a001b94:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a001ba4:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a001bb4:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a001bc4:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a001bd4:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a001be4:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a001bf0 <InitClkStates>:
1a001bf0:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a001c00:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a001c10:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a001c20:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a001c30:	111a 0001 111b 0001                         ........

1a001c38 <lpcUarts>:
1a001c38:	1000 4008 0406 0602 0205 0018 1000 4008     ...@...........@
1a001c48:	0509 0907 0706 0018 2000 4008 0000 0000     ......... .@....
1a001c58:	0000 0019 1000 400c 0107 0706 0602 001a     .......@........
1a001c68:	1000 400c 0f01 0101 0110 001a 2000 400c     ...@......... .@
1a001c78:	0302 0202 0204 001b                         ........

1a001c80 <gpioPinsInit>:
1a001c80:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a001c90:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a001ca0:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a001cb0:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a001cc0:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a001cd0:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a001ce0:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a001cf0:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a001d00:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a001d10:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a001d20:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a001d30:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a001d40:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a001d50:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a001d60:	020b 000c 0c01 0004 0200 0400 0001 0102     ................
1a001d70:	0204 0200 0402 0003 0302 0307 0300 070b     ................
1a001d80:	0004 0c03 0507 0300 070d 0006 0e03 0102     ................
1a001d90:	0504 0401 0006 0602 0504 0200 0405 0004     ................
1a001da0:	0402 0804 0504 040c 0409 0d05 0a04 0504     ................
1a001db0:	010e 0005 0801 ffff                         ........

1a001db8 <ultrasonicSensorsIrqMap>:
1a001db8:	0100 ff02                                   ....
